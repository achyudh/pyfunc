{
    "../scikit-learn-master/sklearn\\base.py": [
        [
            [
                "_first_and_last_element",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "clone",
                [
                    [
                        [
                            [
                                "estimator",
                                "estimator object, or list, tuple or set of objects"
                            ],
                            [
                                "safe",
                                "boolean, optional"
                            ]
                        ],
                        2,
                        0
                    ],
                    null
                ]
            ],
            [
                "_pprint",
                [
                    [
                        [
                            [
                                "params",
                                "dict"
                            ],
                            [
                                "offset",
                                "int"
                            ],
                            [
                                "printer",
                                "callable"
                            ]
                        ],
                        3,
                        0
                    ],
                    null
                ]
            ],
            [
                "is_classifier",
                [
                    [
                        [
                            [
                                "estimator",
                                "object"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "estimator": "object"
                    }
                ]
            ],
            [
                "is_regressor",
                [
                    [
                        [
                            [
                                "estimator",
                                "object"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "estimator": "object"
                    }
                ]
            ]
        ],
        5
    ],
    "../scikit-learn-master/sklearn\\calibration.py": [
        [
            [
                "_sigmoid_calibration",
                [
                    [
                        [
                            [
                                "df",
                                "ndarray, shape (n_samples,)"
                            ],
                            [
                                "y",
                                "ndarray, shape (n_samples,)"
                            ],
                            [
                                "sample_weight",
                                "array-like, shape = [n_samples] or None"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "a": "float",
                        "b": "float"
                    }
                ]
            ],
            [
                "calibration_curve",
                [
                    [
                        [
                            [
                                "y_true",
                                "array, shape (n_samples,)"
                            ],
                            [
                                "y_prob",
                                "array, shape (n_samples,)"
                            ],
                            [
                                "normalize",
                                "bool, optional, default=False"
                            ],
                            [
                                "n_bins",
                                "int"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "prob_true": "array, shape (n_bins,)",
                        "prob_pred": "array, shape (n_bins,)"
                    }
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\cross_validation.py": [
        [
            [
                "_approximate_mode",
                [
                    [
                        [
                            [
                                "class_counts",
                                "ndarray of int"
                            ],
                            [
                                "n_draws",
                                "int"
                            ],
                            [
                                "rng",
                                "random state"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "sampled_classes": "ndarray of int"
                    }
                ]
            ],
            [
                "_index_param_value",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "cross_val_predict",
                [
                    [
                        [
                            [
                                "estimator",
                                "estimator object implementing 'fit' and 'predict'"
                            ],
                            [
                                "X",
                                "array-like"
                            ],
                            [
                                "y",
                                "array-like, optional, default"
                            ],
                            [
                                "cv",
                                "int, cross-validation generator or an iterable, optional"
                            ],
                            [
                                "n_jobs",
                                "integer, optional"
                            ],
                            [
                                "verbose",
                                "integer, optional"
                            ],
                            [
                                "fit_params",
                                "dict, optional"
                            ],
                            [
                                "pre_dispatch",
                                "int, or string, optional"
                            ]
                        ],
                        8,
                        0
                    ],
                    {
                        "preds": "ndarray"
                    }
                ]
            ],
            [
                "_fit_and_predict",
                [
                    [
                        [
                            [
                                "estimator",
                                "estimator object implementing 'fit' and 'predict'"
                            ],
                            [
                                "X",
                                "array-like of shape at least 2D"
                            ],
                            [
                                "y",
                                "array-like, optional, default"
                            ],
                            [
                                "train",
                                "array-like, shape (n_train_samples,)"
                            ],
                            [
                                "test",
                                "array-like, shape (n_test_samples,)"
                            ],
                            [
                                "verbose",
                                "integer"
                            ],
                            [
                                "fit_params",
                                "dict or None"
                            ]
                        ],
                        7,
                        0
                    ],
                    {
                        "preds": "sequence",
                        "test": "array-like"
                    }
                ]
            ],
            [
                "_check_is_partition",
                [
                    [
                        [
                            [
                                "locs",
                                "ndarray"
                            ],
                            [
                                "n",
                                "int"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "is_partition": "bool"
                    }
                ]
            ],
            [
                "cross_val_score",
                [
                    [
                        [
                            [
                                "estimator",
                                "estimator object implementing 'fit'"
                            ],
                            [
                                "X",
                                "array-like"
                            ],
                            [
                                "y",
                                "array-like, optional, default"
                            ],
                            [
                                "scoring",
                                "string, callable or None, optional, default"
                            ],
                            [
                                "cv",
                                "int, cross-validation generator or an iterable, optional"
                            ],
                            [
                                "n_jobs",
                                "integer, optional"
                            ],
                            [
                                "verbose",
                                "integer, optional"
                            ],
                            [
                                "fit_params",
                                "dict, optional"
                            ],
                            [
                                "pre_dispatch",
                                "int, or string, optional"
                            ]
                        ],
                        9,
                        0
                    ],
                    {
                        "scores": "array of float, shape=(len(list(cv)),)"
                    }
                ]
            ],
            [
                "_fit_and_score",
                [
                    [
                        [
                            [
                                "estimator",
                                "estimator object implementing 'fit'"
                            ],
                            [
                                "X",
                                "array-like of shape at least 2D"
                            ],
                            [
                                "y",
                                "array-like, optional, default"
                            ],
                            [
                                "scorer",
                                "callable"
                            ],
                            [
                                "train",
                                "array-like, shape (n_train_samples,)"
                            ],
                            [
                                "test",
                                "array-like, shape (n_test_samples,)"
                            ],
                            [
                                "verbose",
                                "integer"
                            ],
                            [
                                "parameters",
                                "dict or None"
                            ],
                            [
                                "fit_params",
                                "dict or None"
                            ],
                            [
                                "return_train_score",
                                "boolean, optional, default"
                            ],
                            [
                                "return_parameters",
                                "boolean, optional, default"
                            ],
                            [
                                "error_score",
                                "'raise' (default) or numeric"
                            ]
                        ],
                        12,
                        0
                    ],
                    {
                        "train_score": "float, optional",
                        "test_score": "float",
                        "n_test_samples": "int",
                        "scoring_time": "float",
                        "parameters": "dict or None, optional"
                    }
                ]
            ],
            [
                "_safe_split",
                [
                    [
                        [],
                        5,
                        5
                    ],
                    null
                ]
            ],
            [
                "_score",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "_permutation_test_score",
                [
                    [
                        [],
                        5,
                        5
                    ],
                    null
                ]
            ],
            [
                "_shuffle",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "check_cv",
                [
                    [
                        [
                            [
                                "cv",
                                "int, cross-validation generator or an iterable, optional"
                            ],
                            [
                                "X",
                                "array-like"
                            ],
                            [
                                "y",
                                "array-like"
                            ],
                            [
                                "classifier",
                                "boolean optional"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "checked_cv": "a cross-validation generator instance."
                    }
                ]
            ],
            [
                "permutation_test_score",
                [
                    [
                        [
                            [
                                "estimator",
                                "estimator object implementing 'fit'"
                            ],
                            [
                                "X",
                                "array-like of shape at least 2D"
                            ],
                            [
                                "y",
                                "array-like"
                            ],
                            [
                                "cv",
                                "int, cross-validation generator or an iterable, optional"
                            ],
                            [
                                "n_permutations",
                                "integer, optional"
                            ],
                            [
                                "n_jobs",
                                "integer, optional"
                            ],
                            [
                                "labels",
                                "array-like of shape [n_samples] (optional)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=0)"
                            ],
                            [
                                "verbose",
                                "integer, optional"
                            ],
                            [
                                "scoring",
                                "string, callable or None, optional, default"
                            ]
                        ],
                        10,
                        0
                    ],
                    {
                        "score": "float",
                        "permutation_scores": "array, shape (n_permutations,)",
                        "pvalue": "float",
                        "as": ""
                    }
                ]
            ],
            [
                "train_test_split",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    {
                        "splitting": "list, length = 2 * len(arrays),",
                        "versionadded": ""
                    }
                ]
            ]
        ],
        15
    ],
    "../scikit-learn-master/sklearn\\discriminant_analysis.py": [
        [
            [
                "_cov",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "shrinkage",
                                "string or float, optional"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "s": "array, shape (n_features, n_features)"
                    }
                ]
            ],
            [
                "_class_means",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "array-like, shape (n_samples,) or (n_samples, n_targets)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "means": "array-like, shape (n_features,)"
                    }
                ]
            ],
            [
                "_class_cov",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "array-like, shape (n_samples,) or (n_samples, n_targets)"
                            ],
                            [
                                "priors",
                                "array-like, shape (n_classes,)"
                            ],
                            [
                                "shrinkage",
                                "string or float, optional"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "cov": "array-like, shape (n_features, n_features)"
                    }
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\dummy.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\exceptions.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\grid_search.py": [
        [
            [
                "fit_grid_point",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, sparse matrix or list"
                            ],
                            [
                                "y",
                                "array-like or None"
                            ],
                            [
                                "estimator",
                                "estimator object"
                            ],
                            [
                                "parameters",
                                "dict"
                            ],
                            [
                                "train",
                                "ndarray, dtype int or bool"
                            ],
                            [
                                "test",
                                "ndarray, dtype int or bool"
                            ],
                            [
                                "scorer",
                                "callable or None."
                            ],
                            [
                                "verbose",
                                "int"
                            ],
                            [
                                "error_score",
                                "'raise' (default) or numeric"
                            ]
                        ],
                        9,
                        0
                    ],
                    {
                        "score": "float",
                        "parameters": "dict",
                        "n_samples_test": "int"
                    }
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\isotonic.py": [
        [
            [
                "check_increasing",
                [
                    [
                        [
                            [
                                "x",
                                "array-like, shape=(n_samples,)"
                            ],
                            [
                                "y",
                                "array-like, shape=(n_samples,)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "increasing_bool": "boolean"
                    }
                ]
            ],
            [
                "isotonic_regression",
                [
                    [
                        [
                            [
                                "y",
                                "iterable of floating-point values"
                            ],
                            [
                                "sample_weight",
                                "iterable of floating-point values, optional, default"
                            ],
                            [
                                "y_min",
                                "optional, default"
                            ],
                            [
                                "y_max",
                                "optional, default"
                            ],
                            [
                                "increasing",
                                "boolean, optional, default"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "y_": "list of floating-point values"
                    }
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\kernel_approximation.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\kernel_ridge.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\learning_curve.py": [
        [
            [
                "learning_curve",
                [
                    [
                        [
                            [
                                "estimator",
                                "object type that implements the \"fit\" and \"predict\" methods"
                            ],
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "array-like, shape (n_samples) or (n_samples, n_features), optional"
                            ],
                            [
                                "train_sizes",
                                "array-like, shape (n_ticks,), dtype float or int"
                            ],
                            [
                                "cv",
                                "int, cross-validation generator or an iterable, optional"
                            ],
                            [
                                "scoring",
                                "string, callable or None, optional, default"
                            ],
                            [
                                "exploit_incremental_learning",
                                "boolean, optional, default"
                            ],
                            [
                                "n_jobs",
                                "integer, optional"
                            ],
                            [
                                "pre_dispatch",
                                "integer or string, optional"
                            ],
                            [
                                "verbose",
                                "integer, optional"
                            ],
                            [
                                "error_score",
                                "'raise' (default) or numeric"
                            ]
                        ],
                        11,
                        0
                    ],
                    {
                        "train_sizes_abs": "array, shape = (n_unique_ticks,), dtype int",
                        "train_scores": "array, shape (n_ticks, n_cv_folds)",
                        "test_scores": "array, shape (n_ticks, n_cv_folds)"
                    }
                ]
            ],
            [
                "_translate_train_sizes",
                [
                    [
                        [
                            [
                                "train_sizes",
                                "array-like, shape (n_ticks,), dtype float or int"
                            ],
                            [
                                "n_max_training_samples",
                                "int"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "train_sizes_abs": "array, shape (n_unique_ticks,), dtype int"
                    }
                ]
            ],
            [
                "_incremental_fit_estimator",
                [
                    [
                        [],
                        9,
                        9
                    ],
                    null
                ]
            ],
            [
                "validation_curve",
                [
                    [
                        [
                            [
                                "estimator",
                                "object type that implements the \"fit\" and \"predict\" methods"
                            ],
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "array-like, shape (n_samples) or (n_samples, n_features), optional"
                            ],
                            [
                                "param_name",
                                "string"
                            ],
                            [
                                "param_range",
                                "array-like, shape (n_values,)"
                            ],
                            [
                                "cv",
                                "int, cross-validation generator or an iterable, optional"
                            ],
                            [
                                "scoring",
                                "string, callable or None, optional, default"
                            ],
                            [
                                "n_jobs",
                                "integer, optional"
                            ],
                            [
                                "pre_dispatch",
                                "integer or string, optional"
                            ],
                            [
                                "verbose",
                                "integer, optional"
                            ]
                        ],
                        10,
                        0
                    ],
                    {
                        "train_scores": "array, shape (n_ticks, n_cv_folds)",
                        "test_scores": "array, shape (n_ticks, n_cv_folds)"
                    }
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\multiclass.py": [
        [
            [
                "_fit_binary",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "_partial_fit_binary",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_predict_binary",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_check_estimator",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_fit_ovo_binary",
                [
                    [
                        [],
                        5,
                        5
                    ],
                    null
                ]
            ],
            [
                "_partial_fit_ovo_binary",
                [
                    [
                        [],
                        5,
                        5
                    ],
                    null
                ]
            ]
        ],
        6
    ],
    "../scikit-learn-master/sklearn\\multioutput.py": [
        [],
        2
    ],
    "../scikit-learn-master/sklearn\\naive_bayes.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\pipeline.py": [
        [
            [
                "_name_estimators",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "make_pipeline",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    {
                        "p": "Pipeline"
                    }
                ]
            ],
            [
                "make_union",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    {
                        "f": "FeatureUnion"
                    }
                ]
            ]
        ],
        6
    ],
    "../scikit-learn-master/sklearn\\random_projection.py": [
        [
            [
                "johnson_lindenstrauss_min_dim",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int or numpy array of int greater than 0,"
                            ],
                            [
                                "eps",
                                "float or numpy array of float in ]0,1[, optional (default=0.1)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "n_components": "int or numpy array of int,"
                    }
                ]
            ],
            [
                "_check_density",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_check_input_size",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "gaussian_random_matrix",
                [
                    [
                        [
                            [
                                "n_components",
                                "int,"
                            ],
                            [
                                "n_features",
                                "int,"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "components": "numpy array of shape [n_components, n_features]"
                    }
                ]
            ],
            [
                "sparse_random_matrix",
                [
                    [
                        [
                            [
                                "n_components",
                                "int,"
                            ],
                            [
                                "n_features",
                                "int,"
                            ],
                            [
                                "density",
                                "float in range ]0, 1] or 'auto', optional (default='auto')"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "components": "array or CSR matrix with shape [n_components, n_features]"
                    }
                ]
            ]
        ],
        5
    ],
    "../scikit-learn-master/sklearn\\setup.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\__init__.py": [
        [
            [
                "get_config",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    {
                        "config": "dict",
                        "to": "func"
                    }
                ]
            ],
            [
                "set_config",
                [
                    [
                        [
                            [
                                "assume_finite",
                                "bool, optional"
                            ]
                        ],
                        1,
                        0
                    ],
                    null
                ]
            ],
            [
                "config_context",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "setup_module",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\cluster\\affinity_propagation_.py": [
        [
            [
                "affinity_propagation",
                [
                    [
                        [
                            [
                                "S",
                                "array-like, shape (n_samples, n_samples)"
                            ],
                            [
                                "preference",
                                "array-like, shape (n_samples,) or float, optional"
                            ],
                            [
                                "convergence_iter",
                                "int, optional, default"
                            ],
                            [
                                "max_iter",
                                "int, optional, default"
                            ],
                            [
                                "damping",
                                "float, optional, default"
                            ],
                            [
                                "copy",
                                "boolean, optional, default"
                            ],
                            [
                                "verbose",
                                "boolean, optional, default"
                            ],
                            [
                                "return_n_iter",
                                "bool, default False"
                            ]
                        ],
                        8,
                        0
                    ],
                    {
                        "cluster_centers_indices": "array, shape (n_clusters,)",
                        "labels": "array, shape (n_samples,)",
                        "n_iter": "int"
                    }
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\cluster\\bicluster.py": [
        [
            [
                "_scale_normalize",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_bistochastic_normalize",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_log_normalize",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\cluster\\birch.py": [
        [
            [
                "_iterate_sparse_X",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_split_node",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\cluster\\dbscan_.py": [
        [
            [
                "dbscan",
                [
                    [
                        [
                            [
                                "X",
                                "array or sparse (CSR) matrix of shape (n_samples, n_features), or             array of shape (n_samples, n_samples)"
                            ],
                            [
                                "eps",
                                "float, optional"
                            ],
                            [
                                "min_samples",
                                "int, optional"
                            ],
                            [
                                "metric",
                                "string, or callable"
                            ],
                            [
                                "metric_params",
                                "dict, optional"
                            ],
                            [
                                "algorithm",
                                "{'auto', 'ball_tree', 'kd_tree', 'brute'}, optional"
                            ],
                            [
                                "leaf_size",
                                "int, optional (default = 30)"
                            ],
                            [
                                "p",
                                "float, optional"
                            ],
                            [
                                "sample_weight",
                                "array, shape (n_samples,), optional"
                            ],
                            [
                                "n_jobs",
                                "int, optional (default = 1)"
                            ]
                        ],
                        10,
                        0
                    ],
                    {
                        "core_samples": "array [n_core_samples]",
                        "labels": "array [n_samples]"
                    }
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\cluster\\hierarchical.py": [
        [
            [
                "_fix_connectivity",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "ward_tree",
                [
                    [
                        [
                            [
                                "X",
                                "array, shape (n_samples, n_features)"
                            ],
                            [
                                "connectivity",
                                "sparse matrix (optional)."
                            ],
                            [
                                "n_clusters",
                                "int (optional)"
                            ],
                            [
                                "return_distance",
                                "bool (optional)"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "children": "2D array, shape (n_nodes-1, 2)",
                        "n_components": "int",
                        "n_leaves": "int",
                        "parents": "1D array, shape (n_nodes, ) or None",
                        "distances": "1D array, shape (n_nodes-1, )",
                        "entry": "math",
                        "math": "",
                        "where": "math",
                        "clusters": "math"
                    }
                ]
            ],
            [
                "linkage_tree",
                [
                    [
                        [
                            [
                                "X",
                                "array, shape (n_samples, n_features)"
                            ],
                            [
                                "connectivity",
                                "sparse matrix (optional)."
                            ],
                            [
                                "n_components",
                                "int (optional)"
                            ],
                            [
                                "n_clusters",
                                "int (optional)"
                            ],
                            [
                                "linkage",
                                "{\"average\", \"complete\"}, optional, default"
                            ],
                            [
                                "affinity",
                                "string or callable, optional, default"
                            ],
                            [
                                "return_distance",
                                "bool, default False"
                            ]
                        ],
                        7,
                        0
                    ],
                    {
                        "children": "2D array, shape (n_nodes-1, 2)",
                        "n_components": "int",
                        "n_leaves": "int",
                        "parents": "1D array, shape (n_nodes, ) or None",
                        "distances": "ndarray, shape (n_nodes-1,)"
                    }
                ]
            ],
            [
                "_hc_cut",
                [
                    [
                        [
                            [
                                "n_clusters",
                                "int or ndarray"
                            ],
                            [
                                "children",
                                "2D array, shape (n_nodes-1, 2)"
                            ],
                            [
                                "n_leaves",
                                "int"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "labels": "array [n_samples]"
                    }
                ]
            ]
        ],
        6
    ],
    "../scikit-learn-master/sklearn\\cluster\\k_means_.py": [
        [
            [
                "_k_init",
                [
                    [
                        [
                            [
                                "X",
                                "array or sparse matrix, shape (n_samples, n_features)"
                            ],
                            [
                                "n_clusters",
                                "integer"
                            ],
                            [
                                "x_squared_norms",
                                "array, shape (n_samples,)"
                            ],
                            [
                                "random_state",
                                "numpy.RandomState"
                            ],
                            [
                                "n_local_trials",
                                "integer, optional"
                            ]
                        ],
                        5,
                        0
                    ],
                    null
                ]
            ],
            [
                "_validate_center_shape",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_tolerance",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "k_means",
                [
                    [
                        [
                            [
                                "X",
                                "array-like or sparse matrix, shape (n_samples, n_features)"
                            ],
                            [
                                "n_clusters",
                                "int"
                            ],
                            [
                                "init",
                                "{'k-means++', 'random', or ndarray, or a callable}, optional"
                            ],
                            [
                                "precompute_distances",
                                "{'auto', True, False}"
                            ],
                            [
                                "n_init",
                                "int, optional, default"
                            ],
                            [
                                "max_iter",
                                "int, optional, default 300"
                            ],
                            [
                                "verbose",
                                "boolean, optional"
                            ],
                            [
                                "tol",
                                "float, optional"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default"
                            ],
                            [
                                "copy_x",
                                "boolean, optional"
                            ],
                            [
                                "n_jobs",
                                "int"
                            ],
                            [
                                "algorithm",
                                "\"auto\", \"full\" or \"elkan\", default=\"auto\""
                            ],
                            [
                                "return_n_iter",
                                "bool, optional"
                            ]
                        ],
                        13,
                        0
                    ],
                    {
                        "centroid": "float ndarray with shape (k, n_features)",
                        "label": "integer ndarray with shape (n_samples,)",
                        "inertia": "float",
                        "best_n_iter": "int"
                    }
                ]
            ],
            [
                "_kmeans_single_lloyd",
                [
                    [
                        [
                            [
                                "X",
                                "array-like of floats, shape (n_samples, n_features)"
                            ],
                            [
                                "n_clusters",
                                "int"
                            ],
                            [
                                "max_iter",
                                "int, optional, default 300"
                            ],
                            [
                                "init",
                                "{'k-means++', 'random', or ndarray, or a callable}, optional"
                            ],
                            [
                                "verbose",
                                "boolean, optional"
                            ],
                            [
                                "x_squared_norms",
                                "array"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default"
                            ],
                            [
                                "tol",
                                "float, optional"
                            ],
                            [
                                "precompute_distances",
                                "boolean, default"
                            ]
                        ],
                        9,
                        0
                    ],
                    {
                        "centroid": "float ndarray with shape (k, n_features)",
                        "label": "integer ndarray with shape (n_samples,)",
                        "inertia": "float",
                        "n_iter": "int"
                    }
                ]
            ],
            [
                "_labels_inertia_precompute_dense",
                [
                    [
                        [
                            [
                                "X",
                                "numpy array, shape (n_sample, n_features)"
                            ],
                            [
                                "x_squared_norms",
                                "numpy array, shape (n_samples,)"
                            ],
                            [
                                "centers",
                                "numpy array, shape (n_clusters, n_features)"
                            ],
                            [
                                "distances",
                                "numpy array, shape (n_samples,)"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "labels": "numpy array, dtype=np.int, shape (n_samples,)",
                        "inertia": "float"
                    }
                ]
            ],
            [
                "_labels_inertia",
                [
                    [
                        [
                            [
                                "X",
                                "float64 array-like or CSR sparse matrix, shape (n_samples, n_features)"
                            ],
                            [
                                "x_squared_norms",
                                "array, shape (n_samples,)"
                            ],
                            [
                                "centers",
                                "float array, shape (k, n_features)"
                            ],
                            [
                                "precompute_distances",
                                "boolean, default"
                            ],
                            [
                                "distances",
                                "float array, shape (n_samples,)"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "labels": "int array of shape(n)",
                        "inertia": "float"
                    }
                ]
            ],
            [
                "_init_centroids",
                [
                    [
                        [
                            [
                                "X",
                                "array, shape (n_samples, n_features)"
                            ],
                            [
                                "k",
                                "int"
                            ],
                            [
                                "init",
                                "{'k-means++', 'random' or ndarray or callable} optional"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default"
                            ],
                            [
                                "x_squared_norms",
                                "array, shape (n_samples,), optional"
                            ],
                            [
                                "init_size",
                                "int, optional"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "centers": "array, shape(k, n_features)"
                    }
                ]
            ],
            [
                "_mini_batch_step",
                [
                    [
                        [
                            [
                                "X",
                                "array, shape (n_samples, n_features)"
                            ],
                            [
                                "x_squared_norms",
                                "array, shape (n_samples,)"
                            ],
                            [
                                "centers",
                                "array, shape (k, n_features)"
                            ],
                            [
                                "counts",
                                "array, shape (k,)"
                            ],
                            [
                                "old_center_buffer",
                                "int"
                            ],
                            [
                                "compute_squared_diff",
                                "bool"
                            ],
                            [
                                "distances",
                                "array, dtype float, shape (n_samples), optional"
                            ],
                            [
                                "random_reassign",
                                "boolean, optional"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default"
                            ],
                            [
                                "reassignment_ratio",
                                "float, optional"
                            ],
                            [
                                "verbose",
                                "bool, optional, default False"
                            ]
                        ],
                        11,
                        0
                    ],
                    {
                        "inertia": "float",
                        "squared_diff": "numpy array, shape (n_clusters,)"
                    }
                ]
            ],
            [
                "_mini_batch_convergence",
                [
                    [
                        [],
                        9,
                        9
                    ],
                    null
                ]
            ]
        ],
        11
    ],
    "../scikit-learn-master/sklearn\\cluster\\mean_shift_.py": [
        [
            [
                "estimate_bandwidth",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape=[n_samples, n_features]"
                            ],
                            [
                                "quantile",
                                "float, default 0.3"
                            ],
                            [
                                "n_samples",
                                "int, optional"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ],
                            [
                                "n_jobs",
                                "int, optional (default = 1)"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "bandwidth": "float"
                    }
                ]
            ],
            [
                "mean_shift",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape=[n_samples, n_features]"
                            ],
                            [
                                "bandwidth",
                                "float, optional"
                            ],
                            [
                                "seeds",
                                "array-like, shape=[n_seeds, n_features] or None"
                            ],
                            [
                                "bin_seeding",
                                "boolean, default=False"
                            ],
                            [
                                "min_bin_freq",
                                "int, default=1"
                            ],
                            [
                                "cluster_all",
                                "boolean, default True"
                            ],
                            [
                                "max_iter",
                                "int, default 300"
                            ],
                            [
                                "n_jobs",
                                "int"
                            ]
                        ],
                        8,
                        0
                    ],
                    {
                        "cluster_centers": "array, shape=[n_clusters, n_features]",
                        "labels": "array, shape=[n_samples]"
                    }
                ]
            ],
            [
                "get_bin_seeds",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape=[n_samples, n_features]"
                            ],
                            [
                                "bin_size",
                                "float"
                            ],
                            [
                                "min_bin_freq",
                                "integer, optional"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "bin_seeds": "array-like, shape=[n_samples, n_features]"
                    }
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\cluster\\setup.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\cluster\\spectral.py": [
        [
            [
                "discretize",
                [
                    [
                        [
                            [
                                "vectors",
                                "array-like, shape"
                            ],
                            [
                                "copy",
                                "boolean, optional, default"
                            ],
                            [
                                "max_svd_restarts",
                                "int, optional, default"
                            ],
                            [
                                "n_iter_max",
                                "int, optional, default"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "labels": "array of integers, shape"
                    }
                ]
            ],
            [
                "spectral_clustering",
                [
                    [
                        [
                            [
                                "affinity",
                                "array-like or sparse matrix, shape"
                            ],
                            [
                                "n_clusters",
                                "integer, optional"
                            ],
                            [
                                "n_components",
                                "integer, optional, default is n_clusters"
                            ],
                            [
                                "eigen_solver",
                                "{None, 'arpack', 'lobpcg', or 'amg'}"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default"
                            ],
                            [
                                "n_init",
                                "int, optional, default"
                            ],
                            [
                                "eigen_tol",
                                "float, optional, default"
                            ],
                            [
                                "assign_labels",
                                "{'kmeans', 'discretize'}, default"
                            ]
                        ],
                        8,
                        0
                    ],
                    {
                        "labels": "array of integers, shape"
                    }
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\cluster\\_feature_agglomeration.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\cluster\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\common.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_affinity_propagation.py": [
        [],
        7
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_bicluster.py": [
        [
            [
                "_do_scale_test",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_do_bistochastic_test",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        13
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_birch.py": [
        [
            [
                "check_threshold",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ]
        ],
        9
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_dbscan.py": [
        [],
        16
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_hierarchical.py": [
        [
            [
                "assess_same_labelling",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ]
        ],
        21
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_k_means.py": [
        [
            [
                "test_x_squared_norms_init_centroids",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        57
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_mean_shift.py": [
        [],
        8
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_spectral.py": [
        [],
        7
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\covariance\\empirical_covariance_.py": [
        [
            [
                "log_likelihood",
                [
                    [
                        [
                            [
                                "emp_cov",
                                "2D ndarray (n_features, n_features)"
                            ],
                            [
                                "precision",
                                "2D ndarray (n_features, n_features)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {}
                ]
            ],
            [
                "empirical_covariance",
                [
                    [
                        [
                            [
                                "X",
                                "ndarray, shape (n_samples, n_features)"
                            ],
                            [
                                "assume_centered",
                                "Boolean"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "covariance": "2D ndarray, shape (n_features, n_features)"
                    }
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\covariance\\graph_lasso_.py": [
        [
            [
                "_objective",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_dual_gap",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "alpha_max",
                [
                    [
                        [
                            [
                                "emp_cov",
                                "2D array, (n_features, n_features)"
                            ]
                        ],
                        1,
                        0
                    ],
                    null
                ]
            ],
            [
                "graph_lasso",
                [
                    [
                        [
                            [
                                "emp_cov",
                                "2D ndarray, shape (n_features, n_features)"
                            ],
                            [
                                "alpha",
                                "positive float"
                            ],
                            [
                                "cov_init",
                                "2D array (n_features, n_features), optional"
                            ],
                            [
                                "mode",
                                "{'cd', 'lars'}"
                            ],
                            [
                                "tol",
                                "positive float, optional"
                            ],
                            [
                                "enet_tol",
                                "positive float, optional"
                            ],
                            [
                                "max_iter",
                                "integer, optional"
                            ],
                            [
                                "verbose",
                                "boolean, optional"
                            ],
                            [
                                "return_costs",
                                "boolean, optional"
                            ],
                            [
                                "eps",
                                "float, optional"
                            ],
                            [
                                "return_n_iter",
                                "bool, optional"
                            ]
                        ],
                        11,
                        0
                    ],
                    {
                        "covariance": "2D ndarray, shape (n_features, n_features)",
                        "precision": "2D ndarray, shape (n_features, n_features)",
                        "costs": "list of (objective, dual_gap) pairs",
                        "n_iter": "int"
                    }
                ]
            ],
            [
                "graph_lasso_path",
                [
                    [
                        [
                            [
                                "X",
                                "2D ndarray, shape (n_samples, n_features)"
                            ],
                            [
                                "alphas",
                                "list of positive floats"
                            ],
                            [
                                "X_test",
                                "2D array, shape (n_test_samples, n_features), optional"
                            ],
                            [
                                "mode",
                                "{'cd', 'lars'}"
                            ],
                            [
                                "tol",
                                "positive float, optional"
                            ],
                            [
                                "enet_tol",
                                "positive float, optional"
                            ],
                            [
                                "max_iter",
                                "integer, optional"
                            ],
                            [
                                "verbose",
                                "integer, optional"
                            ]
                        ],
                        9,
                        1
                    ],
                    {
                        "covariances_": "List of 2D ndarray, shape (n_features, n_features)",
                        "precisions_": "List of 2D ndarray, shape (n_features, n_features)",
                        "scores_": "List of float"
                    }
                ]
            ]
        ],
        5
    ],
    "../scikit-learn-master/sklearn\\covariance\\outlier_detection.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\covariance\\robust_covariance.py": [
        [
            [
                "c_step",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "n_support",
                                "int, > n_samples / 2"
                            ],
                            [
                                "remaining_iterations",
                                "int, optional"
                            ],
                            [
                                "initial_estimates",
                                "2-tuple, optional"
                            ],
                            [
                                "verbose",
                                "boolean, optional"
                            ],
                            [
                                "cov_computation_method",
                                "callable, default empirical_covariance"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        7,
                        0
                    ],
                    {
                        "location": "array-like, shape (n_features,)",
                        "covariance": "array-like, shape (n_features, n_features)",
                        "support": "array-like, shape (n_samples,)"
                    }
                ]
            ],
            [
                "select_candidates",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "n_support",
                                "int, [(n + p + 1)/2] < n_support < n"
                            ],
                            [
                                "n_trials",
                                "int, nb_trials > 0 or 2-tuple"
                            ],
                            [
                                "select",
                                "int, int > 0"
                            ],
                            [
                                "n_iter",
                                "int, nb_iter > 0"
                            ],
                            [
                                "verbose",
                                "boolean, default False"
                            ],
                            [
                                "cov_computation_method",
                                "callable, default empirical_covariance"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        8,
                        0
                    ],
                    {
                        "best_locations": "array-like, shape (select, n_features)",
                        "best_covariances": "array-like, shape (select, n_features, n_features)",
                        "best_supports": "array-like, shape (select, n_samples)"
                    }
                ]
            ],
            [
                "fast_mcd",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "support_fraction",
                                "float, 0 < support_fraction < 1"
                            ],
                            [
                                "cov_computation_method",
                                "callable, default empirical_covariance"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "location": "array-like, shape (n_features,)",
                        "covariance": "array-like, shape (n_features, n_features)",
                        "support": "array-like, type boolean, shape (n_samples,)"
                    }
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\covariance\\shrunk_covariance_.py": [
        [
            [
                "shrunk_covariance",
                [
                    [
                        [
                            [
                                "emp_cov",
                                "array-like, shape (n_features, n_features)"
                            ],
                            [
                                "shrinkage",
                                "float, 0 <= shrinkage <= 1"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "shrunk_cov": "array-like"
                    }
                ]
            ],
            [
                "ledoit_wolf_shrinkage",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "assume_centered",
                                "Boolean"
                            ],
                            [
                                "block_size",
                                "int"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "shrinkage": "float"
                    }
                ]
            ],
            [
                "ledoit_wolf",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "assume_centered",
                                "boolean, default=False"
                            ],
                            [
                                "block_size",
                                "int, default=1000"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "shrunk_cov": "array-like, shape (n_features, n_features)",
                        "shrinkage": "float"
                    }
                ]
            ],
            [
                "oas",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "assume_centered",
                                "boolean"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "shrunk_cov": "array-like, shape (n_features, n_features)",
                        "shrinkage": "float"
                    }
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\covariance\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\covariance\\tests\\test_covariance.py": [
        [],
        7
    ],
    "../scikit-learn-master/sklearn\\covariance\\tests\\test_graph_lasso.py": [
        [],
        5
    ],
    "../scikit-learn-master/sklearn\\covariance\\tests\\test_robust_covariance.py": [
        [],
        7
    ],
    "../scikit-learn-master/sklearn\\covariance\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\cross_decomposition\\cca_.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\cross_decomposition\\pls_.py": [
        [
            [
                "_nipals_twoblocks_inner_loop",
                [
                    [
                        [],
                        6,
                        6
                    ],
                    null
                ]
            ],
            [
                "_center_scale_xy",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    {}
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\cross_decomposition\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\cross_decomposition\\tests\\test_pls.py": [
        [],
        7
    ],
    "../scikit-learn-master/sklearn\\cross_decomposition\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\datasets\\base.py": [
        [
            [
                "get_data_home",
                [
                    [
                        [
                            [
                                "data_home",
                                "str | None"
                            ]
                        ],
                        1,
                        0
                    ],
                    null
                ]
            ],
            [
                "clear_data_home",
                [
                    [
                        [
                            [
                                "data_home",
                                "str | None"
                            ]
                        ],
                        1,
                        0
                    ],
                    null
                ]
            ],
            [
                "load_files",
                [
                    [
                        [
                            [
                                "container_path",
                                "string or unicode"
                            ],
                            [
                                "description",
                                "string or unicode, optional (default=None)"
                            ],
                            [
                                "categories",
                                "A collection of strings or None, optional (default=None)"
                            ],
                            [
                                "load_content",
                                "boolean, optional (default=True)"
                            ],
                            [
                                "shuffle",
                                "bool, optional (default=True)"
                            ],
                            [
                                "encoding",
                                "string or None (default is None)"
                            ],
                            [
                                "decode_error",
                                "{'strict', 'ignore', 'replace'}, optional"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=0)"
                            ]
                        ],
                        8,
                        0
                    ],
                    {
                        "data": "Bunch",
                        "are": "either"
                    }
                ]
            ],
            [
                "load_data",
                [
                    [
                        [
                            [
                                "data_file_name",
                                "String. Name of csv file to be loaded from"
                            ]
                        ],
                        2,
                        1
                    ],
                    {
                        "data": "Numpy Array",
                        "target": "Numpy Array",
                        "target_names": "Numpy Array"
                    }
                ]
            ],
            [
                "load_wine",
                [
                    [
                        [
                            [
                                "return_X_y",
                                "boolean, default=False."
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "data": "Bunch",
                        "are": "'data', the",
                        "from": "",
                        "https": "//archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
                    }
                ]
            ],
            [
                "load_iris",
                [
                    [
                        [
                            [
                                "return_X_y",
                                "boolean, default=False."
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "data": "Bunch",
                        "are": "",
                        "versionadded": ""
                    }
                ]
            ],
            [
                "load_breast_cancer",
                [
                    [
                        [
                            [
                                "return_X_y",
                                "boolean, default=False"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "data": "Bunch",
                        "are": "",
                        "versionadded": "",
                        "from": "",
                        "https": "//goo.gl/U2Uwz2"
                    }
                ]
            ],
            [
                "load_digits",
                [
                    [
                        [
                            [
                                "n_class",
                                "integer, between 0 and 10, optional (default=10)"
                            ],
                            [
                                "return_X_y",
                                "boolean, default=False."
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "data": "Bunch",
                        "are": "",
                        "versionadded": "",
                        "http": "//archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits"
                    }
                ]
            ],
            [
                "load_diabetes",
                [
                    [
                        [
                            [
                                "return_X_y",
                                "boolean, default=False."
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "data": "Bunch",
                        "are": "",
                        "versionadded": ""
                    }
                ]
            ],
            [
                "load_linnerud",
                [
                    [
                        [
                            [
                                "return_X_y",
                                "boolean, default=False."
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "data": "Bunch",
                        "are": "'data' and",
                        "versionadded": ""
                    }
                ]
            ],
            [
                "load_boston",
                [
                    [
                        [
                            [
                                "return_X_y",
                                "boolean, default=False."
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "data": "Bunch",
                        "are": "",
                        "versionadded": ""
                    }
                ]
            ],
            [
                "load_sample_images",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    {
                        "data": "Bunch",
                        "attributes": "'images', the"
                    }
                ]
            ],
            [
                "load_sample_image",
                [
                    [
                        [
                            [
                                "image_name",
                                "{`china.jpg`, `flower.jpg`}"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "img": "3D array",
                        "array": "height x width x color"
                    }
                ]
            ],
            [
                "_pkl_filepath",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "_sha256",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_fetch_remote",
                [
                    [
                        [
                            [
                                "remote",
                                "RemoteFileMetadata"
                            ],
                            [
                                "dirname",
                                "string"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "file_path": "string"
                    }
                ]
            ]
        ],
        16
    ],
    "../scikit-learn-master/sklearn\\datasets\\california_housing.py": [
        [
            [
                "fetch_california_housing",
                [
                    [
                        [
                            [
                                "data_home",
                                "optional, default"
                            ],
                            [
                                "download_if_missing",
                                "optional, True by default"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "dataset": "dict-like object with the following attributes"
                    }
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\datasets\\covtype.py": [
        [
            [
                "fetch_covtype",
                [
                    [
                        [
                            [
                                "data_home",
                                "string, optional"
                            ],
                            [
                                "download_if_missing",
                                "boolean, default=True"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ],
                            [
                                "shuffle",
                                "bool, default=False"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "dataset": "dict-like object with the following attributes"
                    }
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\datasets\\kddcup99.py": [
        [
            [
                "fetch_kddcup99",
                [
                    [
                        [
                            [
                                "subset",
                                "None, 'SA', 'SF', 'http', 'smtp'"
                            ],
                            [
                                "data_home",
                                "string, optional"
                            ],
                            [
                                "shuffle",
                                "bool, default=False"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ],
                            [
                                "percent10",
                                "bool, default=True"
                            ],
                            [
                                "download_if_missing",
                                "bool, default=True"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "data": "Bunch",
                        "are": ""
                    }
                ]
            ],
            [
                "_fetch_brute_kddcup99",
                [
                    [
                        [
                            [
                                "data_home",
                                "string, optional"
                            ],
                            [
                                "download_if_missing",
                                "boolean, default=True"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ],
                            [
                                "percent10",
                                "bool, default=True"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "dataset": "dict-like object with the following attributes"
                    }
                ]
            ],
            [
                "_mkdirp",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\datasets\\lfw.py": [
        [
            [
                "scale_face",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "check_fetch_lfw",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_load_imgs",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "_fetch_lfw_people",
                [
                    [
                        [],
                        5,
                        5
                    ],
                    null
                ]
            ],
            [
                "fetch_lfw_people",
                [
                    [
                        [
                            [
                                "data_home",
                                "optional, default"
                            ],
                            [
                                "funneled",
                                "boolean, optional, default"
                            ],
                            [
                                "resize",
                                "float, optional, default 0.5"
                            ],
                            [
                                "min_faces_per_person",
                                "int, optional, default None"
                            ],
                            [
                                "color",
                                "boolean, optional, default False"
                            ],
                            [
                                "slice_",
                                "optional"
                            ],
                            [
                                "download_if_missing",
                                "optional, True by default"
                            ]
                        ],
                        7,
                        0
                    ],
                    {
                        "dataset": "dict-like object with the following attributes"
                    }
                ]
            ],
            [
                "_fetch_lfw_pairs",
                [
                    [
                        [],
                        5,
                        5
                    ],
                    null
                ]
            ],
            [
                "fetch_lfw_pairs",
                [
                    [
                        [
                            [
                                "subset",
                                "optional, default"
                            ],
                            [
                                "data_home",
                                "optional, default"
                            ],
                            [
                                "funneled",
                                "boolean, optional, default"
                            ],
                            [
                                "resize",
                                "float, optional, default 0.5"
                            ],
                            [
                                "color",
                                "boolean, optional, default False"
                            ],
                            [
                                "slice_",
                                "optional"
                            ],
                            [
                                "download_if_missing",
                                "optional, True by default"
                            ]
                        ],
                        7,
                        0
                    ],
                    {
                        "attributes": "",
                        "data": "numpy array of shape (2200, 5828). Shape depends on ``subset``.",
                        "pairs": "numpy array of shape (2200, 2, 62, 47). Shape depends on",
                        "target": "numpy array of shape (2200,). Shape depends on ``subset``.",
                        "DESCR": "string"
                    }
                ]
            ]
        ],
        7
    ],
    "../scikit-learn-master/sklearn\\datasets\\mlcomp.py": [
        [
            [
                "load_mlcomp",
                [
                    [
                        [
                            [
                                "name_or_id",
                                "the integer id or the string name metadata of the MLComp"
                            ],
                            [
                                "set_",
                                "select the portion to load"
                            ],
                            [
                                "mlcomp_root",
                                "the filesystem path to the root folder where MLComp datasets"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "data": "Bunch",
                        "are": "",
                        "process": "depending on the type of name_or_id,",
                        "TODO": "implement zip dataset loading too"
                    }
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\datasets\\mldata.py": [
        [
            [
                "mldata_filename",
                [
                    [
                        [
                            [
                                "dataname",
                                "str"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "fname": "str"
                    }
                ]
            ],
            [
                "fetch_mldata",
                [
                    [
                        [
                            [
                                "dataname",
                                "str"
                            ],
                            [
                                "target_name",
                                "optional, default"
                            ],
                            [
                                "data_name",
                                "optional, default"
                            ],
                            [
                                "transpose_data",
                                "optional, default"
                            ],
                            [
                                "data_home",
                                "optional, default"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "data": "Bunch",
                        "are": ""
                    }
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\datasets\\olivetti_faces.py": [
        [
            [
                "fetch_olivetti_faces",
                [
                    [
                        [
                            [
                                "data_home",
                                "optional, default"
                            ],
                            [
                                "shuffle",
                                "boolean, optional"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=0)"
                            ],
                            [
                                "download_if_missing",
                                "optional, True by default"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "attributes": "",
                        "data": "numpy array of shape (400, 4096)",
                        "images": "numpy array of shape (400, 64, 64)",
                        "target": "numpy array of shape (400, )",
                        "DESCR": "string"
                    }
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\datasets\\rcv1.py": [
        [
            [
                "fetch_rcv1",
                [
                    [
                        [
                            [
                                "data_home",
                                "string, optional"
                            ],
                            [
                                "subset",
                                "string, 'train', 'test', or 'all', default='all'"
                            ],
                            [
                                "download_if_missing",
                                "boolean, default=True"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ],
                            [
                                "shuffle",
                                "bool, default=False"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "dataset": "dict-like object with the following attributes"
                    }
                ]
            ],
            [
                "_inverse_permutation",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_find_permutation",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\datasets\\samples_generator.py": [
        [
            [
                "_generate_hypercube",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "make_classification",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int, optional (default=100)"
                            ],
                            [
                                "n_features",
                                "int, optional (default=20)"
                            ],
                            [
                                "n_informative",
                                "int, optional (default=2)"
                            ],
                            [
                                "n_redundant",
                                "int, optional (default=2)"
                            ],
                            [
                                "n_repeated",
                                "int, optional (default=0)"
                            ],
                            [
                                "n_classes",
                                "int, optional (default=2)"
                            ],
                            [
                                "n_clusters_per_class",
                                "int, optional (default=2)"
                            ],
                            [
                                "weights",
                                "list of floats or None (default=None)"
                            ],
                            [
                                "flip_y",
                                "float, optional (default=0.01)"
                            ],
                            [
                                "class_sep",
                                "float, optional (default=1.0)"
                            ],
                            [
                                "hypercube",
                                "boolean, optional (default=True)"
                            ],
                            [
                                "shift",
                                "float, array of shape [n_features] or None, optional (default=0.0)"
                            ],
                            [
                                "scale",
                                "float, array of shape [n_features] or None, optional (default=1.0)"
                            ],
                            [
                                "shuffle",
                                "boolean, optional (default=True)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        15,
                        0
                    ],
                    {
                        "X": "array of shape [n_samples, n_features]",
                        "y": "array of shape [n_samples]"
                    }
                ]
            ],
            [
                "make_multilabel_classification",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int, optional (default=100)"
                            ],
                            [
                                "n_features",
                                "int, optional (default=20)"
                            ],
                            [
                                "n_classes",
                                "int, optional (default=5)"
                            ],
                            [
                                "n_labels",
                                "int, optional (default=2)"
                            ],
                            [
                                "length",
                                "int, optional (default=50)"
                            ],
                            [
                                "allow_unlabeled",
                                "bool, optional (default=True)"
                            ],
                            [
                                "sparse",
                                "bool, optional (default=False)"
                            ],
                            [
                                "return_indicator",
                                "'dense' (default) | 'sparse' | False"
                            ],
                            [
                                "return_distributions",
                                "bool, optional (default=False)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        10,
                        0
                    ],
                    {
                        "X": "array of shape [n_samples, n_features]",
                        "Y": "array or sparse CSR matrix of shape [n_samples, n_classes]",
                        "p_c": "array, shape [n_classes]",
                        "p_w_c": "array, shape [n_features, n_classes]"
                    }
                ]
            ],
            [
                "make_hastie_10_2",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int, optional (default=12000)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "X": "array of shape [n_samples, 10]",
                        "y": "array of shape [n_samples]"
                    }
                ]
            ],
            [
                "make_regression",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int, optional (default=100)"
                            ],
                            [
                                "n_features",
                                "int, optional (default=100)"
                            ],
                            [
                                "n_informative",
                                "int, optional (default=10)"
                            ],
                            [
                                "n_targets",
                                "int, optional (default=1)"
                            ],
                            [
                                "bias",
                                "float, optional (default=0.0)"
                            ],
                            [
                                "effective_rank",
                                "int or None, optional (default=None)"
                            ],
                            [
                                "tail_strength",
                                "float between 0.0 and 1.0, optional (default=0.5)"
                            ],
                            [
                                "noise",
                                "float, optional (default=0.0)"
                            ],
                            [
                                "shuffle",
                                "boolean, optional (default=True)"
                            ],
                            [
                                "coef",
                                "boolean, optional (default=False)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        11,
                        0
                    ],
                    {
                        "X": "array of shape [n_samples, n_features]",
                        "y": "array of shape [n_samples] or [n_samples, n_targets]",
                        "coef": "array of shape [n_features] or [n_features, n_targets], optional"
                    }
                ]
            ],
            [
                "make_circles",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int, optional (default=100)"
                            ],
                            [
                                "shuffle",
                                "bool, optional (default=True)"
                            ],
                            [
                                "noise",
                                "double or None (default=None)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ],
                            [
                                "factor",
                                "double < 1 (default=.8)"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "X": "array of shape [n_samples, 2]",
                        "y": "array of shape [n_samples]"
                    }
                ]
            ],
            [
                "make_moons",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int, optional (default=100)"
                            ],
                            [
                                "shuffle",
                                "bool, optional (default=True)"
                            ],
                            [
                                "noise",
                                "double or None (default=None)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "X": "array of shape [n_samples, 2]",
                        "y": "array of shape [n_samples]"
                    }
                ]
            ],
            [
                "make_blobs",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int, optional (default=100)"
                            ],
                            [
                                "n_features",
                                "int, optional (default=2)"
                            ],
                            [
                                "centers",
                                "int or array of shape [n_centers, n_features], optional"
                            ],
                            [
                                "cluster_std",
                                "float or sequence of floats, optional (default=1.0)"
                            ],
                            [
                                "center_box",
                                "pair of floats (min, max), optional (default=(-10.0, 10.0))"
                            ],
                            [
                                "shuffle",
                                "boolean, optional (default=True)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        7,
                        0
                    ],
                    {
                        "X": "array of shape [n_samples, n_features]",
                        "y": "array of shape [n_samples]"
                    }
                ]
            ],
            [
                "make_friedman1",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int, optional (default=100)"
                            ],
                            [
                                "n_features",
                                "int, optional (default=10)"
                            ],
                            [
                                "noise",
                                "float, optional (default=0.0)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "X": "array of shape [n_samples, n_features]",
                        "y": "array of shape [n_samples]"
                    }
                ]
            ],
            [
                "make_friedman2",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int, optional (default=100)"
                            ],
                            [
                                "noise",
                                "float, optional (default=0.0)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "X": "array of shape [n_samples, 4]",
                        "y": "array of shape [n_samples]"
                    }
                ]
            ],
            [
                "make_friedman3",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int, optional (default=100)"
                            ],
                            [
                                "noise",
                                "float, optional (default=0.0)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "X": "array of shape [n_samples, 4]",
                        "y": "array of shape [n_samples]"
                    }
                ]
            ],
            [
                "make_low_rank_matrix",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int, optional (default=100)"
                            ],
                            [
                                "n_features",
                                "int, optional (default=100)"
                            ],
                            [
                                "effective_rank",
                                "int, optional (default=10)"
                            ],
                            [
                                "tail_strength",
                                "float between 0.0 and 1.0, optional (default=0.5)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "X": "array of shape [n_samples, n_features]"
                    }
                ]
            ],
            [
                "make_sparse_coded_signal",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int"
                            ],
                            [
                                "n_components",
                                "int,"
                            ],
                            [
                                "n_features",
                                "int"
                            ],
                            [
                                "n_nonzero_coefs",
                                "int"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "the": "ref"
                    }
                ]
            ],
            [
                "make_sparse_uncorrelated",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int, optional (default=100)"
                            ],
                            [
                                "n_features",
                                "int, optional (default=10)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "X": "array of shape [n_samples, n_features]",
                        "y": "array of shape [n_samples]"
                    }
                ]
            ],
            [
                "make_spd_matrix",
                [
                    [
                        [
                            [
                                "n_dim",
                                "int"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "X": "array of shape [n_dim, n_dim]"
                    }
                ]
            ],
            [
                "make_sparse_spd_matrix",
                [
                    [
                        [
                            [
                                "dim",
                                "integer, optional (default=1)"
                            ],
                            [
                                "alpha",
                                "float between 0 and 1, optional (default=0.95)"
                            ],
                            [
                                "norm_diag",
                                "boolean, optional (default=False)"
                            ],
                            [
                                "smallest_coef",
                                "float between 0 and 1, optional (default=0.1)"
                            ],
                            [
                                "largest_coef",
                                "float between 0 and 1, optional (default=0.9)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "prec": "sparse matrix of shape (dim, dim)"
                    }
                ]
            ],
            [
                "make_swiss_roll",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int, optional (default=100)"
                            ],
                            [
                                "noise",
                                "float, optional (default=0.0)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "X": "array of shape [n_samples, 3]",
                        "t": "array of shape [n_samples]"
                    }
                ]
            ],
            [
                "make_s_curve",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int, optional (default=100)"
                            ],
                            [
                                "noise",
                                "float, optional (default=0.0)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "X": "array of shape [n_samples, 3]",
                        "t": "array of shape [n_samples]"
                    }
                ]
            ],
            [
                "make_gaussian_quantiles",
                [
                    [
                        [
                            [
                                "mean",
                                "array of shape [n_features], optional (default=None)"
                            ],
                            [
                                "cov",
                                "float, optional (default=1.)"
                            ],
                            [
                                "n_samples",
                                "int, optional (default=100)"
                            ],
                            [
                                "n_features",
                                "int, optional (default=2)"
                            ],
                            [
                                "n_classes",
                                "int, optional (default=3)"
                            ],
                            [
                                "shuffle",
                                "boolean, optional (default=True)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        7,
                        0
                    ],
                    {
                        "X": "array of shape [n_samples, n_features]",
                        "y": "array of shape [n_samples]"
                    }
                ]
            ],
            [
                "make_biclusters",
                [
                    [
                        [
                            [
                                "shape",
                                "iterable (n_rows, n_cols)"
                            ],
                            [
                                "n_clusters",
                                "integer"
                            ],
                            [
                                "noise",
                                "float, optional (default=0.0)"
                            ],
                            [
                                "minval",
                                "int, optional (default=10)"
                            ],
                            [
                                "maxval",
                                "int, optional (default=100)"
                            ],
                            [
                                "shuffle",
                                "boolean, optional (default=True)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        7,
                        0
                    ],
                    {
                        "X": "array of shape `shape`",
                        "rows": "array of shape (n_clusters, X.shape[0],)",
                        "cols": "array of shape (n_clusters, X.shape[1],)"
                    }
                ]
            ],
            [
                "make_checkerboard",
                [
                    [
                        [
                            [
                                "shape",
                                "iterable (n_rows, n_cols)"
                            ],
                            [
                                "n_clusters",
                                "integer or iterable (n_row_clusters, n_column_clusters)"
                            ],
                            [
                                "noise",
                                "float, optional (default=0.0)"
                            ],
                            [
                                "minval",
                                "int, optional (default=10)"
                            ],
                            [
                                "maxval",
                                "int, optional (default=100)"
                            ],
                            [
                                "shuffle",
                                "boolean, optional (default=True)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        7,
                        0
                    ],
                    {
                        "X": "array of shape `shape`",
                        "rows": "array of shape (n_clusters, X.shape[0],)",
                        "cols": "array of shape (n_clusters, X.shape[1],)"
                    }
                ]
            ]
        ],
        22
    ],
    "../scikit-learn-master/sklearn\\datasets\\setup.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\datasets\\species_distributions.py": [
        [
            [
                "_load_coverage",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_load_csv",
                [
                    [
                        [
                            [
                                "F",
                                "file object"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "rec": "np.ndarray"
                    }
                ]
            ],
            [
                "construct_grids",
                [
                    [
                        [
                            [
                                "batch",
                                "Batch object"
                            ]
                        ],
                        1,
                        0
                    ],
                    {}
                ]
            ],
            [
                "fetch_species_distributions",
                [
                    [
                        [
                            [
                                "data_home",
                                "optional, default"
                            ],
                            [
                                "download_if_missing",
                                "optional, True by default"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "attributes": "",
                        "coverages": "array, shape = [14, 1592, 1212]",
                        "train": "record array, shape = (1623,)",
                        "fields": "",
                        "test": "record array, shape = (619,)",
                        "Ny": "integers",
                        "y_left_lower_corner": "floats",
                        "grid_size": "float"
                    }
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\datasets\\svmlight_format.py": [
        [
            [
                "load_svmlight_file",
                [
                    [
                        [
                            [
                                "f",
                                "{str, file-like, int}"
                            ],
                            [
                                "n_features",
                                "int or None"
                            ],
                            [
                                "dtype",
                                "numpy data type, default np.float64"
                            ],
                            [
                                "multilabel",
                                "boolean, optional, default False"
                            ],
                            [
                                "zero_based",
                                "boolean or \"auto\", optional, default \"auto\""
                            ],
                            [
                                "query_id",
                                "boolean, default False"
                            ],
                            [
                                "offset",
                                "integer, optional, default 0"
                            ],
                            [
                                "length",
                                "integer, optional, default -1"
                            ]
                        ],
                        8,
                        0
                    ],
                    {
                        "X": "scipy.sparse matrix of shape (n_samples, n_features)",
                        "y": "ndarray of shape (n_samples,), or, in the multilabel a list of",
                        "query_id": "array of shape (n_samples,)"
                    }
                ]
            ],
            [
                "load_svmlight_files",
                [
                    [
                        [
                            [
                                "files",
                                "iterable over {str, file-like, int}"
                            ],
                            [
                                "n_features",
                                "int or None"
                            ],
                            [
                                "dtype",
                                "numpy data type, default np.float64"
                            ],
                            [
                                "multilabel",
                                "boolean, optional"
                            ],
                            [
                                "zero_based",
                                "boolean or \"auto\", optional"
                            ],
                            [
                                "query_id",
                                "boolean, defaults to False"
                            ],
                            [
                                "offset",
                                "integer, optional, default 0"
                            ],
                            [
                                "length",
                                "integer, optional, default -1"
                            ]
                        ],
                        8,
                        0
                    ],
                    {}
                ]
            ],
            [
                "dump_svmlight_file",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ],
                            [
                                "y",
                                "{array-like, sparse matrix}, shape = [n_samples (, n_labels)]"
                            ],
                            [
                                "f",
                                "string or file-like in binary mode"
                            ],
                            [
                                "zero_based",
                                "boolean, optional"
                            ],
                            [
                                "comment",
                                "string, optional"
                            ],
                            [
                                "query_id",
                                "array-like, shape = [n_samples]"
                            ],
                            [
                                "multilabel",
                                "boolean, optional"
                            ]
                        ],
                        7,
                        0
                    ],
                    null
                ]
            ]
        ],
        6
    ],
    "../scikit-learn-master/sklearn\\datasets\\twenty_newsgroups.py": [
        [
            [
                "download_20newsgroups",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "strip_newsgroup_header",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "strip_newsgroup_quoting",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "strip_newsgroup_footer",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "fetch_20newsgroups",
                [
                    [
                        [
                            [
                                "data_home",
                                "optional, default"
                            ],
                            [
                                "subset",
                                "'train' or 'test', 'all', optional"
                            ],
                            [
                                "categories",
                                "None or collection of string or unicode"
                            ],
                            [
                                "shuffle",
                                "bool, optional"
                            ],
                            [
                                "random_state",
                                "numpy random number generator or seed integer"
                            ],
                            [
                                "remove",
                                "tuple"
                            ],
                            [
                                "download_if_missing",
                                "optional, True by default"
                            ]
                        ],
                        7,
                        0
                    ],
                    null
                ]
            ],
            [
                "fetch_20newsgroups_vectorized",
                [
                    [
                        [
                            [
                                "subset",
                                "'train' or 'test', 'all', optional"
                            ],
                            [
                                "remove",
                                "tuple"
                            ],
                            [
                                "data_home",
                                "optional, default"
                            ],
                            [
                                "download_if_missing",
                                "optional, True by default"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "bunch": "Bunch object"
                    }
                ]
            ]
        ],
        6
    ],
    "../scikit-learn-master/sklearn\\datasets\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_20news.py": [
        [
            [
                "test_20news_length_consistency",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_base.py": [
        [
            [
                "teardown_module",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        23
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_covtype.py": [
        [],
        2
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_kddcup99.py": [
        [],
        2
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_lfw.py": [
        [
            [
                "setup_module",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "teardown_module",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        7
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_mldata.py": [
        [
            [
                "test_download",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        6
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_rcv1.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_samples_generator.py": [
        [
            [
                "test_make_classification_informative_features",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        21
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_svmlight_format.py": [
        [],
        25
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\decomposition\\base.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\decomposition\\dict_learning.py": [
        [
            [
                "_sparse_encode",
                [
                    [
                        [
                            [
                                "X",
                                "array of shape (n_samples, n_features)"
                            ],
                            [
                                "dictionary",
                                "array of shape (n_components, n_features)"
                            ],
                            [
                                "gram",
                                "None | array, shape=(n_components, n_components)"
                            ],
                            [
                                "cov",
                                "array, shape=(n_components, n_samples)"
                            ],
                            [
                                "algorithm",
                                "{'lasso_lars', 'lasso_cd', 'lars', 'omp', 'threshold'}"
                            ],
                            [
                                "regularization",
                                "int | float"
                            ],
                            [
                                "copy_cov",
                                "boolean, optional"
                            ],
                            [
                                "init",
                                "array of shape (n_samples, n_components)"
                            ],
                            [
                                "max_iter",
                                "int, 1000 by default"
                            ],
                            [
                                "check_input",
                                "boolean, optional"
                            ],
                            [
                                "verbose",
                                "int"
                            ]
                        ],
                        11,
                        0
                    ],
                    {
                        "code": "array of shape (n_components, n_features)"
                    }
                ]
            ],
            [
                "sparse_encode",
                [
                    [
                        [
                            [
                                "X",
                                "array of shape (n_samples, n_features)"
                            ],
                            [
                                "dictionary",
                                "array of shape (n_components, n_features)"
                            ],
                            [
                                "gram",
                                "array, shape=(n_components, n_components)"
                            ],
                            [
                                "cov",
                                "array, shape=(n_components, n_samples)"
                            ],
                            [
                                "algorithm",
                                "{'lasso_lars', 'lasso_cd', 'lars', 'omp', 'threshold'}"
                            ],
                            [
                                "n_nonzero_coefs",
                                "int, 0.1 * n_features by default"
                            ],
                            [
                                "alpha",
                                "float, 1. by default"
                            ],
                            [
                                "copy_cov",
                                "boolean, optional"
                            ],
                            [
                                "init",
                                "array of shape (n_samples, n_components)"
                            ],
                            [
                                "max_iter",
                                "int, 1000 by default"
                            ],
                            [
                                "n_jobs",
                                "int, optional"
                            ],
                            [
                                "check_input",
                                "boolean, optional"
                            ],
                            [
                                "verbose",
                                "int, optional"
                            ]
                        ],
                        13,
                        0
                    ],
                    {
                        "code": "array of shape (n_samples, n_components)"
                    }
                ]
            ],
            [
                "_update_dict",
                [
                    [
                        [
                            [
                                "dictionary",
                                "array of shape (n_features, n_components)"
                            ],
                            [
                                "Y",
                                "array of shape (n_features, n_samples)"
                            ],
                            [
                                "code",
                                "array of shape (n_components, n_samples)"
                            ],
                            [
                                "verbose",
                                ""
                            ],
                            [
                                "return_r2",
                                "bool"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "dictionary": "array of shape (n_features, n_components)"
                    }
                ]
            ],
            [
                "dict_learning",
                [
                    [
                        [
                            [
                                "X",
                                "array of shape (n_samples, n_features)"
                            ],
                            [
                                "n_components",
                                "int,"
                            ],
                            [
                                "alpha",
                                "int,"
                            ],
                            [
                                "max_iter",
                                "int,"
                            ],
                            [
                                "tol",
                                "float,"
                            ],
                            [
                                "method",
                                "{'lars', 'cd'}"
                            ],
                            [
                                "n_jobs",
                                "int,"
                            ],
                            [
                                "dict_init",
                                "array of shape (n_components, n_features),"
                            ],
                            [
                                "code_init",
                                "array of shape (n_samples, n_components),"
                            ],
                            [
                                "callback",
                                "callable or None, optional (default"
                            ],
                            [
                                "verbose",
                                "bool, optional (default"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ],
                            [
                                "return_n_iter",
                                "bool"
                            ]
                        ],
                        13,
                        0
                    ],
                    {
                        "code": "array of shape (n_samples, n_components)",
                        "dictionary": "array of shape (n_components, n_features),",
                        "errors": "array",
                        "n_iter": "int"
                    }
                ]
            ],
            [
                "dict_learning_online",
                [
                    [
                        [
                            [
                                "X",
                                "array of shape (n_samples, n_features)"
                            ],
                            [
                                "n_components",
                                "int,"
                            ],
                            [
                                "alpha",
                                "float,"
                            ],
                            [
                                "n_iter",
                                "int,"
                            ],
                            [
                                "return_code",
                                "boolean,"
                            ],
                            [
                                "dict_init",
                                "array of shape (n_components, n_features),"
                            ],
                            [
                                "callback",
                                "callable or None, optional (default"
                            ],
                            [
                                "batch_size",
                                "int,"
                            ],
                            [
                                "verbose",
                                "bool, optional (default"
                            ],
                            [
                                "shuffle",
                                "boolean,"
                            ],
                            [
                                "n_jobs",
                                "int,"
                            ],
                            [
                                "method",
                                "{'lars', 'cd'}"
                            ],
                            [
                                "iter_offset",
                                "int, default 0"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ],
                            [
                                "return_inner_stats",
                                "boolean, optional"
                            ],
                            [
                                "inner_stats",
                                "tuple of (A, B) ndarrays"
                            ],
                            [
                                "return_n_iter",
                                "bool"
                            ]
                        ],
                        17,
                        0
                    ],
                    {
                        "code": "array of shape (n_samples, n_components),",
                        "dictionary": "array of shape (n_components, n_features),",
                        "n_iter": "int"
                    }
                ]
            ]
        ],
        5
    ],
    "../scikit-learn-master/sklearn\\decomposition\\factor_analysis.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\decomposition\\fastica_.py": [
        [
            [
                "_gs_decorrelation",
                [
                    [
                        [
                            [
                                "w",
                                "ndarray of shape(n)"
                            ],
                            [
                                "W",
                                "ndarray of shape(p, n)"
                            ],
                            [
                                "j",
                                "int < p"
                            ]
                        ],
                        3,
                        0
                    ],
                    null
                ]
            ],
            [
                "_sym_decorrelation",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_ica_def",
                [
                    [
                        [],
                        6,
                        6
                    ],
                    null
                ]
            ],
            [
                "_ica_par",
                [
                    [
                        [],
                        6,
                        6
                    ],
                    null
                ]
            ],
            [
                "fastica",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "n_components",
                                "int, optional"
                            ],
                            [
                                "algorithm",
                                "{'parallel', 'deflation'}, optional"
                            ],
                            [
                                "whiten",
                                "boolean, optional"
                            ],
                            [
                                "fun",
                                "string or function, optional. Default"
                            ],
                            [
                                "fun_args",
                                "dictionary, optional"
                            ],
                            [
                                "max_iter",
                                "int, optional"
                            ],
                            [
                                "tol",
                                "float, optional"
                            ],
                            [
                                "w_init",
                                "(n_components, n_components) array, optional"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ],
                            [
                                "return_X_mean",
                                "bool, optional"
                            ],
                            [
                                "compute_sources",
                                "bool, optional"
                            ],
                            [
                                "return_n_iter",
                                "bool, optional"
                            ]
                        ],
                        13,
                        0
                    ],
                    {
                        "K": "array, shape (n_components, n_features) | None.",
                        "W": "array, shape (n_components, n_components)",
                        "by": "",
                        "S": "array, shape (n_samples, n_components) | None",
                        "X_mean": "array, shape (n_features, )",
                        "n_iter": "int"
                    }
                ]
            ]
        ],
        8
    ],
    "../scikit-learn-master/sklearn\\decomposition\\incremental_pca.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\decomposition\\kernel_pca.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\decomposition\\nmf.py": [
        [
            [
                "norm",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "trace_dot",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_beta_divergence",
                [
                    [
                        [
                            [
                                "X",
                                "float or array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "W",
                                "float or dense array-like, shape (n_samples, n_components)"
                            ],
                            [
                                "H",
                                "float or dense array-like, shape (n_components, n_features)"
                            ],
                            [
                                "beta",
                                "float, string in {'frobenius', 'kullback-leibler', 'itakura-saito'}"
                            ],
                            [
                                "square_root",
                                "boolean, default False"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "res": "float"
                    }
                ]
            ],
            [
                "_special_sparse_dot",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_compute_regularization",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_beta_loss_to_float",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_initialize_nmf",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "n_components",
                                "integer"
                            ],
                            [
                                "init",
                                "None | 'random' | 'nndsvd' | 'nndsvda' | 'nndsvdar'"
                            ],
                            [
                                "eps",
                                "float"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "W": "array-like, shape (n_samples, n_components)",
                        "H": "array-like, shape (n_components, n_features)"
                    }
                ]
            ],
            [
                "_update_coordinate_descent",
                [
                    [
                        [],
                        7,
                        7
                    ],
                    null
                ]
            ],
            [
                "_fit_coordinate_descent",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "W",
                                "array-like, shape (n_samples, n_components)"
                            ],
                            [
                                "H",
                                "array-like, shape (n_components, n_features)"
                            ],
                            [
                                "tol",
                                "float, default"
                            ],
                            [
                                "max_iter",
                                "integer, default"
                            ],
                            [
                                "l1_reg_W",
                                "double, default"
                            ],
                            [
                                "l1_reg_H",
                                "double, default"
                            ],
                            [
                                "l2_reg_W",
                                "double, default"
                            ],
                            [
                                "l2_reg_H",
                                "double, default"
                            ],
                            [
                                "update_H",
                                "boolean, default"
                            ],
                            [
                                "verbose",
                                "integer, default"
                            ],
                            [
                                "shuffle",
                                "boolean, default"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default"
                            ]
                        ],
                        13,
                        0
                    ],
                    {
                        "W": "array-like, shape (n_samples, n_components)",
                        "H": "array-like, shape (n_components, n_features)",
                        "n_iter": "int"
                    }
                ]
            ],
            [
                "_multiplicative_update_w",
                [
                    [
                        [],
                        11,
                        11
                    ],
                    null
                ]
            ],
            [
                "_multiplicative_update_h",
                [
                    [
                        [],
                        7,
                        7
                    ],
                    null
                ]
            ],
            [
                "_fit_multiplicative_update",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "W",
                                "array-like, shape (n_samples, n_components)"
                            ],
                            [
                                "H",
                                "array-like, shape (n_components, n_features)"
                            ],
                            [
                                "beta_loss",
                                "float or string, default 'frobenius'"
                            ],
                            [
                                "max_iter",
                                "integer, default"
                            ],
                            [
                                "tol",
                                "float, default"
                            ],
                            [
                                "l1_reg_W",
                                "double, default"
                            ],
                            [
                                "l1_reg_H",
                                "double, default"
                            ],
                            [
                                "l2_reg_W",
                                "double, default"
                            ],
                            [
                                "l2_reg_H",
                                "double, default"
                            ],
                            [
                                "update_H",
                                "boolean, default"
                            ],
                            [
                                "verbose",
                                "integer, default"
                            ]
                        ],
                        12,
                        0
                    ],
                    {
                        "W": "array, shape (n_samples, n_components)",
                        "H": "array, shape (n_components, n_features)",
                        "n_iter": "int"
                    }
                ]
            ],
            [
                "non_negative_factorization",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "W",
                                "array-like, shape (n_samples, n_components)"
                            ],
                            [
                                "H",
                                "array-like, shape (n_components, n_features)"
                            ],
                            [
                                "n_components",
                                "integer"
                            ],
                            [
                                "init",
                                "None | 'random' | 'nndsvd' | 'nndsvda' | 'nndsvdar' | 'custom'"
                            ],
                            [
                                "update_H",
                                "boolean, default"
                            ],
                            [
                                "solver",
                                "'cd' | 'mu'"
                            ],
                            [
                                "beta_loss",
                                "float or string, default 'frobenius'"
                            ],
                            [
                                "tol",
                                "float, default"
                            ],
                            [
                                "max_iter",
                                "integer, default"
                            ],
                            [
                                "alpha",
                                "double, default"
                            ],
                            [
                                "l1_ratio",
                                "double, default"
                            ],
                            [
                                "regularization",
                                "'both' | 'components' | 'transformation' | None"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default"
                            ],
                            [
                                "verbose",
                                "integer, default"
                            ],
                            [
                                "shuffle",
                                "boolean, default"
                            ]
                        ],
                        16,
                        0
                    ],
                    {
                        "W": "array-like, shape (n_samples, n_components)",
                        "H": "array-like, shape (n_components, n_features)",
                        "n_iter": "int"
                    }
                ]
            ]
        ],
        15
    ],
    "../scikit-learn-master/sklearn\\decomposition\\online_lda.py": [
        [
            [
                "_update_doc_distribution",
                [
                    [
                        [
                            [
                                "X",
                                "array-like or sparse matrix, shape=(n_samples, n_features)"
                            ],
                            [
                                "exp_topic_word_distr",
                                "dense matrix, shape=(n_topics, n_features)"
                            ],
                            [
                                "doc_topic_prior",
                                "float"
                            ],
                            [
                                "max_iters",
                                "int"
                            ],
                            [
                                "mean_change_tol",
                                "float"
                            ],
                            [
                                "cal_sstats",
                                "boolean"
                            ],
                            [
                                "random_state",
                                "RandomState instance or None"
                            ]
                        ],
                        7,
                        0
                    ],
                    {}
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\decomposition\\pca.py": [
        [
            [
                "_assess_dimension_",
                [
                    [
                        [
                            [
                                "spectrum",
                                "array of shape (n)"
                            ],
                            [
                                "rank",
                                "int"
                            ],
                            [
                                "n_samples",
                                "int"
                            ],
                            [
                                "n_features",
                                "int"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "ll": "float,"
                    }
                ]
            ],
            [
                "_infer_dimension_",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\decomposition\\setup.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\decomposition\\sparse_pca.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\decomposition\\truncated_svd.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\decomposition\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_dict_learning.py": [
        [],
        21
    ],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_factor_analysis.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_fastica.py": [
        [
            [
                "center_and_norm",
                [
                    [
                        [
                            [
                                "x",
                                "ndarray"
                            ],
                            [
                                "axis",
                                "int, optional"
                            ]
                        ],
                        2,
                        0
                    ],
                    null
                ]
            ]
        ],
        7
    ],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_incremental_pca.py": [
        [],
        16
    ],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_kernel_pca.py": [
        [],
        12
    ],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_nmf.py": [
        [
            [
                "_beta_divergence_dense",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ]
        ],
        21
    ],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_online_lda.py": [
        [
            [
                "test_lda_empty_docs",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_dirichlet_expectation",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        27
    ],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_pca.py": [
        [],
        31
    ],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_sparse_pca.py": [
        [],
        9
    ],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_truncated_svd.py": [
        [],
        8
    ],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\ensemble\\bagging.py": [
        [
            [
                "_generate_indices",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "_generate_bagging_indices",
                [
                    [
                        [],
                        7,
                        7
                    ],
                    null
                ]
            ],
            [
                "_parallel_build_estimators",
                [
                    [
                        [],
                        8,
                        8
                    ],
                    null
                ]
            ],
            [
                "_parallel_predict_proba",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "_parallel_predict_log_proba",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "_parallel_decision_function",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_parallel_predict_regression",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ]
        ],
        7
    ],
    "../scikit-learn-master/sklearn\\ensemble\\base.py": [
        [
            [
                "_set_random_states",
                [
                    [
                        [
                            [
                                "estimator",
                                "estimator supporting get/set_params"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        2,
                        0
                    ],
                    null
                ]
            ],
            [
                "_partition_estimators",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\ensemble\\forest.py": [
        [
            [
                "_generate_sample_indices",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_generate_unsampled_indices",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_parallel_build_trees",
                [
                    [
                        [],
                        9,
                        9
                    ],
                    null
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\ensemble\\gradient_boosting.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\ensemble\\iforest.py": [
        [
            [
                "_average_path_length",
                [
                    [
                        [
                            [
                                "n_samples_leaf",
                                "array-like of shape (n_samples, n_estimators), or int."
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "average_path_length": "array, same shape as n_samples_leaf"
                    }
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\ensemble\\partial_dependence.py": [
        [
            [
                "_grid_from_X",
                [
                    [
                        [
                            [
                                "X",
                                "ndarray"
                            ],
                            [
                                "percentiles",
                                "tuple of floats"
                            ],
                            [
                                "grid_resolution",
                                "int"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "grid": "ndarray",
                        "axes": "seq of ndarray"
                    }
                ]
            ],
            [
                "partial_dependence",
                [
                    [
                        [
                            [
                                "gbrt",
                                "BaseGradientBoosting"
                            ],
                            [
                                "target_variables",
                                "array-like, dtype=int"
                            ],
                            [
                                "grid",
                                "array-like, shape=(n_points, len(target_variables))"
                            ],
                            [
                                "X",
                                "array-like, shape=(n_samples, n_features)"
                            ],
                            [
                                "percentiles",
                                "(low, high), default=(0.05, 0.95)"
                            ],
                            [
                                "grid_resolution",
                                "int, default=100"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "pdp": "array, shape=(n_classes, n_points)",
                        "axes": "seq of ndarray or None"
                    }
                ]
            ],
            [
                "plot_partial_dependence",
                [
                    [
                        [
                            [
                                "gbrt",
                                "BaseGradientBoosting"
                            ],
                            [
                                "X",
                                "array-like, shape=(n_samples, n_features)"
                            ],
                            [
                                "features",
                                "seq of ints, strings, or tuples of ints or strings"
                            ],
                            [
                                "feature_names",
                                "seq of str"
                            ],
                            [
                                "label",
                                "object"
                            ],
                            [
                                "n_cols",
                                "int"
                            ],
                            [
                                "grid_resolution",
                                "int, default=100"
                            ],
                            [
                                "percentiles",
                                "(low, high), default=(0.05, 0.95)"
                            ],
                            [
                                "n_jobs",
                                "int"
                            ],
                            [
                                "verbose",
                                "int"
                            ],
                            [
                                "ax",
                                "Matplotlib axis object, default None"
                            ],
                            [
                                "line_kw",
                                "dict"
                            ],
                            [
                                "contour_kw",
                                "dict"
                            ]
                        ],
                        13,
                        0
                    ],
                    {
                        "fig": "figure",
                        "axs": "seq of Axis objects"
                    }
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\ensemble\\setup.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\ensemble\\voting_classifier.py": [
        [
            [
                "_parallel_fit_estimator",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\ensemble\\weight_boosting.py": [
        [
            [
                "_samme_proba",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\ensemble\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_bagging.py": [
        [],
        27
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_base.py": [
        [],
        4
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_forest.py": [
        [
            [
                "check_classification_toy",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "check_parallel",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ]
        ],
        70
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_gradient_boosting.py": [
        [
            [
                "early_stopping_monitor",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ]
        ],
        59
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_gradient_boosting_loss_functions.py": [
        [],
        9
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_iforest.py": [
        [
            [
                "test_iforest",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_iforest_sparse",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_iforest_error",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_recalculate_max_depth",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_iforest_parallel_regression",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_iforest_performance",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        11
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_partial_dependence.py": [
        [],
        7
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_voting_classifier.py": [
        [
            [
                "test_majority_label_iris",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_tie_situation",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_weights_iris",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_predict_on_toy_problem",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_predict_proba_on_toy_problem",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_multilabel",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_gridsearch",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_parallel_fit",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_sample_weight",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_sample_weight_kwargs",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_set_params",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_set_estimator_none",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_transform",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        17
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_weight_boosting.py": [
        [
            [
                "test_sample_weight_adaboost_regressor",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        16
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\externals\\funcsigs.py": [
        [
            [
                "signature",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\externals\\setup.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\externals\\six.py": [
        [
            [
                "_add_doc",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_import_module",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "add_move",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "remove_move",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "iterkeys",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "itervalues",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "iteritems",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "iterlists",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "with_metaclass",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "add_metaclass",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        10
    ],
    "../scikit-learn-master/sklearn\\externals\\test_externals_setup.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\externals\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\backports.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\disk.py": [
        [
            [
                "disk_used",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "memstr_to_bytes",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "mkdirp",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "rm_subdirs",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\format_stack.py": [
        [
            [
                "safe_repr",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "uniq_stable",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "fix_frame_records_filenames",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "format_exc",
                [
                    [
                        [
                            [
                                "etb",
                                "as returned by sys.exc_info"
                            ],
                            [
                                "context",
                                "number of lines of the source file to plot"
                            ],
                            [
                                "tb_offset",
                                "the number of stack frame not to use (0 = use all)"
                            ]
                        ],
                        5,
                        2
                    ],
                    null
                ]
            ]
        ],
        9
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\func_inspect.py": [
        [
            [
                "get_func_code",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    {
                        "func_code": "string",
                        "source_file": "string",
                        "first_line": "int"
                    }
                ]
            ],
            [
                "_clean_win_chars",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "get_func_name",
                [
                    [
                        [
                            [
                                "func",
                                "callable"
                            ],
                            [
                                "resolv_alias",
                                "boolean, optional"
                            ],
                            [
                                "win_characters",
                                "boolean, optional"
                            ]
                        ],
                        3,
                        0
                    ],
                    null
                ]
            ],
            [
                "getfullargspec",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_signature_str",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_function_called_str",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "filter_args",
                [
                    [
                        [
                            [
                                "func",
                                "callable"
                            ],
                            [
                                "ignore_lst",
                                "list of strings"
                            ]
                        ],
                        4,
                        2
                    ],
                    {
                        "filtered_args": "list"
                    }
                ]
            ],
            [
                "format_call",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ]
        ],
        10
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\hashing.py": [
        [
            [
                "hash",
                [
                    [
                        [
                            [
                                "hash_name",
                                "'md5' or 'sha1'"
                            ],
                            [
                                "coerce_mmap",
                                "boolean"
                            ]
                        ],
                        3,
                        1
                    ],
                    null
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\logger.py": [
        [
            [
                "_squeeze_time",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\memory.py": [
        [
            [
                "extract_first_line",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_get_func_fullname",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_cache_key_to_dir",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_load_output",
                [
                    [
                        [],
                        6,
                        6
                    ],
                    null
                ]
            ],
            [
                "_get_cache_items",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_get_cache_items_to_delete",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "concurrency_safe_write",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ]
        ],
        7
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\my_exceptions.py": [
        [],
        2
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\numpy_pickle.py": [
        [
            [
                "dump",
                [
                    [
                        [
                            [
                                "value",
                                "any Python object"
                            ],
                            [
                                "filename",
                                "str or pathlib.Path"
                            ],
                            [
                                "compress",
                                "int from 0 to 9 or bool or 2-tuple, optional"
                            ],
                            [
                                "protocol",
                                "positive int"
                            ],
                            [
                                "cache_size",
                                "positive int, optional"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "filenames": "list of strings"
                    }
                ]
            ],
            [
                "_unpickle",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "load",
                [
                    [
                        [
                            [
                                "filename",
                                "str or pathlib.Path"
                            ],
                            [
                                "mmap_mode",
                                "{None, 'r+', 'r', 'w+', 'c'}, optional"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "result": "any Python object"
                    }
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\numpy_pickle_compat.py": [
        [
            [
                "hex_str",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "read_zfile",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "write_zfile",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "load_compatibility",
                [
                    [
                        [
                            [
                                "filename",
                                "string"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "result": "any Python object"
                    }
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\numpy_pickle_utils.py": [
        [
            [
                "_is_raw_file",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_detect_compressor",
                [
                    [
                        [
                            [
                                "fileobj",
                                "file object"
                            ]
                        ],
                        1,
                        0
                    ],
                    {}
                ]
            ],
            [
                "_buffered_read_file",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_buffered_write_file",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_read_fileobject",
                [
                    [
                        [
                            [
                                "fileobj",
                                "file object"
                            ],
                            [
                                "filename",
                                "str"
                            ],
                            [
                                "mmap_mode",
                                "str"
                            ]
                        ],
                        3,
                        0
                    ],
                    {}
                ]
            ],
            [
                "_write_fileobject",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_read_bytes",
                [
                    [
                        [
                            [
                                "fp",
                                "file-like object"
                            ],
                            [
                                "size",
                                "int"
                            ],
                            [
                                "error_template",
                                "str"
                            ]
                        ],
                        3,
                        0
                    ],
                    {}
                ]
            ]
        ],
        7
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\parallel.py": [
        [
            [
                "get_active_backend",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "parallel_backend",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "cpu_count",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "_verbosity_filter",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "delayed",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "register_parallel_backend",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "effective_n_jobs",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        7
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\pool.py": [
        [
            [
                "_get_backing_memmap",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "has_shareable_memory",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_strided_from_memmap",
                [
                    [
                        [],
                        8,
                        8
                    ],
                    null
                ]
            ],
            [
                "_reduce_memmap_backed",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "reduce_memmap",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "delete_folder",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        6
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\_compat.py": [
        [
            [
                "with_metaclass",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\_memory_helpers.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\_multiprocessing_helpers.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\_parallel_backends.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\dict_vectorizer.py": [
        [
            [
                "_tosequence",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\hashing.py": [
        [
            [
                "_iteritems",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\image.py": [
        [
            [
                "_make_edges_3d",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_mask_edges_weights",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_to_graph",
                [
                    [
                        [],
                        7,
                        7
                    ],
                    null
                ]
            ],
            [
                "img_to_graph",
                [
                    [
                        [
                            [
                                "img",
                                "ndarray, 2D or 3D"
                            ],
                            [
                                "mask",
                                "ndarray of booleans, optional"
                            ],
                            [
                                "return_as",
                                "np.ndarray or a sparse matrix class, optional"
                            ],
                            [
                                "dtype",
                                "None or dtype, optional"
                            ]
                        ],
                        4,
                        0
                    ],
                    null
                ]
            ],
            [
                "grid_to_graph",
                [
                    [
                        [
                            [
                                "n_x",
                                "int"
                            ],
                            [
                                "n_y",
                                "int"
                            ],
                            [
                                "n_z",
                                "int, optional, default 1"
                            ],
                            [
                                "mask",
                                "ndarray of booleans, optional"
                            ],
                            [
                                "return_as",
                                "np.ndarray or a sparse matrix class, optional"
                            ],
                            [
                                "dtype",
                                "dtype, optional, default int"
                            ]
                        ],
                        6,
                        0
                    ],
                    null
                ]
            ],
            [
                "_compute_n_patches",
                [
                    [
                        [
                            [
                                "i_h",
                                "int"
                            ],
                            [
                                "i_w",
                                "int"
                            ],
                            [
                                "p_h",
                                "int"
                            ],
                            [
                                "p_w",
                                "int"
                            ],
                            [
                                "max_patches",
                                "integer or float, optional default is None"
                            ]
                        ],
                        5,
                        0
                    ],
                    null
                ]
            ],
            [
                "extract_patches",
                [
                    [
                        [
                            [
                                "arr",
                                "ndarray"
                            ],
                            [
                                "patch_shape",
                                "integer or tuple of length arr.ndim"
                            ],
                            [
                                "extraction_step",
                                "integer or tuple of length arr.ndim"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "patches": ""
                    }
                ]
            ],
            [
                "extract_patches_2d",
                [
                    [
                        [
                            [
                                "image",
                                "array, shape = (image_height, image_width) or"
                            ],
                            [
                                "patch_size",
                                "tuple of ints (patch_height, patch_width)"
                            ],
                            [
                                "max_patches",
                                "integer or float, optional default is None"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "patches": "array, shape = (n_patches, patch_height, patch_width) or"
                    }
                ]
            ],
            [
                "reconstruct_from_patches_2d",
                [
                    [
                        [
                            [
                                "patches",
                                "array, shape = (n_patches, patch_height, patch_width) or"
                            ],
                            [
                                "image_size",
                                "tuple of ints (image_height, image_width) or"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "image": "array, shape = image_size"
                    }
                ]
            ]
        ],
        10
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\setup.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\stop_words.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\text.py": [
        [
            [
                "strip_accents_unicode",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "strip_accents_ascii",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "strip_tags",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_document_frequency",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_make_int_array",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        6
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\tests\\test_dict_vectorizer.py": [
        [],
        5
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\tests\\test_feature_hasher.py": [
        [],
        11
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\tests\\test_image.py": [
        [],
        21
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\tests\\test_text.py": [
        [],
        49
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\base.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\from_model.py": [
        [
            [
                "_get_feature_importances",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_calculate_threshold",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\mutual_info_.py": [
        [
            [
                "_compute_mi_cc",
                [
                    [
                        [
                            [
                                "y",
                                "ndarray, shape (n_samples,)"
                            ],
                            [
                                "n_neighbors",
                                "int"
                            ]
                        ],
                        3,
                        1
                    ],
                    {
                        "mi": "float"
                    }
                ]
            ],
            [
                "_compute_mi_cd",
                [
                    [
                        [
                            [
                                "c",
                                "ndarray, shape (n_samples,)"
                            ],
                            [
                                "d",
                                "ndarray, shape (n_samples,)"
                            ],
                            [
                                "n_neighbors",
                                "int"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "mi": "float"
                    }
                ]
            ],
            [
                "_compute_mi",
                [
                    [
                        [],
                        5,
                        5
                    ],
                    null
                ]
            ],
            [
                "_iterate_columns",
                [
                    [
                        [
                            [
                                "X",
                                "ndarray or csc_matrix, shape (n_samples, n_features)"
                            ],
                            [
                                "columns",
                                "iterable or None, default None"
                            ]
                        ],
                        2,
                        0
                    ],
                    null
                ]
            ],
            [
                "_estimate_mi",
                [
                    [
                        [
                            [
                                "X",
                                "array_like or sparse matrix, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "array_like, shape (n_samples,)"
                            ],
                            [
                                "discrete_features",
                                "{'auto', bool, array_like}, default 'auto'"
                            ],
                            [
                                "discrete_target",
                                "bool, default False"
                            ],
                            [
                                "n_neighbors",
                                "int, default 3"
                            ],
                            [
                                "copy",
                                "bool, default True"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default None"
                            ]
                        ],
                        7,
                        0
                    ],
                    {
                        "mi": "ndarray, shape (n_features,)"
                    }
                ]
            ],
            [
                "mutual_info_regression",
                [
                    [
                        [
                            [
                                "X",
                                "array_like or sparse matrix, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "array_like, shape (n_samples,)"
                            ],
                            [
                                "discrete_features",
                                "{'auto', bool, array_like}, default 'auto'"
                            ],
                            [
                                "n_neighbors",
                                "int, default 3"
                            ],
                            [
                                "copy",
                                "bool, default True"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default None"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "mi": "ndarray, shape (n_features,)"
                    }
                ]
            ],
            [
                "mutual_info_classif",
                [
                    [
                        [
                            [
                                "X",
                                "array_like or sparse matrix, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "array_like, shape (n_samples,)"
                            ],
                            [
                                "discrete_features",
                                "{'auto', bool, array_like}, default 'auto'"
                            ],
                            [
                                "n_neighbors",
                                "int, default 3"
                            ],
                            [
                                "copy",
                                "bool, default True"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default None"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "mi": "ndarray, shape (n_features,)"
                    }
                ]
            ]
        ],
        7
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\rfe.py": [
        [
            [
                "_rfe_single_fit",
                [
                    [
                        [],
                        7,
                        7
                    ],
                    null
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\univariate_selection.py": [
        [
            [
                "_clean_nans",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "f_oneway",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    {}
                ]
            ],
            [
                "f_classif",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix} shape = [n_samples, n_features]"
                            ],
                            [
                                "y",
                                "array of shape(n_samples)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "F": "array, shape = [n_features,]",
                        "pval": "array, shape = [n_features,]"
                    }
                ]
            ],
            [
                "_chisquare",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "chi2",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape = (n_samples, n_features_in)"
                            ],
                            [
                                "y",
                                "array-like, shape = (n_samples,)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "chi2": "array, shape = (n_features,)",
                        "pval": "array, shape = (n_features,)"
                    }
                ]
            ],
            [
                "f_regression",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}  shape = (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "array of shape(n_samples)."
                            ],
                            [
                                "center",
                                "True, bool,"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "F": "array, shape=(n_features,)",
                        "pval": "array, shape=(n_features,)"
                    }
                ]
            ]
        ],
        6
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\variance_threshold.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_base.py": [
        [],
        5
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_chi2.py": [
        [
            [
                "mkchi2",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        6
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_feature_select.py": [
        [],
        34
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_from_model.py": [
        [],
        11
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_mutual_info.py": [
        [],
        8
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_rfe.py": [
        [],
        10
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_variance_threshold.py": [
        [],
        2
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\correlation_models.py": [
        [
            [
                "absolute_exponential",
                [
                    [
                        [
                            [
                                "theta",
                                "array_like"
                            ],
                            [
                                "d",
                                "array_like"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "r": "array_like"
                    }
                ]
            ],
            [
                "squared_exponential",
                [
                    [
                        [
                            [
                                "theta",
                                "array_like"
                            ],
                            [
                                "d",
                                "array_like"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "r": "array_like"
                    }
                ]
            ],
            [
                "generalized_exponential",
                [
                    [
                        [
                            [
                                "theta",
                                "array_like"
                            ],
                            [
                                "d",
                                "array_like"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "r": "array_like"
                    }
                ]
            ],
            [
                "pure_nugget",
                [
                    [
                        [
                            [
                                "theta",
                                "array_like"
                            ],
                            [
                                "d",
                                "array_like"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "r": "array_like"
                    }
                ]
            ],
            [
                "cubic",
                [
                    [
                        [
                            [
                                "theta",
                                "array_like"
                            ],
                            [
                                "d",
                                "array_like"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "r": "array_like"
                    }
                ]
            ],
            [
                "linear",
                [
                    [
                        [
                            [
                                "theta",
                                "array_like"
                            ],
                            [
                                "d",
                                "array_like"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "r": "array_like"
                    }
                ]
            ]
        ],
        6
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\gaussian_process.py": [
        [
            [
                "l1_cross_distances",
                [
                    [
                        [
                            [
                                "X",
                                "array_like"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "D": "D[k] = np.abs(X[ij[k, 0]] - Y[ij[k, 1]]).",
                        "ij": "arrays with shape (n_samples * (n_samples - 1) / 2, 2)"
                    }
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\gpc.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\gpr.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\kernels.py": [
        [],
        2
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\regression_models.py": [
        [
            [
                "constant",
                [
                    [
                        [
                            [
                                "x",
                                "array_like"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "f": "array_like"
                    }
                ]
            ],
            [
                "linear",
                [
                    [
                        [
                            [
                                "x",
                                "array_like"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "f": "array_like"
                    }
                ]
            ],
            [
                "quadratic",
                [
                    [
                        [
                            [
                                "x",
                                "array_like"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "f": "array_like"
                    }
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\tests\\test_gaussian_process.py": [
        [],
        10
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\tests\\test_gpc.py": [
        [],
        10
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\tests\\test_gpr.py": [
        [],
        20
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\tests\\test_kernels.py": [
        [],
        14
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\linear_model\\base.py": [
        [
            [
                "make_dataset",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "sparse_center_data",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "center_data",
                [
                    [
                        [],
                        6,
                        6
                    ],
                    null
                ]
            ],
            [
                "_preprocess_data",
                [
                    [
                        [],
                        7,
                        7
                    ],
                    null
                ]
            ],
            [
                "_rescale_data",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_pre_fit",
                [
                    [
                        [],
                        7,
                        7
                    ],
                    null
                ]
            ]
        ],
        6
    ],
    "../scikit-learn-master/sklearn\\linear_model\\bayes.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\linear_model\\coordinate_descent.py": [
        [
            [
                "_alpha_grid",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "ndarray, shape (n_samples,)"
                            ],
                            [
                                "Xy",
                                "array-like, optional"
                            ],
                            [
                                "l1_ratio",
                                "float"
                            ],
                            [
                                "fit_intercept",
                                "boolean, default True"
                            ],
                            [
                                "eps",
                                "float, optional"
                            ],
                            [
                                "n_alphas",
                                "int, optional"
                            ],
                            [
                                "normalize",
                                "boolean, optional, default False"
                            ],
                            [
                                "copy_X",
                                "boolean, optional, default True"
                            ]
                        ],
                        9,
                        0
                    ],
                    null
                ]
            ],
            [
                "lasso_path",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "ndarray, shape (n_samples,), or (n_samples, n_outputs)"
                            ],
                            [
                                "eps",
                                "float, optional"
                            ],
                            [
                                "n_alphas",
                                "int, optional"
                            ],
                            [
                                "alphas",
                                "ndarray, optional"
                            ],
                            [
                                "precompute",
                                "True | False | 'auto' | array-like"
                            ],
                            [
                                "Xy",
                                "array-like, optional"
                            ],
                            [
                                "copy_X",
                                "boolean, optional, default True"
                            ],
                            [
                                "coef_init",
                                "array, shape (n_features, ) | None"
                            ],
                            [
                                "verbose",
                                "bool or integer"
                            ],
                            [
                                "return_n_iter",
                                "bool"
                            ],
                            [
                                "positive",
                                "bool, default False"
                            ]
                        ],
                        12,
                        0
                    ],
                    {
                        "alphas": "array, shape (n_alphas,)",
                        "coefs": "array, shape (n_features, n_alphas) or             (n_outputs, n_features, n_alphas)",
                        "dual_gaps": "array, shape (n_alphas,)",
                        "n_iters": "array-like, shape (n_alphas,)"
                    }
                ]
            ],
            [
                "enet_path",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like}, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "ndarray, shape (n_samples,) or (n_samples, n_outputs)"
                            ],
                            [
                                "l1_ratio",
                                "float, optional"
                            ],
                            [
                                "eps",
                                "float"
                            ],
                            [
                                "n_alphas",
                                "int, optional"
                            ],
                            [
                                "alphas",
                                "ndarray, optional"
                            ],
                            [
                                "precompute",
                                "True | False | 'auto' | array-like"
                            ],
                            [
                                "Xy",
                                "array-like, optional"
                            ],
                            [
                                "copy_X",
                                "boolean, optional, default True"
                            ],
                            [
                                "coef_init",
                                "array, shape (n_features, ) | None"
                            ],
                            [
                                "verbose",
                                "bool or integer"
                            ],
                            [
                                "return_n_iter",
                                "bool"
                            ],
                            [
                                "positive",
                                "bool, default False"
                            ],
                            [
                                "check_input",
                                "bool, default True"
                            ]
                        ],
                        14,
                        0
                    ],
                    {
                        "alphas": "array, shape (n_alphas,)",
                        "coefs": "array, shape (n_features, n_alphas) or             (n_outputs, n_features, n_alphas)",
                        "dual_gaps": "array, shape (n_alphas,)",
                        "n_iters": "array-like, shape (n_alphas,)"
                    }
                ]
            ],
            [
                "_path_residuals",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "array-like, shape (n_samples,) or (n_samples, n_targets)"
                            ],
                            [
                                "train",
                                "list of indices"
                            ],
                            [
                                "test",
                                "list of indices"
                            ],
                            [
                                "path",
                                "callable"
                            ],
                            [
                                "path_params",
                                "dictionary"
                            ],
                            [
                                "alphas",
                                "array-like, optional"
                            ],
                            [
                                "l1_ratio",
                                "float, optional"
                            ],
                            [
                                "X_order",
                                "{'F', 'C', or None}, optional"
                            ],
                            [
                                "dtype",
                                "a numpy dtype or None"
                            ]
                        ],
                        10,
                        0
                    ],
                    {
                        "X": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                        "y": "array-like, shape (n_samples,) or (n_samples, n_targets)",
                        "train": "list of indices",
                        "test": "list of indices",
                        "path": "callable",
                        "path_params": "dictionary",
                        "alphas": "array-like, optional",
                        "l1_ratio": "float, optional",
                        "X_order": "{'F', 'C', or None}, optional",
                        "dtype": "a numpy dtype or None"
                    }
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\linear_model\\huber.py": [
        [
            [
                "_huber_loss_and_gradient",
                [
                    [
                        [
                            [
                                "w",
                                "ndarray, shape (n_features + 1,) or (n_features + 2,)"
                            ],
                            [
                                "X",
                                "ndarray, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "ndarray, shape (n_samples,)"
                            ],
                            [
                                "epsilon",
                                "float"
                            ],
                            [
                                "alpha",
                                "float"
                            ],
                            [
                                "sample_weight",
                                "ndarray, shape (n_samples,), optional"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "w": "ndarray, shape (n_features + 1,) or (n_features + 2,)",
                        "X": "ndarray, shape (n_samples, n_features)",
                        "y": "ndarray, shape (n_samples,)",
                        "epsilon": "float",
                        "alpha": "float",
                        "sample_weight": "ndarray, shape (n_samples,), optional"
                    }
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\linear_model\\least_angle.py": [
        [
            [
                "lars_path",
                [
                    [
                        [
                            [
                                "X",
                                "array, shape"
                            ],
                            [
                                "y",
                                "array, shape"
                            ],
                            [
                                "Xy",
                                "array-like, shape (n_samples,) or (n_samples, n_targets),             optional"
                            ],
                            [
                                "Gram",
                                "None, 'auto', array, shape"
                            ],
                            [
                                "max_iter",
                                "integer, optional (default=500)"
                            ],
                            [
                                "alpha_min",
                                "float, optional (default=0)"
                            ],
                            [
                                "method",
                                "{'lar', 'lasso'}, optional (default='lar')"
                            ],
                            [
                                "copy_X",
                                "bool, optional (default=True)"
                            ],
                            [
                                "eps",
                                "float, optional (default=``np.finfo(np.float).eps``)"
                            ],
                            [
                                "copy_Gram",
                                "bool, optional (default=True)"
                            ],
                            [
                                "verbose",
                                "int (default=0)"
                            ],
                            [
                                "return_path",
                                "bool, optional (default=True)"
                            ],
                            [
                                "return_n_iter",
                                "bool, optional (default=False)"
                            ],
                            [
                                "positive",
                                "boolean (default=False)"
                            ]
                        ],
                        14,
                        0
                    ],
                    {
                        "alphas": "array, shape",
                        "active": "array, shape [n_alphas]",
                        "coefs": "array, shape (n_features, n_alphas + 1)",
                        "n_iter": "int"
                    }
                ]
            ],
            [
                "_lars_path_residues",
                [
                    [
                        [
                            [
                                "X_train",
                                "array, shape (n_samples, n_features)"
                            ],
                            [
                                "y_train",
                                "array, shape (n_samples)"
                            ],
                            [
                                "X_test",
                                "array, shape (n_samples, n_features)"
                            ],
                            [
                                "y_test",
                                "array, shape (n_samples)"
                            ],
                            [
                                "Gram",
                                "None, 'auto', array, shape"
                            ],
                            [
                                "copy",
                                "boolean, optional"
                            ],
                            [
                                "method",
                                "'lar' | 'lasso'"
                            ],
                            [
                                "verbose",
                                "integer, optional"
                            ],
                            [
                                "fit_intercept",
                                "boolean"
                            ],
                            [
                                "normalize",
                                "boolean, optional, default True"
                            ],
                            [
                                "max_iter",
                                "integer, optional"
                            ],
                            [
                                "eps",
                                "float, optional"
                            ],
                            [
                                "positive",
                                "boolean (default=False)"
                            ]
                        ],
                        13,
                        0
                    ],
                    {
                        "alphas": "array, shape (n_alphas,)",
                        "active": "list",
                        "coefs": "array, shape (n_features, n_alphas)",
                        "residues": "array, shape (n_alphas, n_samples)"
                    }
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\linear_model\\logistic.py": [
        [
            [
                "_intercept_dot",
                [
                    [
                        [
                            [
                                "w",
                                "ndarray, shape (n_features,) or (n_features + 1,)"
                            ],
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "ndarray, shape (n_samples,)"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "w": "ndarray, shape (n_features,)",
                        "X": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                        "yz": "float"
                    }
                ]
            ],
            [
                "_logistic_loss_and_grad",
                [
                    [
                        [
                            [
                                "w",
                                "ndarray, shape (n_features,) or (n_features + 1,)"
                            ],
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "ndarray, shape (n_samples,)"
                            ],
                            [
                                "alpha",
                                "float"
                            ],
                            [
                                "sample_weight",
                                "array-like, shape (n_samples,) optional"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "out": "float",
                        "grad": "ndarray, shape (n_features,) or (n_features + 1,)"
                    }
                ]
            ],
            [
                "_logistic_loss",
                [
                    [
                        [
                            [
                                "w",
                                "ndarray, shape (n_features,) or (n_features + 1,)"
                            ],
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "ndarray, shape (n_samples,)"
                            ],
                            [
                                "alpha",
                                "float"
                            ],
                            [
                                "sample_weight",
                                "array-like, shape (n_samples,) optional"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "out": "float"
                    }
                ]
            ],
            [
                "_logistic_grad_hess",
                [
                    [
                        [
                            [
                                "w",
                                "ndarray, shape (n_features,) or (n_features + 1,)"
                            ],
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "ndarray, shape (n_samples,)"
                            ],
                            [
                                "alpha",
                                "float"
                            ],
                            [
                                "sample_weight",
                                "array-like, shape (n_samples,) optional"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "grad": "ndarray, shape (n_features,) or (n_features + 1,)",
                        "Hs": "callable"
                    }
                ]
            ],
            [
                "_multinomial_loss",
                [
                    [
                        [
                            [
                                "w",
                                "ndarray, shape (n_classes * n_features,) or"
                            ],
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ],
                            [
                                "Y",
                                "ndarray, shape (n_samples, n_classes)"
                            ],
                            [
                                "alpha",
                                "float"
                            ],
                            [
                                "sample_weight",
                                "array-like, shape (n_samples,) optional"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "loss": "float",
                        "p": "ndarray, shape (n_samples, n_classes)",
                        "w": "ndarray, shape (n_classes, n_features)"
                    }
                ]
            ],
            [
                "_multinomial_loss_grad",
                [
                    [
                        [
                            [
                                "w",
                                "ndarray, shape (n_classes * n_features,) or"
                            ],
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ],
                            [
                                "Y",
                                "ndarray, shape (n_samples, n_classes)"
                            ],
                            [
                                "alpha",
                                "float"
                            ],
                            [
                                "sample_weight",
                                "array-like, shape (n_samples,) optional"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "loss": "float",
                        "grad": "ndarray, shape (n_classes * n_features,) or",
                        "p": "ndarray, shape (n_samples, n_classes)"
                    }
                ]
            ],
            [
                "_multinomial_grad_hess",
                [
                    [
                        [
                            [
                                "w",
                                "ndarray, shape (n_classes * n_features,) or"
                            ],
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ],
                            [
                                "Y",
                                "ndarray, shape (n_samples, n_classes)"
                            ],
                            [
                                "alpha",
                                "float"
                            ],
                            [
                                "sample_weight",
                                "array-like, shape (n_samples,) optional"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "grad": "array, shape (n_classes * n_features,) or",
                        "hessp": "callable"
                    }
                ]
            ],
            [
                "logistic_regression_path",
                [
                    [
                        [
                            [
                                "X",
                                "array-like or sparse matrix, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "array-like, shape (n_samples,)"
                            ],
                            [
                                "pos_class",
                                "int, None"
                            ],
                            [
                                "Cs",
                                "int | array-like, shape (n_cs,)"
                            ],
                            [
                                "fit_intercept",
                                "bool"
                            ],
                            [
                                "max_iter",
                                "int"
                            ],
                            [
                                "tol",
                                "float"
                            ],
                            [
                                "verbose",
                                "int"
                            ],
                            [
                                "solver",
                                "{'lbfgs', 'newton-cg', 'liblinear', 'sag', 'saga'}"
                            ],
                            [
                                "coef",
                                "array-like, shape (n_features,), default None"
                            ],
                            [
                                "class_weight",
                                "dict or 'balanced', optional"
                            ],
                            [
                                "dual",
                                "bool"
                            ],
                            [
                                "penalty",
                                "str, 'l1' or 'l2'"
                            ],
                            [
                                "intercept_scaling",
                                "float, default 1."
                            ],
                            [
                                "multi_class",
                                "str, {'ovr', 'multinomial'}"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default None"
                            ],
                            [
                                "check_input",
                                "bool, default True"
                            ],
                            [
                                "max_squared_sum",
                                "float, default None"
                            ],
                            [
                                "sample_weight",
                                "array-like, shape(n_samples,) optional"
                            ]
                        ],
                        19,
                        0
                    ],
                    {
                        "coefs": "ndarray, shape (n_cs, n_features) or (n_cs, n_features + 1)",
                        "Cs": "ndarray",
                        "n_iter": "array, shape (n_cs,)"
                    }
                ]
            ],
            [
                "_log_reg_scoring_path",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "array-like, shape (n_samples,) or (n_samples, n_targets)"
                            ],
                            [
                                "train",
                                "list of indices"
                            ],
                            [
                                "test",
                                "list of indices"
                            ],
                            [
                                "pos_class",
                                "int, None"
                            ],
                            [
                                "Cs",
                                "list of floats | int"
                            ],
                            [
                                "scoring",
                                "callable or None, optional, default"
                            ],
                            [
                                "fit_intercept",
                                "bool"
                            ],
                            [
                                "max_iter",
                                "int"
                            ],
                            [
                                "tol",
                                "float"
                            ],
                            [
                                "class_weight",
                                "dict or 'balanced', optional"
                            ],
                            [
                                "verbose",
                                "int"
                            ],
                            [
                                "solver",
                                "{'lbfgs', 'newton-cg', 'liblinear', 'sag', 'saga'}"
                            ],
                            [
                                "penalty",
                                "str, 'l1' or 'l2'"
                            ],
                            [
                                "dual",
                                "bool"
                            ],
                            [
                                "intercept_scaling",
                                "float, default 1."
                            ],
                            [
                                "multi_class",
                                "str, {'ovr', 'multinomial'}"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default None"
                            ],
                            [
                                "max_squared_sum",
                                "float, default None"
                            ],
                            [
                                "sample_weight",
                                "array-like, shape(n_samples,) optional"
                            ]
                        ],
                        20,
                        0
                    ],
                    {
                        "coefs": "ndarray, shape (n_cs, n_features) or (n_cs, n_features + 1)",
                        "Cs": "ndarray",
                        "scores": "ndarray, shape (n_cs,)",
                        "n_iter": "array, shape(n_cs,)"
                    }
                ]
            ]
        ],
        10
    ],
    "../scikit-learn-master/sklearn\\linear_model\\omp.py": [
        [
            [
                "_cholesky_omp",
                [
                    [
                        [
                            [
                                "X",
                                "array, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "array, shape (n_samples,)"
                            ],
                            [
                                "n_nonzero_coefs",
                                "int"
                            ],
                            [
                                "tol",
                                "float"
                            ],
                            [
                                "copy_X",
                                "bool, optional"
                            ],
                            [
                                "return_path",
                                "bool, optional. Default"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "gamma": "array, shape (n_nonzero_coefs,)",
                        "idx": "array, shape (n_nonzero_coefs,)",
                        "coef": "array, shape (n_features, n_nonzero_coefs)",
                        "n_active": "int"
                    }
                ]
            ],
            [
                "_gram_omp",
                [
                    [
                        [
                            [
                                "Gram",
                                "array, shape (n_features, n_features)"
                            ],
                            [
                                "Xy",
                                "array, shape (n_features,)"
                            ],
                            [
                                "n_nonzero_coefs",
                                "int"
                            ],
                            [
                                "tol_0",
                                "float"
                            ],
                            [
                                "tol",
                                "float"
                            ],
                            [
                                "copy_Gram",
                                "bool, optional"
                            ],
                            [
                                "copy_Xy",
                                "bool, optional"
                            ],
                            [
                                "return_path",
                                "bool, optional. Default"
                            ]
                        ],
                        8,
                        0
                    ],
                    {
                        "gamma": "array, shape (n_nonzero_coefs,)",
                        "idx": "array, shape (n_nonzero_coefs,)",
                        "coefs": "array, shape (n_features, n_nonzero_coefs)",
                        "n_active": "int"
                    }
                ]
            ],
            [
                "orthogonal_mp",
                [
                    [
                        [
                            [
                                "X",
                                "array, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "array, shape (n_samples,) or (n_samples, n_targets)"
                            ],
                            [
                                "n_nonzero_coefs",
                                "int"
                            ],
                            [
                                "tol",
                                "float"
                            ],
                            [
                                "precompute",
                                "{True, False, 'auto'},"
                            ],
                            [
                                "copy_X",
                                "bool, optional"
                            ],
                            [
                                "return_path",
                                "bool, optional. Default"
                            ],
                            [
                                "return_n_iter",
                                "bool, optional default False"
                            ]
                        ],
                        8,
                        0
                    ],
                    {
                        "coef": "array, shape (n_features,) or (n_features, n_targets)",
                        "n_iters": "array-like or int"
                    }
                ]
            ],
            [
                "orthogonal_mp_gram",
                [
                    [
                        [
                            [
                                "Gram",
                                "array, shape (n_features, n_features)"
                            ],
                            [
                                "Xy",
                                "array, shape (n_features,) or (n_features, n_targets)"
                            ],
                            [
                                "n_nonzero_coefs",
                                "int"
                            ],
                            [
                                "tol",
                                "float"
                            ],
                            [
                                "norms_squared",
                                "array-like, shape (n_targets,)"
                            ],
                            [
                                "copy_Gram",
                                "bool, optional"
                            ],
                            [
                                "copy_Xy",
                                "bool, optional"
                            ],
                            [
                                "return_path",
                                "bool, optional. Default"
                            ],
                            [
                                "return_n_iter",
                                "bool, optional default False"
                            ]
                        ],
                        9,
                        0
                    ],
                    {
                        "coef": "array, shape (n_features,) or (n_features, n_targets)",
                        "n_iters": "array-like or int"
                    }
                ]
            ],
            [
                "_omp_path_residues",
                [
                    [
                        [
                            [
                                "X_train",
                                "array, shape (n_samples, n_features)"
                            ],
                            [
                                "y_train",
                                "array, shape (n_samples)"
                            ],
                            [
                                "X_test",
                                "array, shape (n_samples, n_features)"
                            ],
                            [
                                "y_test",
                                "array, shape (n_samples)"
                            ],
                            [
                                "copy",
                                "boolean, optional"
                            ],
                            [
                                "fit_intercept",
                                "boolean"
                            ],
                            [
                                "normalize",
                                "boolean, optional, default True"
                            ],
                            [
                                "max_iter",
                                "integer, optional"
                            ]
                        ],
                        8,
                        0
                    ],
                    {
                        "residues": "array, shape (n_samples, max_features)"
                    }
                ]
            ]
        ],
        5
    ],
    "../scikit-learn-master/sklearn\\linear_model\\passive_aggressive.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\linear_model\\perceptron.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\linear_model\\randomized_l1.py": [
        [
            [
                "_lasso_stability_path",
                [
                    [
                        [],
                        5,
                        5
                    ],
                    null
                ]
            ],
            [
                "lasso_stability_path",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape = [n_samples, n_features]"
                            ],
                            [
                                "y",
                                "array-like, shape = [n_samples]"
                            ],
                            [
                                "scaling",
                                "float, optional, default=0.5"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default=None"
                            ],
                            [
                                "n_resampling",
                                "int, optional, default=200"
                            ],
                            [
                                "n_grid",
                                "int, optional, default=100"
                            ],
                            [
                                "sample_fraction",
                                "float, optional, default=0.75"
                            ],
                            [
                                "eps",
                                "float, optional"
                            ],
                            [
                                "n_jobs",
                                "integer, optional"
                            ],
                            [
                                "verbose",
                                "boolean or integer, optional"
                            ]
                        ],
                        10,
                        0
                    ],
                    {
                        "alphas_grid": "array, shape ~ [n_grid]",
                        "scores_path": "array, shape = [n_features, n_grid]"
                    }
                ]
            ]
        ],
        5
    ],
    "../scikit-learn-master/sklearn\\linear_model\\ransac.py": [
        [
            [
                "_dynamic_max_trials",
                [
                    [
                        [
                            [
                                "n_inliers",
                                "int"
                            ],
                            [
                                "n_samples",
                                "int"
                            ],
                            [
                                "min_samples",
                                "int"
                            ],
                            [
                                "probability",
                                "float"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "trials": "int"
                    }
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\linear_model\\ridge.py": [
        [
            [
                "ridge_regression",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix, LinearOperator},"
                            ],
                            [
                                "y",
                                "array-like, shape = [n_samples] or [n_samples, n_targets]"
                            ],
                            [
                                "alpha",
                                "{float, array-like},"
                            ],
                            [
                                "sample_weight",
                                "float or numpy array of shape [n_samples]"
                            ],
                            [
                                "solver",
                                "{'auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga'}"
                            ],
                            [
                                "max_iter",
                                "int, optional"
                            ],
                            [
                                "tol",
                                "float"
                            ],
                            [
                                "verbose",
                                "int"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default None"
                            ],
                            [
                                "return_n_iter",
                                "boolean, default False"
                            ],
                            [
                                "return_intercept",
                                "boolean, default False"
                            ]
                        ],
                        11,
                        0
                    ],
                    {
                        "coef": "array, shape = [n_features] or [n_targets, n_features]",
                        "n_iter": "int, optional",
                        "intercept": "float or array, shape = [n_targets]"
                    }
                ]
            ]
        ],
        6
    ],
    "../scikit-learn-master/sklearn\\linear_model\\sag.py": [
        [
            [
                "get_auto_step_size",
                [
                    [
                        [
                            [
                                "max_squared_sum",
                                "float"
                            ],
                            [
                                "alpha_scaled",
                                "float"
                            ],
                            [
                                "loss",
                                "string, in {\"log\", \"squared\"}"
                            ],
                            [
                                "fit_intercept",
                                "bool"
                            ],
                            [
                                "n_samples",
                                "int, optional"
                            ],
                            [
                                "is_saga",
                                "boolean, optional"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "step_size": "float"
                    }
                ]
            ],
            [
                "sag_solver",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "numpy array, shape (n_samples,)"
                            ],
                            [
                                "sample_weight",
                                "array-like, shape (n_samples,), optional"
                            ],
                            [
                                "loss",
                                "'log' | 'squared' | 'multinomial'"
                            ],
                            [
                                "alpha",
                                "float, optional"
                            ],
                            [
                                "max_iter",
                                "int, optional"
                            ],
                            [
                                "tol",
                                "double, optional"
                            ],
                            [
                                "verbose",
                                "integer, optional"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default None"
                            ],
                            [
                                "check_input",
                                "bool, default True"
                            ],
                            [
                                "max_squared_sum",
                                "float, default None"
                            ],
                            [
                                "warm_start_mem",
                                "dict, optional"
                            ],
                            [
                                "is_saga",
                                "boolean, optional"
                            ]
                        ],
                        14,
                        1
                    ],
                    {
                        "coef_": "array, shape (n_features)",
                        "n_iter_": "int",
                        "warm_start_mem": "dict"
                    }
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\linear_model\\setup.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\linear_model\\stochastic_gradient.py": [
        [
            [
                "_prepare_fit_binary",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "fit_binary",
                [
                    [
                        [],
                        11,
                        11
                    ],
                    null
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\linear_model\\theil_sen.py": [
        [
            [
                "_modified_weiszfeld_step",
                [
                    [
                        [
                            [
                                "X",
                                "array, shape = [n_samples, n_features]"
                            ],
                            [
                                "x_old",
                                "array, shape = [n_features]"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "x_new": "array, shape = [n_features]"
                    }
                ]
            ],
            [
                "_spatial_median",
                [
                    [
                        [
                            [
                                "X",
                                "array, shape = [n_samples, n_features]"
                            ],
                            [
                                "max_iter",
                                "int, optional"
                            ],
                            [
                                "tol",
                                "float, optional"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "spatial_median": "array, shape = [n_features]",
                        "n_iter": "int"
                    }
                ]
            ],
            [
                "_breakdown_point",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int"
                            ],
                            [
                                "n_subsamples",
                                "int"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "breakdown_point": "float"
                    }
                ]
            ],
            [
                "_lstsq",
                [
                    [
                        [
                            [
                                "X",
                                "array, shape = [n_samples, n_features]"
                            ],
                            [
                                "y",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "indices",
                                "array, shape = [n_subpopulation, n_subsamples]"
                            ],
                            [
                                "fit_intercept",
                                "bool"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "weights": "array, shape = [n_subpopulation, n_features + intercept]"
                    }
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\linear_model\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_base.py": [
        [],
        15
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_bayes.py": [
        [],
        5
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_coordinate_descent.py": [
        [
            [
                "build_dataset",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ]
        ],
        36
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_huber.py": [
        [],
        9
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_least_angle.py": [
        [],
        28
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_logistic.py": [
        [
            [
                "check_predictions",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ]
        ],
        45
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_omp.py": [
        [],
        17
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_passive_aggressive.py": [
        [],
        14
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_perceptron.py": [
        [],
        3
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_randomized_l1.py": [
        [],
        7
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_ransac.py": [
        [],
        24
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_ridge.py": [
        [
            [
                "test_class_weight_vs_sample_weight",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        37
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_sag.py": [
        [
            [
                "test_sag_pobj_matches_logistic_regression",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_sag_pobj_matches_ridge_regression",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_sag_regressor_computed_correctly",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_sag_regressor",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_sag_classifier_computed_correctly",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_sag_multiclass_computed_correctly",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_classifier_results",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_binary_classifier_class_weight",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_multiclass_classifier_class_weight",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_classifier_single_class",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        24
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_sgd.py": [
        [],
        16
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_sparse_coordinate_descent.py": [
        [],
        13
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_theil_sen.py": [
        [],
        21
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\manifold\\isomap.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\manifold\\locally_linear.py": [
        [
            [
                "barycenter_weights",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_dim)"
                            ],
                            [
                                "Z",
                                "array-like, shape (n_samples, n_neighbors, n_dim)"
                            ],
                            [
                                "reg",
                                "float, optional"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "B": "array-like, shape (n_samples, n_neighbors)"
                    }
                ]
            ],
            [
                "barycenter_kneighbors_graph",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix, BallTree, KDTree, NearestNeighbors}"
                            ],
                            [
                                "n_neighbors",
                                "int"
                            ],
                            [
                                "reg",
                                "float, optional"
                            ],
                            [
                                "n_jobs",
                                "int, optional (default = 1)"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "A": "sparse matrix in CSR format, shape = [n_samples, n_samples]"
                    }
                ]
            ],
            [
                "null_space",
                [
                    [
                        [
                            [
                                "M",
                                "{array, matrix, sparse matrix, LinearOperator}"
                            ],
                            [
                                "k",
                                "integer"
                            ],
                            [
                                "k_skip",
                                "integer, optional"
                            ],
                            [
                                "eigen_solver",
                                "string, {'auto', 'arpack', 'dense'}"
                            ],
                            [
                                "tol",
                                "float, optional"
                            ],
                            [
                                "max_iter",
                                "maximum number of iterations for 'arpack' method"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        7,
                        0
                    ],
                    null
                ]
            ],
            [
                "locally_linear_embedding",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix, BallTree, KDTree, NearestNeighbors}"
                            ],
                            [
                                "n_neighbors",
                                "integer"
                            ],
                            [
                                "n_components",
                                "integer"
                            ],
                            [
                                "reg",
                                "float"
                            ],
                            [
                                "eigen_solver",
                                "string, {'auto', 'arpack', 'dense'}"
                            ],
                            [
                                "tol",
                                "float, optional"
                            ],
                            [
                                "max_iter",
                                "integer"
                            ],
                            [
                                "method",
                                "{'standard', 'hessian', 'modified', 'ltsa'}"
                            ],
                            [
                                "hessian_tol",
                                "float, optional"
                            ],
                            [
                                "modified_tol",
                                "float, optional"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ],
                            [
                                "n_jobs",
                                "int, optional (default = 1)"
                            ]
                        ],
                        12,
                        0
                    ],
                    {
                        "Y": "array-like, shape [n_samples, n_components]",
                        "squared_error": "float"
                    }
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\manifold\\mds.py": [
        [
            [
                "_smacof_single",
                [
                    [
                        [
                            [
                                "dissimilarities",
                                "ndarray, shape (n_samples, n_samples)"
                            ],
                            [
                                "metric",
                                "boolean, optional, default"
                            ],
                            [
                                "n_components",
                                "int, optional, default"
                            ],
                            [
                                "init",
                                "ndarray, shape (n_samples, n_components), optional, default"
                            ],
                            [
                                "max_iter",
                                "int, optional, default"
                            ],
                            [
                                "verbose",
                                "int, optional, default"
                            ],
                            [
                                "eps",
                                "float, optional, default"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default"
                            ]
                        ],
                        8,
                        0
                    ],
                    {
                        "X": "ndarray, shape (n_samples, n_components)",
                        "stress": "float",
                        "n_iter": "int"
                    }
                ]
            ],
            [
                "smacof",
                [
                    [
                        [
                            [
                                "dissimilarities",
                                "ndarray, shape (n_samples, n_samples)"
                            ],
                            [
                                "metric",
                                "boolean, optional, default"
                            ],
                            [
                                "n_components",
                                "int, optional, default"
                            ],
                            [
                                "init",
                                "ndarray, shape (n_samples, n_components), optional, default"
                            ],
                            [
                                "n_init",
                                "int, optional, default"
                            ],
                            [
                                "n_jobs",
                                "int, optional, default"
                            ],
                            [
                                "max_iter",
                                "int, optional, default"
                            ],
                            [
                                "verbose",
                                "int, optional, default"
                            ],
                            [
                                "eps",
                                "float, optional, default"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default"
                            ],
                            [
                                "return_n_iter",
                                "bool, optional, default"
                            ]
                        ],
                        11,
                        0
                    ],
                    {
                        "X": "ndarray, shape (n_samples, n_components)",
                        "stress": "float",
                        "n_iter": "int"
                    }
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\manifold\\setup.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\manifold\\spectral_embedding_.py": [
        [
            [
                "_graph_connected_component",
                [
                    [
                        [
                            [
                                "graph",
                                "array-like, shape"
                            ],
                            [
                                "node_id",
                                "int"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "connected_components_matrix": "array-like, shape"
                    }
                ]
            ],
            [
                "_graph_is_connected",
                [
                    [
                        [
                            [
                                "graph",
                                "array-like or sparse matrix, shape"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "is_connected": "bool"
                    }
                ]
            ],
            [
                "_set_diag",
                [
                    [
                        [
                            [
                                "laplacian",
                                "array or sparse matrix"
                            ],
                            [
                                "value",
                                "float"
                            ],
                            [
                                "norm_laplacian",
                                "bool"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "laplacian": "array or sparse matrix"
                    }
                ]
            ],
            [
                "spectral_embedding",
                [
                    [
                        [
                            [
                                "adjacency",
                                "array-like or sparse matrix, shape"
                            ],
                            [
                                "n_components",
                                "integer, optional, default 8"
                            ],
                            [
                                "eigen_solver",
                                "{None, 'arpack', 'lobpcg', or 'amg'}, default None"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional, default"
                            ],
                            [
                                "eigen_tol",
                                "float, optional, default=0.0"
                            ],
                            [
                                "norm_laplacian",
                                "bool, optional, default=True"
                            ],
                            [
                                "drop_first",
                                "bool, optional, default=True"
                            ]
                        ],
                        7,
                        0
                    ],
                    {
                        "embedding": "array, shape=(n_samples, n_components)"
                    }
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\manifold\\t_sne.py": [
        [
            [
                "_joint_probabilities",
                [
                    [
                        [
                            [
                                "distances",
                                "array, shape (n_samples * (n_samples-1) / 2,)"
                            ],
                            [
                                "desired_perplexity",
                                "float"
                            ],
                            [
                                "verbose",
                                "int"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "P": "array, shape (n_samples * (n_samples-1) / 2,)"
                    }
                ]
            ],
            [
                "_joint_probabilities_nn",
                [
                    [
                        [
                            [
                                "distances",
                                "array, shape (n_samples, k)"
                            ],
                            [
                                "neighbors",
                                "array, shape (n_samples, k)"
                            ],
                            [
                                "desired_perplexity",
                                "float"
                            ],
                            [
                                "verbose",
                                "int"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "P": "csr sparse matrix, shape (n_samples, n_samples)"
                    }
                ]
            ],
            [
                "_kl_divergence",
                [
                    [
                        [
                            [
                                "params",
                                "array, shape (n_params,)"
                            ],
                            [
                                "P",
                                "array, shape (n_samples * (n_samples-1) / 2,)"
                            ],
                            [
                                "degrees_of_freedom",
                                "float"
                            ],
                            [
                                "n_samples",
                                "int"
                            ],
                            [
                                "n_components",
                                "int"
                            ],
                            [
                                "skip_num_points",
                                "int (optional, default"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "kl_divergence": "float",
                        "grad": "array, shape (n_params,)"
                    }
                ]
            ],
            [
                "_kl_divergence_bh",
                [
                    [
                        [
                            [
                                "params",
                                "array, shape (n_params,)"
                            ],
                            [
                                "P",
                                "csr sparse matrix, shape (n_samples, n_sample)"
                            ],
                            [
                                "degrees_of_freedom",
                                "float"
                            ],
                            [
                                "n_samples",
                                "int"
                            ],
                            [
                                "n_components",
                                "int"
                            ],
                            [
                                "angle",
                                "float (default"
                            ],
                            [
                                "skip_num_points",
                                "int (optional, default"
                            ],
                            [
                                "verbose",
                                "int"
                            ]
                        ],
                        8,
                        0
                    ],
                    {
                        "kl_divergence": "float",
                        "grad": "array, shape (n_params,)"
                    }
                ]
            ],
            [
                "_gradient_descent",
                [
                    [
                        [
                            [
                                "objective",
                                "function or callable"
                            ],
                            [
                                "p0",
                                "array-like, shape (n_params,)"
                            ],
                            [
                                "it",
                                "int"
                            ],
                            [
                                "n_iter",
                                "int"
                            ],
                            [
                                "n_iter_check",
                                "int"
                            ],
                            [
                                "n_iter_without_progress",
                                "int, optional (default"
                            ],
                            [
                                "momentum",
                                "float, within (0.0, 1.0), optional (default"
                            ],
                            [
                                "learning_rate",
                                "float, optional (default"
                            ],
                            [
                                "min_gain",
                                "float, optional (default"
                            ],
                            [
                                "min_grad_norm",
                                "float, optional (default"
                            ],
                            [
                                "verbose",
                                "int, optional (default"
                            ],
                            [
                                "args",
                                "sequence"
                            ],
                            [
                                "kwargs",
                                "dict"
                            ]
                        ],
                        13,
                        0
                    ],
                    {
                        "p": "array, shape (n_params,)",
                        "error": "float",
                        "i": "int"
                    }
                ]
            ],
            [
                "trustworthiness",
                [
                    [
                        [
                            [
                                "X",
                                "array, shape (n_samples, n_features) or (n_samples, n_samples)"
                            ],
                            [
                                "X_embedded",
                                "array, shape (n_samples, n_components)"
                            ],
                            [
                                "n_neighbors",
                                "int, optional (default"
                            ],
                            [
                                "precomputed",
                                "bool, optional (default"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "trustworthiness": "float"
                    }
                ]
            ]
        ],
        6
    ],
    "../scikit-learn-master/sklearn\\manifold\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\manifold\\tests\\test_isomap.py": [
        [],
        5
    ],
    "../scikit-learn-master/sklearn\\manifold\\tests\\test_locally_linear.py": [
        [],
        7
    ],
    "../scikit-learn-master/sklearn\\manifold\\tests\\test_mds.py": [
        [],
        3
    ],
    "../scikit-learn-master/sklearn\\manifold\\tests\\test_spectral_embedding.py": [
        [
            [
                "_check_with_col_sign_flipping",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ]
        ],
        12
    ],
    "../scikit-learn-master/sklearn\\manifold\\tests\\test_t_sne.py": [
        [
            [
                "test_optimization_minimizes_kl_divergence",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "check_uniform_grid",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ]
        ],
        41
    ],
    "../scikit-learn-master/sklearn\\manifold\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\metrics\\base.py": [
        [
            [
                "_average_binary_score",
                [
                    [
                        [
                            [
                                "binary_metric",
                                "callable, returns shape [n_classes]"
                            ],
                            [
                                "y_true",
                                "array, shape = [n_samples] or [n_samples, n_classes]"
                            ],
                            [
                                "y_score",
                                "array, shape = [n_samples] or [n_samples, n_classes]"
                            ],
                            [
                                "average",
                                "string, [None, 'micro', 'macro' (default), 'samples', 'weighted']"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "score": "float or array of shape [n_classes]"
                    }
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\metrics\\classification.py": [
        [
            [
                "_check_targets",
                [
                    [
                        [
                            [
                                "y_true",
                                "array-like"
                            ],
                            [
                                "y_pred",
                                "array-like"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "type_true": "one of {'multilabel-indicator', 'multiclass', 'binary'}",
                        "y_true": "array or indicator matrix",
                        "y_pred": "array or indicator matrix"
                    }
                ]
            ],
            [
                "accuracy_score",
                [
                    [
                        [
                            [
                                "y_true",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "y_pred",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "normalize",
                                "bool, optional (default=True)"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "score": "float"
                    }
                ]
            ],
            [
                "confusion_matrix",
                [
                    [
                        [
                            [
                                "y_true",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "y_pred",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "labels",
                                "array, shape = [n_classes], optional"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "C": "array, shape = [n_classes, n_classes]"
                    }
                ]
            ],
            [
                "cohen_kappa_score",
                [
                    [
                        [
                            [
                                "y1",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "y2",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "labels",
                                "array, shape = [n_classes], optional"
                            ],
                            [
                                "weights",
                                "str, optional"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "kappa": "float"
                    }
                ]
            ],
            [
                "jaccard_similarity_score",
                [
                    [
                        [
                            [
                                "y_true",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "y_pred",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "normalize",
                                "bool, optional (default=True)"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "score": "float"
                    }
                ]
            ],
            [
                "matthews_corrcoef",
                [
                    [
                        [
                            [
                                "y_true",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "y_pred",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], default None"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "mcc": "float"
                    }
                ]
            ],
            [
                "zero_one_loss",
                [
                    [
                        [
                            [
                                "y_true",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "y_pred",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "normalize",
                                "bool, optional (default=True)"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "loss": "float or int,"
                    }
                ]
            ],
            [
                "f1_score",
                [
                    [
                        [
                            [
                                "y_true",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "y_pred",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "labels",
                                "list, optional"
                            ],
                            [
                                "pos_label",
                                "str or int, 1 by default"
                            ],
                            [
                                "average",
                                "string, [None, 'binary' (default), 'micro', 'macro', 'samples',                        'weighted']"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "f1_score": "float or array of float, shape = [n_unique_labels]"
                    }
                ]
            ],
            [
                "fbeta_score",
                [
                    [
                        [
                            [
                                "y_true",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "y_pred",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "beta",
                                "float"
                            ],
                            [
                                "labels",
                                "list, optional"
                            ],
                            [
                                "pos_label",
                                "str or int, 1 by default"
                            ],
                            [
                                "average",
                                "string, [None, 'binary' (default), 'micro', 'macro', 'samples',                        'weighted']"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        7,
                        0
                    ],
                    {
                        "fbeta_score": "float (if average is not None) or array of float, shape =        [n_unique_labels]"
                    }
                ]
            ],
            [
                "_prf_divide",
                [
                    [
                        [],
                        6,
                        6
                    ],
                    null
                ]
            ],
            [
                "precision_recall_fscore_support",
                [
                    [
                        [
                            [
                                "y_true",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "y_pred",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "beta",
                                "float, 1.0 by default"
                            ],
                            [
                                "labels",
                                "list, optional"
                            ],
                            [
                                "pos_label",
                                "str or int, 1 by default"
                            ],
                            [
                                "average",
                                "string, [None (default), 'binary', 'micro', 'macro', 'samples',                        'weighted']"
                            ],
                            [
                                "warn_for",
                                "tuple or set, for internal use"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        8,
                        0
                    ],
                    {
                        "precision": "float (if average is not None) or array of float, shape =        [n_unique_labels]",
                        "recall": "float (if average is not None) or array of float, , shape =        [n_unique_labels]",
                        "fbeta_score": "float (if average is not None) or array of float, shape =        [n_unique_labels]",
                        "support": "int (if average is not None) or array of int, shape =        [n_unique_labels]"
                    }
                ]
            ],
            [
                "precision_score",
                [
                    [
                        [
                            [
                                "y_true",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "y_pred",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "labels",
                                "list, optional"
                            ],
                            [
                                "pos_label",
                                "str or int, 1 by default"
                            ],
                            [
                                "average",
                                "string, [None, 'binary' (default), 'micro', 'macro', 'samples',                        'weighted']"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "precision": "float (if average is not None) or array of float, shape =        [n_unique_labels]"
                    }
                ]
            ],
            [
                "recall_score",
                [
                    [
                        [
                            [
                                "y_true",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "y_pred",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "labels",
                                "list, optional"
                            ],
                            [
                                "pos_label",
                                "str or int, 1 by default"
                            ],
                            [
                                "average",
                                "string, [None, 'binary' (default), 'micro', 'macro', 'samples',                        'weighted']"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "recall": "float (if average is not None) or array of float, shape =        [n_unique_labels]"
                    }
                ]
            ],
            [
                "classification_report",
                [
                    [
                        [
                            [
                                "y_true",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "y_pred",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "labels",
                                "array, shape = [n_labels]"
                            ],
                            [
                                "target_names",
                                "list of strings"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ],
                            [
                                "digits",
                                "int"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "report": "string",
                        "to": "func"
                    }
                ]
            ],
            [
                "hamming_loss",
                [
                    [
                        [
                            [
                                "y_true",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "y_pred",
                                "1d array-like, or label indicator array / sparse matrix"
                            ],
                            [
                                "labels",
                                "array, shape = [n_labels], optional (default=None)"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ],
                            [
                                "classes",
                                "array, shape = [n_labels], optional"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "loss": "float or int,"
                    }
                ]
            ],
            [
                "log_loss",
                [
                    [
                        [
                            [
                                "y_true",
                                "array-like or label indicator matrix"
                            ],
                            [
                                "y_pred",
                                "array-like of float, shape = (n_samples, n_classes) or (n_samples,)"
                            ],
                            [
                                "eps",
                                "float"
                            ],
                            [
                                "normalize",
                                "bool, optional (default=True)"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ],
                            [
                                "labels",
                                "array-like, optional (default=None)"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "loss": "float"
                    }
                ]
            ],
            [
                "hinge_loss",
                [
                    [
                        [
                            [
                                "y_true",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "pred_decision",
                                "array, shape = [n_samples] or [n_samples, n_classes]"
                            ],
                            [
                                "labels",
                                "array, optional, default None"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "loss": "float"
                    }
                ]
            ],
            [
                "_check_binary_probabilistic_predictions",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "brier_score_loss",
                [
                    [
                        [
                            [
                                "y_true",
                                "array, shape (n_samples,)"
                            ],
                            [
                                "y_prob",
                                "array, shape (n_samples,)"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ],
                            [
                                "pos_label",
                                "int or str, default=None"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "score": "float"
                    }
                ]
            ]
        ],
        20
    ],
    "../scikit-learn-master/sklearn\\metrics\\pairwise.py": [
        [
            [
                "_return_float_dtype",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "check_pairwise_arrays",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples_a, n_features)"
                            ],
                            [
                                "Y",
                                "{array-like, sparse matrix}, shape (n_samples_b, n_features)"
                            ],
                            [
                                "precomputed",
                                "bool"
                            ],
                            [
                                "dtype",
                                "string, type, list of types or None (default=None)"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "safe_X": "{array-like, sparse matrix}, shape (n_samples_a, n_features)",
                        "safe_Y": "{array-like, sparse matrix}, shape (n_samples_b, n_features)"
                    }
                ]
            ],
            [
                "check_paired_arrays",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples_a, n_features)"
                            ],
                            [
                                "Y",
                                "{array-like, sparse matrix}, shape (n_samples_b, n_features)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "safe_X": "{array-like, sparse matrix}, shape (n_samples_a, n_features)",
                        "safe_Y": "{array-like, sparse matrix}, shape (n_samples_b, n_features)"
                    }
                ]
            ],
            [
                "euclidean_distances",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples_1, n_features)"
                            ],
                            [
                                "Y",
                                "{array-like, sparse matrix}, shape (n_samples_2, n_features)"
                            ],
                            [
                                "Y_norm_squared",
                                "array-like, shape (n_samples_2, ), optional"
                            ],
                            [
                                "squared",
                                "boolean, optional"
                            ],
                            [
                                "X_norm_squared",
                                "array-like, shape = [n_samples_1], optional"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "distances": "{array, sparse matrix}, shape (n_samples_1, n_samples_2)"
                    }
                ]
            ],
            [
                "pairwise_distances_argmin_min",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples1, n_features)"
                            ],
                            [
                                "Y",
                                "{array-like, sparse matrix}, shape (n_samples2, n_features)"
                            ],
                            [
                                "axis",
                                "int, optional, default 1"
                            ],
                            [
                                "metric",
                                "string or callable, default 'euclidean'"
                            ],
                            [
                                "batch_size",
                                "integer"
                            ],
                            [
                                "metric_kwargs",
                                "dict, optional"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "argmin": "numpy.ndarray",
                        "distances": "numpy.ndarray"
                    }
                ]
            ],
            [
                "pairwise_distances_argmin",
                [
                    [
                        [
                            [
                                "X",
                                "array-like"
                            ],
                            [
                                "Y",
                                "array-like"
                            ],
                            [
                                "axis",
                                "int, optional, default 1"
                            ],
                            [
                                "metric",
                                "string or callable"
                            ],
                            [
                                "batch_size",
                                "integer"
                            ],
                            [
                                "metric_kwargs",
                                "dict"
                            ]
                        ],
                        6,
                        0
                    ],
                    {
                        "argmin": "numpy.ndarray"
                    }
                ]
            ],
            [
                "manhattan_distances",
                [
                    [
                        [
                            [
                                "X",
                                "array_like"
                            ],
                            [
                                "Y",
                                "array_like, optional"
                            ],
                            [
                                "sum_over_features",
                                "bool, default=True"
                            ],
                            [
                                "size_threshold",
                                "int, default=5e8"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "D": "array"
                    }
                ]
            ],
            [
                "cosine_distances",
                [
                    [
                        [
                            [
                                "X",
                                "array_like, sparse matrix"
                            ],
                            [
                                "Y",
                                "array_like, sparse matrix (optional)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "matrix": "array"
                    }
                ]
            ],
            [
                "paired_euclidean_distances",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "Y",
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "distances": "ndarray (n_samples, )"
                    }
                ]
            ],
            [
                "paired_manhattan_distances",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "Y",
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "distances": "ndarray (n_samples, )"
                    }
                ]
            ],
            [
                "paired_cosine_distances",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "Y",
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "distances": "ndarray, shape (n_samples, )"
                    }
                ]
            ],
            [
                "paired_distances",
                [
                    [
                        [
                            [
                                "X",
                                "ndarray (n_samples, n_features)"
                            ],
                            [
                                "Y",
                                "ndarray (n_samples, n_features)"
                            ],
                            [
                                "metric",
                                "string or callable"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "distances": "ndarray (n_samples, )"
                    }
                ]
            ],
            [
                "linear_kernel",
                [
                    [
                        [
                            [
                                "X",
                                "array of shape (n_samples_1, n_features)"
                            ],
                            [
                                "Y",
                                "array of shape (n_samples_2, n_features)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "matrix": "array of shape (n_samples_1, n_samples_2)"
                    }
                ]
            ],
            [
                "polynomial_kernel",
                [
                    [
                        [
                            [
                                "X",
                                "ndarray of shape (n_samples_1, n_features)"
                            ],
                            [
                                "Y",
                                "ndarray of shape (n_samples_2, n_features)"
                            ],
                            [
                                "degree",
                                "int, default 3"
                            ],
                            [
                                "gamma",
                                "float, default None"
                            ],
                            [
                                "coef0",
                                "int, default 1"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "matrix": "array of shape (n_samples_1, n_samples_2)"
                    }
                ]
            ],
            [
                "sigmoid_kernel",
                [
                    [
                        [
                            [
                                "X",
                                "ndarray of shape (n_samples_1, n_features)"
                            ],
                            [
                                "Y",
                                "ndarray of shape (n_samples_2, n_features)"
                            ],
                            [
                                "gamma",
                                "float, default None"
                            ],
                            [
                                "coef0",
                                "int, default 1"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "matrix": "array of shape (n_samples_1, n_samples_2)"
                    }
                ]
            ],
            [
                "rbf_kernel",
                [
                    [
                        [
                            [
                                "X",
                                "array of shape (n_samples_X, n_features)"
                            ],
                            [
                                "Y",
                                "array of shape (n_samples_Y, n_features)"
                            ],
                            [
                                "gamma",
                                "float, default None"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "kernel_matrix": "array of shape (n_samples_X, n_samples_Y)"
                    }
                ]
            ],
            [
                "laplacian_kernel",
                [
                    [
                        [
                            [
                                "X",
                                "array of shape (n_samples_X, n_features)"
                            ],
                            [
                                "Y",
                                "array of shape (n_samples_Y, n_features)"
                            ],
                            [
                                "gamma",
                                "float, default None"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "kernel_matrix": "array of shape (n_samples_X, n_samples_Y)"
                    }
                ]
            ],
            [
                "cosine_similarity",
                [
                    [
                        [
                            [
                                "X",
                                "ndarray or sparse array, shape"
                            ],
                            [
                                "Y",
                                "ndarray or sparse array, shape"
                            ],
                            [
                                "dense_output",
                                "boolean (optional), default True"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "matrix": "array"
                    }
                ]
            ],
            [
                "additive_chi2_kernel",
                [
                    [
                        [
                            [
                                "X",
                                "array-like of shape (n_samples_X, n_features)"
                            ],
                            [
                                "Y",
                                "array of shape (n_samples_Y, n_features)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "kernel_matrix": "array of shape (n_samples_X, n_samples_Y)"
                    }
                ]
            ],
            [
                "chi2_kernel",
                [
                    [
                        [
                            [
                                "X",
                                "array-like of shape (n_samples_X, n_features)"
                            ],
                            [
                                "Y",
                                "array of shape (n_samples_Y, n_features)"
                            ],
                            [
                                "gamma",
                                "float, default=1."
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "kernel_matrix": "array of shape (n_samples_X, n_samples_Y)"
                    }
                ]
            ],
            [
                "distance_metrics",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "_parallel_pairwise",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "_pairwise_callable",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "pairwise_distances",
                [
                    [
                        [
                            [
                                "X",
                                "array [n_samples_a, n_samples_a] if metric == \"precomputed\", or,              [n_samples_a, n_features] otherwise"
                            ],
                            [
                                "Y",
                                "array [n_samples_b, n_features], optional"
                            ],
                            [
                                "metric",
                                "string, or callable"
                            ],
                            [
                                "n_jobs",
                                "int"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "D": "array [n_samples_a, n_samples_a] or [n_samples_a, n_samples_b]"
                    }
                ]
            ],
            [
                "kernel_metrics",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "pairwise_kernels",
                [
                    [
                        [
                            [
                                "X",
                                "array [n_samples_a, n_samples_a] if metric == \"precomputed\", or,              [n_samples_a, n_features] otherwise"
                            ],
                            [
                                "Y",
                                "array [n_samples_b, n_features]"
                            ],
                            [
                                "metric",
                                "string, or callable"
                            ],
                            [
                                "filter_params",
                                "boolean"
                            ],
                            [
                                "n_jobs",
                                "int"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "K": "array [n_samples_a, n_samples_a] or [n_samples_a, n_samples_b]"
                    }
                ]
            ]
        ],
        26
    ],
    "../scikit-learn-master/sklearn\\metrics\\ranking.py": [
        [
            [
                "auc",
                [
                    [
                        [
                            [
                                "x",
                                "array, shape = [n]"
                            ],
                            [
                                "y",
                                "array, shape = [n]"
                            ],
                            [
                                "reorder",
                                "boolean, optional (default=False)"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "auc": "float"
                    }
                ]
            ],
            [
                "average_precision_score",
                [
                    [
                        [
                            [
                                "y_true",
                                "array, shape = [n_samples] or [n_samples, n_classes]"
                            ],
                            [
                                "y_score",
                                "array, shape = [n_samples] or [n_samples, n_classes]"
                            ],
                            [
                                "average",
                                "string, [None, 'micro', 'macro' (default), 'samples', 'weighted']"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "average_precision": "float"
                    }
                ]
            ],
            [
                "roc_auc_score",
                [
                    [
                        [
                            [
                                "y_true",
                                "array, shape = [n_samples] or [n_samples, n_classes]"
                            ],
                            [
                                "y_score",
                                "array, shape = [n_samples] or [n_samples, n_classes]"
                            ],
                            [
                                "average",
                                "string, [None, 'micro', 'macro' (default), 'samples', 'weighted']"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "auc": "float"
                    }
                ]
            ],
            [
                "_binary_clf_curve",
                [
                    [
                        [
                            [
                                "y_true",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "y_score",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "pos_label",
                                "int or str, default=None"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "fps": "array, shape = [n_thresholds]",
                        "tps": "array, shape = [n_thresholds <= len(np.unique(y_score))]",
                        "thresholds": "array, shape = [n_thresholds]"
                    }
                ]
            ],
            [
                "precision_recall_curve",
                [
                    [
                        [
                            [
                                "y_true",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "probas_pred",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "pos_label",
                                "int or str, default=None"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "precision": "array, shape = [n_thresholds + 1]",
                        "recall": "array, shape = [n_thresholds + 1]",
                        "thresholds": "array, shape = [n_thresholds <= len(np.unique(probas_pred))]"
                    }
                ]
            ],
            [
                "roc_curve",
                [
                    [
                        [
                            [
                                "y_true",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "y_score",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "pos_label",
                                "int or str, default=None"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ],
                            [
                                "drop_intermediate",
                                "boolean, optional (default=True)"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "fpr": "array, shape = [>2]",
                        "tpr": "array, shape = [>2]",
                        "thresholds": "array, shape = [n_thresholds]"
                    }
                ]
            ],
            [
                "label_ranking_average_precision_score",
                [
                    [
                        [
                            [
                                "y_true",
                                "array or sparse matrix, shape = [n_samples, n_labels]"
                            ],
                            [
                                "y_score",
                                "array, shape = [n_samples, n_labels]"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "score": "float"
                    }
                ]
            ],
            [
                "coverage_error",
                [
                    [
                        [
                            [
                                "y_true",
                                "array, shape = [n_samples, n_labels]"
                            ],
                            [
                                "y_score",
                                "array, shape = [n_samples, n_labels]"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "coverage_error": "float"
                    }
                ]
            ],
            [
                "label_ranking_loss",
                [
                    [
                        [
                            [
                                "y_true",
                                "array or sparse matrix, shape = [n_samples, n_labels]"
                            ],
                            [
                                "y_score",
                                "array, shape = [n_samples, n_labels]"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = [n_samples], optional"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "loss": "float"
                    }
                ]
            ],
            [
                "dcg_score",
                [
                    [
                        [
                            [
                                "y_true",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "y_score",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "k",
                                "int"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "score": "float"
                    }
                ]
            ],
            [
                "ndcg_score",
                [
                    [
                        [
                            [
                                "y_true",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "y_score",
                                "array, shape = [n_samples, n_classes]"
                            ],
                            [
                                "k",
                                "int"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "score": "float"
                    }
                ]
            ]
        ],
        11
    ],
    "../scikit-learn-master/sklearn\\metrics\\regression.py": [
        [
            [
                "_check_reg_targets",
                [
                    [
                        [
                            [
                                "y_true",
                                "array-like,"
                            ],
                            [
                                "y_pred",
                                "array-like,"
                            ],
                            [
                                "multioutput",
                                "array-like or string in ['raw_values', uniform_average',"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "type_true": "one of {'continuous', continuous-multioutput'}",
                        "y_true": "array-like of shape = (n_samples, n_outputs)",
                        "y_pred": "array-like of shape = (n_samples, n_outputs)",
                        "multioutput": "array-like of shape = (n_outputs) or string in ['raw_values',"
                    }
                ]
            ],
            [
                "mean_absolute_error",
                [
                    [
                        [
                            [
                                "y_true",
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ],
                            [
                                "y_pred",
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = (n_samples), optional"
                            ],
                            [
                                "multioutput",
                                "string in ['raw_values', 'uniform_average']"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "loss": "float or ndarray of floats"
                    }
                ]
            ],
            [
                "mean_squared_error",
                [
                    [
                        [
                            [
                                "y_true",
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ],
                            [
                                "y_pred",
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = (n_samples), optional"
                            ],
                            [
                                "multioutput",
                                "string in ['raw_values', 'uniform_average']"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "loss": "float or ndarray of floats"
                    }
                ]
            ],
            [
                "mean_squared_log_error",
                [
                    [
                        [
                            [
                                "y_true",
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ],
                            [
                                "y_pred",
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = (n_samples), optional"
                            ],
                            [
                                "multioutput",
                                "string in ['raw_values', 'uniform_average']             or array-like of shape = (n_outputs)"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "loss": "float or ndarray of floats"
                    }
                ]
            ],
            [
                "median_absolute_error",
                [
                    [
                        [
                            [
                                "y_true",
                                "array-like of shape = (n_samples)"
                            ],
                            [
                                "y_pred",
                                "array-like of shape = (n_samples)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "loss": "float"
                    }
                ]
            ],
            [
                "explained_variance_score",
                [
                    [
                        [
                            [
                                "y_true",
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ],
                            [
                                "y_pred",
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = (n_samples), optional"
                            ],
                            [
                                "multioutput",
                                "string in ['raw_values', 'uniform_average',                 'variance_weighted'] or array-like of shape (n_outputs)"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "score": "float or ndarray of floats"
                    }
                ]
            ],
            [
                "r2_score",
                [
                    [
                        [
                            [
                                "y_true",
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ],
                            [
                                "y_pred",
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = (n_samples), optional"
                            ],
                            [
                                "multioutput",
                                "string in ['raw_values', 'uniform_average', 'variance_weighted'] or None or array-like of shape (n_outputs)"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "versionchanged": "",
                        "z": "float or ndarray of floats"
                    }
                ]
            ]
        ],
        7
    ],
    "../scikit-learn-master/sklearn\\metrics\\scorer.py": [
        [
            [
                "get_scorer",
                [
                    [
                        [
                            [
                                "scoring",
                                "str | callable"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "scorer": "callable"
                    }
                ]
            ],
            [
                "_passthrough_scorer",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "check_scoring",
                [
                    [
                        [
                            [
                                "estimator",
                                "estimator object implementing 'fit'"
                            ],
                            [
                                "scoring",
                                "string, callable or None, optional, default"
                            ],
                            [
                                "allow_none",
                                "boolean, optional, default"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "scoring": "callable"
                    }
                ]
            ],
            [
                "_check_multimetric_scoring",
                [
                    [
                        [
                            [
                                "estimator",
                                "sklearn estimator instance"
                            ],
                            [
                                "scoring",
                                "string, callable, list/tuple, dict or None, default"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "scorers_dict": "dict",
                        "is_multimetric": "bool"
                    }
                ]
            ],
            [
                "make_scorer",
                [
                    [
                        [
                            [
                                "score_func",
                                "callable,"
                            ],
                            [
                                "greater_is_better",
                                "boolean, default=True"
                            ],
                            [
                                "needs_proba",
                                "boolean, default=False"
                            ],
                            [
                                "needs_threshold",
                                "boolean, default=False"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "scorer": "callable"
                    }
                ]
            ]
        ],
        5
    ],
    "../scikit-learn-master/sklearn\\metrics\\setup.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\metrics\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\bicluster.py": [
        [
            [
                "_check_rows_and_columns",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_jaccard",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "_pairwise_similarity",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "consensus_score",
                [
                    [
                        [
                            [
                                "a",
                                "(rows, columns)"
                            ],
                            [
                                "b",
                                "(rows, columns)"
                            ],
                            [
                                "similarity",
                                "string or function, optional, default"
                            ]
                        ],
                        3,
                        0
                    ],
                    null
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\setup.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\supervised.py": [
        [
            [
                "check_clusterings",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "contingency_matrix",
                [
                    [
                        [
                            [
                                "labels_true",
                                "int array, shape = [n_samples]"
                            ],
                            [
                                "labels_pred",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "eps",
                                "None or float, optional."
                            ],
                            [
                                "sparse",
                                "boolean, optional."
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "contingency": "{array-like, sparse}, shape=[n_classes_true, n_classes_pred]",
                        "Matrix": "math",
                        "class": "math"
                    }
                ]
            ],
            [
                "adjusted_rand_score",
                [
                    [
                        [
                            [
                                "labels_true",
                                "int array, shape = [n_samples]"
                            ],
                            [
                                "labels_pred",
                                "array, shape = [n_samples]"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "ari": "float"
                    }
                ]
            ],
            [
                "homogeneity_completeness_v_measure",
                [
                    [
                        [
                            [
                                "labels_true",
                                "int array, shape = [n_samples]"
                            ],
                            [
                                "labels_pred",
                                "array, shape = [n_samples]"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "homogeneity": "float",
                        "completeness": "float",
                        "v_measure": "float"
                    }
                ]
            ],
            [
                "homogeneity_score",
                [
                    [
                        [
                            [
                                "labels_true",
                                "int array, shape = [n_samples]"
                            ],
                            [
                                "labels_pred",
                                "array, shape = [n_samples]"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "homogeneity": "float"
                    }
                ]
            ],
            [
                "completeness_score",
                [
                    [
                        [
                            [
                                "labels_true",
                                "int array, shape = [n_samples]"
                            ],
                            [
                                "labels_pred",
                                "array, shape = [n_samples]"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "completeness": "float"
                    }
                ]
            ],
            [
                "v_measure_score",
                [
                    [
                        [
                            [
                                "labels_true",
                                "int array, shape = [n_samples]"
                            ],
                            [
                                "labels_pred",
                                "array, shape = [n_samples]"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "v_measure": "float"
                    }
                ]
            ],
            [
                "mutual_info_score",
                [
                    [
                        [
                            [
                                "labels_true",
                                "int array, shape = [n_samples]"
                            ],
                            [
                                "labels_pred",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "contingency",
                                "{None, array, sparse matrix},"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "mi": "float"
                    }
                ]
            ],
            [
                "adjusted_mutual_info_score",
                [
                    [
                        [
                            [
                                "labels_true",
                                "int array, shape = [n_samples]"
                            ],
                            [
                                "labels_pred",
                                "array, shape = [n_samples]"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "ami": "float(upperlimited by 1.0)"
                    }
                ]
            ],
            [
                "normalized_mutual_info_score",
                [
                    [
                        [
                            [
                                "labels_true",
                                "int array, shape = [n_samples]"
                            ],
                            [
                                "labels_pred",
                                "array, shape = [n_samples]"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "nmi": "float"
                    }
                ]
            ],
            [
                "fowlkes_mallows_score",
                [
                    [
                        [
                            [
                                "labels_true",
                                "int array, shape = (``n_samples``,)"
                            ],
                            [
                                "labels_pred",
                                "array, shape = (``n_samples``, )"
                            ],
                            [
                                "sparse",
                                "bool"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "score": "float"
                    }
                ]
            ],
            [
                "entropy",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        13
    ],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\unsupervised.py": [
        [
            [
                "silhouette_score",
                [
                    [
                        [
                            [
                                "X",
                                "array [n_samples_a, n_samples_a] if metric == \"precomputed\", or,              [n_samples_a, n_features] otherwise"
                            ],
                            [
                                "labels",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "metric",
                                "string, or callable"
                            ],
                            [
                                "sample_size",
                                "int or None"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "silhouette": "float"
                    }
                ]
            ],
            [
                "silhouette_samples",
                [
                    [
                        [
                            [
                                "X",
                                "array [n_samples_a, n_samples_a] if metric == \"precomputed\", or,              [n_samples_a, n_features] otherwise"
                            ],
                            [
                                "labels",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "metric",
                                "string, or callable"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "silhouette": "array, shape = [n_samples]"
                    }
                ]
            ],
            [
                "calinski_harabaz_score",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (``n_samples``, ``n_features``)"
                            ],
                            [
                                "labels",
                                "array-like, shape (``n_samples``,)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "score": "float"
                    }
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\tests\\test_bicluster.py": [
        [
            [
                "test_consensus_score_issue2445",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\tests\\test_supervised.py": [
        [],
        17
    ],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\tests\\test_unsupervised.py": [
        [],
        6
    ],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_classification.py": [
        [
            [
                "make_prediction",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "test_confusion_matrix_sample_weight",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        56
    ],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_common.py": [
        [],
        25
    ],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_pairwise.py": [
        [],
        31
    ],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_ranking.py": [
        [
            [
                "make_prediction",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_auc",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_average_precision",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_average_precision_slow",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_my_lrap",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ]
        ],
        38
    ],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_regression.py": [
        [],
        7
    ],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_score_objects.py": [
        [],
        20
    ],
    "../scikit-learn-master/sklearn\\metrics\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\mixture\\base.py": [
        [
            [
                "_check_shape",
                [
                    [
                        [
                            [
                                "param",
                                "array"
                            ],
                            [
                                "param_shape",
                                "tuple"
                            ],
                            [
                                "name",
                                "string"
                            ]
                        ],
                        3,
                        0
                    ],
                    null
                ]
            ],
            [
                "_check_X",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "n_components",
                                "int"
                            ]
                        ],
                        3,
                        1
                    ],
                    {
                        "X": "array, shape (n_samples, n_features)"
                    }
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\mixture\\bayesian_mixture.py": [
        [
            [
                "_log_dirichlet_norm",
                [
                    [
                        [
                            [
                                "dirichlet_concentration",
                                "array-like, shape (n_samples,)"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "log_dirichlet_norm": "float"
                    }
                ]
            ],
            [
                "_log_wishart_norm",
                [
                    [
                        [
                            [
                                "degrees_of_freedom",
                                "array-like, shape (n_components,)"
                            ],
                            [
                                "n_features",
                                "int"
                            ]
                        ],
                        3,
                        1
                    ],
                    null
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\mixture\\dpgmm.py": [
        [
            [
                "log_normalize",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "wishart_log_det",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "wishart_logz",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "_bound_wishart",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_sym_quad_form",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_bound_state_log_lik",
                [
                    [
                        [],
                        5,
                        5
                    ],
                    null
                ]
            ]
        ],
        8
    ],
    "../scikit-learn-master/sklearn\\mixture\\gaussian_mixture.py": [
        [
            [
                "_check_weights",
                [
                    [
                        [
                            [
                                "weights",
                                "array-like, shape (n_components,)"
                            ],
                            [
                                "n_components",
                                "int"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "weights": "array, shape (n_components,)"
                    }
                ]
            ],
            [
                "_check_means",
                [
                    [
                        [
                            [
                                "means",
                                "array-like, shape (n_components, n_features)"
                            ],
                            [
                                "n_components",
                                "int"
                            ],
                            [
                                "n_features",
                                "int"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "means": "array, (n_components, n_features)"
                    }
                ]
            ],
            [
                "_check_precision_positivity",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_check_precision_matrix",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_check_precisions_full",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_check_precisions",
                [
                    [
                        [
                            [
                                "precisions",
                                "array-like,"
                            ],
                            [
                                "covariance_type",
                                "string"
                            ],
                            [
                                "n_components",
                                "int"
                            ],
                            [
                                "n_features",
                                "int"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "precisions": "array"
                    }
                ]
            ],
            [
                "_estimate_gaussian_covariances_full",
                [
                    [
                        [
                            [
                                "resp",
                                "array-like, shape (n_samples, n_components)"
                            ],
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "nk",
                                "array-like, shape (n_components,)"
                            ],
                            [
                                "means",
                                "array-like, shape (n_components, n_features)"
                            ],
                            [
                                "reg_covar",
                                "float"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "covariances": "array, shape (n_components, n_features, n_features)"
                    }
                ]
            ],
            [
                "_estimate_gaussian_covariances_tied",
                [
                    [
                        [
                            [
                                "resp",
                                "array-like, shape (n_samples, n_components)"
                            ],
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "nk",
                                "array-like, shape (n_components,)"
                            ],
                            [
                                "means",
                                "array-like, shape (n_components, n_features)"
                            ],
                            [
                                "reg_covar",
                                "float"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "covariance": "array, shape (n_features, n_features)"
                    }
                ]
            ],
            [
                "_estimate_gaussian_covariances_diag",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "nk",
                                "array-like, shape (n_components,)"
                            ],
                            [
                                "means",
                                "array-like, shape (n_components, n_features)"
                            ],
                            [
                                "reg_covar",
                                "float"
                            ]
                        ],
                        5,
                        1
                    ],
                    {
                        "covariances": "array, shape (n_components, n_features)"
                    }
                ]
            ],
            [
                "_estimate_gaussian_covariances_spherical",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "nk",
                                "array-like, shape (n_components,)"
                            ],
                            [
                                "means",
                                "array-like, shape (n_components, n_features)"
                            ],
                            [
                                "reg_covar",
                                "float"
                            ]
                        ],
                        5,
                        1
                    ],
                    {
                        "variances": "array, shape (n_components,)"
                    }
                ]
            ],
            [
                "_estimate_gaussian_parameters",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "resp",
                                "array-like, shape (n_samples, n_components)"
                            ],
                            [
                                "reg_covar",
                                "float"
                            ],
                            [
                                "covariance_type",
                                "{'full', 'tied', 'diag', 'spherical'}"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "nk": "array-like, shape (n_components,)",
                        "means": "array-like, shape (n_components, n_features)",
                        "covariances": "array-like"
                    }
                ]
            ],
            [
                "_compute_precision_cholesky",
                [
                    [
                        [
                            [
                                "covariances",
                                "array-like"
                            ],
                            [
                                "covariance_type",
                                "{'full', 'tied', 'diag', 'spherical'}"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "precisions_cholesky": "array-like"
                    }
                ]
            ],
            [
                "_compute_log_det_cholesky",
                [
                    [
                        [
                            [
                                "matrix_chol",
                                "array-like,"
                            ],
                            [
                                "covariance_type",
                                "{'full', 'tied', 'diag', 'spherical'}"
                            ],
                            [
                                "n_features",
                                "int"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "log_det_precision_chol": "array-like, shape (n_components,)"
                    }
                ]
            ],
            [
                "_estimate_log_gaussian_prob",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "means",
                                "array-like, shape (n_components, n_features)"
                            ],
                            [
                                "precisions_chol",
                                "array-like,"
                            ],
                            [
                                "covariance_type",
                                "{'full', 'tied', 'diag', 'spherical'}"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "log_prob": "array, shape (n_samples, n_components)"
                    }
                ]
            ]
        ],
        14
    ],
    "../scikit-learn-master/sklearn\\mixture\\gmm.py": [
        [
            [
                "log_multivariate_normal_density",
                [
                    [
                        [
                            [
                                "X",
                                "array_like, shape (n_samples, n_features)"
                            ],
                            [
                                "means",
                                "array_like, shape (n_components, n_features)"
                            ],
                            [
                                "covars",
                                "array_like"
                            ],
                            [
                                "covariance_type",
                                "string"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "lpr": "array_like, shape (n_samples, n_components)"
                    }
                ]
            ],
            [
                "sample_gaussian",
                [
                    [
                        [
                            [
                                "mean",
                                "array_like, shape (n_features,)"
                            ],
                            [
                                "covar",
                                "array_like"
                            ],
                            [
                                "covariance_type",
                                "string, optional"
                            ],
                            [
                                "n_samples",
                                "int, optional"
                            ]
                        ],
                        5,
                        1
                    ],
                    {
                        "X": "array"
                    }
                ]
            ],
            [
                "_log_multivariate_normal_density_diag",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_log_multivariate_normal_density_spherical",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_log_multivariate_normal_density_tied",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_log_multivariate_normal_density_full",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "_validate_covars",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "distribute_covar_matrix_to_match_covariance_type",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_covar_mstep_diag",
                [
                    [
                        [],
                        6,
                        6
                    ],
                    null
                ]
            ],
            [
                "_covar_mstep_spherical",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "_covar_mstep_full",
                [
                    [
                        [],
                        6,
                        6
                    ],
                    null
                ]
            ],
            [
                "_covar_mstep_tied",
                [
                    [
                        [],
                        6,
                        6
                    ],
                    null
                ]
            ]
        ],
        13
    ],
    "../scikit-learn-master/sklearn\\mixture\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\mixture\\tests\\test_bayesian_mixture.py": [
        [],
        13
    ],
    "../scikit-learn-master/sklearn\\mixture\\tests\\test_dpgmm.py": [
        [],
        13
    ],
    "../scikit-learn-master/sklearn\\mixture\\tests\\test_gaussian_mixture.py": [
        [],
        31
    ],
    "../scikit-learn-master/sklearn\\mixture\\tests\\test_gmm.py": [
        [
            [
                "test_fit_predict",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "check_positive_definite_covars",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        17
    ],
    "../scikit-learn-master/sklearn\\mixture\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\model_selection\\_search.py": [
        [
            [
                "fit_grid_point",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, sparse matrix or list"
                            ],
                            [
                                "y",
                                "array-like or None"
                            ],
                            [
                                "estimator",
                                "estimator object"
                            ],
                            [
                                "parameters",
                                "dict"
                            ],
                            [
                                "train",
                                "ndarray, dtype int or bool"
                            ],
                            [
                                "test",
                                "ndarray, dtype int or bool"
                            ],
                            [
                                "scorer",
                                "callable or None"
                            ],
                            [
                                "verbose",
                                "int"
                            ],
                            [
                                "error_score",
                                "'raise' (default) or numeric"
                            ]
                        ],
                        9,
                        0
                    ],
                    {
                        "score": "float",
                        "parameters": "dict",
                        "n_samples_test": "int"
                    }
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\model_selection\\_split.py": [
        [
            [
                "_approximate_mode",
                [
                    [
                        [
                            [
                                "class_counts",
                                "ndarray of int"
                            ],
                            [
                                "n_draws",
                                "int"
                            ],
                            [
                                "rng",
                                "random state"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "sampled_classes": "ndarray of int"
                    }
                ]
            ],
            [
                "_validate_shuffle_split_init",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_validate_shuffle_split",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "check_cv",
                [
                    [
                        [
                            [
                                "cv",
                                "int, cross-validation generator or an iterable, optional"
                            ],
                            [
                                "y",
                                "array-like, optional"
                            ],
                            [
                                "classifier",
                                "boolean, optional, default False"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "checked_cv": "a cross-validator instance."
                    }
                ]
            ],
            [
                "train_test_split",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    {
                        "splitting": "list, length=2 * len(arrays)",
                        "versionadded": ""
                    }
                ]
            ]
        ],
        6
    ],
    "../scikit-learn-master/sklearn\\model_selection\\_validation.py": [
        [
            [
                "cross_validate",
                [
                    [
                        [
                            [
                                "estimator",
                                "estimator object implementing 'fit'"
                            ],
                            [
                                "X",
                                "array-like"
                            ],
                            [
                                "y",
                                "array-like, optional, default"
                            ],
                            [
                                "groups",
                                "array-like, with shape (n_samples,), optional"
                            ],
                            [
                                "scoring",
                                "string, callable, list/tuple, dict or None, default"
                            ],
                            [
                                "cv",
                                "int, cross-validation generator or an iterable, optional"
                            ],
                            [
                                "n_jobs",
                                "integer, optional"
                            ],
                            [
                                "verbose",
                                "integer, optional"
                            ],
                            [
                                "fit_params",
                                "dict, optional"
                            ],
                            [
                                "pre_dispatch",
                                "int, or string, optional"
                            ],
                            [
                                "return_train_score",
                                "boolean, default True"
                            ]
                        ],
                        11,
                        0
                    ],
                    {
                        "scores": "dict of float arrays of shape=(n_splits,)",
                        "are": ""
                    }
                ]
            ],
            [
                "cross_val_score",
                [
                    [
                        [
                            [
                                "estimator",
                                "estimator object implementing 'fit'"
                            ],
                            [
                                "X",
                                "array-like"
                            ],
                            [
                                "y",
                                "array-like, optional, default"
                            ],
                            [
                                "groups",
                                "array-like, with shape (n_samples,), optional"
                            ],
                            [
                                "scoring",
                                "string, callable or None, optional, default"
                            ],
                            [
                                "cv",
                                "int, cross-validation generator or an iterable, optional"
                            ],
                            [
                                "n_jobs",
                                "integer, optional"
                            ],
                            [
                                "verbose",
                                "integer, optional"
                            ],
                            [
                                "fit_params",
                                "dict, optional"
                            ],
                            [
                                "pre_dispatch",
                                "int, or string, optional"
                            ]
                        ],
                        10,
                        0
                    ],
                    {
                        "scores": "array of float, shape=(len(list(cv)),)"
                    }
                ]
            ],
            [
                "_fit_and_score",
                [
                    [
                        [
                            [
                                "estimator",
                                "estimator object implementing 'fit'"
                            ],
                            [
                                "X",
                                "array-like of shape at least 2D"
                            ],
                            [
                                "y",
                                "array-like, optional, default"
                            ],
                            [
                                "scorer",
                                "A single callable or dict mapping scorer name to the callable"
                            ],
                            [
                                "train",
                                "array-like, shape (n_train_samples,)"
                            ],
                            [
                                "test",
                                "array-like, shape (n_test_samples,)"
                            ],
                            [
                                "verbose",
                                "integer"
                            ],
                            [
                                "parameters",
                                "dict or None"
                            ],
                            [
                                "fit_params",
                                "dict or None"
                            ],
                            [
                                "return_train_score",
                                "boolean, optional, default"
                            ],
                            [
                                "return_parameters",
                                "boolean, optional, default"
                            ],
                            [
                                "return_n_test_samples",
                                "boolean, optional, default"
                            ],
                            [
                                "return_times",
                                "boolean, optional, default"
                            ],
                            [
                                "error_score",
                                "'raise' (default) or numeric"
                            ]
                        ],
                        14,
                        0
                    ],
                    {
                        "train_scores": "dict of scorer name -> float, optional",
                        "test_scores": "dict of scorer name -> float, optional",
                        "n_test_samples": "int",
                        "fit_time": "float",
                        "score_time": "float",
                        "parameters": "dict or None, optional"
                    }
                ]
            ],
            [
                "_score",
                [
                    [
                        [],
                        5,
                        5
                    ],
                    null
                ]
            ],
            [
                "_multimetric_score",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "cross_val_predict",
                [
                    [
                        [
                            [
                                "estimator",
                                "estimator object implementing 'fit' and 'predict'"
                            ],
                            [
                                "X",
                                "array-like"
                            ],
                            [
                                "y",
                                "array-like, optional, default"
                            ],
                            [
                                "groups",
                                "array-like, with shape (n_samples,), optional"
                            ],
                            [
                                "cv",
                                "int, cross-validation generator or an iterable, optional"
                            ],
                            [
                                "n_jobs",
                                "integer, optional"
                            ],
                            [
                                "verbose",
                                "integer, optional"
                            ],
                            [
                                "fit_params",
                                "dict, optional"
                            ],
                            [
                                "pre_dispatch",
                                "int, or string, optional"
                            ],
                            [
                                "method",
                                "string, optional, default"
                            ]
                        ],
                        10,
                        0
                    ],
                    {
                        "predictions": "ndarray"
                    }
                ]
            ],
            [
                "_fit_and_predict",
                [
                    [
                        [
                            [
                                "estimator",
                                "estimator object implementing 'fit' and 'predict'"
                            ],
                            [
                                "X",
                                "array-like of shape at least 2D"
                            ],
                            [
                                "y",
                                "array-like, optional, default"
                            ],
                            [
                                "train",
                                "array-like, shape (n_train_samples,)"
                            ],
                            [
                                "test",
                                "array-like, shape (n_test_samples,)"
                            ],
                            [
                                "verbose",
                                "integer"
                            ],
                            [
                                "fit_params",
                                "dict or None"
                            ],
                            [
                                "method",
                                "string"
                            ]
                        ],
                        8,
                        0
                    ],
                    {
                        "predictions": "sequence",
                        "test": "array-like"
                    }
                ]
            ],
            [
                "_check_is_permutation",
                [
                    [
                        [
                            [
                                "indices",
                                "ndarray"
                            ],
                            [
                                "n_samples",
                                "int"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "is_partition": "bool"
                    }
                ]
            ],
            [
                "_index_param_value",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "permutation_test_score",
                [
                    [
                        [
                            [
                                "estimator",
                                "estimator object implementing 'fit'"
                            ],
                            [
                                "X",
                                "array-like of shape at least 2D"
                            ],
                            [
                                "y",
                                "array-like"
                            ],
                            [
                                "groups",
                                "array-like, with shape (n_samples,), optional"
                            ],
                            [
                                "cv",
                                "int, cross-validation generator or an iterable, optional"
                            ],
                            [
                                "n_permutations",
                                "integer, optional"
                            ],
                            [
                                "n_jobs",
                                "integer, optional"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=0)"
                            ],
                            [
                                "verbose",
                                "integer, optional"
                            ],
                            [
                                "scoring",
                                "string, callable or None, optional, default"
                            ]
                        ],
                        10,
                        0
                    ],
                    {
                        "score": "float",
                        "permutation_scores": "array, shape (n_permutations,)",
                        "pvalue": "float",
                        "as": ""
                    }
                ]
            ],
            [
                "_permutation_test_score",
                [
                    [
                        [],
                        6,
                        6
                    ],
                    null
                ]
            ],
            [
                "_shuffle",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "learning_curve",
                [
                    [
                        [
                            [
                                "estimator",
                                "object type that implements the \"fit\" and \"predict\" methods"
                            ],
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "array-like, shape (n_samples) or (n_samples, n_features), optional"
                            ],
                            [
                                "groups",
                                "array-like, with shape (n_samples,), optional"
                            ],
                            [
                                "train_sizes",
                                "array-like, shape (n_ticks,), dtype float or int"
                            ],
                            [
                                "cv",
                                "int, cross-validation generator or an iterable, optional"
                            ],
                            [
                                "scoring",
                                "string, callable or None, optional, default"
                            ],
                            [
                                "exploit_incremental_learning",
                                "boolean, optional, default"
                            ],
                            [
                                "n_jobs",
                                "integer, optional"
                            ],
                            [
                                "pre_dispatch",
                                "integer or string, optional"
                            ],
                            [
                                "verbose",
                                "integer, optional"
                            ],
                            [
                                "shuffle",
                                "boolean, optional"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        13,
                        0
                    ],
                    {
                        "train_sizes_abs": "array, shape = (n_unique_ticks,), dtype int",
                        "train_scores": "array, shape (n_ticks, n_cv_folds)",
                        "test_scores": "array, shape (n_ticks, n_cv_folds)"
                    }
                ]
            ],
            [
                "_translate_train_sizes",
                [
                    [
                        [
                            [
                                "train_sizes",
                                "array-like, shape (n_ticks,), dtype float or int"
                            ],
                            [
                                "n_max_training_samples",
                                "int"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "train_sizes_abs": "array, shape (n_unique_ticks,), dtype int"
                    }
                ]
            ],
            [
                "_incremental_fit_estimator",
                [
                    [
                        [],
                        9,
                        9
                    ],
                    null
                ]
            ],
            [
                "validation_curve",
                [
                    [
                        [
                            [
                                "estimator",
                                "object type that implements the \"fit\" and \"predict\" methods"
                            ],
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "array-like, shape (n_samples) or (n_samples, n_features), optional"
                            ],
                            [
                                "param_name",
                                "string"
                            ],
                            [
                                "param_range",
                                "array-like, shape (n_values,)"
                            ],
                            [
                                "groups",
                                "array-like, with shape (n_samples,), optional"
                            ],
                            [
                                "cv",
                                "int, cross-validation generator or an iterable, optional"
                            ],
                            [
                                "scoring",
                                "string, callable or None, optional, default"
                            ],
                            [
                                "n_jobs",
                                "integer, optional"
                            ],
                            [
                                "pre_dispatch",
                                "integer or string, optional"
                            ],
                            [
                                "verbose",
                                "integer, optional"
                            ]
                        ],
                        11,
                        0
                    ],
                    {
                        "train_scores": "array, shape (n_ticks, n_cv_folds)",
                        "test_scores": "array, shape (n_ticks, n_cv_folds)"
                    }
                ]
            ],
            [
                "_aggregate_score_dicts",
                [
                    [
                        [
                            [
                                "scores",
                                "list of dict"
                            ]
                        ],
                        1,
                        0
                    ],
                    null
                ]
            ]
        ],
        17
    ],
    "../scikit-learn-master/sklearn\\model_selection\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\model_selection\\tests\\common.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\model_selection\\tests\\test_search.py": [
        [
            [
                "compare_cv_results_multimetric_with_single",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "compare_refit_methods_when_refit_with_acc",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ]
        ],
        56
    ],
    "../scikit-learn-master/sklearn\\model_selection\\tests\\test_split.py": [
        [],
        50
    ],
    "../scikit-learn-master/sklearn\\model_selection\\tests\\test_validation.py": [
        [],
        46
    ],
    "../scikit-learn-master/sklearn\\model_selection\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\neighbors\\approximate.py": [
        [
            [
                "_find_matching_indices",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "_find_longest_prefix_match",
                [
                    [
                        [],
                        5,
                        5
                    ],
                    null
                ]
            ],
            [
                "_array_of_arrays",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\neighbors\\base.py": [
        [
            [
                "_check_weights",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_get_weights",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\neighbors\\classification.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\neighbors\\graph.py": [
        [
            [
                "_check_params",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "_query_include_self",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "kneighbors_graph",
                [
                    [
                        [
                            [
                                "X",
                                "array-like or BallTree, shape = [n_samples, n_features]"
                            ],
                            [
                                "n_neighbors",
                                "int"
                            ],
                            [
                                "mode",
                                "{'connectivity', 'distance'}, optional"
                            ],
                            [
                                "metric",
                                "string, default 'minkowski'"
                            ],
                            [
                                "p",
                                "int, default 2"
                            ],
                            [
                                "metric_params",
                                "dict, optional"
                            ],
                            [
                                "include_self",
                                "bool, default=False."
                            ],
                            [
                                "n_jobs",
                                "int, optional (default = 1)"
                            ]
                        ],
                        8,
                        0
                    ],
                    {
                        "A": "sparse matrix in CSR format, shape = [n_samples, n_samples]"
                    }
                ]
            ],
            [
                "radius_neighbors_graph",
                [
                    [
                        [
                            [
                                "X",
                                "array-like or BallTree, shape = [n_samples, n_features]"
                            ],
                            [
                                "radius",
                                "float"
                            ],
                            [
                                "mode",
                                "{'connectivity', 'distance'}, optional"
                            ],
                            [
                                "metric",
                                "string, default 'minkowski'"
                            ],
                            [
                                "p",
                                "int, default 2"
                            ],
                            [
                                "metric_params",
                                "dict, optional"
                            ],
                            [
                                "include_self",
                                "bool, default=False"
                            ],
                            [
                                "n_jobs",
                                "int, optional (default = 1)"
                            ]
                        ],
                        8,
                        0
                    ],
                    {
                        "A": "sparse matrix in CSR format, shape = [n_samples, n_samples]"
                    }
                ]
            ]
        ],
        4
    ],
    "../scikit-learn-master/sklearn\\neighbors\\kde.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\neighbors\\lof.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\neighbors\\nearest_centroid.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\neighbors\\regression.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\neighbors\\setup.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\neighbors\\unsupervised.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\neighbors\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_approximate.py": [
        [],
        13
    ],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_ball_tree.py": [
        [],
        17
    ],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_dist_metrics.py": [
        [],
        5
    ],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_kde.py": [
        [],
        8
    ],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_kd_tree.py": [
        [],
        14
    ],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_lof.py": [
        [
            [
                "test_lof_precomputed",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        5
    ],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_nearest_centroid.py": [
        [],
        9
    ],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_neighbors.py": [
        [
            [
                "_weight_func",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "test_precomputed",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "test_radius_neighbors_boundary_handling",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        46
    ],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_quad_tree.py": [
        [],
        5
    ],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\neural_network\\multilayer_perceptron.py": [
        [
            [
                "_pack",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\neural_network\\rbm.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\neural_network\\_base.py": [
        [
            [
                "identity",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "X": "{array-like, sparse matrix}, shape (n_samples, n_features)"
                    }
                ]
            ],
            [
                "logistic",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "X_new": "{array-like, sparse matrix}, shape (n_samples, n_features)"
                    }
                ]
            ],
            [
                "tanh",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "X_new": "{array-like, sparse matrix}, shape (n_samples, n_features)"
                    }
                ]
            ],
            [
                "relu",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "X_new": "{array-like, sparse matrix}, shape (n_samples, n_features)"
                    }
                ]
            ],
            [
                "softmax",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "X_new": "{array-like, sparse matrix}, shape (n_samples, n_features)"
                    }
                ]
            ],
            [
                "inplace_identity_derivative",
                [
                    [
                        [
                            [
                                "Z",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ],
                            [
                                "delta",
                                "{array-like}, shape (n_samples, n_features)"
                            ]
                        ],
                        2,
                        0
                    ],
                    null
                ]
            ],
            [
                "inplace_logistic_derivative",
                [
                    [
                        [
                            [
                                "Z",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ],
                            [
                                "delta",
                                "{array-like}, shape (n_samples, n_features)"
                            ]
                        ],
                        2,
                        0
                    ],
                    null
                ]
            ],
            [
                "inplace_tanh_derivative",
                [
                    [
                        [
                            [
                                "Z",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ],
                            [
                                "delta",
                                "{array-like}, shape (n_samples, n_features)"
                            ]
                        ],
                        2,
                        0
                    ],
                    null
                ]
            ],
            [
                "inplace_relu_derivative",
                [
                    [
                        [
                            [
                                "Z",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ],
                            [
                                "delta",
                                "{array-like}, shape (n_samples, n_features)"
                            ]
                        ],
                        2,
                        0
                    ],
                    null
                ]
            ],
            [
                "squared_loss",
                [
                    [
                        [
                            [
                                "y_true",
                                "array-like or label indicator matrix"
                            ],
                            [
                                "y_pred",
                                "array-like or label indicator matrix"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "loss": "float"
                    }
                ]
            ],
            [
                "log_loss",
                [
                    [
                        [
                            [
                                "y_true",
                                "array-like or label indicator matrix"
                            ],
                            [
                                "y_prob",
                                "array-like of float, shape = (n_samples, n_classes)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "loss": "float"
                    }
                ]
            ],
            [
                "binary_log_loss",
                [
                    [
                        [
                            [
                                "y_true",
                                "array-like or label indicator matrix"
                            ],
                            [
                                "y_prob",
                                "array-like of float, shape = (n_samples, n_classes)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "loss": "float"
                    }
                ]
            ]
        ],
        12
    ],
    "../scikit-learn-master/sklearn\\neural_network\\_stochastic_optimizers.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\neural_network\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\neural_network\\tests\\test_mlp.py": [
        [],
        23
    ],
    "../scikit-learn-master/sklearn\\neural_network\\tests\\test_rbm.py": [
        [],
        12
    ],
    "../scikit-learn-master/sklearn\\neural_network\\tests\\test_stochastic_optimizers.py": [
        [],
        6
    ],
    "../scikit-learn-master/sklearn\\neural_network\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\preprocessing\\data.py": [
        [
            [
                "_handle_zeros_in_scale",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "scale",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}"
                            ],
                            [
                                "axis",
                                "int (0 by default)"
                            ],
                            [
                                "with_mean",
                                "boolean, True by default"
                            ],
                            [
                                "with_std",
                                "boolean, True by default"
                            ],
                            [
                                "copy",
                                "boolean, optional, default True"
                            ]
                        ],
                        5,
                        0
                    ],
                    null
                ]
            ],
            [
                "minmax_scale",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "feature_range",
                                "tuple (min, max), default=(0, 1)"
                            ],
                            [
                                "axis",
                                "int (0 by default)"
                            ],
                            [
                                "copy",
                                "boolean, optional, default is True"
                            ]
                        ],
                        4,
                        0
                    ],
                    null
                ]
            ],
            [
                "maxabs_scale",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "axis",
                                "int (0 by default)"
                            ],
                            [
                                "copy",
                                "boolean, optional, default is True"
                            ]
                        ],
                        3,
                        0
                    ],
                    null
                ]
            ],
            [
                "robust_scale",
                [
                    [
                        [
                            [
                                "X",
                                "array-like"
                            ],
                            [
                                "axis",
                                "int (0 by default)"
                            ],
                            [
                                "with_centering",
                                "boolean, True by default"
                            ],
                            [
                                "with_scaling",
                                "boolean, True by default"
                            ],
                            [
                                "quantile_range",
                                "tuple (q_min, q_max), 0.0 < q_min < q_max < 100.0"
                            ],
                            [
                                "copy",
                                "boolean, optional, default is True"
                            ]
                        ],
                        6,
                        0
                    ],
                    null
                ]
            ],
            [
                "normalize",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape [n_samples, n_features]"
                            ],
                            [
                                "norm",
                                "'l1', 'l2', or 'max', optional ('l2' by default)"
                            ],
                            [
                                "axis",
                                "0 or 1, optional (1 by default)"
                            ],
                            [
                                "copy",
                                "boolean, optional, default True"
                            ],
                            [
                                "return_norm",
                                "boolean, default False"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "X": "{array-like, sparse matrix}, shape [n_samples, n_features]",
                        "norms": "array, shape [n_samples] if axis=1 else [n_features]"
                    }
                ]
            ],
            [
                "binarize",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape [n_samples, n_features]"
                            ],
                            [
                                "threshold",
                                "float, optional (0.0 by default)"
                            ],
                            [
                                "copy",
                                "boolean, optional, default True"
                            ]
                        ],
                        3,
                        0
                    ],
                    null
                ]
            ],
            [
                "add_dummy_feature",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape [n_samples, n_features]"
                            ],
                            [
                                "value",
                                "float"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "X": "{array, sparse matrix}, shape [n_samples, n_features + 1]"
                    }
                ]
            ],
            [
                "_transform_selected",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape [n_samples, n_features]"
                            ],
                            [
                                "transform",
                                "callable"
                            ],
                            [
                                "selected",
                                "\"all\" or array of indices or mask"
                            ],
                            [
                                "copy",
                                "boolean, optional"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "X": "array or sparse matrix, shape=(n_samples, n_features_new)"
                    }
                ]
            ],
            [
                "quantile_transform",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, sparse matrix"
                            ],
                            [
                                "axis",
                                "int, (default=0)"
                            ],
                            [
                                "n_quantiles",
                                "int, optional (default=1000)"
                            ],
                            [
                                "output_distribution",
                                "str, optional (default='uniform')"
                            ],
                            [
                                "ignore_implicit_zeros",
                                "bool, optional (default=False)"
                            ],
                            [
                                "subsample",
                                "int, optional (default=1e5)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ],
                            [
                                "copy",
                                "boolean, optional, (default=True)"
                            ]
                        ],
                        8,
                        0
                    ],
                    null
                ]
            ]
        ],
        10
    ],
    "../scikit-learn-master/sklearn\\preprocessing\\imputation.py": [
        [
            [
                "_get_mask",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_most_frequent",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\preprocessing\\label.py": [
        [
            [
                "label_binarize",
                [
                    [
                        [
                            [
                                "y",
                                "array-like"
                            ],
                            [
                                "classes",
                                "array-like of shape [n_classes]"
                            ],
                            [
                                "neg_label",
                                "int (default"
                            ],
                            [
                                "pos_label",
                                "int (default"
                            ],
                            [
                                "sparse_output",
                                "boolean (default"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "Y": "numpy array or CSR matrix of shape [n_samples, n_classes]"
                    }
                ]
            ],
            [
                "_inverse_binarize_multiclass",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_inverse_binarize_thresholding",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\preprocessing\\_function_transformer.py": [
        [
            [
                "_identity",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\preprocessing\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\preprocessing\\tests\\test_data.py": [
        [],
        71
    ],
    "../scikit-learn-master/sklearn\\preprocessing\\tests\\test_function_transformer.py": [
        [],
        7
    ],
    "../scikit-learn-master/sklearn\\preprocessing\\tests\\test_imputation.py": [
        [
            [
                "_check_statistics",
                [
                    [
                        [],
                        5,
                        5
                    ],
                    null
                ]
            ]
        ],
        11
    ],
    "../scikit-learn-master/sklearn\\preprocessing\\tests\\test_label.py": [
        [],
        24
    ],
    "../scikit-learn-master/sklearn\\preprocessing\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\semi_supervised\\label_propagation.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\semi_supervised\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\semi_supervised\\tests\\test_label_propagation.py": [
        [],
        10
    ],
    "../scikit-learn-master/sklearn\\semi_supervised\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\svm\\base.py": [
        [
            [
                "_one_vs_one_coef",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_get_liblinear_solver_type",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "_fit_liblinear",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ],
                            [
                                "y",
                                "array-like, shape (n_samples,)"
                            ],
                            [
                                "C",
                                "float"
                            ],
                            [
                                "fit_intercept",
                                "bool"
                            ],
                            [
                                "intercept_scaling",
                                "float"
                            ],
                            [
                                "class_weight",
                                "{dict, 'balanced'}, optional"
                            ],
                            [
                                "penalty",
                                "str, {'l1', 'l2'}"
                            ],
                            [
                                "dual",
                                "bool"
                            ],
                            [
                                "verbose",
                                "int"
                            ],
                            [
                                "max_iter",
                                "int"
                            ],
                            [
                                "tol",
                                "float"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ],
                            [
                                "multi_class",
                                "str, {'ovr', 'crammer_singer'}"
                            ],
                            [
                                "loss",
                                "str, {'logistic_regression', 'hinge', 'squared_hinge',"
                            ],
                            [
                                "epsilon",
                                "float, optional (default=0.1)"
                            ],
                            [
                                "sample_weight",
                                "array-like, optional"
                            ]
                        ],
                        16,
                        0
                    ],
                    {
                        "coef_": "ndarray, shape (n_features, n_features + 1)",
                        "intercept_": "float",
                        "n_iter_": "int"
                    }
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\svm\\bounds.py": [
        [
            [
                "l1_min_c",
                [
                    [
                        [
                            [
                                "X",
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ],
                            [
                                "y",
                                "array, shape = [n_samples]"
                            ],
                            [
                                "loss",
                                "{'squared_hinge', 'log'}, default 'squared_hinge'"
                            ],
                            [
                                "fit_intercept",
                                "bool, default"
                            ],
                            [
                                "intercept_scaling",
                                "float, default"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "l1_min_c": "float"
                    }
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\svm\\classes.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\svm\\setup.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\svm\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\svm\\tests\\test_bounds.py": [
        [],
        4
    ],
    "../scikit-learn-master/sklearn\\svm\\tests\\test_sparse.py": [
        [
            [
                "test_svc",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_sparse_oneclasssvm",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        17
    ],
    "../scikit-learn-master/sklearn\\svm\\tests\\test_svm.py": [
        [],
        44
    ],
    "../scikit-learn-master/sklearn\\svm\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\tests\\test_base.py": [
        [],
        21
    ],
    "../scikit-learn-master/sklearn\\tests\\test_calibration.py": [
        [
            [
                "test_calibration",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_calibration_multiclass",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_calibration_prefit",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_sigmoid_calibration",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_calibration_curve",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_calibration_nan_imputer",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        9
    ],
    "../scikit-learn-master/sklearn\\tests\\test_check_build.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\tests\\test_common.py": [
        [],
        8
    ],
    "../scikit-learn-master/sklearn\\tests\\test_config.py": [
        [],
        3
    ],
    "../scikit-learn-master/sklearn\\tests\\test_cross_validation.py": [
        [],
        51
    ],
    "../scikit-learn-master/sklearn\\tests\\test_discriminant_analysis.py": [
        [],
        14
    ],
    "../scikit-learn-master/sklearn\\tests\\test_docstring_parameters.py": [
        [],
        2
    ],
    "../scikit-learn-master/sklearn\\tests\\test_dummy.py": [
        [],
        38
    ],
    "../scikit-learn-master/sklearn\\tests\\test_grid_search.py": [
        [],
        35
    ],
    "../scikit-learn-master/sklearn\\tests\\test_init.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\tests\\test_isotonic.py": [
        [
            [
                "test_isotonic_regression_ties_secondary_",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_isotonic_regression_with_ties_in_differently_sized_groups",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        30
    ],
    "../scikit-learn-master/sklearn\\tests\\test_kernel_approximation.py": [
        [],
        9
    ],
    "../scikit-learn-master/sklearn\\tests\\test_kernel_ridge.py": [
        [],
        8
    ],
    "../scikit-learn-master/sklearn\\tests\\test_learning_curve.py": [
        [],
        14
    ],
    "../scikit-learn-master/sklearn\\tests\\test_metaestimators.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\tests\\test_multiclass.py": [
        [],
        39
    ],
    "../scikit-learn-master/sklearn\\tests\\test_multioutput.py": [
        [],
        24
    ],
    "../scikit-learn-master/sklearn\\tests\\test_naive_bayes.py": [
        [
            [
                "test_gnb_sample_weight",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_gnb_neg_priors",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_gnb_priors",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_gnb_wrong_nb_priors",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_gnb_prior_greater_one",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_gnb_prior_large_bias",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_check_update_with_no_data",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "test_gnb_pfit_wrong_nb_features",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ]
        ],
        32
    ],
    "../scikit-learn-master/sklearn\\tests\\test_pipeline.py": [
        [],
        33
    ],
    "../scikit-learn-master/sklearn\\tests\\test_random_projection.py": [
        [],
        20
    ],
    "../scikit-learn-master/sklearn\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\tree\\export.py": [
        [
            [
                "_color_brew",
                [
                    [
                        [
                            [
                                "n",
                                "int"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "color_list": "list, length n"
                    }
                ]
            ],
            [
                "export_graphviz",
                [
                    [
                        [
                            [
                                "decision_tree",
                                "decision tree regressor or classifier"
                            ],
                            [
                                "out_file",
                                "file object or string, optional (default='tree.dot')"
                            ],
                            [
                                "max_depth",
                                "int, optional (default=None)"
                            ],
                            [
                                "feature_names",
                                "list of strings, optional (default=None)"
                            ],
                            [
                                "class_names",
                                "list of strings, bool or None, optional (default=None)"
                            ],
                            [
                                "label",
                                "{'all', 'root', 'none'}, optional (default='all')"
                            ],
                            [
                                "filled",
                                "bool, optional (default=False)"
                            ],
                            [
                                "leaves_parallel",
                                "bool, optional (default=False)"
                            ],
                            [
                                "impurity",
                                "bool, optional (default=True)"
                            ],
                            [
                                "node_ids",
                                "bool, optional (default=False)"
                            ],
                            [
                                "proportion",
                                "bool, optional (default=False)"
                            ],
                            [
                                "rotate",
                                "bool, optional (default=False)"
                            ],
                            [
                                "rounded",
                                "bool, optional (default=False)"
                            ],
                            [
                                "special_characters",
                                "bool, optional (default=False)"
                            ],
                            [
                                "precision",
                                "int, optional (default=3)"
                            ]
                        ],
                        15,
                        0
                    ],
                    {
                        "dot_data": "string",
                        "versionadded": ""
                    }
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\tree\\setup.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\tree\\tree.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\tree\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\tree\\tests\\test_export.py": [
        [],
        4
    ],
    "../scikit-learn-master/sklearn\\tree\\tests\\test_tree.py": [
        [
            [
                "test_min_samples_split",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "check_min_weight_fraction_leaf",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "check_min_weight_fraction_leaf_with_min_samples_leaf",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "check_class_weights",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        68
    ],
    "../scikit-learn-master/sklearn\\tree\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\utils\\arpack.py": [
        [],
        3
    ],
    "../scikit-learn-master/sklearn\\utils\\bench.py": [
        [
            [
                "total_seconds",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\utils\\class_weight.py": [
        [
            [
                "compute_class_weight",
                [
                    [
                        [
                            [
                                "class_weight",
                                "dict, 'balanced' or None"
                            ],
                            [
                                "classes",
                                "ndarray"
                            ],
                            [
                                "y",
                                "array-like, shape (n_samples,)"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "class_weight_vect": "ndarray, shape (n_classes,)"
                    }
                ]
            ],
            [
                "compute_sample_weight",
                [
                    [
                        [
                            [
                                "class_weight",
                                "dict, list of dicts, \"balanced\", or None, optional"
                            ],
                            [
                                "y",
                                "array-like, shape = [n_samples] or [n_samples, n_outputs]"
                            ],
                            [
                                "indices",
                                "array-like, shape (n_subsample,), or None"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "sample_weight_vect": "ndarray, shape (n_samples,)"
                    }
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\utils\\deprecation.py": [
        [
            [
                "_is_deprecated",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        1
    ],
    "../scikit-learn-master/sklearn\\utils\\estimator_checks.py": [
        [
            [
                "check_estimator",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_is_32bit",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "check_estimators_pickle",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "check_clusterer_compute_labels_predict",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "check_estimators_fit_returns_self",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "check_estimators_unfitted",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "check_class_weight_balanced_linear_classifier",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "check_no_fit_attributes_set_in_init",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ]
        ],
        62
    ],
    "../scikit-learn-master/sklearn\\utils\\extmath.py": [
        [
            [
                "norm",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    {}
                ]
            ],
            [
                "squared_norm",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    {}
                ]
            ],
            [
                "row_norms",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "fast_logdet",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_impose_f_order",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "density",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "safe_sparse_dot",
                [
                    [
                        [
                            [
                                "a",
                                "array or sparse matrix"
                            ],
                            [
                                "b",
                                "array or sparse matrix"
                            ],
                            [
                                "dense_output",
                                "boolean, default False"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "dot_product": "array or sparse matrix"
                    }
                ]
            ],
            [
                "randomized_range_finder",
                [
                    [
                        [
                            [
                                "A",
                                "2D array"
                            ],
                            [
                                "size",
                                "integer"
                            ],
                            [
                                "n_iter",
                                "integer"
                            ],
                            [
                                "power_iteration_normalizer",
                                "'auto' (default), 'QR', 'LU', 'none'"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "Q": "2D array"
                    }
                ]
            ],
            [
                "randomized_svd",
                [
                    [
                        [
                            [
                                "M",
                                "ndarray or sparse matrix"
                            ],
                            [
                                "n_components",
                                "int"
                            ],
                            [
                                "n_oversamples",
                                "int (default is 10)"
                            ],
                            [
                                "n_iter",
                                "int or 'auto' (default is 'auto')"
                            ],
                            [
                                "power_iteration_normalizer",
                                "'auto' (default), 'QR', 'LU', 'none'"
                            ],
                            [
                                "transpose",
                                "True, False or 'auto' (default)"
                            ],
                            [
                                "flip_sign",
                                "boolean, (True by default)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        8,
                        0
                    ],
                    null
                ]
            ],
            [
                "logsumexp",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    {}
                ]
            ],
            [
                "weighted_mode",
                [
                    [
                        [
                            [
                                "a",
                                "array_like"
                            ],
                            [
                                "w",
                                "array_like"
                            ],
                            [
                                "axis",
                                "int, optional"
                            ]
                        ],
                        3,
                        0
                    ],
                    {}
                ]
            ],
            [
                "cartesian",
                [
                    [
                        [
                            [
                                "arrays",
                                "list of array-like"
                            ],
                            [
                                "out",
                                "ndarray"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "out": "ndarray"
                    }
                ]
            ],
            [
                "svd_flip",
                [
                    [
                        [
                            [
                                "v",
                                "ndarray"
                            ],
                            [
                                "u_based_decision",
                                "boolean, (default=True)"
                            ]
                        ],
                        3,
                        1
                    ],
                    {
                        "v_adjusted": "arrays with the same dimensions as the input."
                    }
                ]
            ],
            [
                "log_logistic",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (M, N) or (M, )"
                            ],
                            [
                                "out",
                                "array-like, shape"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "out": "array, shape (M, N) or (M, )"
                    }
                ]
            ],
            [
                "softmax",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (M, N)"
                            ],
                            [
                                "copy",
                                "bool, optional"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "out": "array, shape (M, N)"
                    }
                ]
            ],
            [
                "safe_min",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "make_nonnegative",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_incremental_mean_and_var",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "last_mean",
                                "array-like, shape"
                            ],
                            [
                                "last_variance",
                                "array-like, shape"
                            ],
                            [
                                "last_sample_count",
                                "int"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "updated_mean": "array, shape (n_features,)",
                        "updated_variance": "array, shape (n_features,)",
                        "updated_sample_count": "int"
                    }
                ]
            ],
            [
                "_deterministic_vector_sign_flip",
                [
                    [
                        [
                            [
                                "u",
                                "ndarray"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "u_flipped": "ndarray with same shape as u"
                    }
                ]
            ],
            [
                "stable_cumsum",
                [
                    [
                        [
                            [
                                "arr",
                                "array-like"
                            ],
                            [
                                "axis",
                                "int, optional"
                            ],
                            [
                                "rtol",
                                "float"
                            ],
                            [
                                "atol",
                                "float"
                            ]
                        ],
                        4,
                        0
                    ],
                    null
                ]
            ]
        ],
        22
    ],
    "../scikit-learn-master/sklearn\\utils\\fixes.py": [
        [
            [
                "parallel_helper",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\utils\\graph.py": [
        [
            [
                "single_source_shortest_path_length",
                [
                    [
                        [
                            [
                                "graph",
                                "sparse matrix or 2D array (preferably LIL matrix)"
                            ],
                            [
                                "source",
                                "node label"
                            ],
                            [
                                "cutoff",
                                "integer, optional"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "graph": "sparse matrix or 2D array (preferably LIL matrix)",
                        "source": "node label",
                        "cutoff": "integer, optional"
                    }
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\utils\\linear_assignment_.py": [
        [
            [
                "linear_assignment",
                [
                    [
                        [
                            [
                                "X",
                                "array"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "indices": "array,"
                    }
                ]
            ],
            [
                "_hungarian",
                [
                    [
                        [
                            [
                                "cost_matrix",
                                "2D matrix"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "indices": "2D array of indices"
                    }
                ]
            ],
            [
                "_step1",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_step3",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_step4",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_step5",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_step6",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ]
        ],
        7
    ],
    "../scikit-learn-master/sklearn\\utils\\metaestimators.py": [
        [
            [
                "if_delegate_has_method",
                [
                    [
                        [
                            [
                                "delegate",
                                "string, list of strings or tuple of strings"
                            ]
                        ],
                        1,
                        0
                    ],
                    null
                ]
            ],
            [
                "_safe_split",
                [
                    [
                        [
                            [
                                "estimator",
                                "object"
                            ],
                            [
                                "X",
                                "array-like, sparse matrix or iterable"
                            ],
                            [
                                "y",
                                "array-like, sparse matrix or iterable"
                            ],
                            [
                                "indices",
                                "array of int"
                            ],
                            [
                                "train_indices",
                                "array of int or None, default=None"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "X_sliced": "array-like, sparse matrix or list",
                        "y_sliced": "array-like, sparse matrix or list"
                    }
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\utils\\mocking.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\utils\\multiclass.py": [
        [
            [
                "unique_labels",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    {
                        "out": "numpy array of shape [n_unique_labels]"
                    }
                ]
            ],
            [
                "is_multilabel",
                [
                    [
                        [
                            [
                                "y",
                                "numpy array of shape [n_samples]"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "out": "bool,"
                    }
                ]
            ],
            [
                "check_classification_targets",
                [
                    [
                        [
                            [
                                "y",
                                "array-like"
                            ]
                        ],
                        1,
                        0
                    ],
                    null
                ]
            ],
            [
                "type_of_target",
                [
                    [
                        [
                            [
                                "y",
                                "array-like"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "target_type": "string",
                        "of": ""
                    }
                ]
            ],
            [
                "_check_partial_fit_first_call",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "class_distribution",
                [
                    [
                        [
                            [
                                "y",
                                "array like or sparse matrix of size (n_samples, n_outputs)"
                            ],
                            [
                                "sample_weight",
                                "array-like of shape = (n_samples,), optional"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "classes": "list of size n_outputs of arrays of size (n_classes,)",
                        "n_classes": "list of integers of size n_outputs",
                        "class_prior": "list of size n_outputs of arrays of size (n_classes,)"
                    }
                ]
            ],
            [
                "_ovr_decision_function",
                [
                    [
                        [
                            [
                                "predictions",
                                "array-like, shape (n_samples, n_classifiers)"
                            ],
                            [
                                "confidences",
                                "array-like, shape (n_samples, n_classifiers)"
                            ],
                            [
                                "n_classes",
                                "int"
                            ]
                        ],
                        3,
                        0
                    ],
                    null
                ]
            ]
        ],
        10
    ],
    "../scikit-learn-master/sklearn\\utils\\optimize.py": [
        [
            [
                "_line_search_wolfe12",
                [
                    [
                        [],
                        7,
                        7
                    ],
                    null
                ]
            ],
            [
                "_cg",
                [
                    [
                        [
                            [
                                "fhess_p",
                                "callable"
                            ],
                            [
                                "fgrad",
                                "ndarray, shape (n_features,) or (n_features + 1,)"
                            ],
                            [
                                "maxiter",
                                "int"
                            ],
                            [
                                "tol",
                                "float"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "xsupi": "ndarray, shape (n_features,) or (n_features + 1,)"
                    }
                ]
            ],
            [
                "newton_cg",
                [
                    [
                        [
                            [
                                "grad_hess",
                                "callable"
                            ],
                            [
                                "func",
                                "callable"
                            ],
                            [
                                "grad",
                                "callable"
                            ],
                            [
                                "x0",
                                "array of float"
                            ],
                            [
                                "args",
                                "tuple, optional"
                            ],
                            [
                                "tol",
                                "float"
                            ],
                            [
                                "maxiter",
                                "int"
                            ],
                            [
                                "maxinner",
                                "int"
                            ],
                            [
                                "line_search",
                                "boolean"
                            ],
                            [
                                "warn",
                                "boolean"
                            ]
                        ],
                        10,
                        0
                    ],
                    {
                        "xk": "ndarray of float"
                    }
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\utils\\random.py": [
        [
            [
                "choice",
                [
                    [
                        [
                            [
                                "a",
                                "1-D array-like or int"
                            ],
                            [
                                "size",
                                "int or tuple of ints, optional"
                            ],
                            [
                                "replace",
                                "boolean, optional"
                            ],
                            [
                                "p",
                                "1-D array-like, optional"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "samples": "1-D ndarray, shape (size,)"
                    }
                ]
            ],
            [
                "random_choice_csc",
                [
                    [
                        [
                            [
                                "n_samples",
                                "int,"
                            ],
                            [
                                "classes",
                                "list of size n_outputs of arrays of size (n_classes,)"
                            ],
                            [
                                "class_probability",
                                "list of size n_outputs of arrays of size (n_classes,)"
                            ],
                            [
                                "random_state",
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "random_matrix": "sparse csc matrix of size (n_samples, n_outputs)"
                    }
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\utils\\setup.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\utils\\sparsefuncs.py": [
        [
            [
                "_raise_typeerror",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "inplace_csr_column_scale",
                [
                    [
                        [
                            [
                                "X",
                                "CSR matrix with shape (n_samples, n_features)"
                            ],
                            [
                                "scale",
                                "float array with shape (n_features,)"
                            ]
                        ],
                        2,
                        0
                    ],
                    null
                ]
            ],
            [
                "inplace_csr_row_scale",
                [
                    [
                        [
                            [
                                "X",
                                "CSR sparse matrix, shape (n_samples, n_features)"
                            ],
                            [
                                "scale",
                                "float array with shape (n_samples,)"
                            ]
                        ],
                        2,
                        0
                    ],
                    null
                ]
            ],
            [
                "mean_variance_axis",
                [
                    [
                        [
                            [
                                "X",
                                "CSR or CSC sparse matrix, shape (n_samples, n_features)"
                            ],
                            [
                                "axis",
                                "int (either 0 or 1)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "means": "float array with shape (n_features,)",
                        "variances": "float array with shape (n_features,)"
                    }
                ]
            ],
            [
                "incr_mean_variance_axis",
                [
                    [
                        [
                            [
                                "X",
                                "CSR or CSC sparse matrix, shape (n_samples, n_features)"
                            ],
                            [
                                "axis",
                                "int (either 0 or 1)"
                            ],
                            [
                                "last_mean",
                                "float array with shape (n_features,)"
                            ],
                            [
                                "last_var",
                                "float array with shape (n_features,)"
                            ],
                            [
                                "last_n",
                                "int"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "means": "float array with shape (n_features,)",
                        "variances": "float array with shape (n_features,)",
                        "n": "int"
                    }
                ]
            ],
            [
                "inplace_column_scale",
                [
                    [
                        [
                            [
                                "X",
                                "CSC or CSR matrix with shape (n_samples, n_features)"
                            ],
                            [
                                "scale",
                                "float array with shape (n_features,)"
                            ]
                        ],
                        2,
                        0
                    ],
                    null
                ]
            ],
            [
                "inplace_row_scale",
                [
                    [
                        [
                            [
                                "X",
                                "CSR or CSC sparse matrix, shape (n_samples, n_features)"
                            ],
                            [
                                "scale",
                                "float array with shape (n_features,)"
                            ]
                        ],
                        2,
                        0
                    ],
                    null
                ]
            ],
            [
                "inplace_swap_row_csc",
                [
                    [
                        [
                            [
                                "X",
                                "scipy.sparse.csc_matrix, shape=(n_samples, n_features)"
                            ],
                            [
                                "m",
                                "int"
                            ],
                            [
                                "n",
                                "int"
                            ]
                        ],
                        3,
                        0
                    ],
                    null
                ]
            ],
            [
                "inplace_swap_row_csr",
                [
                    [
                        [
                            [
                                "X",
                                "scipy.sparse.csr_matrix, shape=(n_samples, n_features)"
                            ],
                            [
                                "m",
                                "int"
                            ],
                            [
                                "n",
                                "int"
                            ]
                        ],
                        3,
                        0
                    ],
                    null
                ]
            ],
            [
                "inplace_swap_row",
                [
                    [
                        [
                            [
                                "X",
                                "CSR or CSC sparse matrix, shape=(n_samples, n_features)"
                            ],
                            [
                                "m",
                                "int"
                            ],
                            [
                                "n",
                                "int"
                            ]
                        ],
                        3,
                        0
                    ],
                    null
                ]
            ],
            [
                "inplace_swap_column",
                [
                    [
                        [
                            [
                                "X",
                                "CSR or CSC sparse matrix, shape=(n_samples, n_features)"
                            ],
                            [
                                "m",
                                "int"
                            ],
                            [
                                "n",
                                "int"
                            ]
                        ],
                        3,
                        0
                    ],
                    null
                ]
            ],
            [
                "min_max_axis",
                [
                    [
                        [
                            [
                                "X",
                                "CSR or CSC sparse matrix, shape (n_samples, n_features)"
                            ],
                            [
                                "axis",
                                "int (either 0 or 1)"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "mins": "float array with shape (n_features,)",
                        "maxs": "float array with shape (n_features,)"
                    }
                ]
            ],
            [
                "count_nonzero",
                [
                    [
                        [
                            [
                                "X",
                                "CSR sparse matrix, shape = (n_samples, n_labels)"
                            ],
                            [
                                "axis",
                                "None, 0 or 1"
                            ],
                            [
                                "sample_weight",
                                "array, shape = (n_samples,), optional"
                            ]
                        ],
                        3,
                        0
                    ],
                    null
                ]
            ],
            [
                "_get_median",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_get_elem_at_rank",
                [
                    [
                        [],
                        4,
                        4
                    ],
                    null
                ]
            ],
            [
                "csc_median_axis_0",
                [
                    [
                        [
                            [
                                "X",
                                "CSC sparse matrix, shape (n_samples, n_features)"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "median": "ndarray, shape (n_features,)"
                    }
                ]
            ]
        ],
        17
    ],
    "../scikit-learn-master/sklearn\\utils\\stats.py": [
        [
            [
                "_weighted_percentile",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\utils\\testing.py": [
        [
            [
                "assert_warns",
                [
                    [
                        [
                            [
                                "warning_class",
                                "the warning class"
                            ],
                            [
                                "func",
                                "callable"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "result": "the return value of `func`"
                    }
                ]
            ],
            [
                "assert_warns_message",
                [
                    [
                        [
                            [
                                "warning_class",
                                "the warning class"
                            ],
                            [
                                "message",
                                "str | callable"
                            ],
                            [
                                "func",
                                "callable"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "result": "the return value of `func`"
                    }
                ]
            ],
            [
                "ignore_warnings",
                [
                    [
                        [
                            [
                                "category",
                                "warning class, defaults to Warning."
                            ]
                        ],
                        2,
                        1
                    ],
                    null
                ]
            ],
            [
                "assert_raise_message",
                [
                    [
                        [
                            [
                                "exceptions",
                                "exception or tuple of exception"
                            ],
                            [
                                "function",
                                "callable"
                            ]
                        ],
                        3,
                        1
                    ],
                    null
                ]
            ],
            [
                "assert_allclose_dense_sparse",
                [
                    [
                        [
                            [
                                "x",
                                "array-like or sparse matrix"
                            ],
                            [
                                "y",
                                "array-like or sparse matrix"
                            ],
                            [
                                "rtol",
                                "float, optional"
                            ],
                            [
                                "atol",
                                "float, optional"
                            ],
                            [
                                "err_msg",
                                "string, default=''"
                            ]
                        ],
                        5,
                        0
                    ],
                    null
                ]
            ],
            [
                "fake_mldata",
                [
                    [
                        [
                            [
                                "columns_dict",
                                "dict, keys=str, values=ndarray"
                            ],
                            [
                                "dataname",
                                "string"
                            ],
                            [
                                "matfile",
                                "string or file object"
                            ],
                            [
                                "ordering",
                                "list, default None"
                            ]
                        ],
                        4,
                        0
                    ],
                    null
                ]
            ],
            [
                "all_estimators",
                [
                    [
                        [
                            [
                                "include_meta_estimators",
                                "boolean, default=False"
                            ],
                            [
                                "include_other",
                                "boolean, default=False"
                            ],
                            [
                                "type_filter",
                                "string, list of string,  or None, default=None"
                            ],
                            [
                                "include_dont_test",
                                "boolean, default=False"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "estimators": "list of tuples"
                    }
                ]
            ],
            [
                "set_random_state",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "if_matplotlib",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "skip_if_32bit",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "if_safe_multiprocessing_with_blas",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "clean_warning_registry",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "check_skip_travis",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "_delete_folder",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_get_args",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "_get_func_name",
                [
                    [
                        [
                            [
                                "func",
                                "callable"
                            ],
                            [
                                "class_name",
                                "string, optional (default"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "name": "str"
                    }
                ]
            ],
            [
                "check_docstring_parameters",
                [
                    [
                        [
                            [
                                "func",
                                "callable"
                            ],
                            [
                                "doc",
                                "str, optional (default"
                            ],
                            [
                                "ignore",
                                "None | list"
                            ],
                            [
                                "class_name",
                                "string, optional (default"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "incorrect": "list"
                    }
                ]
            ]
        ],
        22
    ],
    "../scikit-learn-master/sklearn\\utils\\validation.py": [
        [
            [
                "_assert_all_finite",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "assert_all_finite",
                [
                    [
                        [
                            [
                                "X",
                                "array or sparse matrix"
                            ]
                        ],
                        1,
                        0
                    ],
                    null
                ]
            ],
            [
                "as_float_array",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}"
                            ],
                            [
                                "copy",
                                "bool, optional"
                            ],
                            [
                                "force_all_finite",
                                "boolean (default=True)"
                            ]
                        ],
                        3,
                        0
                    ],
                    {
                        "XT": "{array, sparse matrix}"
                    }
                ]
            ],
            [
                "_is_arraylike",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    {}
                ]
            ],
            [
                "_num_samples",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "_shape_repr",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "check_memory",
                [
                    [
                        [
                            [
                                "memory",
                                "None, str or object with the joblib.Memory interface"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "memory": "object with the joblib.Memory interface"
                    }
                ]
            ],
            [
                "check_consistent_length",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "indexable",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    null
                ]
            ],
            [
                "_ensure_sparse_format",
                [
                    [
                        [
                            [
                                "spmatrix",
                                "scipy sparse matrix"
                            ],
                            [
                                "accept_sparse",
                                "string, boolean or list/tuple of strings"
                            ],
                            [
                                "dtype",
                                "string, type or None"
                            ],
                            [
                                "copy",
                                "boolean"
                            ],
                            [
                                "force_all_finite",
                                "boolean"
                            ]
                        ],
                        5,
                        0
                    ],
                    {
                        "spmatrix_converted": "scipy sparse matrix."
                    }
                ]
            ],
            [
                "check_array",
                [
                    [
                        [
                            [
                                "array",
                                "object"
                            ],
                            [
                                "accept_sparse",
                                "string, boolean or list/tuple of strings (default=False)"
                            ],
                            [
                                "dtype",
                                "string, type, list of types or None (default=\"numeric\")"
                            ],
                            [
                                "order",
                                "'F', 'C' or None (default=None)"
                            ],
                            [
                                "copy",
                                "boolean (default=False)"
                            ],
                            [
                                "force_all_finite",
                                "boolean (default=True)"
                            ],
                            [
                                "ensure_2d",
                                "boolean (default=True)"
                            ],
                            [
                                "allow_nd",
                                "boolean (default=False)"
                            ],
                            [
                                "ensure_min_samples",
                                "int (default=1)"
                            ],
                            [
                                "ensure_min_features",
                                "int (default=1)"
                            ],
                            [
                                "warn_on_dtype",
                                "boolean (default=False)"
                            ],
                            [
                                "estimator",
                                "str or estimator instance (default=None)"
                            ]
                        ],
                        12,
                        0
                    ],
                    {
                        "X_converted": "object"
                    }
                ]
            ],
            [
                "check_X_y",
                [
                    [
                        [
                            [
                                "X",
                                "nd-array, list or sparse matrix"
                            ],
                            [
                                "y",
                                "nd-array, list or sparse matrix"
                            ],
                            [
                                "accept_sparse",
                                "string, boolean or list of string (default=False)"
                            ],
                            [
                                "dtype",
                                "string, type, list of types or None (default=\"numeric\")"
                            ],
                            [
                                "order",
                                "'F', 'C' or None (default=None)"
                            ],
                            [
                                "copy",
                                "boolean (default=False)"
                            ],
                            [
                                "force_all_finite",
                                "boolean (default=True)"
                            ],
                            [
                                "ensure_2d",
                                "boolean (default=True)"
                            ],
                            [
                                "allow_nd",
                                "boolean (default=False)"
                            ],
                            [
                                "multi_output",
                                "boolean (default=False)"
                            ],
                            [
                                "ensure_min_samples",
                                "int (default=1)"
                            ],
                            [
                                "ensure_min_features",
                                "int (default=1)"
                            ],
                            [
                                "y_numeric",
                                "boolean (default=False)"
                            ],
                            [
                                "warn_on_dtype",
                                "boolean (default=False)"
                            ],
                            [
                                "estimator",
                                "str or estimator instance (default=None)"
                            ]
                        ],
                        15,
                        0
                    ],
                    {
                        "X_converted": "object",
                        "y_converted": "object"
                    }
                ]
            ],
            [
                "column_or_1d",
                [
                    [
                        [
                            [
                                "y",
                                "array-like"
                            ],
                            [
                                "warn",
                                "boolean, default False"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "y": "array"
                    }
                ]
            ],
            [
                "check_random_state",
                [
                    [
                        [
                            [
                                "seed",
                                "None | int | instance of RandomState"
                            ]
                        ],
                        1,
                        0
                    ],
                    null
                ]
            ],
            [
                "has_fit_parameter",
                [
                    [
                        [
                            [
                                "estimator",
                                "object"
                            ],
                            [
                                "parameter",
                                "str"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "is_parameter": "bool"
                    }
                ]
            ],
            [
                "check_symmetric",
                [
                    [
                        [
                            [
                                "array",
                                "nd-array or sparse matrix"
                            ],
                            [
                                "tol",
                                "float"
                            ],
                            [
                                "raise_warning",
                                "boolean (default=True)"
                            ],
                            [
                                "raise_exception",
                                "boolean (default=False)"
                            ]
                        ],
                        4,
                        0
                    ],
                    {
                        "array_sym": "ndarray or sparse matrix"
                    }
                ]
            ],
            [
                "check_is_fitted",
                [
                    [
                        [
                            [
                                "estimator",
                                "estimator instance."
                            ],
                            [
                                "attributes",
                                "attribute name(s) given as string or a list/tuple of strings"
                            ],
                            [
                                "msg",
                                "string"
                            ],
                            [
                                "all_or_any",
                                "callable, {all, any}, default all"
                            ]
                        ],
                        4,
                        0
                    ],
                    {}
                ]
            ],
            [
                "check_non_negative",
                [
                    [
                        [
                            [
                                "X",
                                "array-like or sparse matrix"
                            ],
                            [
                                "whom",
                                "string"
                            ]
                        ],
                        2,
                        0
                    ],
                    null
                ]
            ]
        ],
        19
    ],
    "../scikit-learn-master/sklearn\\utils\\_scipy_sparse_lsqr_backport.py": [
        [
            [
                "_sym_ortho",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "lsqr",
                [
                    [
                        [
                            [
                                "A",
                                "{sparse matrix, ndarray, LinearOperatorLinear}"
                            ],
                            [
                                "b",
                                "(m,) ndarray"
                            ],
                            [
                                "damp",
                                "float"
                            ],
                            [
                                "btol",
                                "float, default 1.0e-8"
                            ],
                            [
                                "conlim",
                                "float"
                            ],
                            [
                                "iter_lim",
                                "int"
                            ],
                            [
                                "show",
                                "bool"
                            ],
                            [
                                "calc_var",
                                "bool"
                            ]
                        ],
                        9,
                        1
                    ],
                    {
                        "x": "ndarray of float",
                        "istop": "int",
                        "itn": "int",
                        "r1norm": "float",
                        "r2norm": "float",
                        "anorm": "float",
                        "acond": "float",
                        "arnorm": "float",
                        "xnorm": "float",
                        "var": "ndarray of float"
                    }
                ]
            ]
        ],
        2
    ],
    "../scikit-learn-master/sklearn\\utils\\_unittest_backport.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\utils\\__init__.py": [
        [
            [
                "safe_mask",
                [
                    [
                        [
                            [
                                "X",
                                "{array-like, sparse matrix}"
                            ],
                            [
                                "mask",
                                "array"
                            ]
                        ],
                        2,
                        0
                    ],
                    {}
                ]
            ],
            [
                "axis0_safe_slice",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "safe_indexing",
                [
                    [
                        [
                            [
                                "X",
                                "array-like, sparse-matrix, list, pandas.DataFrame, pandas.Series."
                            ],
                            [
                                "indices",
                                "array-like of int"
                            ]
                        ],
                        2,
                        0
                    ],
                    {}
                ]
            ],
            [
                "resample",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    {
                        "resampled_arrays": "sequence of indexable data-structures"
                    }
                ]
            ],
            [
                "shuffle",
                [
                    [
                        [],
                        0,
                        0
                    ],
                    {
                        "shuffled_arrays": "sequence of indexable data-structures"
                    }
                ]
            ],
            [
                "safe_sqr",
                [
                    [
                        [
                            [
                                "X",
                                "array like, matrix, sparse matrix"
                            ],
                            [
                                "copy",
                                "boolean, optional, default True"
                            ]
                        ],
                        2,
                        0
                    ],
                    {}
                ]
            ],
            [
                "gen_batches",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ],
            [
                "gen_even_slices",
                [
                    [
                        [],
                        3,
                        3
                    ],
                    null
                ]
            ],
            [
                "_get_n_jobs",
                [
                    [
                        [
                            [
                                "n_jobs",
                                "int"
                            ]
                        ],
                        1,
                        0
                    ],
                    {
                        "n_jobs": "int"
                    }
                ]
            ],
            [
                "tosequence",
                [
                    [
                        [
                            [
                                "x",
                                "iterable"
                            ]
                        ],
                        1,
                        0
                    ],
                    null
                ]
            ],
            [
                "indices_to_mask",
                [
                    [
                        [
                            [
                                "indices",
                                "list-like"
                            ],
                            [
                                "mask_length",
                                "int"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "mask": "1d boolean nd-array"
                    }
                ]
            ]
        ],
        11
    ],
    "../scikit-learn-master/sklearn\\utils\\sparsetools\\setup.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\utils\\sparsetools\\__init__.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\utils\\sparsetools\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_bench.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_class_weight.py": [
        [],
        9
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_deprecation.py": [
        [],
        4
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_estimator_checks.py": [
        [],
        4
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_extmath.py": [
        [],
        23
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_fast_dict.py": [
        [],
        2
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_fixes.py": [
        [],
        2
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_graph.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_linear_assignment.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_metaestimators.py": [
        [],
        2
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_multiclass.py": [
        [],
        8
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_murmurhash.py": [
        [],
        6
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_optimize.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_random.py": [
        [],
        7
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_seq_dataset.py": [
        [],
        3
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_shortest_path.py": [
        [],
        6
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_sparsefuncs.py": [
        [],
        15
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_stats.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_testing.py": [
        [
            [
                "f_ok",
                [
                    [
                        [
                            [
                                "a",
                                "int"
                            ],
                            [
                                "b",
                                "float"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "c": "list"
                    }
                ]
            ],
            [
                "f_bad_sections",
                [
                    [
                        [
                            [
                                "a",
                                "int"
                            ],
                            [
                                "b",
                                "float"
                            ]
                        ],
                        2,
                        0
                    ],
                    null
                ]
            ],
            [
                "f_bad_order",
                [
                    [
                        [
                            [
                                "b",
                                "float"
                            ],
                            [
                                "a",
                                "int"
                            ]
                        ],
                        2,
                        0
                    ],
                    {
                        "c": "list"
                    }
                ]
            ],
            [
                "f_missing",
                [
                    [
                        [
                            [
                                "a",
                                "int"
                            ]
                        ],
                        2,
                        1
                    ],
                    {
                        "c": "list"
                    }
                ]
            ],
            [
                "f_check_param_definition",
                [
                    [
                        [
                            [
                                "a",
                                "int"
                            ],
                            [
                                "b",
                                ""
                            ],
                            [
                                "c",
                                ""
                            ],
                            [
                                "d",
                                "int"
                            ]
                        ],
                        4,
                        0
                    ],
                    null
                ]
            ]
        ],
        15
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_utils.py": [
        [],
        15
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_validation.py": [
        [],
        20
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\__init__.py": [
        [],
        0
    ],
    "../scikit-learn-master/sklearn\\_build_utils\\__init__.py": [
        [
            [
                "build_from_c_and_cpp_files",
                [
                    [
                        [],
                        1,
                        1
                    ],
                    null
                ]
            ],
            [
                "maybe_cythonize_extensions",
                [
                    [
                        [],
                        2,
                        2
                    ],
                    null
                ]
            ]
        ],
        3
    ],
    "../scikit-learn-master/sklearn\\__check_build\\setup.py": [
        [],
        1
    ],
    "../scikit-learn-master/sklearn\\__check_build\\__init__.py": [
        [],
        1
    ]
}