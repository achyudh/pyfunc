{
    "../scikit-learn-master\\sklearn\\datasets\\species_distributions.py": [
        [
            [
                "def _load_coverage(F, header_length=6, dtype=np.int16):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _load_csv(F):", 
                [
                    [
                        [
                            [
                                "F", 
                                "file object"
                            ]
                        ], 
                        [
                            [
                                "rec", 
                                "np.ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def construct_grids(batch):", 
                [
                    [
                        [
                            [
                                "batch", 
                                "Batch object"
                            ], 
                            [
                                "by", 
                                "func"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def fetch_species_distributions(data_home=None,\n                                download_if_missing=True):", 
                [
                    [
                        [
                            [
                                "data_home", 
                                "optional, default"
                            ], 
                            [
                                "download_if_missing", 
                                "optional, True by default"
                            ]
                        ], 
                        [
                            [
                                "attributes", 
                                ""
                            ], 
                            [
                                "coverages", 
                                "array, shape = [14, 1592, 1212]"
                            ], 
                            [
                                "train", 
                                "record array, shape = (1623,)"
                            ], 
                            [
                                "fields", 
                                ""
                            ], 
                            [
                                "test", 
                                "record array, shape = (619,)"
                            ], 
                            [
                                "Ny", 
                                "integers"
                            ], 
                            [
                                "y_left_lower_corner", 
                                "floats"
                            ], 
                            [
                                "grid_size", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\base.py": [
        [
            [
                "def get_data_home(data_home=None):", 
                [
                    [
                        [
                            [
                                "data_home", 
                                "str | None"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def clear_data_home(data_home=None):", 
                [
                    [
                        [
                            [
                                "data_home", 
                                "str | None"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def load_files(container_path, description=None, categories=None,\n               load_content=True, shuffle=True, encoding=None,\n               decode_error='strict', random_state=0):", 
                [
                    [
                        [
                            [
                                "container_path", 
                                "string or unicode"
                            ], 
                            [
                                "description", 
                                "string or unicode, optional (default=None)"
                            ], 
                            [
                                "dataset", 
                                "its source,"
                            ], 
                            [
                                "categories", 
                                "A collection of strings or None, optional (default=None)"
                            ], 
                            [
                                "load_content", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "shuffle", 
                                "bool, optional (default=True)"
                            ], 
                            [
                                "data", 
                                "might be important for models that"
                            ], 
                            [
                                "encoding", 
                                "string or None (default is None)"
                            ], 
                            [
                                "decode_error", 
                                "{'strict', 'ignore', 'replace'}, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=0)"
                            ]
                        ], 
                        [
                            [
                                "data", 
                                "Bunch"
                            ], 
                            [
                                "are", 
                                "either"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def load_data(module_path, data_file_name):", 
                [
                    [
                        [
                            [
                                "data_file_name", 
                                "String. Name of csv file to be loaded from"
                            ]
                        ], 
                        [
                            [
                                "data", 
                                "Numpy Array"
                            ], 
                            [
                                "target", 
                                "Numpy Array"
                            ], 
                            [
                                "target_names", 
                                "Numpy Array"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def load_wine(return_X_y=False):", 
                [
                    [
                        [
                            [
                                "return_X_y", 
                                "boolean, default=False."
                            ]
                        ], 
                        [
                            [
                                "data", 
                                "Bunch"
                            ], 
                            [
                                "are", 
                                "'data', the"
                            ], 
                            [
                                "from", 
                                ""
                            ], 
                            [
                                "https", 
                                "//archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def load_iris(return_X_y=False):", 
                [
                    [
                        [
                            [
                                "return_X_y", 
                                "boolean, default=False."
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "data", 
                                "Bunch"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def load_breast_cancer(return_X_y=False):", 
                [
                    [
                        [
                            [
                                "return_X_y", 
                                "boolean, default=False"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "data", 
                                "Bunch"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "from", 
                                ""
                            ], 
                            [
                                "https", 
                                "//goo.gl/U2Uwz2"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def load_digits(n_class=10, return_X_y=False):", 
                [
                    [
                        [
                            [
                                "n_class", 
                                "integer, between 0 and 10, optional (default=10)"
                            ], 
                            [
                                "return_X_y", 
                                "boolean, default=False."
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "data", 
                                "Bunch"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "http", 
                                "//archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def load_diabetes(return_X_y=False):", 
                [
                    [
                        [
                            [
                                "return_X_y", 
                                "boolean, default=False."
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "data", 
                                "Bunch"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def load_linnerud(return_X_y=False):", 
                [
                    [
                        [
                            [
                                "return_X_y", 
                                "boolean, default=False."
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "data", 
                                "Bunch"
                            ], 
                            [
                                "are", 
                                "'data' and"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def load_boston(return_X_y=False):", 
                [
                    [
                        [
                            [
                                "return_X_y", 
                                "boolean, default=False."
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "data", 
                                "Bunch"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def load_sample_images():", 
                [
                    [
                        null, 
                        [
                            [
                                "data", 
                                "Bunch"
                            ], 
                            [
                                "attributes", 
                                "'images', the"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def load_sample_image(image_name):", 
                [
                    [
                        [
                            [
                                "image_name", 
                                "{`china.jpg`, `flower.jpg`}"
                            ]
                        ], 
                        [
                            [
                                "img", 
                                "3D array"
                            ], 
                            [
                                "array", 
                                "height x width x color"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _pkl_filepath(*args, **kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _sha256(path):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _fetch_remote(remote, dirname=None):", 
                [
                    [
                        [
                            [
                                "remote", 
                                "RemoteFileMetadata"
                            ], 
                            [
                                "information", 
                                "url, filename"
                            ], 
                            [
                                "dirname", 
                                "string"
                            ]
                        ], 
                        [
                            [
                                "file_path", 
                                "string"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        16
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_isolation_forest.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\semi_supervised\\plot_label_propagation_digits.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\approximate.py": [
        [
            [
                "def _find_matching_indices(tree, bin_X, left_mask, right_mask):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _find_longest_prefix_match(tree, bin_X, hash_size,\n                               left_masks, right_masks):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _to_hash(projected):", 
                []
            ], 
            [
                "def fit_transform(self, X, y=None):", 
                []
            ], 
            [
                "def transform(self, X):", 
                []
            ], 
            [
                "def __init__(self,\n                 n_components=32,\n                 random_state=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _array_of_arrays(list_of_arrays):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, n_estimators=10, radius=1.0, n_candidates=50,\n                 n_neighbors=5, min_hash_match=4, radius_cutoff_ratio=.9,\n                 random_state=None):", 
                [
                    [
                        [
                            [
                                "n_estimators", 
                                "int (default = 10)"
                            ], 
                            [
                                "radius", 
                                "float, optinal (default = 1.0)"
                            ], 
                            [
                                "the", 
                                "meth"
                            ], 
                            [
                                "n_candidates", 
                                "int (default = 50)"
                            ], 
                            [
                                "n_neighbors", 
                                "int (default = 5)"
                            ], 
                            [
                                "the", 
                                "meth"
                            ], 
                            [
                                "min_hash_match", 
                                "int (default = 4)"
                            ], 
                            [
                                "radius_cutoff_ratio", 
                                "float, optional (default = 0.9)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _compute_distances(self, query, candidates):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _generate_masks(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _get_candidates(self, query, max_depth, bin_queries, n_neighbors):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _get_radius_neighbors(self, query, max_depth, bin_queries, radius):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like or sparse (CSR) matrix, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _query(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def kneighbors(self, X, n_neighbors=None, return_distance=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like or sparse (CSR) matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "n_neighbors", 
                                "int, optional (default = None)"
                            ], 
                            [
                                "return_distance", 
                                "boolean, optional (default = True)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array_like or sparse (CSR) matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "n_neighbors", 
                                "int, optional (default = None)"
                            ], 
                            [
                                "return_distance", 
                                "boolean, optional (default = True)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def radius_neighbors(self, X, radius=None, return_distance=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like or sparse (CSR) matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "radius", 
                                "float"
                            ], 
                            [
                                "return_distance", 
                                "boolean, optional (default = False)"
                            ]
                        ], 
                        [
                            [
                                "dist", 
                                "array, shape (n_samples,) of arrays"
                            ], 
                            [
                                "ind", 
                                "array, shape (n_samples,) of arrays"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like or sparse (CSR) matrix, shape (n_samples, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        17
    ], 
    "../scikit-learn-master\\examples\\decomposition\\plot_pca_iris.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\plot_isotonic_regression.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_theilsen.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\omp.py": [
        [
            [
                "def _cholesky_omp(X, y, n_nonzero_coefs, tol=None, copy_X=True,\n                  return_path=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array, shape (n_samples,)"
                            ], 
                            [
                                "n_nonzero_coefs", 
                                "int"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "copy_X", 
                                "bool, optional"
                            ], 
                            [
                                "return_path", 
                                "bool, optional. Default"
                            ]
                        ], 
                        [
                            [
                                "gamma", 
                                "array, shape (n_nonzero_coefs,)"
                            ], 
                            [
                                "idx", 
                                "array, shape (n_nonzero_coefs,)"
                            ], 
                            [
                                "coef", 
                                "array, shape (n_features, n_nonzero_coefs)"
                            ], 
                            [
                                "n_active", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _gram_omp(Gram, Xy, n_nonzero_coefs, tol_0=None, tol=None,\n              copy_Gram=True, copy_Xy=True, return_path=False):", 
                [
                    [
                        [
                            [
                                "Gram", 
                                "array, shape (n_features, n_features)"
                            ], 
                            [
                                "Xy", 
                                "array, shape (n_features,)"
                            ], 
                            [
                                "n_nonzero_coefs", 
                                "int"
                            ], 
                            [
                                "tol_0", 
                                "float"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "copy_Gram", 
                                "bool, optional"
                            ], 
                            [
                                "copy_Xy", 
                                "bool, optional"
                            ], 
                            [
                                "return_path", 
                                "bool, optional. Default"
                            ]
                        ], 
                        [
                            [
                                "gamma", 
                                "array, shape (n_nonzero_coefs,)"
                            ], 
                            [
                                "idx", 
                                "array, shape (n_nonzero_coefs,)"
                            ], 
                            [
                                "coefs", 
                                "array, shape (n_features, n_nonzero_coefs)"
                            ], 
                            [
                                "n_active", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def orthogonal_mp(X, y, n_nonzero_coefs=None, tol=None, precompute=False,\n                  copy_X=True, return_path=False,\n                  return_n_iter=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array, shape (n_samples,) or (n_samples, n_targets)"
                            ], 
                            [
                                "n_nonzero_coefs", 
                                "int"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "precompute", 
                                "{True, False, 'auto'},"
                            ], 
                            [
                                "copy_X", 
                                "bool, optional"
                            ], 
                            [
                                "return_path", 
                                "bool, optional. Default"
                            ], 
                            [
                                "return_n_iter", 
                                "bool, optional default False"
                            ]
                        ], 
                        [
                            [
                                "coef", 
                                "array, shape (n_features,) or (n_features, n_targets)"
                            ], 
                            [
                                "n_iters", 
                                "array-like or int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def orthogonal_mp_gram(Gram, Xy, n_nonzero_coefs=None, tol=None,\n                       norms_squared=None, copy_Gram=True,\n                       copy_Xy=True, return_path=False,\n                       return_n_iter=False):", 
                [
                    [
                        [
                            [
                                "Gram", 
                                "array, shape (n_features, n_features)"
                            ], 
                            [
                                "data", 
                                "X.T * X"
                            ], 
                            [
                                "Xy", 
                                "array, shape (n_features,) or (n_features, n_targets)"
                            ], 
                            [
                                "X", 
                                "X.T * y"
                            ], 
                            [
                                "n_nonzero_coefs", 
                                "int"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "norms_squared", 
                                "array-like, shape (n_targets,)"
                            ], 
                            [
                                "copy_Gram", 
                                "bool, optional"
                            ], 
                            [
                                "copy_Xy", 
                                "bool, optional"
                            ], 
                            [
                                "return_path", 
                                "bool, optional. Default"
                            ], 
                            [
                                "return_n_iter", 
                                "bool, optional default False"
                            ]
                        ], 
                        [
                            [
                                "coef", 
                                "array, shape (n_features,) or (n_features, n_targets)"
                            ], 
                            [
                                "n_iters", 
                                "array-like or int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_nonzero_coefs=None, tol=None, fit_intercept=True,\n                 normalize=True, precompute='auto'):", 
                [
                    [
                        [
                            [
                                "n_nonzero_coefs", 
                                "int, optional"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean, optional"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "precompute", 
                                "{True, False, 'auto'}, default 'auto'"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,) or (n_samples, n_targets)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _omp_path_residues(X_train, y_train, X_test, y_test, copy=True,\n                       fit_intercept=True, normalize=True, max_iter=100):", 
                [
                    [
                        [
                            [
                                "X_train", 
                                "array, shape (n_samples, n_features)"
                            ], 
                            [
                                "y_train", 
                                "array, shape (n_samples)"
                            ], 
                            [
                                "X_test", 
                                "array, shape (n_samples, n_features)"
                            ], 
                            [
                                "y_test", 
                                "array, shape (n_samples)"
                            ], 
                            [
                                "copy", 
                                "boolean, optional"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "max_iter", 
                                "integer, optional"
                            ]
                        ], 
                        [
                            [
                                "residues", 
                                "array, shape (n_samples, max_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, copy=True, fit_intercept=True, normalize=True,\n                 max_iter=None, cv=None, n_jobs=1, verbose=False):", 
                [
                    [
                        [
                            [
                                "copy", 
                                "bool, optional"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean, optional"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "max_iter", 
                                "integer, optional"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "verbose", 
                                "boolean or integer, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        9
    ], 
    "../scikit-learn-master\\benchmarks\\bench_plot_lasso_path.py": [
        [
            [
                "def compute_bench(samples_range, features_range):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\mldata.py": [
        [
            [
                "def mldata_filename(dataname):", 
                [
                    [
                        [
                            [
                                "dataname", 
                                "str"
                            ]
                        ], 
                        [
                            [
                                "fname", 
                                "str"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fetch_mldata(dataname, target_name='label', data_name='data',\n                 transpose_data=True, data_home=None):", 
                [
                    [
                        [
                            [
                                "dataname", 
                                "str"
                            ], 
                            [
                                "target_name", 
                                "optional, default"
                            ], 
                            [
                                "data_name", 
                                "optional, default"
                            ], 
                            [
                                "transpose_data", 
                                "optional, default"
                            ], 
                            [
                                "data_home", 
                                "optional, default"
                            ]
                        ], 
                        [
                            [
                                "data", 
                                "Bunch"
                            ], 
                            [
                                "are", 
                                ""
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def setup_module(module):", 
                []
            ], 
            [
                "def teardown_module(module):", 
                []
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\tests\\test_samples_generator.py": [
        [
            [
                "def test_make_classification():", 
                []
            ], 
            [
                "def test_make_classification_informative_features():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_make_multilabel_classification_return_sequences():", 
                []
            ], 
            [
                "def test_make_multilabel_classification_return_indicator():", 
                []
            ], 
            [
                "def test_make_multilabel_classification_return_indicator_sparse():", 
                []
            ], 
            [
                "def test_make_hastie_10_2():", 
                []
            ], 
            [
                "def test_make_regression():", 
                []
            ], 
            [
                "def test_make_regression_multitarget():", 
                []
            ], 
            [
                "def test_make_blobs():", 
                []
            ], 
            [
                "def test_make_friedman1():", 
                []
            ], 
            [
                "def test_make_friedman2():", 
                []
            ], 
            [
                "def test_make_friedman3():", 
                []
            ], 
            [
                "def test_make_low_rank_matrix():", 
                []
            ], 
            [
                "def test_make_sparse_coded_signal():", 
                []
            ], 
            [
                "def test_make_sparse_uncorrelated():", 
                []
            ], 
            [
                "def test_make_spd_matrix():", 
                []
            ], 
            [
                "def test_make_swiss_roll():", 
                []
            ], 
            [
                "def test_make_s_curve():", 
                []
            ], 
            [
                "def test_make_biclusters():", 
                []
            ], 
            [
                "def test_make_checkerboard():", 
                []
            ], 
            [
                "def test_make_moons():", 
                []
            ]
        ], 
        21
    ], 
    "../scikit-learn-master\\examples\\manifold\\plot_t_sne_perplexity.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\feature_extraction\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\decomposition\\plot_pca_3d.py": [
        [
            [
                "def pdf(x):", 
                []
            ], 
            [
                "def plot_figs(fig_num, elev, azim):", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\pool.py": [
        [
            [
                "def _get_backing_memmap(a):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def has_shareable_memory(a):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _strided_from_memmap(filename, dtype, mode, offset, order, shape, strides,\n                         total_buffer_len):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _reduce_memmap_backed(a, m):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def reduce_memmap(a):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, max_nbytes, temp_folder, mmap_mode, verbose=0,\n                 context_id=None, prewarm=True):", 
                [
                    [
                        [
                            [
                                "max_nbytes", 
                                "int"
                            ], 
                            [
                                "temp_folder", 
                                "str"
                            ], 
                            [
                                "mmap_mode", 
                                "'r', 'r+' or 'c'"
                            ], 
                            [
                                "Note", 
                                "'w+' is coerced to 'r+'"
                            ], 
                            [
                                "verbose", 
                                "int, optional, 0 by default"
                            ], 
                            [
                                "prewarm", 
                                "bool, optional, False by default."
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __call__(self, a):", 
                []
            ], 
            [
                "def __init__(self, writer, reducers=None, protocol=HIGHEST_PROTOCOL):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def register(self, type, reduce_func):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def dispatcher(self, obj):", 
                []
            ], 
            [
                "def __init__(self, context, reducers=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __getstate__(self):", 
                []
            ], 
            [
                "def __setstate__(self, state):", 
                []
            ], 
            [
                "def empty(self):", 
                []
            ], 
            [
                "def _make_methods(self):", 
                []
            ], 
            [
                "def get():", 
                []
            ], 
            [
                "def send(obj):", 
                []
            ], 
            [
                "def put(obj):", 
                []
            ], 
            [
                "def __init__(self, processes=None, forward_reducers=None,\n                 backward_reducers=None, **kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _setup_queues(self):", 
                []
            ], 
            [
                "def delete_folder(folder_path):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, processes=None, temp_folder=None, max_nbytes=1e6,\n                 mmap_mode='r', forward_reducers=None, backward_reducers=None,\n                 verbose=0, context_id=None, prewarm=False, **kwargs):", 
                [
                    [
                        [
                            [
                                "processes", 
                                "int, optional"
                            ], 
                            [
                                "initializer", 
                                "callable, optional"
                            ], 
                            [
                                "initargs", 
                                "tuple, optional"
                            ], 
                            [
                                "temp_folder", 
                                "str, optional"
                            ], 
                            [
                                "order", 
                                ""
                            ], 
                            [
                                "writable", 
                                "this is a RAMdisk"
                            ], 
                            [
                                "mmap_mode", 
                                "{'r+', 'r', 'w+', 'c'}"
                            ], 
                            [
                                "forward_reducers", 
                                "dictionary, optional"
                            ], 
                            [
                                "processes", 
                                "see below."
                            ], 
                            [
                                "backward_reducers", 
                                "dictionary, optional"
                            ], 
                            [
                                "verbose", 
                                "int, optional"
                            ], 
                            [
                                "prewarm", 
                                "bool or str, optional, \"auto\" by default."
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _cleanup():", 
                []
            ], 
            [
                "def terminate(self):", 
                []
            ]
        ], 
        24
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_lasso_lars.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\mixture\\dpgmm.py": [
        [
            [
                "def digamma(x):", 
                []
            ], 
            [
                "def gammaln(x):", 
                []
            ], 
            [
                "def log_normalize(v, axis=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def wishart_log_det(a, b, detB, n_features):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def wishart_logz(v, s, dets, n_features):", 
                []
            ], 
            [
                "def _bound_wishart(a, B, detB):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _sym_quad_form(x, mu, A):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _bound_state_log_lik(X, initial_bound, precs, means, covariance_type):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=1, covariance_type='diag', alpha=1.0,\n                 random_state=None, tol=1e-3, verbose=0, min_covar=None,\n                 n_iter=10, params='wmc', init_params='wmc'):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int, default 1"
                            ], 
                            [
                                "covariance_type", 
                                "string, default 'diag'"
                            ], 
                            [
                                "alpha", 
                                "float, default 1"
                            ], 
                            [
                                "tol", 
                                "float, default 1e-3"
                            ], 
                            [
                                "n_iter", 
                                "int, default 10"
                            ], 
                            [
                                "params", 
                                "string, default 'wmc'"
                            ], 
                            [
                                "init_params", 
                                "string, default 'wmc'"
                            ], 
                            [
                                "verbose", 
                                "int, default 0"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _get_precisions(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _get_covars(self):", 
                []
            ], 
            [
                "def _set_covars(self, covars):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def score_samples(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "logprob", 
                                "array_like, shape (n_samples,)"
                            ], 
                            [
                                "responsibilities", 
                                "array_like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _update_concentration(self, z):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _update_means(self, X, z):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _update_precisions(self, X, z):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _monitor(self, X, z, n, end=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _do_mstep(self, X, z, params):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _initialize_gamma(self):", 
                []
            ], 
            [
                "def _bound_concentration(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _bound_means(self):", 
                []
            ], 
            [
                "def _bound_precisions(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _bound_proportions(self, z):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _logprior(self, z):", 
                []
            ], 
            [
                "def lower_bound(self, X, z):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _set_weights(self):", 
                []
            ], 
            [
                "def _fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like, shape (n, n_features)"
                            ]
                        ], 
                        [
                            [
                                "responsibilities", 
                                "array, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=1, covariance_type='diag', alpha=1.0,\n                 random_state=None, tol=1e-3, verbose=0, min_covar=None,\n                 n_iter=10, params='wmc', init_params='wmc'):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=1, covariance_type='diag', alpha=1.0,\n                 random_state=None, tol=1e-3, verbose=0,\n                 min_covar=None, n_iter=10, params='wmc', init_params='wmc'):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int, default 1"
                            ], 
                            [
                                "covariance_type", 
                                "string, default 'diag'"
                            ], 
                            [
                                "alpha", 
                                "float, default 1"
                            ], 
                            [
                                "tol", 
                                "float, default 1e-3"
                            ], 
                            [
                                "n_iter", 
                                "int, default 10"
                            ], 
                            [
                                "params", 
                                "string, default 'wmc'"
                            ], 
                            [
                                "init_params", 
                                "string, default 'wmc'"
                            ], 
                            [
                                "verbose", 
                                "int, default 0"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like, shape (n, n_features)"
                            ]
                        ], 
                        [
                            [
                                "responsibilities", 
                                "array, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def score_samples(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "logprob", 
                                "array_like, shape (n_samples,)"
                            ], 
                            [
                                "responsibilities", 
                                "array_like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _update_concentration(self, z):", 
                []
            ], 
            [
                "def _initialize_gamma(self):", 
                []
            ], 
            [
                "def _bound_proportions(self, z):", 
                []
            ], 
            [
                "def _bound_concentration(self):", 
                []
            ], 
            [
                "def _monitor(self, X, z, n, end=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _set_weights(self):", 
                []
            ]
        ], 
        37
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\setup.py": [
        [
            [
                "def configuration(parent_package='', top_path=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\model_selection\\plot_underfitting_overfitting.py": [
        [
            [
                "def true_fun(X):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\tree\\plot_iris.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\svm\\base.py": [
        [
            [
                "def _one_vs_one_coef(dual_coef, n_support, support_vectors):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, impl, kernel, degree, gamma, coef0,\n                 tol, C, nu, epsilon, shrinking, probability, cache_size,\n                 class_weight, verbose, max_iter, random_state):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _pairwise(self):", 
                []
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _validate_targets(self, y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _warn_from_fit_status(self):", 
                []
            ], 
            [
                "def _dense_fit(self, X, y, sample_weight, solver_type, kernel,\n                   random_seed):", 
                []
            ], 
            [
                "def _sparse_fit(self, X, y, sample_weight, solver_type, kernel,\n                    random_seed):", 
                []
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "y_pred", 
                                "array, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _dense_predict(self, X):", 
                []
            ], 
            [
                "def _sparse_predict(self, X):", 
                []
            ], 
            [
                "def _compute_kernel(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_class * (n_class-1) / 2)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _dense_decision_function(self, X):", 
                []
            ], 
            [
                "def _sparse_decision_function(self, X):", 
                []
            ], 
            [
                "def _validate_for_predict(self, X):", 
                []
            ], 
            [
                "def coef_(self):", 
                []
            ], 
            [
                "def _get_coef(self):", 
                []
            ], 
            [
                "def __init__(self, impl, kernel, degree, gamma, coef0, tol, C, nu,\n                 shrinking, probability, cache_size, class_weight, verbose,\n                 max_iter, decision_function_shape, random_state):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _validate_targets(self, y):", 
                []
            ], 
            [
                "def decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_classes * (n_classes-1) / 2)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "y_pred", 
                                "array, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _check_proba(self):", 
                []
            ], 
            [
                "def predict_proba(self):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "T", 
                                "array-like, shape (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _predict_proba(self, X):", 
                []
            ], 
            [
                "def predict_log_proba(self):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "T", 
                                "array-like, shape (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _predict_log_proba(self, X):", 
                []
            ], 
            [
                "def _dense_predict_proba(self, X):", 
                []
            ], 
            [
                "def _sparse_predict_proba(self, X):", 
                []
            ], 
            [
                "def _get_coef(self):", 
                []
            ], 
            [
                "def _get_liblinear_solver_type(multi_class, penalty, loss, dual):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _fit_liblinear(X, y, C, fit_intercept, intercept_scaling, class_weight,\n                   penalty, dual, verbose, max_iter, tol,\n                   random_state=None, multi_class='ovr',\n                   loss='logistic_regression', epsilon=0.1,\n                   sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "C", 
                                "float"
                            ], 
                            [
                                "fit_intercept", 
                                "bool"
                            ], 
                            [
                                "intercept_scaling", 
                                "float"
                            ], 
                            [
                                "class_weight", 
                                "{dict, 'balanced'}, optional"
                            ], 
                            [
                                "penalty", 
                                "str, {'l1', 'l2'}"
                            ], 
                            [
                                "dual", 
                                "bool"
                            ], 
                            [
                                "verbose", 
                                "int"
                            ], 
                            [
                                "max_iter", 
                                "int"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "multi_class", 
                                "str, {'ovr', 'crammer_singer'}"
                            ], 
                            [
                                "loss", 
                                "str, {'logistic_regression', 'hinge', 'squared_hinge',"
                            ], 
                            [
                                "epsilon", 
                                "float, optional (default=0.1)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, optional"
                            ]
                        ], 
                        [
                            [
                                "coef_", 
                                "ndarray, shape (n_features, n_features + 1)"
                            ], 
                            [
                                "intercept_", 
                                "float"
                            ], 
                            [
                                "n_iter_", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        32
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\tests\\test_quad_tree.py": [
        [
            [
                "def test_quadtree_boundary_computation():", 
                []
            ], 
            [
                "def test_quadtree_similar_point():", 
                []
            ], 
            [
                "def test_quad_tree_pickle():", 
                []
            ], 
            [
                "def check_pickle_protocol(protocol):", 
                []
            ], 
            [
                "def test_qt_insert_duplicate():", 
                []
            ], 
            [
                "def check_insert_duplicate(n_dimensions=2):", 
                []
            ], 
            [
                "def test_summarize():", 
                []
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\logistic.py": [
        [
            [
                "def _intercept_dot(w, X, y):", 
                [
                    [
                        [
                            [
                                "w", 
                                "ndarray, shape (n_features,) or (n_features + 1,)"
                            ], 
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "ndarray, shape (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "w", 
                                "ndarray, shape (n_features,)"
                            ], 
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "yz", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _logistic_loss_and_grad(w, X, y, alpha, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "w", 
                                "ndarray, shape (n_features,) or (n_features + 1,)"
                            ], 
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "ndarray, shape (n_samples,)"
                            ], 
                            [
                                "alpha", 
                                "float"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,) optional"
                            ]
                        ], 
                        [
                            [
                                "out", 
                                "float"
                            ], 
                            [
                                "grad", 
                                "ndarray, shape (n_features,) or (n_features + 1,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _logistic_loss(w, X, y, alpha, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "w", 
                                "ndarray, shape (n_features,) or (n_features + 1,)"
                            ], 
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "ndarray, shape (n_samples,)"
                            ], 
                            [
                                "alpha", 
                                "float"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,) optional"
                            ]
                        ], 
                        [
                            [
                                "out", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _logistic_grad_hess(w, X, y, alpha, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "w", 
                                "ndarray, shape (n_features,) or (n_features + 1,)"
                            ], 
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "ndarray, shape (n_samples,)"
                            ], 
                            [
                                "alpha", 
                                "float"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,) optional"
                            ]
                        ], 
                        [
                            [
                                "grad", 
                                "ndarray, shape (n_features,) or (n_features + 1,)"
                            ], 
                            [
                                "Hs", 
                                "callable"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def Hs(s):", 
                []
            ], 
            [
                "def _multinomial_loss(w, X, Y, alpha, sample_weight):", 
                [
                    [
                        [
                            [
                                "w", 
                                "ndarray, shape (n_classes * n_features,) or"
                            ], 
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "Y", 
                                "ndarray, shape (n_samples, n_classes)"
                            ], 
                            [
                                "alpha", 
                                "float"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,) optional"
                            ]
                        ], 
                        [
                            [
                                "loss", 
                                "float"
                            ], 
                            [
                                "p", 
                                "ndarray, shape (n_samples, n_classes)"
                            ], 
                            [
                                "w", 
                                "ndarray, shape (n_classes, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _multinomial_loss_grad(w, X, Y, alpha, sample_weight):", 
                [
                    [
                        [
                            [
                                "w", 
                                "ndarray, shape (n_classes * n_features,) or"
                            ], 
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "Y", 
                                "ndarray, shape (n_samples, n_classes)"
                            ], 
                            [
                                "alpha", 
                                "float"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,) optional"
                            ]
                        ], 
                        [
                            [
                                "loss", 
                                "float"
                            ], 
                            [
                                "grad", 
                                "ndarray, shape (n_classes * n_features,) or"
                            ], 
                            [
                                "p", 
                                "ndarray, shape (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _multinomial_grad_hess(w, X, Y, alpha, sample_weight):", 
                [
                    [
                        [
                            [
                                "w", 
                                "ndarray, shape (n_classes * n_features,) or"
                            ], 
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "Y", 
                                "ndarray, shape (n_samples, n_classes)"
                            ], 
                            [
                                "alpha", 
                                "float"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,) optional"
                            ]
                        ], 
                        [
                            [
                                "grad", 
                                "array, shape (n_classes * n_features,) or"
                            ], 
                            [
                                "hessp", 
                                "callable"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def hessp(v):", 
                []
            ], 
            [
                "def _check_solver_option(solver, multi_class, penalty, dual):", 
                []
            ], 
            [
                "def logistic_regression_path(X, y, pos_class=None, Cs=10, fit_intercept=True,\n                             max_iter=100, tol=1e-4, verbose=0,\n                             solver='lbfgs', coef=None,\n                             class_weight=None, dual=False, penalty='l2',\n                             intercept_scaling=1., multi_class='ovr',\n                             random_state=None, check_input=True,\n                             max_squared_sum=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "pos_class", 
                                "int, None"
                            ], 
                            [
                                "Cs", 
                                "int | array-like, shape (n_cs,)"
                            ], 
                            [
                                "fit_intercept", 
                                "bool"
                            ], 
                            [
                                "max_iter", 
                                "int"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "verbose", 
                                "int"
                            ], 
                            [
                                "solver", 
                                "{'lbfgs', 'newton-cg', 'liblinear', 'sag', 'saga'}"
                            ], 
                            [
                                "coef", 
                                "array-like, shape (n_features,), default None"
                            ], 
                            [
                                "class_weight", 
                                "dict or 'balanced', optional"
                            ], 
                            [
                                "dual", 
                                "bool"
                            ], 
                            [
                                "penalty", 
                                "str, 'l1' or 'l2'"
                            ], 
                            [
                                "intercept_scaling", 
                                "float, default 1."
                            ], 
                            [
                                "multi_class", 
                                "str, {'ovr', 'multinomial'}"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ], 
                            [
                                "check_input", 
                                "bool, default True"
                            ], 
                            [
                                "max_squared_sum", 
                                "float, default None"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape(n_samples,) optional"
                            ]
                        ], 
                        [
                            [
                                "coefs", 
                                "ndarray, shape (n_cs, n_features) or (n_cs, n_features + 1)"
                            ], 
                            [
                                "Cs", 
                                "ndarray"
                            ], 
                            [
                                "n_iter", 
                                "array, shape (n_cs,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _log_reg_scoring_path(X, y, train, test, pos_class=None, Cs=10,\n                          scoring=None, fit_intercept=False,\n                          max_iter=100, tol=1e-4, class_weight=None,\n                          verbose=0, solver='lbfgs', penalty='l2',\n                          dual=False, intercept_scaling=1.,\n                          multi_class='ovr', random_state=None,\n                          max_squared_sum=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,) or (n_samples, n_targets)"
                            ], 
                            [
                                "train", 
                                "list of indices"
                            ], 
                            [
                                "test", 
                                "list of indices"
                            ], 
                            [
                                "pos_class", 
                                "int, None"
                            ], 
                            [
                                "Cs", 
                                "list of floats | int"
                            ], 
                            [
                                "scoring", 
                                "callable or None, optional, default"
                            ], 
                            [
                                "at", 
                                "mod"
                            ], 
                            [
                                "fit_intercept", 
                                "bool"
                            ], 
                            [
                                "max_iter", 
                                "int"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "class_weight", 
                                "dict or 'balanced', optional"
                            ], 
                            [
                                "verbose", 
                                "int"
                            ], 
                            [
                                "solver", 
                                "{'lbfgs', 'newton-cg', 'liblinear', 'sag', 'saga'}"
                            ], 
                            [
                                "penalty", 
                                "str, 'l1' or 'l2'"
                            ], 
                            [
                                "dual", 
                                "bool"
                            ], 
                            [
                                "intercept_scaling", 
                                "float, default 1."
                            ], 
                            [
                                "multi_class", 
                                "str, {'ovr', 'multinomial'}"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ], 
                            [
                                "max_squared_sum", 
                                "float, default None"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape(n_samples,) optional"
                            ]
                        ], 
                        [
                            [
                                "coefs", 
                                "ndarray, shape (n_cs, n_features) or (n_cs, n_features + 1)"
                            ], 
                            [
                                "Cs", 
                                "ndarray"
                            ], 
                            [
                                "scores", 
                                "ndarray, shape (n_cs,)"
                            ], 
                            [
                                "n_iter", 
                                "array, shape(n_cs,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, penalty='l2', dual=False, tol=1e-4, C=1.0,\n                 fit_intercept=True, intercept_scaling=1, class_weight=None,\n                 random_state=None, solver='liblinear', max_iter=100,\n                 multi_class='ovr', verbose=0, warm_start=False, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "penalty", 
                                "str, 'l1' or 'l2', default"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "dual", 
                                "bool, default"
                            ], 
                            [
                                "tol", 
                                "float, default"
                            ], 
                            [
                                "C", 
                                "float, default"
                            ], 
                            [
                                "fit_intercept", 
                                "bool, default"
                            ], 
                            [
                                "intercept_scaling", 
                                "float, default 1."
                            ], 
                            [
                                "class_weight", 
                                "dict or 'balanced', default"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ], 
                            [
                                "solver", 
                                "{'newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'},"
                            ], 
                            [
                                "default", 
                                "'liblinear'"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "max_iter", 
                                "int, default"
                            ], 
                            [
                                "multi_class", 
                                "str, {'ovr', 'multinomial'}, default"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "verbose", 
                                "int, default"
                            ], 
                            [
                                "warm_start", 
                                "bool, default"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "n_jobs", 
                                "int, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,) optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "T", 
                                "array-like, shape = [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_log_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "T", 
                                "array-like, shape = [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, Cs=10, fit_intercept=True, cv=None, dual=False,\n                 penalty='l2', scoring=None, solver='lbfgs', tol=1e-4,\n                 max_iter=100, class_weight=None, n_jobs=1, verbose=0,\n                 refit=True, intercept_scaling=1., multi_class='ovr',\n                 random_state=None):", 
                [
                    [
                        [
                            [
                                "Cs", 
                                "list of floats | int"
                            ], 
                            [
                                "fit_intercept", 
                                "bool, default"
                            ], 
                            [
                                "cv", 
                                "integer or cross-validation generator"
                            ], 
                            [
                                "module", 
                                "mod"
                            ], 
                            [
                                "dual", 
                                "bool"
                            ], 
                            [
                                "penalty", 
                                "str, 'l1' or 'l2'"
                            ], 
                            [
                                "scoring", 
                                "string, callable, or None"
                            ], 
                            [
                                "at", 
                                "mod"
                            ], 
                            [
                                "solver", 
                                "{'newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'},"
                            ], 
                            [
                                "default", 
                                "'liblinear'"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "class_weight", 
                                "dict or 'balanced', optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "n_jobs", 
                                "int, optional"
                            ], 
                            [
                                "verbose", 
                                "int"
                            ], 
                            [
                                "refit", 
                                "bool"
                            ], 
                            [
                                "intercept_scaling", 
                                "float, default 1."
                            ], 
                            [
                                "multi_class", 
                                "str, {'ovr', 'multinomial'}"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,) optional"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        18
    ], 
    "../scikit-learn-master\\sklearn\\feature_selection\\univariate_selection.py": [
        [
            [
                "def _clean_nans(scores):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def f_oneway(*args):", 
                [
                    [
                        [], 
                        []
                    ]
                ]
            ], 
            [
                "def f_classif(X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array of shape(n_samples)"
                            ]
                        ], 
                        [
                            [
                                "F", 
                                "array, shape = [n_features,]"
                            ], 
                            [
                                "pval", 
                                "array, shape = [n_features,]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _chisquare(f_obs, f_exp):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def chi2(X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = (n_samples, n_features_in)"
                            ], 
                            [
                                "y", 
                                "array-like, shape = (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "chi2", 
                                "array, shape = (n_features,)"
                            ], 
                            [
                                "pval", 
                                "array, shape = (n_features,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def f_regression(X, y, center=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}  shape = (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array of shape(n_samples)."
                            ], 
                            [
                                "center", 
                                "True, bool,"
                            ]
                        ], 
                        [
                            [
                                "F", 
                                "array, shape=(n_features,)"
                            ], 
                            [
                                "pval", 
                                "array, shape=(n_features,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, score_func):", 
                [
                    [
                        [
                            [
                                "score_func", 
                                "callable"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _check_params(self, X, y):", 
                []
            ], 
            [
                "def __init__(self, score_func=f_classif, percentile=10):", 
                [
                    [
                        [
                            [
                                "score_func", 
                                "callable"
                            ], 
                            [
                                "percentile", 
                                "int, optional, default=10"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_params(self, X, y):", 
                []
            ], 
            [
                "def _get_support_mask(self):", 
                []
            ], 
            [
                "def __init__(self, score_func=f_classif, k=10):", 
                [
                    [
                        [
                            [
                                "score_func", 
                                "callable"
                            ], 
                            [
                                "k", 
                                "int or \"all\", optional, default=10"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_params(self, X, y):", 
                []
            ], 
            [
                "def _get_support_mask(self):", 
                []
            ], 
            [
                "def __init__(self, score_func=f_classif, alpha=5e-2):", 
                [
                    [
                        [
                            [
                                "score_func", 
                                "callable"
                            ], 
                            [
                                "alpha", 
                                "float, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _get_support_mask(self):", 
                []
            ], 
            [
                "def __init__(self, score_func=f_classif, alpha=5e-2):", 
                [
                    [
                        [
                            [
                                "score_func", 
                                "callable"
                            ], 
                            [
                                "alpha", 
                                "float, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _get_support_mask(self):", 
                []
            ], 
            [
                "def __init__(self, score_func=f_classif, alpha=5e-2):", 
                [
                    [
                        [
                            [
                                "score_func", 
                                "callable"
                            ], 
                            [
                                "alpha", 
                                "float, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _get_support_mask(self):", 
                []
            ], 
            [
                "def __init__(self, score_func=f_classif, mode='percentile', param=1e-5):", 
                [
                    [
                        [
                            [
                                "score_func", 
                                "callable"
                            ], 
                            [
                                "mode", 
                                "{'percentile', 'k_best', 'fpr', 'fdr', 'fwe'}"
                            ], 
                            [
                                "param", 
                                "float or int depending on the feature selection mode"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _make_selector(self):", 
                []
            ], 
            [
                "def _check_params(self, X, y):", 
                []
            ], 
            [
                "def _get_support_mask(self):", 
                []
            ]
        ], 
        25
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\online_lda.py": [
        [
            [
                "def _update_doc_distribution(X, exp_topic_word_distr, doc_topic_prior,\n                             max_iters,\n                             mean_change_tol, cal_sstats, random_state):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape=(n_samples, n_features)"
                            ], 
                            [
                                "exp_topic_word_distr", 
                                "dense matrix, shape=(n_topics, n_features)"
                            ], 
                            [
                                "doc_topic_prior", 
                                "float"
                            ], 
                            [
                                "max_iters", 
                                "int"
                            ], 
                            [
                                "mean_change_tol", 
                                "float"
                            ], 
                            [
                                "cal_sstats", 
                                "boolean"
                            ], 
                            [
                                "random_state", 
                                "RandomState instance or None"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=10, doc_topic_prior=None,\n                 topic_word_prior=None, learning_method=None,\n                 learning_decay=.7, learning_offset=10., max_iter=10,\n                 batch_size=128, evaluate_every=-1, total_samples=1e6,\n                 perp_tol=1e-1, mean_change_tol=1e-3, max_doc_update_iter=100,\n                 n_jobs=1, verbose=0, random_state=None, n_topics=None):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int, optional (default=10)"
                            ], 
                            [
                                "doc_topic_prior", 
                                "float, optional (default=None)"
                            ], 
                            [
                                "topic_word_prior", 
                                "float, optional (default=None)"
                            ], 
                            [
                                "learning_method", 
                                "'batch' | 'online', default='online'"
                            ], 
                            [
                                "options", 
                                ""
                            ], 
                            [
                                "learning_decay", 
                                "float, optional (default=0.7)"
                            ], 
                            [
                                "learning_offset", 
                                "float, optional (default=10.)"
                            ], 
                            [
                                "max_iter", 
                                "integer, optional (default=10)"
                            ], 
                            [
                                "batch_size", 
                                "int, optional (default=128)"
                            ], 
                            [
                                "evaluate_every", 
                                "int optional (default=0)"
                            ], 
                            [
                                "total_samples", 
                                "int, optional (default=1e6)"
                            ], 
                            [
                                "perp_tol", 
                                "float, optional (default=1e-1)"
                            ], 
                            [
                                "mean_change_tol", 
                                "float, optional (default=1e-3)"
                            ], 
                            [
                                "max_doc_update_iter", 
                                "int (default=100)"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default=1)"
                            ], 
                            [
                                "verbose", 
                                "int, optional (default=0)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "n_topics", 
                                "int, optional (default=None)"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_params(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _init_latent_vars(self, n_features):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _e_step(self, X, cal_sstats, random_init, parallel=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape=(n_samples, n_features)"
                            ], 
                            [
                                "cal_sstats", 
                                "boolean"
                            ], 
                            [
                                "random_init", 
                                "boolean"
                            ], 
                            [
                                "parallel", 
                                "joblib.Parallel (optional)"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def _em_step(self, X, total_samples, batch_update, parallel=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape=(n_samples, n_features)"
                            ], 
                            [
                                "total_samples", 
                                "integer"
                            ], 
                            [
                                "batch_update", 
                                "boolean"
                            ], 
                            [
                                "parallel", 
                                "joblib.Parallel"
                            ]
                        ], 
                        [
                            [
                                "doc_topic_distr", 
                                "array, shape=(n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _check_non_neg_array(self, X, whom):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape=(n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape=(n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def _unnormalized_transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape=(n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "doc_topic_distr", 
                                "shape=(n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape=(n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "doc_topic_distr", 
                                "shape=(n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _approx_bound(self, X, doc_topic_distr, sub_sampling):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape=(n_samples, n_features)"
                            ], 
                            [
                                "doc_topic_distr", 
                                "array, shape=(n_samples, n_components)"
                            ], 
                            [
                                "sub_sampling", 
                                "boolean, optional, (default=False)"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _loglikelihood(prior, distr, dirichlet_distr, size):", 
                []
            ], 
            [
                "def score(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape=(n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _perplexity_precomp_distr(self, X, doc_topic_distr=None,\n                                  sub_sampling=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, [n_samples, n_features]"
                            ], 
                            [
                                "doc_topic_distr", 
                                "None or array, shape=(n_samples, n_components)"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def perplexity(self, X, doc_topic_distr='deprecated', sub_sampling=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, [n_samples, n_features]"
                            ], 
                            [
                                "doc_topic_distr", 
                                "None or array, shape=(n_samples, n_components)"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "sub_sampling", 
                                "bool"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        16
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_multioutput.py": [
        [
            [
                "def test_multi_target_regression():", 
                []
            ], 
            [
                "def test_multi_target_regression_partial_fit():", 
                []
            ], 
            [
                "def test_multi_target_regression_one_target():", 
                []
            ], 
            [
                "def test_multi_target_sparse_regression():", 
                []
            ], 
            [
                "def test_multi_target_sample_weights_api():", 
                []
            ], 
            [
                "def test_multi_target_sample_weight_partial_fit():", 
                []
            ], 
            [
                "def test_multi_target_sample_weights():", 
                []
            ], 
            [
                "def test_multi_output_classification_partial_fit_parallelism():", 
                []
            ], 
            [
                "def test_multi_output_classification_partial_fit():", 
                []
            ], 
            [
                "def test_mutli_output_classifiation_partial_fit_no_first_classes_exception():", 
                []
            ], 
            [
                "def test_multi_output_classification():", 
                []
            ], 
            [
                "def test_multiclass_multioutput_estimator():", 
                []
            ], 
            [
                "def test_multiclass_multioutput_estimator_predict_proba():", 
                []
            ], 
            [
                "def test_multi_output_classification_sample_weights():", 
                []
            ], 
            [
                "def test_multi_output_classification_partial_fit_sample_weights():", 
                []
            ], 
            [
                "def test_multi_output_exceptions():", 
                []
            ], 
            [
                "def generate_multilabel_dataset_with_correlations():", 
                []
            ], 
            [
                "def test_classifier_chain_fit_and_predict_with_logistic_regression():", 
                []
            ], 
            [
                "def test_classifier_chain_fit_and_predict_with_linear_svc():", 
                []
            ], 
            [
                "def test_classifier_chain_fit_and_predict_with_sparse_data():", 
                []
            ], 
            [
                "def test_classifier_chain_fit_and_predict_with_sparse_data_and_cv():", 
                []
            ], 
            [
                "def test_classifier_chain_random_order():", 
                []
            ], 
            [
                "def test_classifier_chain_crossval_fit_and_predict():", 
                []
            ], 
            [
                "def test_classifier_chain_vs_independent_models():", 
                []
            ]
        ], 
        24
    ], 
    "../scikit-learn-master\\benchmarks\\bench_lasso.py": [
        [
            [
                "def compute_bench(alpha, n_samples, n_features, precompute):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\doc\\tutorial\\machine_learning_map\\svg2imagemap.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\gaussian_process\\regression_models.py": [
        [
            [
                "def constant(x):", 
                [
                    [
                        [
                            [
                                "x", 
                                "array_like"
                            ]
                        ], 
                        [
                            [
                                "f", 
                                "array_like"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def linear(x):", 
                [
                    [
                        [
                            [
                                "x", 
                                "array_like"
                            ]
                        ], 
                        [
                            [
                                "f", 
                                "array_like"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def quadratic(x):", 
                [
                    [
                        [
                            [
                                "x", 
                                "array_like"
                            ]
                        ], 
                        [
                            [
                                "f", 
                                "array_like"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\examples\\gaussian_process\\plot_gpr_co2.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\tree\\setup.py": [
        [
            [
                "def configuration(parent_package=\"\", top_path=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\mixture\\plot_gmm_covariances.py": [
        [
            [
                "def make_ellipses(gmm, ax):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_sgd_penalties.py": [
        [
            [
                "def l1(xs):", 
                []
            ], 
            [
                "def l2(xs):", 
                []
            ], 
            [
                "def el(xs, z):", 
                []
            ], 
            [
                "def cross(ext):", 
                []
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\examples\\model_selection\\plot_roc_crossval.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\exercises\\plot_cv_diabetes.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\tests\\test_sgd.py": [
        [
            [
                "def fit(self, X, y, *args, **kw):", 
                []
            ], 
            [
                "def partial_fit(self, X, y, *args, **kw):", 
                []
            ], 
            [
                "def decision_function(self, X):", 
                []
            ], 
            [
                "def predict_proba(self, X):", 
                []
            ], 
            [
                "def fit(self, X, y, *args, **kw):", 
                []
            ], 
            [
                "def partial_fit(self, X, y, *args, **kw):", 
                []
            ], 
            [
                "def decision_function(self, X, *args, **kw):", 
                []
            ], 
            [
                "def factory(self, **kwargs):", 
                []
            ], 
            [
                "def asgd(self, X, y, eta, alpha, weight_init=None, intercept_init=0.0):", 
                []
            ], 
            [
                "def _test_warm_start(self, X, Y, lr):", 
                []
            ], 
            [
                "def test_warm_start_constant(self):", 
                []
            ], 
            [
                "def test_warm_start_invscaling(self):", 
                []
            ], 
            [
                "def test_warm_start_optimal(self):", 
                []
            ], 
            [
                "def test_input_format(self):", 
                []
            ], 
            [
                "def test_clone(self):", 
                []
            ], 
            [
                "def test_plain_has_no_average_attr(self):", 
                []
            ], 
            [
                "def test_late_onset_averaging_not_reached(self):", 
                []
            ], 
            [
                "def test_late_onset_averaging_reached(self):", 
                []
            ], 
            [
                "def test_sgd_bad_alpha_for_optimal_learning_rate(self):", 
                []
            ], 
            [
                "def test_sgd(self):", 
                []
            ], 
            [
                "def test_sgd_bad_l1_ratio(self):", 
                []
            ], 
            [
                "def test_sgd_bad_learning_rate_schedule(self):", 
                []
            ], 
            [
                "def test_sgd_bad_eta0(self):", 
                []
            ], 
            [
                "def test_sgd_bad_alpha(self):", 
                []
            ], 
            [
                "def test_sgd_bad_penalty(self):", 
                []
            ], 
            [
                "def test_sgd_bad_loss(self):", 
                []
            ], 
            [
                "def test_sgd_max_iter_param(self):", 
                []
            ], 
            [
                "def test_sgd_shuffle_param(self):", 
                []
            ], 
            [
                "def test_argument_coef(self):", 
                []
            ], 
            [
                "def test_provide_coef(self):", 
                []
            ], 
            [
                "def test_set_intercept(self):", 
                []
            ], 
            [
                "def test_set_intercept_binary(self):", 
                []
            ], 
            [
                "def test_average_binary_computed_correctly(self):", 
                []
            ], 
            [
                "def test_set_intercept_to_intercept(self):", 
                []
            ], 
            [
                "def test_sgd_at_least_two_labels(self):", 
                []
            ], 
            [
                "def test_partial_fit_weight_class_balanced(self):", 
                []
            ], 
            [
                "def test_sgd_multiclass(self):", 
                []
            ], 
            [
                "def test_sgd_multiclass_average(self):", 
                []
            ], 
            [
                "def test_sgd_multiclass_with_init_coef(self):", 
                []
            ], 
            [
                "def test_sgd_multiclass_njobs(self):", 
                []
            ], 
            [
                "def test_set_coef_multiclass(self):", 
                []
            ], 
            [
                "def test_sgd_proba(self):", 
                []
            ], 
            [
                "def test_sgd_l1(self):", 
                []
            ], 
            [
                "def test_class_weights(self):", 
                []
            ], 
            [
                "def test_equal_class_weight(self):", 
                []
            ], 
            [
                "def test_wrong_class_weight_label(self):", 
                []
            ], 
            [
                "def test_wrong_class_weight_format(self):", 
                []
            ], 
            [
                "def test_weights_multiplied(self):", 
                []
            ], 
            [
                "def test_balanced_weight(self):", 
                []
            ], 
            [
                "def test_sample_weights(self):", 
                []
            ], 
            [
                "def test_wrong_sample_weights(self):", 
                []
            ], 
            [
                "def test_partial_fit_exception(self):", 
                []
            ], 
            [
                "def test_partial_fit_binary(self):", 
                []
            ], 
            [
                "def test_partial_fit_multiclass(self):", 
                []
            ], 
            [
                "def test_partial_fit_multiclass_average(self):", 
                []
            ], 
            [
                "def test_fit_then_partial_fit(self):", 
                []
            ], 
            [
                "def _test_partial_fit_equal_fit(self, lr):", 
                []
            ], 
            [
                "def test_partial_fit_equal_fit_constant(self):", 
                []
            ], 
            [
                "def test_partial_fit_equal_fit_optimal(self):", 
                []
            ], 
            [
                "def test_partial_fit_equal_fit_invscaling(self):", 
                []
            ], 
            [
                "def test_regression_losses(self):", 
                []
            ], 
            [
                "def test_warm_start_multiclass(self):", 
                []
            ], 
            [
                "def test_multiple_fit(self):", 
                []
            ], 
            [
                "def test_sgd(self):", 
                []
            ], 
            [
                "def test_sgd_bad_penalty(self):", 
                []
            ], 
            [
                "def test_sgd_bad_loss(self):", 
                []
            ], 
            [
                "def test_sgd_averaged_computed_correctly(self):", 
                []
            ], 
            [
                "def test_sgd_averaged_partial_fit(self):", 
                []
            ], 
            [
                "def test_average_sparse(self):", 
                []
            ], 
            [
                "def test_sgd_least_squares_fit(self):", 
                []
            ], 
            [
                "def test_sgd_epsilon_insensitive(self):", 
                []
            ], 
            [
                "def test_sgd_huber_fit(self):", 
                []
            ], 
            [
                "def test_elasticnet_convergence(self):", 
                []
            ], 
            [
                "def test_partial_fit(self):", 
                []
            ], 
            [
                "def _test_partial_fit_equal_fit(self, lr):", 
                []
            ], 
            [
                "def test_partial_fit_equal_fit_constant(self):", 
                []
            ], 
            [
                "def test_partial_fit_equal_fit_optimal(self):", 
                []
            ], 
            [
                "def test_partial_fit_equal_fit_invscaling(self):", 
                []
            ], 
            [
                "def test_loss_function_epsilon(self):", 
                []
            ], 
            [
                "def test_l1_ratio():", 
                []
            ], 
            [
                "def test_underflow_or_overlow():", 
                []
            ], 
            [
                "def test_numerical_stability_large_gradient():", 
                []
            ], 
            [
                "def test_large_regularization():", 
                []
            ], 
            [
                "def test_tol_parameter():", 
                []
            ], 
            [
                "def test_future_and_deprecation_warnings():", 
                []
            ], 
            [
                "def init(max_iter=None, tol=None, n_iter=None):", 
                []
            ], 
            [
                "def test_tol_and_max_iter_default_values():", 
                []
            ], 
            [
                "def _test_gradient_common(loss_function, cases):", 
                []
            ], 
            [
                "def test_gradient_hinge():", 
                []
            ], 
            [
                "def test_gradient_squared_hinge():", 
                []
            ], 
            [
                "def test_gradient_log():", 
                []
            ], 
            [
                "def test_gradient_squared_loss():", 
                []
            ], 
            [
                "def test_gradient_huber():", 
                []
            ], 
            [
                "def test_gradient_modified_huber():", 
                []
            ], 
            [
                "def test_gradient_epsilon_insensitive():", 
                []
            ], 
            [
                "def test_gradient_squared_epsilon_insensitive():", 
                []
            ]
        ], 
        96
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\sag.py": [
        [
            [
                "def get_auto_step_size(max_squared_sum, alpha_scaled, loss, fit_intercept,\n                       n_samples=None,\n                       is_saga=False):", 
                [
                    [
                        [
                            [
                                "max_squared_sum", 
                                "float"
                            ], 
                            [
                                "alpha_scaled", 
                                "float"
                            ], 
                            [
                                "loss", 
                                "string, in {\"log\", \"squared\"}"
                            ], 
                            [
                                "fit_intercept", 
                                "bool"
                            ], 
                            [
                                "n_samples", 
                                "int, optional"
                            ], 
                            [
                                "is_saga", 
                                "boolean, optional"
                            ]
                        ], 
                        [
                            [
                                "step_size", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def sag_solver(X, y, sample_weight=None, loss='log', alpha=1., beta=0.,\n               max_iter=1000, tol=0.001, verbose=0, random_state=None,\n               check_input=True, max_squared_sum=None,\n               warm_start_mem=None,\n               is_saga=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "numpy array, shape (n_samples,)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,), optional"
                            ], 
                            [
                                "loss", 
                                "'log' | 'squared' | 'multinomial'"
                            ], 
                            [
                                "optimized", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "alpha", 
                                "float, optional"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "tol", 
                                "double, optional"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ], 
                            [
                                "check_input", 
                                "bool, default True"
                            ], 
                            [
                                "max_squared_sum", 
                                "float, default None"
                            ], 
                            [
                                "warm_start_mem", 
                                "dict, optional"
                            ], 
                            [
                                "contains", 
                                ""
                            ], 
                            [
                                "is_saga", 
                                "boolean, optional"
                            ]
                        ], 
                        [
                            [
                                "coef_", 
                                "array, shape (n_features)"
                            ], 
                            [
                                "n_iter_", 
                                "int"
                            ], 
                            [
                                "warm_start_mem", 
                                "dict"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\examples\\neural_networks\\plot_mlp_training_curves.py": [
        [
            [
                "def plot_on_dataset(X, y, ax, name):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\scorer.py": [
        [
            [
                "def __init__(self, score_func, sign, kwargs):", 
                []
            ], 
            [
                "def __call__(self, estimator, X, y, sample_weight=None):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def _factory_args(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __call__(self, estimator, X, y_true, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "object"
                            ], 
                            [
                                "X", 
                                "array-like or sparse matrix"
                            ], 
                            [
                                "y_true", 
                                "array-like"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __call__(self, clf, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "clf", 
                                "object"
                            ], 
                            [
                                "X", 
                                "array-like or sparse matrix"
                            ], 
                            [
                                "y", 
                                "array-like"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _factory_args(self):", 
                []
            ], 
            [
                "def __call__(self, clf, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "clf", 
                                "object"
                            ], 
                            [
                                "X", 
                                "array-like or sparse matrix"
                            ], 
                            [
                                "y", 
                                "array-like"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _factory_args(self):", 
                []
            ], 
            [
                "def get_scorer(scoring):", 
                [
                    [
                        [
                            [
                                "scoring", 
                                "str | callable"
                            ]
                        ], 
                        [
                            [
                                "scorer", 
                                "callable"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _passthrough_scorer(estimator, *args, **kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def check_scoring(estimator, scoring=None, allow_none=False):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object implementing 'fit'"
                            ], 
                            [
                                "scoring", 
                                "string, callable or None, optional, default"
                            ], 
                            [
                                "allow_none", 
                                "boolean, optional, default"
                            ]
                        ], 
                        [
                            [
                                "scoring", 
                                "callable"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _check_multimetric_scoring(estimator, scoring=None):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "sklearn estimator instance"
                            ], 
                            [
                                "scoring", 
                                "string, callable, list/tuple, dict or None, default"
                            ], 
                            [
                                "See", 
                                "ref"
                            ]
                        ], 
                        [
                            [
                                "scorers_dict", 
                                "dict"
                            ], 
                            [
                                "is_multimetric", 
                                "bool"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_scorer(score_func, greater_is_better=True, needs_proba=False,\n                needs_threshold=False, **kwargs):", 
                [
                    [
                        [
                            [
                                "score_func", 
                                "callable,"
                            ], 
                            [
                                "greater_is_better", 
                                "boolean, default=True"
                            ], 
                            [
                                "needs_proba", 
                                "boolean, default=False"
                            ], 
                            [
                                "needs_threshold", 
                                "boolean, default=False"
                            ]
                        ], 
                        [
                            [
                                "scorer", 
                                "callable"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        14
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\format_stack.py": [
        [
            [
                "def safe_repr(value):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def eq_repr(value, repr=safe_repr):", 
                []
            ], 
            [
                "def uniq_stable(elems):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fix_frame_records_filenames(records):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _fixed_getframes(etb, context=1, tb_offset=0):", 
                []
            ], 
            [
                "def _format_traceback_lines(lnum, index, lines, lvals=None):", 
                []
            ], 
            [
                "def format_records(records):", 
                []
            ], 
            [
                "def tokeneater(token_type, token, start, end, line):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def linereader(file=file, lnum=[lnum], getline=linecache.getline):", 
                []
            ], 
            [
                "def format_exc(etype, evalue, etb, context=5, tb_offset=0):", 
                [
                    [
                        [
                            [
                                "etb", 
                                "as returned by sys.exc_info"
                            ], 
                            [
                                "context", 
                                "number of lines of the source file to plot"
                            ], 
                            [
                                "tb_offset", 
                                "the number of stack frame not to use (0 = use all)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def format_outer_frames(context=5, stack_start=None, stack_end=None,\n                        ignore_ipython=True):", 
                []
            ]
        ], 
        11
    ], 
    "../scikit-learn-master\\sklearn\\_build_utils\\__init__.py": [
        [
            [
                "def get_blas_info():", 
                []
            ], 
            [
                "def atlas_not_found(blas_info_):", 
                []
            ], 
            [
                "def build_from_c_and_cpp_files(extensions):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def maybe_cythonize_extensions(top_path, config):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\examples\\classification\\plot_classification_probability.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\tests\\test_approximate.py": [
        [
            [
                "def test_lsh_forest_deprecation():", 
                []
            ], 
            [
                "def test_neighbors_accuracy_with_n_candidates():", 
                []
            ], 
            [
                "def test_neighbors_accuracy_with_n_estimators():", 
                []
            ], 
            [
                "def test_kneighbors():", 
                []
            ], 
            [
                "def test_radius_neighbors():", 
                []
            ], 
            [
                "def test_radius_neighbors_boundary_handling():", 
                []
            ], 
            [
                "def test_distances():", 
                []
            ], 
            [
                "def test_fit():", 
                []
            ], 
            [
                "def test_partial_fit():", 
                []
            ], 
            [
                "def test_hash_functions():", 
                []
            ], 
            [
                "def test_candidates():", 
                []
            ], 
            [
                "def test_graphs():", 
                []
            ], 
            [
                "def test_sparse_input():", 
                []
            ]
        ], 
        13
    ], 
    "../scikit-learn-master\\benchmarks\\bench_text_vectorizers.py": [
        [
            [
                "def run_vectorizer(Vectorizer, X, **params):", 
                []
            ], 
            [
                "def f():", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\examples\\model_selection\\plot_roc.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\svm\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\classification\\plot_digits_classification.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\benchmarks\\bench_covertype.py": [
        [
            [
                "def load_data(dtype=np.float32, order='C', random_state=13):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\utils\\__init__.py": [
        [
            [
                "def __init__(self, **kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __setattr__(self, key, value):", 
                []
            ], 
            [
                "def __dir__(self):", 
                []
            ], 
            [
                "def __getattr__(self, key):", 
                []
            ], 
            [
                "def __setstate__(self, state):", 
                []
            ], 
            [
                "def safe_mask(X, mask):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}"
                            ], 
                            [
                                "mask", 
                                "array"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def axis0_safe_slice(X, mask, len_mask):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def safe_indexing(X, indices):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, sparse-matrix, list, pandas.DataFrame, pandas.Series."
                            ], 
                            [
                                "indices", 
                                "array-like of int"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def resample(*arrays, **options):", 
                [
                    [
                        [
                            [
                                "*arrays", 
                                "sequence of indexable data-structures"
                            ], 
                            [
                                "replace", 
                                "boolean, True by default"
                            ], 
                            [
                                "n_samples", 
                                "int, None by default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "resampled_arrays", 
                                "sequence of indexable data-structures"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def shuffle(*arrays, **options):", 
                [
                    [
                        [
                            [
                                "*arrays", 
                                "sequence of indexable data-structures"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "n_samples", 
                                "int, None by default"
                            ]
                        ], 
                        [
                            [
                                "shuffled_arrays", 
                                "sequence of indexable data-structures"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def safe_sqr(X, copy=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array like, matrix, sparse matrix"
                            ], 
                            [
                                "copy", 
                                "boolean, optional, default True"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def gen_batches(n, batch_size):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def gen_even_slices(n, n_packs, n_samples=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _get_n_jobs(n_jobs):", 
                [
                    [
                        [
                            [
                                "n_jobs", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "n_jobs", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def tosequence(x):", 
                [
                    [
                        [
                            [
                                "x", 
                                "iterable"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def indices_to_mask(indices, mask_length):", 
                [
                    [
                        [
                            [
                                "indices", 
                                "list-like"
                            ], 
                            [
                                "mask_length", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "mask", 
                                "1d boolean nd-array"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        16
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_polynomial_interpolation.py": [
        [
            [
                "def f(x):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\manifold\\spectral_embedding_.py": [
        [
            [
                "def _graph_connected_component(graph, node_id):", 
                [
                    [
                        [
                            [
                                "graph", 
                                "array-like, shape"
                            ], 
                            [
                                "node_id", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "connected_components_matrix", 
                                "array-like, shape"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _graph_is_connected(graph):", 
                [
                    [
                        [
                            [
                                "graph", 
                                "array-like or sparse matrix, shape"
                            ]
                        ], 
                        [
                            [
                                "is_connected", 
                                "bool"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _set_diag(laplacian, value, norm_laplacian):", 
                [
                    [
                        [
                            [
                                "laplacian", 
                                "array or sparse matrix"
                            ], 
                            [
                                "value", 
                                "float"
                            ], 
                            [
                                "norm_laplacian", 
                                "bool"
                            ]
                        ], 
                        [
                            [
                                "laplacian", 
                                "array or sparse matrix"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def spectral_embedding(adjacency, n_components=8, eigen_solver=None,\n                       random_state=None, eigen_tol=0.0,\n                       norm_laplacian=True, drop_first=True):", 
                [
                    [
                        [
                            [
                                "adjacency", 
                                "array-like or sparse matrix, shape"
                            ], 
                            [
                                "n_components", 
                                "integer, optional, default 8"
                            ], 
                            [
                                "eigen_solver", 
                                "{None, 'arpack', 'lobpcg', or 'amg'}, default None"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ], 
                            [
                                "eigen_tol", 
                                "float, optional, default=0.0"
                            ], 
                            [
                                "norm_laplacian", 
                                "bool, optional, default=True"
                            ], 
                            [
                                "drop_first", 
                                "bool, optional, default=True"
                            ]
                        ], 
                        [
                            [
                                "embedding", 
                                "array, shape=(n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=2, affinity=\"nearest_neighbors\",\n                 gamma=None, random_state=None, eigen_solver=None,\n                 n_neighbors=None, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "integer, default"
                            ], 
                            [
                                "affinity", 
                                "string or callable, default"
                            ], 
                            [
                                "callable", 
                                "use passed in function as affinity"
                            ], 
                            [
                                "gamma", 
                                "float, optional, default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ], 
                            [
                                "eigen_solver", 
                                "{None, 'arpack', 'lobpcg', or 'amg'}"
                            ], 
                            [
                                "n_neighbors", 
                                "int, default"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default = 1)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _pairwise(self):", 
                []
            ], 
            [
                "def _get_affinity_matrix(self, X, Y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "X", 
                                "array-like, shape (n_samples, n_samples),"
                            ], 
                            [
                                "Y", 
                                "Ignored"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "X", 
                                "array-like, shape (n_samples, n_samples),"
                            ], 
                            [
                                "Y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "X", 
                                "array-like, shape (n_samples, n_samples),"
                            ], 
                            [
                                "Y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        9
    ], 
    "../scikit-learn-master\\examples\\applications\\plot_out_of_core_classification.py": [
        [
            [
                "def _not_in_sphinx():", 
                []
            ], 
            [
                "def __init__(self, encoding='latin-1'):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def handle_starttag(self, tag, attrs):", 
                []
            ], 
            [
                "def handle_endtag(self, tag):", 
                []
            ], 
            [
                "def _reset(self):", 
                []
            ], 
            [
                "def parse(self, fd):", 
                []
            ], 
            [
                "def handle_data(self, data):", 
                []
            ], 
            [
                "def start_reuters(self, attributes):", 
                []
            ], 
            [
                "def end_reuters(self):", 
                []
            ], 
            [
                "def start_title(self, attributes):", 
                []
            ], 
            [
                "def end_title(self):", 
                []
            ], 
            [
                "def start_body(self, attributes):", 
                []
            ], 
            [
                "def end_body(self):", 
                []
            ], 
            [
                "def start_topics(self, attributes):", 
                []
            ], 
            [
                "def end_topics(self):", 
                []
            ], 
            [
                "def start_d(self, attributes):", 
                []
            ], 
            [
                "def end_d(self):", 
                []
            ], 
            [
                "def stream_reuters_documents(data_path=None):", 
                [
                    [
                        null, 
                        null
                    ], 
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def progress(blocknum, bs, size):", 
                []
            ], 
            [
                "def get_minibatch(doc_iter, size, pos_class=positive_class):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def iter_minibatches(doc_iter, minibatch_size):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def progress(cls_name, stats):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def plot_accuracy(x, y, x_legend):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def autolabel(rectangles):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        24
    ], 
    "../scikit-learn-master\\sklearn\\tree\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\exercises\\plot_iris_exercise.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_random_projection.py": [
        [
            [
                "def make_sparse_random_data(n_samples, n_features, n_nonzeros):", 
                []
            ], 
            [
                "def densify(matrix):", 
                []
            ], 
            [
                "def test_invalid_jl_domain():", 
                []
            ], 
            [
                "def test_input_size_jl_min_dim():", 
                []
            ], 
            [
                "def check_input_size_random_matrix(random_matrix):", 
                []
            ], 
            [
                "def check_size_generated(random_matrix):", 
                []
            ], 
            [
                "def check_zero_mean_and_unit_norm(random_matrix):", 
                []
            ], 
            [
                "def check_input_with_sparse_random_matrix(random_matrix):", 
                []
            ], 
            [
                "def test_basic_property_of_random_matrix():", 
                []
            ], 
            [
                "def test_gaussian_random_matrix():", 
                []
            ], 
            [
                "def test_sparse_random_matrix():", 
                []
            ], 
            [
                "def test_sparse_random_projection_transformer_invalid_density():", 
                []
            ], 
            [
                "def test_random_projection_transformer_invalid_input():", 
                []
            ], 
            [
                "def test_try_to_transform_before_fit():", 
                []
            ], 
            [
                "def test_too_many_samples_to_find_a_safe_embedding():", 
                []
            ], 
            [
                "def test_random_projection_embedding_quality():", 
                []
            ], 
            [
                "def test_SparseRandomProjection_output_representation():", 
                []
            ], 
            [
                "def test_correct_RandomProjection_dimensions_embedding():", 
                []
            ], 
            [
                "def test_warning_n_components_greater_than_n_features():", 
                []
            ], 
            [
                "def test_works_with_sparse_data():", 
                []
            ]
        ], 
        20
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_sgd_loss_functions.py": [
        [
            [
                "def modified_huber_loss(y_true, y_pred):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_fast_dict.py": [
        [
            [
                "def test_int_float_dict():", 
                []
            ], 
            [
                "def test_int_float_dict_argmin():", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\examples\\covariance\\plot_robust_vs_empirical_covariance.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\applications\\plot_face_recognition.py": [
        [
            [
                "def plot_gallery(images, titles, h, w, n_row=3, n_col=4):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def title(y_pred, y_test, target_names, i):", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\utils\\setup.py": [
        [
            [
                "def configuration(parent_package='', top_path=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_bayesian_ridge.py": [
        [
            [
                "def f(x, noise_amount):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\covariance\\plot_lw_vs_oas.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_kmeans_silhouette_analysis.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\svm\\plot_separating_hyperplane.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\benchmarks\\bench_random_projections.py": [
        [
            [
                "def type_auto_or_float(val):", 
                []
            ], 
            [
                "def type_auto_or_int(val):", 
                []
            ], 
            [
                "def compute_time(t_start, delta):", 
                []
            ], 
            [
                "def bench_scikit_transformer(X, transfomer):", 
                []
            ], 
            [
                "def make_sparse_random_data(n_samples, n_features, n_nonzeros,\n                            random_state=None):", 
                []
            ], 
            [
                "def print_row(clf_type, time_fit, time_transform):", 
                []
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\sklearn\\exceptions.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\neural_networks\\plot_rbm_logistic_classification.py": [
        [
            [
                "def nudge_dataset(X, Y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\doc\\conf.py": [
        [
            [
                "def make_carousel_thumbs(app, exception):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def setup(app):", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_fixes.py": [
        [
            [
                "def test_divide():", 
                []
            ], 
            [
                "def test_masked_array_obj_dtype_pickleable():", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\tests\\test_kd_tree.py": [
        [
            [
                "def brute_force_neighbors(X, Y, k, metric, **kwargs):", 
                []
            ], 
            [
                "def check_neighbors(dualtree, breadth_first, k, metric, X, Y, kwargs):", 
                []
            ], 
            [
                "def test_kd_tree_query():", 
                []
            ], 
            [
                "def test_kd_tree_query_radius(n_samples=100, n_features=10):", 
                []
            ], 
            [
                "def test_kd_tree_query_radius_distance(n_samples=100, n_features=10):", 
                []
            ], 
            [
                "def compute_kernel_slow(Y, X, kernel, h):", 
                []
            ], 
            [
                "def check_results(kernel, h, atol, rtol, breadth_first, Y, kdt, dens_true):", 
                []
            ], 
            [
                "def test_kd_tree_kde(n_samples=100, n_features=3):", 
                []
            ], 
            [
                "def test_gaussian_kde(n_samples=1000):", 
                []
            ], 
            [
                "def test_kd_tree_two_point(n_samples=100, n_features=3):", 
                []
            ], 
            [
                "def check_two_point(r, dualtree):", 
                []
            ], 
            [
                "def test_kd_tree_pickle():", 
                []
            ], 
            [
                "def check_pickle_protocol(protocol):", 
                []
            ], 
            [
                "def test_neighbors_heap(n_pts=5, n_nbrs=10):", 
                []
            ], 
            [
                "def test_node_heap(n_nodes=50):", 
                []
            ], 
            [
                "def test_simultaneous_sort(n_rows=10, n_pts=201):", 
                []
            ]
        ], 
        16
    ], 
    "../scikit-learn-master\\examples\\plot_kernel_approximation.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\spectral.py": [
        [
            [
                "def discretize(vectors, copy=True, max_svd_restarts=30, n_iter_max=20,\n               random_state=None):", 
                [
                    [
                        [
                            [
                                "vectors", 
                                "array-like, shape"
                            ], 
                            [
                                "copy", 
                                "boolean, optional, default"
                            ], 
                            [
                                "max_svd_restarts", 
                                "int, optional, default"
                            ], 
                            [
                                "n_iter_max", 
                                "int, optional, default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ]
                        ], 
                        [
                            [
                                "labels", 
                                "array of integers, shape"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def spectral_clustering(affinity, n_clusters=8, n_components=None,\n                        eigen_solver=None, random_state=None, n_init=10,\n                        eigen_tol=0.0, assign_labels='kmeans'):", 
                [
                    [
                        [
                            [
                                "affinity", 
                                "array-like or sparse matrix, shape"
                            ], 
                            [
                                "examples", 
                                ""
                            ], 
                            [
                                "n_clusters", 
                                "integer, optional"
                            ], 
                            [
                                "n_components", 
                                "integer, optional, default is n_clusters"
                            ], 
                            [
                                "eigen_solver", 
                                "{None, 'arpack', 'lobpcg', or 'amg'}"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ], 
                            [
                                "n_init", 
                                "int, optional, default"
                            ], 
                            [
                                "eigen_tol", 
                                "float, optional, default"
                            ], 
                            [
                                "assign_labels", 
                                "{'kmeans', 'discretize'}, default"
                            ]
                        ], 
                        [
                            [
                                "labels", 
                                "array of integers, shape"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_clusters=8, eigen_solver=None, random_state=None,\n                 n_init=10, gamma=1., affinity='rbf', n_neighbors=10,\n                 eigen_tol=0.0, assign_labels='kmeans', degree=3, coef0=1,\n                 kernel_params=None, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "n_clusters", 
                                "integer, optional"
                            ], 
                            [
                                "eigen_solver", 
                                "{None, 'arpack', 'lobpcg', or 'amg'}"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ], 
                            [
                                "n_init", 
                                "int, optional, default"
                            ], 
                            [
                                "gamma", 
                                "float, default=1.0"
                            ], 
                            [
                                "affinity", 
                                "string, array-like or callable, default 'rbf'"
                            ], 
                            [
                                "n_neighbors", 
                                "integer"
                            ], 
                            [
                                "eigen_tol", 
                                "float, optional, default"
                            ], 
                            [
                                "assign_labels", 
                                "{'kmeans', 'discretize'}, default"
                            ], 
                            [
                                "degree", 
                                "float, default=3"
                            ], 
                            [
                                "coef0", 
                                "float, default=1"
                            ], 
                            [
                                "kernel_params", 
                                "dictionary of string to any, optional"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default = 1)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _pairwise(self):", 
                []
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\utils\\validation.py": [
        [
            [
                "def _assert_all_finite(X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def assert_all_finite(X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array or sparse matrix"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def as_float_array(X, copy=True, force_all_finite=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}"
                            ], 
                            [
                                "copy", 
                                "bool, optional"
                            ], 
                            [
                                "force_all_finite", 
                                "boolean (default=True)"
                            ]
                        ], 
                        [
                            [
                                "XT", 
                                "{array, sparse matrix}"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _is_arraylike(x):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def _num_samples(x):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _shape_repr(shape):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def check_memory(memory):", 
                [
                    [
                        [
                            [
                                "memory", 
                                "None, str or object with the joblib.Memory interface"
                            ]
                        ], 
                        [
                            [
                                "memory", 
                                "object with the joblib.Memory interface"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def check_consistent_length(*arrays):", 
                [
                    [
                        [
                            [
                                "*arrays", 
                                "list or tuple of input objects."
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def indexable(*iterables):", 
                [
                    [
                        [
                            [
                                "*iterables", 
                                "lists, dataframes, arrays, sparse matrices"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _ensure_sparse_format(spmatrix, accept_sparse, dtype, copy,\n                          force_all_finite):", 
                [
                    [
                        [
                            [
                                "spmatrix", 
                                "scipy sparse matrix"
                            ], 
                            [
                                "accept_sparse", 
                                "string, boolean or list/tuple of strings"
                            ], 
                            [
                                "dtype", 
                                "string, type or None"
                            ], 
                            [
                                "copy", 
                                "boolean"
                            ], 
                            [
                                "force_all_finite", 
                                "boolean"
                            ]
                        ], 
                        [
                            [
                                "spmatrix_converted", 
                                "scipy sparse matrix."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _ensure_no_complex_data(array):", 
                []
            ], 
            [
                "def check_array(array, accept_sparse=False, dtype=\"numeric\", order=None,\n                copy=False, force_all_finite=True, ensure_2d=True,\n                allow_nd=False, ensure_min_samples=1, ensure_min_features=1,\n                warn_on_dtype=False, estimator=None):", 
                [
                    [
                        [
                            [
                                "array", 
                                "object"
                            ], 
                            [
                                "accept_sparse", 
                                "string, boolean or list/tuple of strings (default=False)"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "dtype", 
                                "string, type, list of types or None (default=\"numeric\")"
                            ], 
                            [
                                "order", 
                                "'F', 'C' or None (default=None)"
                            ], 
                            [
                                "copy", 
                                "boolean (default=False)"
                            ], 
                            [
                                "force_all_finite", 
                                "boolean (default=True)"
                            ], 
                            [
                                "ensure_2d", 
                                "boolean (default=True)"
                            ], 
                            [
                                "allow_nd", 
                                "boolean (default=False)"
                            ], 
                            [
                                "ensure_min_samples", 
                                "int (default=1)"
                            ], 
                            [
                                "ensure_min_features", 
                                "int (default=1)"
                            ], 
                            [
                                "warn_on_dtype", 
                                "boolean (default=False)"
                            ], 
                            [
                                "estimator", 
                                "str or estimator instance (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X_converted", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def check_X_y(X, y, accept_sparse=False, dtype=\"numeric\", order=None,\n              copy=False, force_all_finite=True, ensure_2d=True,\n              allow_nd=False, multi_output=False, ensure_min_samples=1,\n              ensure_min_features=1, y_numeric=False,\n              warn_on_dtype=False, estimator=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "nd-array, list or sparse matrix"
                            ], 
                            [
                                "y", 
                                "nd-array, list or sparse matrix"
                            ], 
                            [
                                "accept_sparse", 
                                "string, boolean or list of string (default=False)"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "dtype", 
                                "string, type, list of types or None (default=\"numeric\")"
                            ], 
                            [
                                "order", 
                                "'F', 'C' or None (default=None)"
                            ], 
                            [
                                "copy", 
                                "boolean (default=False)"
                            ], 
                            [
                                "force_all_finite", 
                                "boolean (default=True)"
                            ], 
                            [
                                "ensure_2d", 
                                "boolean (default=True)"
                            ], 
                            [
                                "allow_nd", 
                                "boolean (default=False)"
                            ], 
                            [
                                "multi_output", 
                                "boolean (default=False)"
                            ], 
                            [
                                "ensure_min_samples", 
                                "int (default=1)"
                            ], 
                            [
                                "ensure_min_features", 
                                "int (default=1)"
                            ], 
                            [
                                "y_numeric", 
                                "boolean (default=False)"
                            ], 
                            [
                                "warn_on_dtype", 
                                "boolean (default=False)"
                            ], 
                            [
                                "estimator", 
                                "str or estimator instance (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X_converted", 
                                "object"
                            ], 
                            [
                                "y_converted", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def column_or_1d(y, warn=False):", 
                [
                    [
                        [
                            [
                                "y", 
                                "array-like"
                            ], 
                            [
                                "warn", 
                                "boolean, default False"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def check_random_state(seed):", 
                [
                    [
                        [
                            [
                                "seed", 
                                "None | int | instance of RandomState"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def has_fit_parameter(estimator, parameter):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "object"
                            ], 
                            [
                                "parameter", 
                                "str"
                            ]
                        ], 
                        [
                            [
                                "is_parameter", 
                                "bool"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def check_symmetric(array, tol=1E-10, raise_warning=True,\n                    raise_exception=False):", 
                [
                    [
                        [
                            [
                                "array", 
                                "nd-array or sparse matrix"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "raise_warning", 
                                "boolean (default=True)"
                            ], 
                            [
                                "raise_exception", 
                                "boolean (default=False)"
                            ]
                        ], 
                        [
                            [
                                "array_sym", 
                                "ndarray or sparse matrix"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def check_is_fitted(estimator, attributes, msg=None, all_or_any=all):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator instance."
                            ], 
                            [
                                "attributes", 
                                "attribute name(s) given as string or a list/tuple of strings"
                            ], 
                            [
                                "msg", 
                                "string"
                            ], 
                            [
                                "all_or_any", 
                                "callable, {all, any}, default all"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def check_non_negative(X, whom):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix"
                            ], 
                            [
                                "whom", 
                                "string"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        19
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_seq_dataset.py": [
        [
            [
                "def assert_csr_equal(X, Y):", 
                []
            ], 
            [
                "def test_seq_dataset():", 
                []
            ], 
            [
                "def test_seq_dataset_shuffle():", 
                []
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\sklearn\\neural_network\\tests\\test_stochastic_optimizers.py": [
        [
            [
                "def test_base_optimizer():", 
                []
            ], 
            [
                "def test_sgd_optimizer_no_momentum():", 
                []
            ], 
            [
                "def test_sgd_optimizer_momentum():", 
                []
            ], 
            [
                "def test_sgd_optimizer_trigger_stopping():", 
                []
            ], 
            [
                "def test_sgd_optimizer_nesterovs_momentum():", 
                []
            ], 
            [
                "def test_adam_optimizer():", 
                []
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\examples\\plot_cv_predict.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\feature_extraction\\setup.py": [
        [
            [
                "def configuration(parent_package='', top_path=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\setup.py": [
        [
            [
                "def configuration(parent_package='', top_path=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_birch_vs_minibatchkmeans.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\model_selection\\tests\\test_split.py": [
        [
            [
                "def __init__(self, a=0, allow_nd=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, Y=None, sample_weight=None, class_prior=None,\n            sparse_sample_weight=None, sparse_param=None, dummy_int=None,\n            dummy_str=None, dummy_obj=None, callback=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, T):", 
                []
            ], 
            [
                "def score(self, X=None, Y=None):", 
                []
            ], 
            [
                "def get_params(self, deep=False):", 
                []
            ], 
            [
                "def test_cross_validator_with_default_params():", 
                []
            ], 
            [
                "def check_valid_split(train, test, n_samples=None):", 
                []
            ], 
            [
                "def check_cv_coverage(cv, X, y, groups, expected_n_splits=None):", 
                []
            ], 
            [
                "def test_kfold_valueerrors():", 
                []
            ], 
            [
                "def test_kfold_indices():", 
                []
            ], 
            [
                "def test_kfold_no_shuffle():", 
                []
            ], 
            [
                "def test_stratified_kfold_no_shuffle():", 
                []
            ], 
            [
                "def test_stratified_kfold_ratios():", 
                []
            ], 
            [
                "def test_kfold_balance():", 
                []
            ], 
            [
                "def test_stratifiedkfold_balance():", 
                []
            ], 
            [
                "def test_shuffle_kfold():", 
                []
            ], 
            [
                "def test_shuffle_kfold_stratifiedkfold_reproducibility():", 
                []
            ], 
            [
                "def test_shuffle_stratifiedkfold():", 
                []
            ], 
            [
                "def test_kfold_can_detect_dependent_samples_on_digits():", 
                []
            ], 
            [
                "def test_shuffle_split():", 
                []
            ], 
            [
                "def test_stratified_shuffle_split_init():", 
                []
            ], 
            [
                "def test_stratified_shuffle_split_respects_test_size():", 
                []
            ], 
            [
                "def test_stratified_shuffle_split_iter():", 
                []
            ], 
            [
                "def test_stratified_shuffle_split_even():", 
                []
            ], 
            [
                "def assert_counts_are_ok(idx_counts, p):", 
                []
            ], 
            [
                "def test_stratified_shuffle_split_overlap_train_test_bug():", 
                []
            ], 
            [
                "def test_stratified_shuffle_split_multilabel():", 
                []
            ], 
            [
                "def test_predefinedsplit_with_kfold_split():", 
                []
            ], 
            [
                "def test_group_shuffle_split():", 
                []
            ], 
            [
                "def test_leave_one_p_group_out():", 
                []
            ], 
            [
                "def test_leave_group_out_changing_groups():", 
                []
            ], 
            [
                "def test_leave_one_p_group_out_error_on_fewer_number_of_groups():", 
                []
            ], 
            [
                "def test_repeated_cv_value_errors():", 
                []
            ], 
            [
                "def test_repeated_kfold_determinstic_split():", 
                []
            ], 
            [
                "def test_get_n_splits_for_repeated_kfold():", 
                []
            ], 
            [
                "def test_get_n_splits_for_repeated_stratified_kfold():", 
                []
            ], 
            [
                "def test_repeated_stratified_kfold_determinstic_split():", 
                []
            ], 
            [
                "def test_train_test_split_errors():", 
                []
            ], 
            [
                "def test_train_test_split():", 
                []
            ], 
            [
                "def train_test_split_pandas():", 
                []
            ], 
            [
                "def train_test_split_sparse():", 
                []
            ], 
            [
                "def train_test_split_mock_pandas():", 
                []
            ], 
            [
                "def train_test_split_list_input():", 
                []
            ], 
            [
                "def test_shufflesplit_errors():", 
                []
            ], 
            [
                "def test_shufflesplit_reproducible():", 
                []
            ], 
            [
                "def test_stratifiedshufflesplit_list_input():", 
                []
            ], 
            [
                "def test_train_test_split_allow_nans():", 
                []
            ], 
            [
                "def test_check_cv():", 
                []
            ], 
            [
                "def test_cv_iterable_wrapper():", 
                []
            ], 
            [
                "def test_group_kfold():", 
                []
            ], 
            [
                "def test_time_series_cv():", 
                []
            ], 
            [
                "def _check_time_series_max_train_size(splits, check_splits, max_train_size):", 
                []
            ], 
            [
                "def test_time_series_max_train_size():", 
                []
            ], 
            [
                "def test_nested_cv():", 
                []
            ], 
            [
                "def test_train_test_default_warning():", 
                []
            ], 
            [
                "def test_build_repr():", 
                []
            ], 
            [
                "def __init__(self, a, b=0, c=None):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ]
        ], 
        58
    ], 
    "../scikit-learn-master\\examples\\semi_supervised\\plot_label_propagation_digits_active_learning.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\unsupervised.py": [
        [
            [
                "def __init__(self, n_neighbors=5, radius=1.0,\n                 algorithm='auto', leaf_size=30, metric='minkowski',\n                 p=2, metric_params=None, n_jobs=1, **kwargs):", 
                [
                    [
                        [
                            [
                                "n_neighbors", 
                                "int, optional (default = 5)"
                            ], 
                            [
                                "for", 
                                "meth"
                            ], 
                            [
                                "radius", 
                                "float, optional (default = 1.0)"
                            ], 
                            [
                                "for", 
                                "meth"
                            ], 
                            [
                                "algorithm", 
                                "{'auto', 'ball_tree', 'kd_tree', 'brute'}, optional"
                            ], 
                            [
                                "neighbors", 
                                ""
                            ], 
                            [
                                "use", 
                                "class"
                            ], 
                            [
                                "use", 
                                "class"
                            ], 
                            [
                                "to", 
                                "meth"
                            ], 
                            [
                                "Note", 
                                "fitting on sparse input will override the setting of"
                            ], 
                            [
                                "leaf_size", 
                                "int, optional (default = 30)"
                            ], 
                            [
                                "metric", 
                                "string or callable, default 'minkowski'"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "p", 
                                "integer, optional (default = 2)"
                            ], 
                            [
                                "metric_params", 
                                "dict, optional (default = None)"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default = 1)"
                            ], 
                            [
                                "only", 
                                "meth"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\tests\\test_pca.py": [
        [
            [
                "def test_pca():", 
                []
            ], 
            [
                "def test_pca_arpack_solver():", 
                []
            ], 
            [
                "def test_pca_randomized_solver():", 
                []
            ], 
            [
                "def test_no_empty_slice_warning():", 
                []
            ], 
            [
                "def test_whitening():", 
                []
            ], 
            [
                "def test_explained_variance():", 
                []
            ], 
            [
                "def test_singular_values():", 
                []
            ], 
            [
                "def test_pca_check_projection():", 
                []
            ], 
            [
                "def test_pca_inverse():", 
                []
            ], 
            [
                "def test_pca_validation():", 
                []
            ], 
            [
                "def test_n_components_none():", 
                []
            ], 
            [
                "def test_randomized_pca_check_projection():", 
                []
            ], 
            [
                "def test_randomized_pca_check_list():", 
                []
            ], 
            [
                "def test_randomized_pca_inverse():", 
                []
            ], 
            [
                "def test_pca_dim():", 
                []
            ], 
            [
                "def test_infer_dim_1():", 
                []
            ], 
            [
                "def test_infer_dim_2():", 
                []
            ], 
            [
                "def test_infer_dim_3():", 
                []
            ], 
            [
                "def test_infer_dim_by_explained_variance():", 
                []
            ], 
            [
                "def test_pca_score():", 
                []
            ], 
            [
                "def test_pca_score2():", 
                []
            ], 
            [
                "def test_pca_score3():", 
                []
            ], 
            [
                "def test_pca_score_with_different_solvers():", 
                []
            ], 
            [
                "def test_pca_zero_noise_variance_edge_cases():", 
                []
            ], 
            [
                "def test_svd_solver_auto():", 
                []
            ], 
            [
                "def test_deprecation_randomized_pca():", 
                []
            ], 
            [
                "def fit_deprecated(X):", 
                []
            ], 
            [
                "def test_pca_sparse_input():", 
                []
            ], 
            [
                "def test_pca_bad_solver():", 
                []
            ], 
            [
                "def test_pca_dtype_preservation():", 
                []
            ], 
            [
                "def check_pca_float_dtype_preservation(svd_solver):", 
                []
            ], 
            [
                "def check_pca_int_dtype_upcast_to_double(svd_solver):", 
                []
            ]
        ], 
        32
    ], 
    "../scikit-learn-master\\examples\\semi_supervised\\plot_label_propagation_versus_svm_iris.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_logistic.py": [
        [
            [
                "def model(x):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\tests\\test_voting_classifier.py": [
        [
            [
                "def test_estimator_init():", 
                []
            ], 
            [
                "def test_predictproba_hardvoting():", 
                []
            ], 
            [
                "def test_notfitted():", 
                []
            ], 
            [
                "def test_majority_label_iris():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_tie_situation():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_weights_iris():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_predict_on_toy_problem():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_predict_proba_on_toy_problem():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_multilabel():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_gridsearch():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_parallel_fit():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_sample_weight():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_sample_weight_kwargs():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, *args, **sample_weight):", 
                []
            ], 
            [
                "def test_set_params():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_set_estimator_none():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_estimator_weights_format():", 
                []
            ], 
            [
                "def test_transform():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        18
    ], 
    "../scikit-learn-master\\sklearn\\random_projection.py": [
        [
            [
                "def johnson_lindenstrauss_min_dim(n_samples, eps=0.1):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int or numpy array of int greater than 0,"
                            ], 
                            [
                                "eps", 
                                "float or numpy array of float in ]0,1[, optional (default=0.1)"
                            ]
                        ], 
                        [
                            [
                                "n_components", 
                                "int or numpy array of int,"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _check_density(density, n_features):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _check_input_size(n_components, n_features):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def gaussian_random_matrix(n_components, n_features, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int,"
                            ], 
                            [
                                "n_features", 
                                "int,"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "components", 
                                "numpy array of shape [n_components, n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def sparse_random_matrix(n_components, n_features, density='auto',\n                         random_state=None):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int,"
                            ], 
                            [
                                "n_features", 
                                "int,"
                            ], 
                            [
                                "density", 
                                "float in range ]0, 1] or 'auto', optional (default='auto')"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "components", 
                                "array or CSR matrix with shape [n_components, n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components='auto', eps=0.1, dense_output=False,\n                 random_state=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _make_random_matrix(self, n_components, n_features):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int,"
                            ], 
                            [
                                "n_features", 
                                "int,"
                            ]
                        ], 
                        [
                            [
                                "components", 
                                "numpy array or CSR matrix [n_components, n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "numpy array or scipy.sparse of shape [n_samples, n_features]"
                            ], 
                            [
                                "set", 
                                "only the shape is used to find optimal random"
                            ], 
                            [
                                "y", 
                                "is not used"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "numpy array or scipy.sparse of shape [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "numpy array or scipy sparse of shape [n_samples, n_components]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components='auto', eps=0.1, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int or 'auto', optional (default = 'auto')"
                            ], 
                            [
                                "eps", 
                                "strictly positive float, optional (default=0.1)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _make_random_matrix(self, n_components, n_features):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int,"
                            ], 
                            [
                                "n_features", 
                                "int,"
                            ]
                        ], 
                        [
                            [
                                "components", 
                                "numpy array or CSR matrix [n_components, n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components='auto', density='auto', eps=0.1,\n                 dense_output=False, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int or 'auto', optional (default = 'auto')"
                            ], 
                            [
                                "density", 
                                "float in range ]0, 1], optional (default='auto')"
                            ], 
                            [
                                "eps", 
                                "strictly positive float, optional, (default=0.1)"
                            ], 
                            [
                                "dense_output", 
                                "boolean, optional (default=False)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _make_random_matrix(self, n_components, n_features):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int,"
                            ], 
                            [
                                "n_features", 
                                "int,"
                            ]
                        ], 
                        [
                            [
                                "components", 
                                "numpy array or CSR matrix [n_components, n_features]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        13
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\tests\\test_mean_shift.py": [
        [
            [
                "def test_estimate_bandwidth():", 
                []
            ], 
            [
                "def test_mean_shift():", 
                []
            ], 
            [
                "def test_estimate_bandwidth_with_sparse_matrix():", 
                []
            ], 
            [
                "def test_parallel():", 
                []
            ], 
            [
                "def test_meanshift_predict():", 
                []
            ], 
            [
                "def test_meanshift_all_orphans():", 
                []
            ], 
            [
                "def test_unfitted():", 
                []
            ], 
            [
                "def test_bin_seeds():", 
                []
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\k_means_.py": [
        [
            [
                "def _k_init(X, n_clusters, x_squared_norms, random_state, n_local_trials=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array or sparse matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "n_clusters", 
                                "integer"
                            ], 
                            [
                                "x_squared_norms", 
                                "array, shape (n_samples,)"
                            ], 
                            [
                                "random_state", 
                                "numpy.RandomState"
                            ], 
                            [
                                "n_local_trials", 
                                "integer, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _validate_center_shape(X, n_centers, centers):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _tolerance(X, tol):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def k_means(X, n_clusters, init='k-means++', precompute_distances='auto',\n            n_init=10, max_iter=300, verbose=False,\n            tol=1e-4, random_state=None, copy_x=True, n_jobs=1,\n            algorithm=\"auto\", return_n_iter=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "n_clusters", 
                                "int"
                            ], 
                            [
                                "init", 
                                "{'k-means++', 'random', or ndarray, or a callable}, optional"
                            ], 
                            [
                                "precompute_distances", 
                                "{'auto', True, False}"
                            ], 
                            [
                                "True", 
                                "always precompute distances"
                            ], 
                            [
                                "False", 
                                "never precompute distances"
                            ], 
                            [
                                "n_init", 
                                "int, optional, default"
                            ], 
                            [
                                "max_iter", 
                                "int, optional, default 300"
                            ], 
                            [
                                "verbose", 
                                "boolean, optional"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ], 
                            [
                                "copy_x", 
                                "boolean, optional"
                            ], 
                            [
                                "n_jobs", 
                                "int"
                            ], 
                            [
                                "algorithm", 
                                "\"auto\", \"full\" or \"elkan\", default=\"auto\""
                            ], 
                            [
                                "return_n_iter", 
                                "bool, optional"
                            ]
                        ], 
                        [
                            [
                                "centroid", 
                                "float ndarray with shape (k, n_features)"
                            ], 
                            [
                                "label", 
                                "integer ndarray with shape (n_samples,)"
                            ], 
                            [
                                "inertia", 
                                "float"
                            ], 
                            [
                                "best_n_iter", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _kmeans_single_elkan(X, n_clusters, max_iter=300, init='k-means++',\n                         verbose=False, x_squared_norms=None,\n                         random_state=None, tol=1e-4,\n                         precompute_distances=True):", 
                []
            ], 
            [
                "def _kmeans_single_lloyd(X, n_clusters, max_iter=300, init='k-means++',\n                         verbose=False, x_squared_norms=None,\n                         random_state=None, tol=1e-4,\n                         precompute_distances=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like of floats, shape (n_samples, n_features)"
                            ], 
                            [
                                "n_clusters", 
                                "int"
                            ], 
                            [
                                "max_iter", 
                                "int, optional, default 300"
                            ], 
                            [
                                "init", 
                                "{'k-means++', 'random', or ndarray, or a callable}, optional"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "verbose", 
                                "boolean, optional"
                            ], 
                            [
                                "x_squared_norms", 
                                "array"
                            ], 
                            [
                                "precompute_distances", 
                                "boolean, default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ]
                        ], 
                        [
                            [
                                "centroid", 
                                "float ndarray with shape (k, n_features)"
                            ], 
                            [
                                "label", 
                                "integer ndarray with shape (n_samples,)"
                            ], 
                            [
                                "inertia", 
                                "float"
                            ], 
                            [
                                "n_iter", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _labels_inertia_precompute_dense(X, x_squared_norms, centers, distances):", 
                [
                    [
                        [
                            [
                                "X", 
                                "numpy array, shape (n_sample, n_features)"
                            ], 
                            [
                                "x_squared_norms", 
                                "numpy array, shape (n_samples,)"
                            ], 
                            [
                                "centers", 
                                "numpy array, shape (n_clusters, n_features)"
                            ], 
                            [
                                "distances", 
                                "numpy array, shape (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "labels", 
                                "numpy array, dtype=np.int, shape (n_samples,)"
                            ], 
                            [
                                "inertia", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _labels_inertia(X, x_squared_norms, centers,\n                    precompute_distances=True, distances=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "float64 array-like or CSR sparse matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "x_squared_norms", 
                                "array, shape (n_samples,)"
                            ], 
                            [
                                "centers", 
                                "float array, shape (k, n_features)"
                            ], 
                            [
                                "precompute_distances", 
                                "boolean, default"
                            ], 
                            [
                                "distances", 
                                "float array, shape (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "labels", 
                                "int array of shape(n)"
                            ], 
                            [
                                "inertia", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _init_centroids(X, k, init, random_state=None, x_squared_norms=None,\n                    init_size=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples, n_features)"
                            ], 
                            [
                                "k", 
                                "int"
                            ], 
                            [
                                "init", 
                                "{'k-means++', 'random' or ndarray or callable} optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ], 
                            [
                                "x_squared_norms", 
                                "array, shape (n_samples,), optional"
                            ], 
                            [
                                "Default", 
                                "None"
                            ], 
                            [
                                "init_size", 
                                "int, optional"
                            ]
                        ], 
                        [
                            [
                                "centers", 
                                "array, shape(k, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_clusters=8, init='k-means++', n_init=10,\n                 max_iter=300, tol=1e-4, precompute_distances='auto',\n                 verbose=0, random_state=None, copy_x=True,\n                 n_jobs=1, algorithm='auto'):", 
                [
                    [
                        [
                            [
                                "n_clusters", 
                                "int, optional, default"
                            ], 
                            [
                                "init", 
                                "{'k-means++', 'random' or an ndarray}"
                            ], 
                            [
                                "n_init", 
                                "int, default"
                            ], 
                            [
                                "max_iter", 
                                "int, default"
                            ], 
                            [
                                "tol", 
                                "float, default"
                            ], 
                            [
                                "precompute_distances", 
                                "{'auto', True, False}"
                            ], 
                            [
                                "True", 
                                "always precompute distances"
                            ], 
                            [
                                "False", 
                                "never precompute distances"
                            ], 
                            [
                                "verbose", 
                                "int, default 0"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ], 
                            [
                                "copy_x", 
                                "boolean, default True"
                            ], 
                            [
                                "n_jobs", 
                                "int"
                            ], 
                            [
                                "algorithm", 
                                "\"auto\", \"full\" or \"elkan\", default=\"auto\""
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_fit_data(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _check_test_data(self, X):", 
                []
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape=(n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit_predict(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "u", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "labels", 
                                "array, shape [n_samples,]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array, shape [n_samples, k]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array, shape [n_samples, k]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _transform(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "labels", 
                                "array, shape [n_samples,]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def score(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _mini_batch_step(X, x_squared_norms, centers, counts,\n                     old_center_buffer, compute_squared_diff,\n                     distances, random_reassign=False,\n                     random_state=None, reassignment_ratio=.01,\n                     verbose=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples, n_features)"
                            ], 
                            [
                                "x_squared_norms", 
                                "array, shape (n_samples,)"
                            ], 
                            [
                                "centers", 
                                "array, shape (k, n_features)"
                            ], 
                            [
                                "counts", 
                                "array, shape (k,)"
                            ], 
                            [
                                "distances", 
                                "array, dtype float, shape (n_samples), optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ], 
                            [
                                "random_reassign", 
                                "boolean, optional"
                            ], 
                            [
                                "reassignment_ratio", 
                                "float, optional"
                            ], 
                            [
                                "verbose", 
                                "bool, optional, default False"
                            ], 
                            [
                                "compute_squared_diff", 
                                "bool"
                            ], 
                            [
                                "old_center_buffer", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "inertia", 
                                "float"
                            ], 
                            [
                                "squared_diff", 
                                "numpy array, shape (n_clusters,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _mini_batch_convergence(model, iteration_idx, n_iter, tol,\n                            n_samples, centers_squared_diff, batch_inertia,\n                            context, verbose=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, n_clusters=8, init='k-means++', max_iter=100,\n                 batch_size=100, verbose=0, compute_labels=True,\n                 random_state=None, tol=0.0, max_no_improvement=10,\n                 init_size=None, n_init=3, reassignment_ratio=0.01):", 
                [
                    [
                        [
                            [
                                "n_clusters", 
                                "int, optional, default"
                            ], 
                            [
                                "init", 
                                "{'k-means++', 'random' or an ndarray}, default"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "batch_size", 
                                "int, optional, default"
                            ], 
                            [
                                "verbose", 
                                "boolean, optional"
                            ], 
                            [
                                "compute_labels", 
                                "boolean, default=True"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ], 
                            [
                                "tol", 
                                "float, default"
                            ], 
                            [
                                "max_no_improvement", 
                                "int, default"
                            ], 
                            [
                                "init_size", 
                                "int, optional, default"
                            ], 
                            [
                                "n_init", 
                                "int, default=3"
                            ], 
                            [
                                "reassignment_ratio", 
                                "float, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape=(n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _labels_inertia_minibatch(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "labels", 
                                "array, shap (n_samples,)"
                            ], 
                            [
                                "inertia", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "labels", 
                                "array, shape [n_samples,]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        26
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_agglomerative_clustering_metrics.py": [
        [
            [
                "def sqr(x):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\utils\\_unittest_backport.py": [
        [
            [
                "def testAdd(self):", 
                []
            ], 
            [
                "def testMultiply(self):", 
                []
            ], 
            [
                "def _is_subtype(expected, basetype):", 
                []
            ], 
            [
                "def __init__(self, test_case):", 
                []
            ], 
            [
                "def _raiseFailure(self, standardMsg):", 
                []
            ], 
            [
                "def __init__(self, expected, test_case, expected_regex=None):", 
                []
            ], 
            [
                "def handle(self, name, args, kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __enter__(self):", 
                []
            ], 
            [
                "def __exit__(self, exc_type, exc_value, tb):", 
                []
            ], 
            [
                "def _formatMessage(self, msg, standardMsg):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def assertRaises(self, expected_exception, *args, **kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def assertRaisesRegex(self, expected_exception,\n                          expected_regex, *args, **kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        12
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_isotonic.py": [
        [
            [
                "def test_permutation_invariance():", 
                []
            ], 
            [
                "def test_check_increasing_small_number_of_samples():", 
                []
            ], 
            [
                "def test_check_increasing_up():", 
                []
            ], 
            [
                "def test_check_increasing_up_extreme():", 
                []
            ], 
            [
                "def test_check_increasing_down():", 
                []
            ], 
            [
                "def test_check_increasing_down_extreme():", 
                []
            ], 
            [
                "def test_check_ci_warn():", 
                []
            ], 
            [
                "def test_isotonic_regression():", 
                []
            ], 
            [
                "def test_isotonic_regression_ties_min():", 
                []
            ], 
            [
                "def test_isotonic_regression_ties_max():", 
                []
            ], 
            [
                "def test_isotonic_regression_ties_secondary_():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_isotonic_regression_with_ties_in_differently_sized_groups():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_isotonic_regression_reversed():", 
                []
            ], 
            [
                "def test_isotonic_regression_auto_decreasing():", 
                []
            ], 
            [
                "def test_isotonic_regression_auto_increasing():", 
                []
            ], 
            [
                "def test_assert_raises_exceptions():", 
                []
            ], 
            [
                "def test_isotonic_sample_weight_parameter_default_value():", 
                []
            ], 
            [
                "def test_isotonic_min_max_boundaries():", 
                []
            ], 
            [
                "def test_isotonic_sample_weight():", 
                []
            ], 
            [
                "def test_isotonic_regression_oob_raise():", 
                []
            ], 
            [
                "def test_isotonic_regression_oob_clip():", 
                []
            ], 
            [
                "def test_isotonic_regression_oob_nan():", 
                []
            ], 
            [
                "def test_isotonic_regression_oob_bad():", 
                []
            ], 
            [
                "def test_isotonic_regression_oob_bad_after():", 
                []
            ], 
            [
                "def test_isotonic_regression_pickle():", 
                []
            ], 
            [
                "def test_isotonic_duplicate_min_entry():", 
                []
            ], 
            [
                "def test_isotonic_ymin_ymax():", 
                []
            ], 
            [
                "def test_isotonic_zero_weight_loop():", 
                []
            ], 
            [
                "def test_fast_predict():", 
                []
            ], 
            [
                "def test_isotonic_copy_before_fit():", 
                []
            ]
        ], 
        30
    ], 
    "../scikit-learn-master\\examples\\calibration\\plot_calibration.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_logistic_path.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\manifold\\plot_mds.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\decomposition\\plot_sparse_coding.py": [
        [
            [
                "def ricker_function(resolution, center, width):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def ricker_matrix(width, resolution, n_components):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\feature_extraction\\hashing.py": [
        [
            [
                "def _iteritems(d):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, n_features=(2 ** 20), input_type=\"dict\",\n                 dtype=np.float64, alternate_sign=True, non_negative=False):", 
                [
                    [
                        [
                            [
                                "n_features", 
                                "integer, optional"
                            ], 
                            [
                                "input_type", 
                                "string, optional, default \"dict\""
                            ], 
                            [
                                "dtype", 
                                "numpy type, optional, default np.float64"
                            ], 
                            [
                                "alternate_sign", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "non_negative", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _validate_params(n_features, input_type):", 
                []
            ], 
            [
                "def fit(self, X=None, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "FeatureHasher"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, raw_X):", 
                [
                    [
                        [
                            [
                                "raw_X", 
                                "iterable over iterable over raw features, length = n_samples"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "scipy.sparse matrix, shape = (n_samples, self.n_features)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_logistic_l1_l2_sparsity.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\covariance\\tests\\test_robust_covariance.py": [
        [
            [
                "def test_mcd():", 
                []
            ], 
            [
                "def test_fast_mcd_on_invalid_input():", 
                []
            ], 
            [
                "def test_mcd_class_on_invalid_input():", 
                []
            ], 
            [
                "def launch_mcd_on_dataset(n_samples, n_features, n_outliers, tol_loc, tol_cov,\n                          tol_support):", 
                []
            ], 
            [
                "def test_mcd_issue1127():", 
                []
            ], 
            [
                "def test_mcd_issue3367():", 
                []
            ], 
            [
                "def test_outlier_detection():", 
                []
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_cluster_comparison.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\incremental_pca.py": [
        [
            [
                "def __init__(self, n_components=None, whiten=False, copy=True,\n                 batch_size=None):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int or None, (default=None)"
                            ], 
                            [
                                "whiten", 
                                "bool, optional"
                            ], 
                            [
                                "copy", 
                                "bool, (default=True)"
                            ], 
                            [
                                "batch_size", 
                                "int or None, (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X, y=None, check_input=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "check_input", 
                                "bool"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\sklearn\\manifold\\tests\\test_spectral_embedding.py": [
        [
            [
                "def _check_with_col_sign_flipping(A, B, tol=0.0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_sparse_graph_connected_component():", 
                []
            ], 
            [
                "def test_spectral_embedding_two_components(seed=36):", 
                []
            ], 
            [
                "def test_spectral_embedding_precomputed_affinity(seed=36):", 
                []
            ], 
            [
                "def test_spectral_embedding_callable_affinity(seed=36):", 
                []
            ], 
            [
                "def test_spectral_embedding_amg_solver(seed=36):", 
                []
            ], 
            [
                "def test_pipeline_spectral_clustering(seed=36):", 
                []
            ], 
            [
                "def test_spectral_embedding_unknown_eigensolver(seed=36):", 
                []
            ], 
            [
                "def test_spectral_embedding_unknown_affinity(seed=36):", 
                []
            ], 
            [
                "def test_connectivity(seed=36):", 
                []
            ], 
            [
                "def test_spectral_embedding_deterministic():", 
                []
            ], 
            [
                "def test_spectral_embedding_unnormalized():", 
                []
            ]
        ], 
        12
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_robust_fit.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\feature_selection\\plot_feature_selection.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\tests\\test_affinity_propagation.py": [
        [
            [
                "def test_affinity_propagation():", 
                []
            ], 
            [
                "def test_affinity_propagation_predict():", 
                []
            ], 
            [
                "def test_affinity_propagation_predict_error():", 
                []
            ], 
            [
                "def test_affinity_propagation_fit_non_convergence():", 
                []
            ], 
            [
                "def test_affinity_propagation_equal_mutual_similarities():", 
                []
            ], 
            [
                "def test_affinity_propagation_predict_non_convergence():", 
                []
            ], 
            [
                "def test_equal_similarities_and_preferences():", 
                []
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\tests\\test_nearest_centroid.py": [
        [
            [
                "def test_classification_toy():", 
                []
            ], 
            [
                "def test_precomputed():", 
                []
            ], 
            [
                "def test_iris():", 
                []
            ], 
            [
                "def test_iris_shrinkage():", 
                []
            ], 
            [
                "def test_pickle():", 
                []
            ], 
            [
                "def test_shrinkage_correct():", 
                []
            ], 
            [
                "def test_shrinkage_threshold_decoded_y():", 
                []
            ], 
            [
                "def test_predict_translated_data():", 
                []
            ], 
            [
                "def test_manhattan_metric():", 
                []
            ]
        ], 
        9
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\tests\\test_passive_aggressive.py": [
        [
            [
                "def __init__(self, C=1.0, epsilon=0.01, loss=\"hinge\",\n                 fit_intercept=True, n_iter=1, random_state=None):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def project(self, X):", 
                []
            ], 
            [
                "def test_classifier_accuracy():", 
                []
            ], 
            [
                "def test_classifier_partial_fit():", 
                []
            ], 
            [
                "def test_classifier_refit():", 
                []
            ], 
            [
                "def test_classifier_correctness():", 
                []
            ], 
            [
                "def test_classifier_undefined_methods():", 
                []
            ], 
            [
                "def test_class_weights():", 
                []
            ], 
            [
                "def test_partial_fit_weight_class_balanced():", 
                []
            ], 
            [
                "def test_equal_class_weight():", 
                []
            ], 
            [
                "def test_wrong_class_weight_label():", 
                []
            ], 
            [
                "def test_wrong_class_weight_format():", 
                []
            ], 
            [
                "def test_regressor_mse():", 
                []
            ], 
            [
                "def test_regressor_partial_fit():", 
                []
            ], 
            [
                "def test_regressor_correctness():", 
                []
            ], 
            [
                "def test_regressor_undefined_methods():", 
                []
            ]
        ], 
        17
    ], 
    "../scikit-learn-master\\examples\\svm\\plot_iris.py": [
        [
            [
                "def make_meshgrid(x, y, h=.02):", 
                [
                    [
                        [
                            [
                                "x", 
                                "data to base x-axis meshgrid on"
                            ], 
                            [
                                "y", 
                                "data to base y-axis meshgrid on"
                            ], 
                            [
                                "h", 
                                "stepsize for meshgrid, optional"
                            ]
                        ], 
                        [
                            [
                                "yy", 
                                "ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def plot_contours(ax, clf, xx, yy, **params):", 
                [
                    [
                        [
                            [
                                "ax", 
                                "matplotlib axes object"
                            ], 
                            [
                                "clf", 
                                "a classifier"
                            ], 
                            [
                                "xx", 
                                "meshgrid ndarray"
                            ], 
                            [
                                "yy", 
                                "meshgrid ndarray"
                            ], 
                            [
                                "params", 
                                "dictionary of params to pass to contourf, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_pipeline.py": [
        [
            [
                "def __init__(self, a=None, b=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def get_params(self, deep=False):", 
                []
            ], 
            [
                "def set_params(self, **params):", 
                []
            ], 
            [
                "def transform(self, X):", 
                []
            ], 
            [
                "def transform(self, X):", 
                []
            ], 
            [
                "def inverse_transform(self, X):", 
                []
            ], 
            [
                "def fit(self, X, y, **fit_params):", 
                []
            ], 
            [
                "def __init__(self, mult=1):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def transform(self, X):", 
                []
            ], 
            [
                "def inverse_transform(self, X):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def score(self, X, y=None):", 
                []
            ], 
            [
                "def __init__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, should_succeed=False):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def fit_predict(self, X, y, should_succeed=False):", 
                []
            ], 
            [
                "def score(self, X, y=None, sample_weight=None):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def test_pipeline_init():", 
                []
            ], 
            [
                "def test_pipeline_init_tuple():", 
                []
            ], 
            [
                "def test_pipeline_methods_anova():", 
                []
            ], 
            [
                "def test_pipeline_fit_params():", 
                []
            ], 
            [
                "def test_pipeline_sample_weight_supported():", 
                []
            ], 
            [
                "def test_pipeline_sample_weight_unsupported():", 
                []
            ], 
            [
                "def test_pipeline_raise_set_params_error():", 
                []
            ], 
            [
                "def test_pipeline_methods_pca_svm():", 
                []
            ], 
            [
                "def test_pipeline_methods_preprocessing_svm():", 
                []
            ], 
            [
                "def test_fit_predict_on_pipeline():", 
                []
            ], 
            [
                "def test_fit_predict_on_pipeline_without_fit_predict():", 
                []
            ], 
            [
                "def test_fit_predict_with_intermediate_fit_params():", 
                []
            ], 
            [
                "def test_feature_union():", 
                []
            ], 
            [
                "def test_make_union():", 
                []
            ], 
            [
                "def test_make_union_kwargs():", 
                []
            ], 
            [
                "def test_pipeline_transform():", 
                []
            ], 
            [
                "def test_pipeline_fit_transform():", 
                []
            ], 
            [
                "def test_set_pipeline_steps():", 
                []
            ], 
            [
                "def test_pipeline_named_steps():", 
                []
            ], 
            [
                "def test_set_pipeline_step_none():", 
                []
            ], 
            [
                "def make():", 
                []
            ], 
            [
                "def test_pipeline_ducktyping():", 
                []
            ], 
            [
                "def test_make_pipeline():", 
                []
            ], 
            [
                "def test_feature_union_weights():", 
                []
            ], 
            [
                "def test_feature_union_parallel():", 
                []
            ], 
            [
                "def test_feature_union_feature_names():", 
                []
            ], 
            [
                "def test_classes_property():", 
                []
            ], 
            [
                "def test_set_feature_union_steps():", 
                []
            ], 
            [
                "def test_set_feature_union_step_none():", 
                []
            ], 
            [
                "def test_step_name_validation():", 
                []
            ], 
            [
                "def test_pipeline_wrong_memory():", 
                []
            ], 
            [
                "def cache(self, func):", 
                []
            ], 
            [
                "def test_pipeline_with_cache_attribute():", 
                []
            ], 
            [
                "def test_pipeline_memory():", 
                []
            ], 
            [
                "def test_make_pipeline_memory():", 
                []
            ]
        ], 
        55
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\tests\\test_huber.py": [
        [
            [
                "def make_regression_with_outliers(n_samples=50, n_features=20):", 
                []
            ], 
            [
                "def test_huber_equals_lr_for_high_epsilon():", 
                []
            ], 
            [
                "def test_huber_gradient():", 
                []
            ], 
            [
                "def test_huber_sample_weights():", 
                []
            ], 
            [
                "def test_huber_sparse():", 
                []
            ], 
            [
                "def test_huber_scaling_invariant():", 
                []
            ], 
            [
                "def test_huber_and_sgd_same_results():", 
                []
            ], 
            [
                "def test_huber_warm_start():", 
                []
            ], 
            [
                "def test_huber_better_r2_score():", 
                []
            ]
        ], 
        9
    ], 
    "../scikit-learn-master\\benchmarks\\bench_multilabel_metrics.py": [
        [
            [
                "def benchmark(metrics=tuple(v for k, v in sorted(METRICS.items())),\n              formats=tuple(v for k, v in sorted(FORMATS.items())),\n              samples=1000, classes=4, density=.2,\n              n_times=5):", 
                [
                    [
                        [
                            [
                                "metrics", 
                                "array-like of callables (1d or 0d)"
                            ], 
                            [
                                "formats", 
                                "array-like of callables (1d or 0d)"
                            ], 
                            [
                                "samples", 
                                "array-like of ints (1d or 0d)"
                            ], 
                            [
                                "classes", 
                                "array-like of ints (1d or 0d)"
                            ], 
                            [
                                "density", 
                                "array-like of ints (1d or 0d)"
                            ], 
                            [
                                "n_times", 
                                "int"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def _tabulate(results, metrics, formats):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _plot(results, metrics, formats, title, x_ticks, x_label,\n          format_markers=('x', '|', 'o', '+'),\n          metric_colors=('c', 'm', 'y', 'k', 'g', 'r', 'b')):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\stochastic_gradient.py": [
        [
            [
                "def __init__(self, loss, penalty='l2', alpha=0.0001, C=1.0,\n                 l1_ratio=0.15, fit_intercept=True, max_iter=None, tol=None,\n                 shuffle=True, verbose=0, epsilon=0.1, random_state=None,\n                 learning_rate=\"optimal\", eta0=0.0, power_t=0.5,\n                 warm_start=False, average=False, n_iter=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def set_params(self, *args, **kwargs):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _validate_params(self, set_max_iter=True):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _get_loss_function(self, loss):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _get_learning_rate_type(self, learning_rate):", 
                []
            ], 
            [
                "def _get_penalty_type(self, penalty):", 
                []
            ], 
            [
                "def _validate_sample_weight(self, sample_weight, n_samples):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _allocate_parameter_mem(self, n_classes, n_features, coef_init=None,\n                                intercept_init=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _prepare_fit_binary(est, y, i):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit_binary(est, i, X, y, alpha, C, learning_rate, max_iter,\n               pos_weight, neg_weight, sample_weight):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, loss=\"hinge\", penalty='l2', alpha=0.0001,\n                 l1_ratio=0.15, fit_intercept=True, max_iter=None, tol=None,\n                 shuffle=True, verbose=0, epsilon=DEFAULT_EPSILON, n_jobs=1,\n                 random_state=None, learning_rate=\"optimal\", eta0=0.0,\n                 power_t=0.5, class_weight=None, warm_start=False,\n                 average=False, n_iter=None):", 
                []
            ], 
            [
                "def loss_function(self):", 
                []
            ], 
            [
                "def _partial_fit(self, X, y, alpha, C,\n                     loss, learning_rate, max_iter,\n                     classes, sample_weight,\n                     coef_init, intercept_init):", 
                []
            ], 
            [
                "def _fit(self, X, y, alpha, C, loss, learning_rate, coef_init=None,\n             intercept_init=None, sample_weight=None):", 
                []
            ], 
            [
                "def _fit_binary(self, X, y, alpha, C, sample_weight,\n                    learning_rate, max_iter):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _fit_multiclass(self, X, y, alpha, C, learning_rate,\n                        sample_weight, max_iter):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X, y, classes=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "numpy array, shape (n_samples,)"
                            ], 
                            [
                                "classes", 
                                "array, shape (n_classes,)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,), optional"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, coef_init=None, intercept_init=None,\n            sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "numpy array, shape (n_samples,)"
                            ], 
                            [
                                "coef_init", 
                                "array, shape (n_classes, n_features)"
                            ], 
                            [
                                "intercept_init", 
                                "array, shape (n_classes,)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,), optional"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, loss=\"hinge\", penalty='l2', alpha=0.0001, l1_ratio=0.15,\n                 fit_intercept=True, max_iter=None, tol=None, shuffle=True,\n                 verbose=0, epsilon=DEFAULT_EPSILON, n_jobs=1,\n                 random_state=None, learning_rate=\"optimal\", eta0=0.0,\n                 power_t=0.5, class_weight=None, warm_start=False,\n                 average=False, n_iter=None):", 
                [
                    [
                        [
                            [
                                "loss", 
                                "str, default"
                            ], 
                            [
                                "loss", 
                                "'squared_loss',"
                            ], 
                            [
                                "penalty", 
                                "str, 'none', 'l2', 'l1', or 'elasticnet'"
                            ], 
                            [
                                "alpha", 
                                "float"
                            ], 
                            [
                                "l1_ratio", 
                                "float"
                            ], 
                            [
                                "fit_intercept", 
                                "bool"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "tol", 
                                "float or None, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "shuffle", 
                                "bool, optional"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ], 
                            [
                                "epsilon", 
                                "float"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "learning_rate", 
                                "string, optional"
                            ], 
                            [
                                "schedule", 
                                ""
                            ], 
                            [
                                "eta0", 
                                "double"
                            ], 
                            [
                                "power_t", 
                                "double"
                            ], 
                            [
                                "class_weight", 
                                "dict, {class_label"
                            ], 
                            [
                                "warm_start", 
                                "bool, optional"
                            ], 
                            [
                                "average", 
                                "bool or int, optional"
                            ], 
                            [
                                "n_iter", 
                                "int, optional"
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_proba(self):", 
                []
            ], 
            [
                "def predict_proba(self):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def _predict_proba(self, X):", 
                []
            ], 
            [
                "def predict_log_proba(self):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "T", 
                                "array-like, shape (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _predict_log_proba(self, X):", 
                []
            ], 
            [
                "def __init__(self, loss=\"squared_loss\", penalty=\"l2\", alpha=0.0001,\n                 l1_ratio=0.15, fit_intercept=True, max_iter=None, tol=None,\n                 shuffle=True, verbose=0, epsilon=DEFAULT_EPSILON,\n                 random_state=None, learning_rate=\"invscaling\", eta0=0.01,\n                 power_t=0.25, warm_start=False, average=False, n_iter=None):", 
                []
            ], 
            [
                "def _partial_fit(self, X, y, alpha, C, loss, learning_rate,\n                     max_iter, sample_weight, coef_init, intercept_init):", 
                []
            ], 
            [
                "def partial_fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "numpy array of shape (n_samples,)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,), optional"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _fit(self, X, y, alpha, C, loss, learning_rate, coef_init=None,\n             intercept_init=None, sample_weight=None):", 
                []
            ], 
            [
                "def fit(self, X, y, coef_init=None, intercept_init=None,\n            sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "numpy array, shape (n_samples,)"
                            ], 
                            [
                                "coef_init", 
                                "array, shape (n_features,)"
                            ], 
                            [
                                "intercept_init", 
                                "array, shape (1,)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,), optional"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def _fit_regressor(self, X, y, alpha, C, loss, learning_rate,\n                       sample_weight, max_iter):", 
                []
            ], 
            [
                "def __init__(self, loss=\"squared_loss\", penalty=\"l2\", alpha=0.0001,\n                 l1_ratio=0.15, fit_intercept=True, max_iter=None, tol=None,\n                 shuffle=True, verbose=0, epsilon=DEFAULT_EPSILON,\n                 random_state=None, learning_rate=\"invscaling\", eta0=0.01,\n                 power_t=0.25, warm_start=False, average=False, n_iter=None):", 
                [
                    [
                        [
                            [
                                "loss", 
                                "str, default"
                            ], 
                            [
                                "penalty", 
                                "str, 'none', 'l2', 'l1', or 'elasticnet'"
                            ], 
                            [
                                "alpha", 
                                "float"
                            ], 
                            [
                                "l1_ratio", 
                                "float"
                            ], 
                            [
                                "fit_intercept", 
                                "bool"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "tol", 
                                "float or None, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "shuffle", 
                                "bool, optional"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ], 
                            [
                                "epsilon", 
                                "float"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "learning_rate", 
                                "string, optional"
                            ], 
                            [
                                "schedule", 
                                ""
                            ], 
                            [
                                "eta0", 
                                "double, optional"
                            ], 
                            [
                                "power_t", 
                                "double, optional"
                            ], 
                            [
                                "warm_start", 
                                "bool, optional"
                            ], 
                            [
                                "average", 
                                "bool or int, optional"
                            ], 
                            [
                                "n_iter", 
                                "int, optional"
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        34
    ], 
    "../scikit-learn-master\\sklearn\\svm\\tests\\test_bounds.py": [
        [
            [
                "def test_l1_min_c():", 
                []
            ], 
            [
                "def check_l1_min_c(X, y, loss, fit_intercept=True, intercept_scaling=None):", 
                []
            ], 
            [
                "def test_ill_posed_min_c():", 
                []
            ], 
            [
                "def test_unsupported_loss():", 
                []
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\examples\\svm\\plot_svm_margin.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\decomposition\\plot_ica_blind_source_separation.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\tests\\test_fastica.py": [
        [
            [
                "def center_and_norm(x, axis=-1):", 
                [
                    [
                        [
                            [
                                "x", 
                                "ndarray"
                            ], 
                            [
                                "axis", 
                                "int, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def test_gs():", 
                []
            ], 
            [
                "def test_fastica_simple(add_noise=False):", 
                []
            ], 
            [
                "def g_test(x):", 
                []
            ], 
            [
                "def test_fastica_nowhiten():", 
                []
            ], 
            [
                "def test_non_square_fastica(add_noise=False):", 
                []
            ], 
            [
                "def test_fit_transform():", 
                []
            ], 
            [
                "def test_inverse_transform():", 
                []
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\preprocessing\\plot_scaling_importance.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\hashing.py": [
        [
            [
                "def __init__(self, set_sequence):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, *args):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, hash_name='md5'):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def hash(self, obj, return_digest=True):", 
                []
            ], 
            [
                "def save(self, obj):", 
                []
            ], 
            [
                "def memoize(self, obj):", 
                []
            ], 
            [
                "def save_global(self, obj, name=None, pack=struct.pack):", 
                []
            ], 
            [
                "def _batch_setitems(self, items):", 
                []
            ], 
            [
                "def save_set(self, set_items):", 
                []
            ], 
            [
                "def __init__(self, hash_name='md5', coerce_mmap=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def save(self, obj):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def hash(obj, hash_name='md5', coerce_mmap=False):", 
                [
                    [
                        [
                            [
                                "hash_name", 
                                "'md5' or 'sha1'"
                            ], 
                            [
                                "coerce_mmap", 
                                "boolean"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        12
    ], 
    "../scikit-learn-master\\sklearn\\feature_selection\\variance_threshold.py": [
        [
            [
                "def __init__(self, threshold=0.):", 
                [
                    [
                        [
                            [
                                "threshold", 
                                "float, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "any"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def _get_support_mask(self):", 
                []
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\tests\\test_dist_metrics.py": [
        [
            [
                "def dist_func(x1, x2, p):", 
                []
            ], 
            [
                "def __init__(self, n1=20, n2=25, d=4, zero_frac=0.5,\n                 rseed=0, dtype=np.float64):", 
                []
            ], 
            [
                "def test_cdist(self):", 
                []
            ], 
            [
                "def check_cdist(self, metric, kwargs, D_true):", 
                []
            ], 
            [
                "def check_cdist_bool(self, metric, D_true):", 
                []
            ], 
            [
                "def test_pdist(self):", 
                []
            ], 
            [
                "def check_pdist(self, metric, kwargs, D_true):", 
                []
            ], 
            [
                "def check_pdist_bool(self, metric, D_true):", 
                []
            ], 
            [
                "def test_pickle(self):", 
                []
            ], 
            [
                "def check_pickle_bool(self, metric):", 
                []
            ], 
            [
                "def check_pickle(self, metric, kwargs):", 
                []
            ], 
            [
                "def test_haversine_metric():", 
                []
            ], 
            [
                "def haversine_slow(x1, x2):", 
                []
            ], 
            [
                "def test_pyfunc_metric():", 
                []
            ], 
            [
                "def test_bad_pyfunc_metric():", 
                []
            ], 
            [
                "def wrong_distance(x, y):", 
                []
            ], 
            [
                "def test_input_data_size():", 
                []
            ], 
            [
                "def custom_metric(x, y):", 
                []
            ]
        ], 
        18
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_lasso_coordinate_descent_path.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\tests\\test_dbscan.py": [
        [
            [
                "def test_dbscan_similarity():", 
                []
            ], 
            [
                "def test_dbscan_feature():", 
                []
            ], 
            [
                "def test_dbscan_sparse():", 
                []
            ], 
            [
                "def test_dbscan_sparse_precomputed():", 
                []
            ], 
            [
                "def test_dbscan_no_core_samples():", 
                []
            ], 
            [
                "def test_dbscan_callable():", 
                []
            ], 
            [
                "def test_dbscan_metric_params():", 
                []
            ], 
            [
                "def test_dbscan_balltree():", 
                []
            ], 
            [
                "def test_input_validation():", 
                []
            ], 
            [
                "def test_dbscan_badargs():", 
                []
            ], 
            [
                "def test_pickle():", 
                []
            ], 
            [
                "def test_boundaries():", 
                []
            ], 
            [
                "def test_weighted_dbscan():", 
                []
            ], 
            [
                "def test_dbscan_core_samples_toy():", 
                []
            ], 
            [
                "def test_dbscan_precomputed_metric_with_degenerate_input_arrays():", 
                []
            ], 
            [
                "def test_dbscan_precomputed_metric_with_initial_rows_zero():", 
                []
            ]
        ], 
        16
    ], 
    "../scikit-learn-master\\sklearn\\manifold\\locally_linear.py": [
        [
            [
                "def barycenter_weights(X, Z, reg=1e-3):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_dim)"
                            ], 
                            [
                                "Z", 
                                "array-like, shape (n_samples, n_neighbors, n_dim)"
                            ], 
                            [
                                "reg", 
                                "float, optional"
                            ]
                        ], 
                        [
                            [
                                "B", 
                                "array-like, shape (n_samples, n_neighbors)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def barycenter_kneighbors_graph(X, n_neighbors, reg=1e-3, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix, BallTree, KDTree, NearestNeighbors}"
                            ], 
                            [
                                "n_neighbors", 
                                "int"
                            ], 
                            [
                                "reg", 
                                "float, optional"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default = 1)"
                            ]
                        ], 
                        [
                            [
                                "A", 
                                "sparse matrix in CSR format, shape = [n_samples, n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def null_space(M, k, k_skip=1, eigen_solver='arpack', tol=1E-6, max_iter=100,\n               random_state=None):", 
                [
                    [
                        [
                            [
                                "M", 
                                "{array, matrix, sparse matrix, LinearOperator}"
                            ], 
                            [
                                "matrix", 
                                "should be symmetric positive semi-definite"
                            ], 
                            [
                                "k", 
                                "integer"
                            ], 
                            [
                                "k_skip", 
                                "integer, optional"
                            ], 
                            [
                                "eigen_solver", 
                                "string, {'auto', 'arpack', 'dense'}"
                            ], 
                            [
                                "auto", 
                                "algorithm will attempt to choose the best method for input data"
                            ], 
                            [
                                "arpack", 
                                "use arnoldi iteration in shift-invert mode."
                            ], 
                            [
                                "Warning", 
                                "ARPACK can be unstable for some problems.  It is"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "max_iter", 
                                "maximum number of iterations for 'arpack' method"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def locally_linear_embedding(\n        X, n_neighbors, n_components, reg=1e-3, eigen_solver='auto', tol=1e-6,\n        max_iter=100, method='standard', hessian_tol=1E-4, modified_tol=1E-12,\n        random_state=None, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix, BallTree, KDTree, NearestNeighbors}"
                            ], 
                            [
                                "n_neighbors", 
                                "integer"
                            ], 
                            [
                                "n_components", 
                                "integer"
                            ], 
                            [
                                "reg", 
                                "float"
                            ], 
                            [
                                "eigen_solver", 
                                "string, {'auto', 'arpack', 'dense'}"
                            ], 
                            [
                                "auto", 
                                "algorithm will attempt to choose the best method for input data"
                            ], 
                            [
                                "arpack", 
                                "use arnoldi iteration in shift-invert mode."
                            ], 
                            [
                                "Warning", 
                                "ARPACK can be unstable for some problems.  It is"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "max_iter", 
                                "integer"
                            ], 
                            [
                                "method", 
                                "{'standard', 'hessian', 'modified', 'ltsa'}"
                            ], 
                            [
                                "standard", 
                                "use the standard locally linear embedding algorithm."
                            ], 
                            [
                                "modified", 
                                "use the modified locally linear embedding algorithm."
                            ], 
                            [
                                "hessian_tol", 
                                "float, optional"
                            ], 
                            [
                                "modified_tol", 
                                "float, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default = 1)"
                            ]
                        ], 
                        [
                            [
                                "Y", 
                                "array-like, shape [n_samples, n_components]"
                            ], 
                            [
                                "squared_error", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_neighbors=5, n_components=2, reg=1E-3,\n                 eigen_solver='auto', tol=1E-6, max_iter=100,\n                 method='standard', hessian_tol=1E-4, modified_tol=1E-12,\n                 neighbors_algorithm='auto', random_state=None, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "n_neighbors", 
                                "integer"
                            ], 
                            [
                                "n_components", 
                                "integer"
                            ], 
                            [
                                "reg", 
                                "float"
                            ], 
                            [
                                "eigen_solver", 
                                "string, {'auto', 'arpack', 'dense'}"
                            ], 
                            [
                                "auto", 
                                "algorithm will attempt to choose the best method for input data"
                            ], 
                            [
                                "arpack", 
                                "use arnoldi iteration in shift-invert mode."
                            ], 
                            [
                                "Warning", 
                                "ARPACK can be unstable for some problems.  It is"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "max_iter", 
                                "integer"
                            ], 
                            [
                                "method", 
                                "string ('standard', 'hessian', 'modified' or 'ltsa')"
                            ], 
                            [
                                "standard", 
                                "use the standard locally linear embedding algorithm.  see"
                            ], 
                            [
                                "modified", 
                                "use the modified locally linear embedding algorithm."
                            ], 
                            [
                                "hessian_tol", 
                                "float, optional"
                            ], 
                            [
                                "modified_tol", 
                                "float, optional"
                            ], 
                            [
                                "neighbors_algorithm", 
                                "string ['auto'|'brute'|'kd_tree'|'ball_tree']"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default = 1)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _fit_transform(self, X):", 
                []
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like of shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like of shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array, shape = [n_samples, n_components]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        9
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_lasso_dense_vs_sparse_data.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\decomposition\\plot_incremental_pca.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_config.py": [
        [
            [
                "def test_config_context():", 
                []
            ], 
            [
                "def test_config_context_exception():", 
                []
            ], 
            [
                "def test_set_config():", 
                []
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\doc\\tutorial\\text_analytics\\data\\movie_reviews\\fetch_data.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\plot_kernel_ridge_regression.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\text\\hashing_vs_dict_vectorizer.py": [
        [
            [
                "def n_nonzero_columns(X):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def tokens(doc):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def token_freqs(doc):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\doc\\tutorial\\text_analytics\\solutions\\exercise_01_language_train_model.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\logger.py": [
        [
            [
                "def _squeeze_time(t):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def format_time(t):", 
                []
            ], 
            [
                "def short_format_time(t):", 
                []
            ], 
            [
                "def pformat(obj, indent=0, depth=3):", 
                []
            ], 
            [
                "def __init__(self, depth=3):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def warn(self, msg):", 
                []
            ], 
            [
                "def debug(self, msg):", 
                []
            ], 
            [
                "def format(self, obj, indent=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, logfile=None, logdir=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __call__(self, msg='', total=False):", 
                [
                    [
                        null, 
                        null
                    ], 
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        10
    ], 
    "../scikit-learn-master\\benchmarks\\plot_tsne_mnist.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\utils\\_scipy_sparse_lsqr_backport.py": [
        [
            [
                "def _sym_ortho(a, b):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def lsqr(A, b, damp=0.0, atol=1e-8, btol=1e-8, conlim=1e8,\n         iter_lim=None, show=False, calc_var=False):", 
                [
                    [
                        [
                            [
                                "A", 
                                "{sparse matrix, ndarray, LinearOperatorLinear}"
                            ], 
                            [
                                "b", 
                                "(m,) ndarray"
                            ], 
                            [
                                "damp", 
                                "float"
                            ], 
                            [
                                "btol", 
                                "float, default 1.0e-8"
                            ], 
                            [
                                "conlim", 
                                "float"
                            ], 
                            [
                                "iter_lim", 
                                "int"
                            ], 
                            [
                                "show", 
                                "bool"
                            ], 
                            [
                                "calc_var", 
                                "bool"
                            ]
                        ], 
                        [
                            [
                                "x", 
                                "ndarray of float"
                            ], 
                            [
                                "istop", 
                                "int"
                            ], 
                            [
                                "itn", 
                                "int"
                            ], 
                            [
                                "r1norm", 
                                "float"
                            ], 
                            [
                                "r2norm", 
                                "float"
                            ], 
                            [
                                "anorm", 
                                "float"
                            ], 
                            [
                                "acond", 
                                "float"
                            ], 
                            [
                                "arnorm", 
                                "float"
                            ], 
                            [
                                "xnorm", 
                                "float"
                            ], 
                            [
                                "var", 
                                "ndarray of float"
                            ]
                        ]
                    ], 
                    [
                        null, 
                        null
                    ], 
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\cross_validation.py": [
        [
            [
                "def __init__(self, n):", 
                [
                    [
                        [
                            [
                                "n", 
                                "int"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __iter__(self):", 
                []
            ], 
            [
                "def _iter_test_masks(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _iter_test_indices(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _empty_mask(self):", 
                []
            ], 
            [
                "def _iter_test_indices(self):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __len__(self):", 
                []
            ], 
            [
                "def __init__(self, n, p):", 
                [
                    [
                        [
                            [
                                "n", 
                                "int"
                            ], 
                            [
                                "p", 
                                "int"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _iter_test_indices(self):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __len__(self):", 
                []
            ], 
            [
                "def __init__(self, n, n_folds, shuffle, random_state):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, n, n_folds=3, shuffle=False,\n                 random_state=None):", 
                [
                    [
                        [
                            [
                                "n", 
                                "int"
                            ], 
                            [
                                "n_folds", 
                                "int, default=3"
                            ], 
                            [
                                "shuffle", 
                                "boolean, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default=None"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _iter_test_indices(self):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __len__(self):", 
                []
            ], 
            [
                "def __init__(self, labels, n_folds=3):", 
                [
                    [
                        [
                            [
                                "labels", 
                                "array-like with shape (n_samples, )"
                            ], 
                            [
                                "n_folds", 
                                "int, default=3"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _iter_test_indices(self):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __len__(self):", 
                []
            ], 
            [
                "def __init__(self, y, n_folds=3, shuffle=False,\n                 random_state=None):", 
                [
                    [
                        [
                            [
                                "y", 
                                "array-like, [n_samples]"
                            ], 
                            [
                                "n_folds", 
                                "int, default=3"
                            ], 
                            [
                                "shuffle", 
                                "boolean, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default=None"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _iter_test_masks(self):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __len__(self):", 
                []
            ], 
            [
                "def __init__(self, labels):", 
                [
                    [
                        [
                            [
                                "labels", 
                                "array-like of int with shape (n_samples,)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _iter_test_masks(self):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __len__(self):", 
                []
            ], 
            [
                "def __init__(self, labels, p):", 
                [
                    [
                        [
                            [
                                "labels", 
                                "array-like of int with shape (n_samples,)"
                            ], 
                            [
                                "p", 
                                "int"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _iter_test_masks(self):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __len__(self):", 
                []
            ], 
            [
                "def __init__(self, n, n_iter=10, test_size=0.1, train_size=None,\n                 random_state=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __iter__(self):", 
                []
            ], 
            [
                "def _iter_indices(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _iter_indices(self):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __len__(self):", 
                []
            ], 
            [
                "def _validate_shuffle_split(n, test_size, train_size):", 
                []
            ], 
            [
                "def _approximate_mode(class_counts, n_draws, rng):", 
                [
                    [
                        [
                            [
                                "class_counts", 
                                "ndarray of int"
                            ], 
                            [
                                "n_draws", 
                                "int"
                            ], 
                            [
                                "rng", 
                                "random state"
                            ]
                        ], 
                        [
                            [
                                "sampled_classes", 
                                "ndarray of int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, y, n_iter=10, test_size=0.1, train_size=None,\n                 random_state=None):", 
                [
                    [
                        [
                            [
                                "y", 
                                "array, [n_samples]"
                            ], 
                            [
                                "n_iter", 
                                "int (default 10)"
                            ], 
                            [
                                "test_size", 
                                "float (default 0.1), int, or None"
                            ], 
                            [
                                "train_size", 
                                "float, int, or None (default is None)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _iter_indices(self):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __len__(self):", 
                []
            ], 
            [
                "def __init__(self, test_fold):", 
                [
                    [
                        [
                            [
                                "test_fold", 
                                "\"array-like, shape (n_samples,)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _iter_test_indices(self):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __len__(self):", 
                []
            ], 
            [
                "def __init__(self, labels, n_iter=5, test_size=0.2, train_size=None,\n                 random_state=None):", 
                [
                    [
                        [
                            [
                                "labels", 
                                "array, [n_samples]"
                            ], 
                            [
                                "n_iter", 
                                "int (default 5)"
                            ], 
                            [
                                "test_size", 
                                "float (default 0.2), int, or None"
                            ], 
                            [
                                "train_size", 
                                "float, int, or None (default is None)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __len__(self):", 
                []
            ], 
            [
                "def _iter_indices(self):", 
                []
            ], 
            [
                "def _index_param_value(X, v, indices):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def cross_val_predict(estimator, X, y=None, cv=None, n_jobs=1,\n                      verbose=0, fit_params=None, pre_dispatch='2*n_jobs'):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object implementing 'fit' and 'predict'"
                            ], 
                            [
                                "X", 
                                "array-like"
                            ], 
                            [
                                "y", 
                                "array-like, optional, default"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ], 
                            [
                                "fit_params", 
                                "dict, optional"
                            ], 
                            [
                                "pre_dispatch", 
                                "int, or string, optional"
                            ], 
                            [
                                "be", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "preds", 
                                "ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _fit_and_predict(estimator, X, y, train, test, verbose, fit_params):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object implementing 'fit' and 'predict'"
                            ], 
                            [
                                "X", 
                                "array-like of shape at least 2D"
                            ], 
                            [
                                "y", 
                                "array-like, optional, default"
                            ], 
                            [
                                "train", 
                                "array-like, shape (n_train_samples,)"
                            ], 
                            [
                                "test", 
                                "array-like, shape (n_test_samples,)"
                            ], 
                            [
                                "verbose", 
                                "integer"
                            ], 
                            [
                                "fit_params", 
                                "dict or None"
                            ]
                        ], 
                        [
                            [
                                "preds", 
                                "sequence"
                            ], 
                            [
                                "test", 
                                "array-like"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _check_is_partition(locs, n):", 
                [
                    [
                        [
                            [
                                "locs", 
                                "ndarray"
                            ], 
                            [
                                "n", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "is_partition", 
                                "bool"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def cross_val_score(estimator, X, y=None, scoring=None, cv=None, n_jobs=1,\n                    verbose=0, fit_params=None, pre_dispatch='2*n_jobs'):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object implementing 'fit'"
                            ], 
                            [
                                "X", 
                                "array-like"
                            ], 
                            [
                                "y", 
                                "array-like, optional, default"
                            ], 
                            [
                                "scoring", 
                                "string, callable or None, optional, default"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ], 
                            [
                                "fit_params", 
                                "dict, optional"
                            ], 
                            [
                                "pre_dispatch", 
                                "int, or string, optional"
                            ], 
                            [
                                "be", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "scores", 
                                "array of float, shape=(len(list(cv)),)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _fit_and_score(estimator, X, y, scorer, train, test, verbose,\n                   parameters, fit_params, return_train_score=False,\n                   return_parameters=False, error_score='raise'):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object implementing 'fit'"
                            ], 
                            [
                                "X", 
                                "array-like of shape at least 2D"
                            ], 
                            [
                                "y", 
                                "array-like, optional, default"
                            ], 
                            [
                                "scorer", 
                                "callable"
                            ], 
                            [
                                "train", 
                                "array-like, shape (n_train_samples,)"
                            ], 
                            [
                                "test", 
                                "array-like, shape (n_test_samples,)"
                            ], 
                            [
                                "verbose", 
                                "integer"
                            ], 
                            [
                                "error_score", 
                                "'raise' (default) or numeric"
                            ], 
                            [
                                "parameters", 
                                "dict or None"
                            ], 
                            [
                                "fit_params", 
                                "dict or None"
                            ], 
                            [
                                "return_train_score", 
                                "boolean, optional, default"
                            ], 
                            [
                                "return_parameters", 
                                "boolean, optional, default"
                            ]
                        ], 
                        [
                            [
                                "train_score", 
                                "float, optional"
                            ], 
                            [
                                "test_score", 
                                "float"
                            ], 
                            [
                                "n_test_samples", 
                                "int"
                            ], 
                            [
                                "scoring_time", 
                                "float"
                            ], 
                            [
                                "parameters", 
                                "dict or None, optional"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _safe_split(estimator, X, y, indices, train_indices=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _score(estimator, X_test, y_test, scorer):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _permutation_test_score(estimator, X, y, cv, scorer):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _shuffle(y, labels, random_state):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def check_cv(cv, X=None, y=None, classifier=False):", 
                [
                    [
                        [
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "X", 
                                "array-like"
                            ], 
                            [
                                "y", 
                                "array-like"
                            ], 
                            [
                                "classifier", 
                                "boolean optional"
                            ]
                        ], 
                        [
                            [
                                "checked_cv", 
                                "a cross-validation generator instance."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def permutation_test_score(estimator, X, y, cv=None,\n                           n_permutations=100, n_jobs=1, labels=None,\n                           random_state=0, verbose=0, scoring=None):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object implementing 'fit'"
                            ], 
                            [
                                "X", 
                                "array-like of shape at least 2D"
                            ], 
                            [
                                "y", 
                                "array-like"
                            ], 
                            [
                                "scoring", 
                                "string, callable or None, optional, default"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "n_permutations", 
                                "integer, optional"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "labels", 
                                "array-like of shape [n_samples] (optional)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=0)"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ], 
                            [
                                "permutation_scores", 
                                "array, shape (n_permutations,)"
                            ], 
                            [
                                "pvalue", 
                                "float"
                            ], 
                            [
                                "as", 
                                ""
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def train_test_split(*arrays, **options):", 
                [
                    [
                        [
                            [
                                "*arrays", 
                                "sequence of indexables with same length / shape[0]"
                            ], 
                            [
                                "test_size", 
                                "float, int, or None (default is None)"
                            ], 
                            [
                                "train_size", 
                                "float, int, or None (default is None)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "stratify", 
                                "array-like or None (default is None)"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "splitting", 
                                "list, length = 2 * len(arrays),"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        66
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_ols_3d.py": [
        [
            [
                "def plot_figs(fig_num, elev, azim, X_train, clf):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\gradient_boosting.py": [
        [
            [
                "def __init__(self, alpha=0.9):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def __init__(self, n_classes):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def init_estimator(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __call__(self, y, pred, sample_weight=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def negative_gradient(self, y, y_pred, **kargs):", 
                [
                    [
                        [
                            [
                                "y", 
                                "np.ndarray, shape=(n,)"
                            ], 
                            [
                                "y_pred", 
                                "np.ndarray, shape=(n,)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def update_terminal_regions(self, tree, X, y, residual, y_pred,\n                                sample_weight, sample_mask,\n                                learning_rate=1.0, k=0):", 
                [
                    [
                        [
                            [
                                "tree", 
                                "tree.Tree"
                            ], 
                            [
                                "X", 
                                "ndarray, shape=(n, m)"
                            ], 
                            [
                                "y", 
                                "ndarray, shape=(n,)"
                            ], 
                            [
                                "residual", 
                                "ndarray, shape=(n,)"
                            ], 
                            [
                                "y_pred", 
                                "ndarray, shape=(n,)"
                            ], 
                            [
                                "sample_weight", 
                                "ndarray, shape=(n,)"
                            ], 
                            [
                                "sample_mask", 
                                "ndarray, shape=(n,)"
                            ], 
                            [
                                "learning_rate", 
                                "float, default=0.1"
                            ], 
                            [
                                "k", 
                                "int, default 0"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _update_terminal_region(self, tree, terminal_regions, leaf, X, y,\n                                residual, pred, sample_weight):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, n_classes):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def init_estimator(self):", 
                []
            ], 
            [
                "def __call__(self, y, pred, sample_weight=None):", 
                []
            ], 
            [
                "def negative_gradient(self, y, pred, **kargs):", 
                []
            ], 
            [
                "def update_terminal_regions(self, tree, X, y, residual, y_pred,\n                                sample_weight, sample_mask,\n                                learning_rate=1.0, k=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _update_terminal_region(self, tree, terminal_regions, leaf, X, y,\n                                residual, pred, sample_weight):", 
                []
            ], 
            [
                "def init_estimator(self):", 
                []
            ], 
            [
                "def __call__(self, y, pred, sample_weight=None):", 
                []
            ], 
            [
                "def negative_gradient(self, y, pred, **kargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _update_terminal_region(self, tree, terminal_regions, leaf, X, y,\n                                residual, pred, sample_weight):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, n_classes, alpha=0.9):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def init_estimator(self):", 
                []
            ], 
            [
                "def __call__(self, y, pred, sample_weight=None):", 
                []
            ], 
            [
                "def negative_gradient(self, y, pred, sample_weight=None, **kargs):", 
                []
            ], 
            [
                "def _update_terminal_region(self, tree, terminal_regions, leaf, X, y,\n                                residual, pred, sample_weight):", 
                []
            ], 
            [
                "def __init__(self, n_classes, alpha=0.9):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def init_estimator(self):", 
                []
            ], 
            [
                "def __call__(self, y, pred, sample_weight=None):", 
                []
            ], 
            [
                "def negative_gradient(self, y, pred, **kargs):", 
                []
            ], 
            [
                "def _update_terminal_region(self, tree, terminal_regions, leaf, X, y,\n                                residual, pred, sample_weight):", 
                []
            ], 
            [
                "def _score_to_proba(self, score):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _score_to_decision(self, score):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, n_classes):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def init_estimator(self):", 
                []
            ], 
            [
                "def __call__(self, y, pred, sample_weight=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def negative_gradient(self, y, pred, **kargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _update_terminal_region(self, tree, terminal_regions, leaf, X, y,\n                                residual, pred, sample_weight):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _score_to_proba(self, score):", 
                []
            ], 
            [
                "def _score_to_decision(self, score):", 
                []
            ], 
            [
                "def __init__(self, n_classes):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def init_estimator(self):", 
                []
            ], 
            [
                "def __call__(self, y, pred, sample_weight=None):", 
                []
            ], 
            [
                "def negative_gradient(self, y, pred, k=0, **kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _update_terminal_region(self, tree, terminal_regions, leaf, X, y,\n                                residual, pred, sample_weight):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _score_to_proba(self, score):", 
                []
            ], 
            [
                "def _score_to_decision(self, score):", 
                []
            ], 
            [
                "def __init__(self, n_classes):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def init_estimator(self):", 
                []
            ], 
            [
                "def __call__(self, y, pred, sample_weight=None):", 
                []
            ], 
            [
                "def negative_gradient(self, y, pred, **kargs):", 
                []
            ], 
            [
                "def _update_terminal_region(self, tree, terminal_regions, leaf, X, y,\n                                residual, pred, sample_weight):", 
                []
            ], 
            [
                "def _score_to_proba(self, score):", 
                []
            ], 
            [
                "def _score_to_decision(self, score):", 
                []
            ], 
            [
                "def __init__(self, verbose):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def init(self, est, begin_at_stage=0):", 
                []
            ], 
            [
                "def update(self, j, est):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, loss, learning_rate, n_estimators, criterion,\n                 min_samples_split, min_samples_leaf, min_weight_fraction_leaf,\n                 max_depth, min_impurity_decrease, min_impurity_split,\n                 init, subsample, max_features,\n                 random_state, alpha=0.9, verbose=0, max_leaf_nodes=None,\n                 warm_start=False, presort='auto',\n                 validation_fraction=0.1, n_iter_no_change=None,\n                 tol=1e-4):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _fit_stage(self, i, X, y, y_pred, sample_weight, sample_mask,\n                   random_state, X_idx_sorted, X_csc=None, X_csr=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _check_params(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _init_state(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _clear_state(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _resize_state(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _is_initialized(self):", 
                []
            ], 
            [
                "def _check_initialized(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def n_features(self):", 
                []
            ], 
            [
                "def fit(self, X, y, sample_weight=None, monitor=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples] or None"
                            ], 
                            [
                                "monitor", 
                                "callable, optional"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _fit_stages(self, X, y, y_pred, sample_weight, random_state,\n                    X_val, y_val, sample_weight_val,\n                    begin_at_stage=0, monitor=None, X_idx_sorted=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _make_estimator(self, append=True):", 
                []
            ], 
            [
                "def _init_decision_function(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _decision_function(self, X):", 
                []
            ], 
            [
                "def _staged_decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "generator of array, shape = [n_samples, k]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def feature_importances_(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "feature_importances_", 
                                "array, shape = [n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _validate_y(self, y):", 
                []
            ], 
            [
                "def apply(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "X_leaves", 
                                "array_like, shape = [n_samples, n_estimators, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, loss='deviance', learning_rate=0.1, n_estimators=100,\n                 subsample=1.0, criterion='friedman_mse', min_samples_split=2,\n                 min_samples_leaf=1, min_weight_fraction_leaf=0.,\n                 max_depth=3, min_impurity_decrease=0.,\n                 min_impurity_split=None, init=None,\n                 random_state=None, max_features=None, verbose=0,\n                 max_leaf_nodes=None, warm_start=False,\n                 presort='auto', validation_fraction=0.1,\n                 n_iter_no_change=None, tol=1e-4):", 
                [
                    [
                        [
                            [
                                "loss", 
                                "{'deviance', 'exponential'}, optional (default='deviance')"
                            ], 
                            [
                                "learning_rate", 
                                "float, optional (default=0.1)"
                            ], 
                            [
                                "n_estimators", 
                                "int (default=100)"
                            ], 
                            [
                                "max_depth", 
                                "integer, optional (default=3)"
                            ], 
                            [
                                "criterion", 
                                "string, optional (default=\"friedman_mse\")"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "min_samples_split", 
                                "int, float, optional (default=2)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_samples_leaf", 
                                "int, float, optional (default=1)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_weight_fraction_leaf", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "subsample", 
                                "float, optional (default=1.0)"
                            ], 
                            [
                                "max_features", 
                                "int, float, string or None, optional (default=None)"
                            ], 
                            [
                                "split", 
                                ""
                            ], 
                            [
                                "Note", 
                                "the search for a split does not stop until at least one"
                            ], 
                            [
                                "max_leaf_nodes", 
                                "int or None, optional (default=None)"
                            ], 
                            [
                                "min_impurity_split", 
                                "float,"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "min_impurity_decrease", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "following", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "init", 
                                "BaseEstimator, None, optional (default=None)"
                            ], 
                            [
                                "verbose", 
                                "int, default"
                            ], 
                            [
                                "warm_start", 
                                "bool, default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "presort", 
                                "bool or 'auto', optional (default='auto')"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "validation_fraction", 
                                "float, optional, default 0.1"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "n_iter_no_change", 
                                "int, default None"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "tol", 
                                "float, optional, default 1e-4"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _validate_y(self, y):", 
                []
            ], 
            [
                "def decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "array, shape = [n_samples, n_classes] or [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def staged_decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "generator of array, shape = [n_samples, k]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array of shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def staged_predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "generator of array of shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "p", 
                                "array of shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_log_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "p", 
                                "array of shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def staged_predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "generator of array of shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, loss='ls', learning_rate=0.1, n_estimators=100,\n                 subsample=1.0, criterion='friedman_mse', min_samples_split=2,\n                 min_samples_leaf=1, min_weight_fraction_leaf=0.,\n                 max_depth=3, min_impurity_decrease=0.,\n                 min_impurity_split=None, init=None, random_state=None,\n                 max_features=None, alpha=0.9, verbose=0, max_leaf_nodes=None,\n                 warm_start=False, presort='auto', validation_fraction=0.1,\n                 n_iter_no_change=None, tol=1e-4):", 
                [
                    [
                        [
                            [
                                "loss", 
                                "{'ls', 'lad', 'huber', 'quantile'}, optional (default='ls')"
                            ], 
                            [
                                "learning_rate", 
                                "float, optional (default=0.1)"
                            ], 
                            [
                                "n_estimators", 
                                "int (default=100)"
                            ], 
                            [
                                "max_depth", 
                                "integer, optional (default=3)"
                            ], 
                            [
                                "criterion", 
                                "string, optional (default=\"friedman_mse\")"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "min_samples_split", 
                                "int, float, optional (default=2)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_samples_leaf", 
                                "int, float, optional (default=1)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_weight_fraction_leaf", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "subsample", 
                                "float, optional (default=1.0)"
                            ], 
                            [
                                "max_features", 
                                "int, float, string or None, optional (default=None)"
                            ], 
                            [
                                "split", 
                                ""
                            ], 
                            [
                                "Note", 
                                "the search for a split does not stop until at least one"
                            ], 
                            [
                                "max_leaf_nodes", 
                                "int or None, optional (default=None)"
                            ], 
                            [
                                "min_impurity_split", 
                                "float,"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "min_impurity_decrease", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "following", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "alpha", 
                                "float (default=0.9)"
                            ], 
                            [
                                "init", 
                                "BaseEstimator, None, optional (default=None)"
                            ], 
                            [
                                "verbose", 
                                "int, default"
                            ], 
                            [
                                "warm_start", 
                                "bool, default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "presort", 
                                "bool or 'auto', optional (default='auto')"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "validation_fraction", 
                                "float, optional, default 0.1"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "n_iter_no_change", 
                                "int, default None"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "tol", 
                                "float, optional, default 1e-4"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array of shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def staged_predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "generator of array of shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def apply(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "X_leaves", 
                                "array_like, shape = [n_samples, n_estimators]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        94
    ], 
    "../scikit-learn-master\\doc\\tutorial\\machine_learning_map\\parse_path.py": [
        [
            [
                "def Command(char):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def Arguments(token):", 
                []
            ], 
            [
                "def __init__( self, matchString ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def Sequence(token):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def convertToFloat(s, loc, toks):", 
                []
            ], 
            [
                "def get_points(d):", 
                []
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_random.py": [
        [
            [
                "def test_invalid_sample_without_replacement_algorithm():", 
                []
            ], 
            [
                "def test_sample_without_replacement_algorithms():", 
                []
            ], 
            [
                "def sample_without_replacement_method(n_population, n_samples,\n                                              random_state=None):", 
                []
            ], 
            [
                "def check_edge_case_of_sample_int(sample_without_replacement):", 
                []
            ], 
            [
                "def check_sample_int(sample_without_replacement):", 
                []
            ], 
            [
                "def check_sample_int_distribution(sample_without_replacement):", 
                []
            ], 
            [
                "def test_random_choice_csc(n_samples=10000, random_state=24):", 
                []
            ], 
            [
                "def test_random_choice_csc_errors():", 
                []
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\sklearn\\tree\\export.py": [
        [
            [
                "def _color_brew(n):", 
                [
                    [
                        [
                            [
                                "n", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "color_list", 
                                "list, length n"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def export_graphviz(decision_tree, out_file=SENTINEL, max_depth=None,\n                    feature_names=None, class_names=None, label='all',\n                    filled=False, leaves_parallel=False, impurity=True,\n                    node_ids=False, proportion=False, rotate=False,\n                    rounded=False, special_characters=False, precision=3):", 
                [
                    [
                        [
                            [
                                "decision_tree", 
                                "decision tree regressor or classifier"
                            ], 
                            [
                                "out_file", 
                                "file object or string, optional (default='tree.dot')"
                            ], 
                            [
                                "max_depth", 
                                "int, optional (default=None)"
                            ], 
                            [
                                "feature_names", 
                                "list of strings, optional (default=None)"
                            ], 
                            [
                                "class_names", 
                                "list of strings, bool or None, optional (default=None)"
                            ], 
                            [
                                "label", 
                                "{'all', 'root', 'none'}, optional (default='all')"
                            ], 
                            [
                                "filled", 
                                "bool, optional (default=False)"
                            ], 
                            [
                                "leaves_parallel", 
                                "bool, optional (default=False)"
                            ], 
                            [
                                "impurity", 
                                "bool, optional (default=True)"
                            ], 
                            [
                                "node_ids", 
                                "bool, optional (default=False)"
                            ], 
                            [
                                "proportion", 
                                "bool, optional (default=False)"
                            ], 
                            [
                                "rotate", 
                                "bool, optional (default=False)"
                            ], 
                            [
                                "rounded", 
                                "bool, optional (default=False)"
                            ], 
                            [
                                "special_characters", 
                                "bool, optional (default=False)"
                            ], 
                            [
                                "precision", 
                                "int, optional (default=3)"
                            ]
                        ], 
                        [
                            [
                                "dot_data", 
                                "string"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def get_color(value):", 
                []
            ], 
            [
                "def node_to_str(tree, node_id, criterion):", 
                []
            ], 
            [
                "def recurse(tree, node_id, criterion, parent=None, depth=0):", 
                []
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_mini_batch_kmeans.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_feature_agglomeration_vs_univariate_selection.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\benchmarks\\bench_plot_omp_lars.py": [
        [
            [
                "def compute_bench(samples_range, features_range):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_naive_bayes.py": [
        [
            [
                "def test_gnb():", 
                []
            ], 
            [
                "def test_gnb_prior():", 
                []
            ], 
            [
                "def test_gnb_sample_weight():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_gnb_neg_priors():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_gnb_priors():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_gnb_wrong_nb_priors():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_gnb_prior_greater_one():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_gnb_prior_large_bias():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_check_update_with_no_data():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_gnb_pfit_wrong_nb_features():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_discrete_prior():", 
                []
            ], 
            [
                "def test_mnnb():", 
                []
            ], 
            [
                "def check_partial_fit(cls):", 
                []
            ], 
            [
                "def test_discretenb_partial_fit():", 
                []
            ], 
            [
                "def test_gnb_partial_fit():", 
                []
            ], 
            [
                "def test_discretenb_pickle():", 
                []
            ], 
            [
                "def test_input_check_fit():", 
                []
            ], 
            [
                "def test_input_check_partial_fit():", 
                []
            ], 
            [
                "def test_discretenb_predict_proba():", 
                []
            ], 
            [
                "def test_discretenb_uniform_prior():", 
                []
            ], 
            [
                "def test_discretenb_provide_prior():", 
                []
            ], 
            [
                "def test_discretenb_provide_prior_with_partial_fit():", 
                []
            ], 
            [
                "def test_sample_weight_multiclass():", 
                []
            ], 
            [
                "def check_sample_weight_multiclass(cls):", 
                []
            ], 
            [
                "def test_sample_weight_mnb():", 
                []
            ], 
            [
                "def test_coef_intercept_shape():", 
                []
            ], 
            [
                "def test_check_accuracy_on_digits():", 
                []
            ], 
            [
                "def test_feature_log_prob_bnb():", 
                []
            ], 
            [
                "def test_bnb():", 
                []
            ], 
            [
                "def test_cnb():", 
                []
            ], 
            [
                "def test_naive_bayes_scale_invariance():", 
                []
            ], 
            [
                "def test_alpha():", 
                []
            ]
        ], 
        32
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\cluster\\supervised.py": [
        [
            [
                "def comb2(n):", 
                []
            ], 
            [
                "def check_clusterings(labels_true, labels_pred):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def contingency_matrix(labels_true, labels_pred, eps=None, sparse=False):", 
                [
                    [
                        [
                            [
                                "labels_true", 
                                "int array, shape = [n_samples]"
                            ], 
                            [
                                "labels_pred", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "eps", 
                                "None or float, optional."
                            ], 
                            [
                                "sparse", 
                                "boolean, optional."
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "contingency", 
                                "{array-like, sparse}, shape=[n_classes_true, n_classes_pred]"
                            ], 
                            [
                                "Matrix", 
                                "math"
                            ], 
                            [
                                "class", 
                                "math"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def adjusted_rand_score(labels_true, labels_pred):", 
                [
                    [
                        [
                            [
                                "labels_true", 
                                "int array, shape = [n_samples]"
                            ], 
                            [
                                "labels_pred", 
                                "array, shape = [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "ari", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def homogeneity_completeness_v_measure(labels_true, labels_pred):", 
                [
                    [
                        [
                            [
                                "labels_true", 
                                "int array, shape = [n_samples]"
                            ], 
                            [
                                "labels_pred", 
                                "array, shape = [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "homogeneity", 
                                "float"
                            ], 
                            [
                                "completeness", 
                                "float"
                            ], 
                            [
                                "v_measure", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def homogeneity_score(labels_true, labels_pred):", 
                [
                    [
                        [
                            [
                                "labels_true", 
                                "int array, shape = [n_samples]"
                            ], 
                            [
                                "labels_pred", 
                                "array, shape = [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "homogeneity", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def completeness_score(labels_true, labels_pred):", 
                [
                    [
                        [
                            [
                                "labels_true", 
                                "int array, shape = [n_samples]"
                            ], 
                            [
                                "labels_pred", 
                                "array, shape = [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "completeness", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def v_measure_score(labels_true, labels_pred):", 
                [
                    [
                        [
                            [
                                "labels_true", 
                                "int array, shape = [n_samples]"
                            ], 
                            [
                                "labels_pred", 
                                "array, shape = [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "v_measure", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def mutual_info_score(labels_true, labels_pred, contingency=None):", 
                [
                    [
                        [
                            [
                                "labels_true", 
                                "int array, shape = [n_samples]"
                            ], 
                            [
                                "labels_pred", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "contingency", 
                                "{None, array, sparse matrix},"
                            ], 
                            [
                                "the", 
                                "func"
                            ]
                        ], 
                        [
                            [
                                "mi", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def adjusted_mutual_info_score(labels_true, labels_pred):", 
                [
                    [
                        [
                            [
                                "labels_true", 
                                "int array, shape = [n_samples]"
                            ], 
                            [
                                "labels_pred", 
                                "array, shape = [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "ami", 
                                "float(upperlimited by 1.0)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def normalized_mutual_info_score(labels_true, labels_pred):", 
                [
                    [
                        [
                            [
                                "labels_true", 
                                "int array, shape = [n_samples]"
                            ], 
                            [
                                "labels_pred", 
                                "array, shape = [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "nmi", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fowlkes_mallows_score(labels_true, labels_pred, sparse=False):", 
                [
                    [
                        [
                            [
                                "labels_true", 
                                "int array, shape = (``n_samples``,)"
                            ], 
                            [
                                "labels_pred", 
                                "array, shape = (``n_samples``, )"
                            ], 
                            [
                                "sparse", 
                                "bool"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def entropy(labels):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        13
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_ensemble_oob.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\decomposition\\plot_beta_divergence.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\dbscan_.py": [
        [
            [
                "def dbscan(X, eps=0.5, min_samples=5, metric='minkowski', metric_params=None,\n           algorithm='auto', leaf_size=30, p=2, sample_weight=None, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array or sparse (CSR) matrix of shape (n_samples, n_features), or \\"
                            ], 
                            [
                                "eps", 
                                "float, optional"
                            ], 
                            [
                                "min_samples", 
                                "int, optional"
                            ], 
                            [
                                "metric", 
                                "string, or callable"
                            ], 
                            [
                                "metric_params", 
                                "dict, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "algorithm", 
                                "{'auto', 'ball_tree', 'kd_tree', 'brute'}, optional"
                            ], 
                            [
                                "leaf_size", 
                                "int, optional (default = 30)"
                            ], 
                            [
                                "p", 
                                "float, optional"
                            ], 
                            [
                                "sample_weight", 
                                "array, shape (n_samples,), optional"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default = 1)"
                            ]
                        ], 
                        [
                            [
                                "core_samples", 
                                "array [n_core_samples]"
                            ], 
                            [
                                "labels", 
                                "array [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, eps=0.5, min_samples=5, metric='euclidean',\n                 metric_params=None, algorithm='auto', leaf_size=30, p=None,\n                 n_jobs=1):", 
                [
                    [
                        [
                            [
                                "eps", 
                                "float, optional"
                            ], 
                            [
                                "min_samples", 
                                "int, optional"
                            ], 
                            [
                                "metric", 
                                "string, or callable"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "metric_params", 
                                "dict, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "algorithm", 
                                "{'auto', 'ball_tree', 'kd_tree', 'brute'}, optional"
                            ], 
                            [
                                "leaf_size", 
                                "int, optional (default = 30)"
                            ], 
                            [
                                "p", 
                                "float, optional"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default = 1)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array or sparse (CSR) matrix of shape (n_samples, n_features), or \\"
                            ], 
                            [
                                "sample_weight", 
                                "array, shape (n_samples,), optional"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit_predict(self, X, y=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array or sparse (CSR) matrix of shape (n_samples, n_features), or \\"
                            ], 
                            [
                                "sample_weight", 
                                "array, shape (n_samples,), optional"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "ndarray, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\sklearn\\utils\\estimator_checks.py": [
        [
            [
                "def _yield_non_meta_checks(name, estimator):", 
                []
            ], 
            [
                "def _yield_classifier_checks(name, classifier):", 
                []
            ], 
            [
                "def check_supervised_y_no_nan(name, estimator_orig):", 
                []
            ], 
            [
                "def _yield_regressor_checks(name, regressor):", 
                []
            ], 
            [
                "def _yield_transformer_checks(name, transformer):", 
                []
            ], 
            [
                "def _yield_clustering_checks(name, clusterer):", 
                []
            ], 
            [
                "def _yield_all_checks(name, estimator):", 
                []
            ], 
            [
                "def check_estimator(Estimator):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object or class"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _boston_subset(n_samples=200):", 
                []
            ], 
            [
                "def set_checking_parameters(estimator):", 
                []
            ], 
            [
                "def __init__(self, data):", 
                []
            ], 
            [
                "def __array__(self, dtype=None):", 
                []
            ], 
            [
                "def _is_32bit():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def check_estimator_sparse_data(name, estimator_orig):", 
                []
            ], 
            [
                "def check_sample_weights_pandas_series(name, estimator_orig):", 
                []
            ], 
            [
                "def check_sample_weights_list(name, estimator_orig):", 
                []
            ], 
            [
                "def check_dtype_object(name, estimator_orig):", 
                []
            ], 
            [
                "def check_complex_data(name, estimator_orig):", 
                []
            ], 
            [
                "def check_dict_unchanged(name, estimator_orig):", 
                []
            ], 
            [
                "def is_public_parameter(attr):", 
                []
            ], 
            [
                "def check_dont_overwrite_parameters(name, estimator_orig):", 
                []
            ], 
            [
                "def check_fit2d_predict1d(name, estimator_orig):", 
                []
            ], 
            [
                "def check_fit2d_1sample(name, estimator_orig):", 
                []
            ], 
            [
                "def check_fit2d_1feature(name, estimator_orig):", 
                []
            ], 
            [
                "def check_fit1d_1feature(name, estimator_orig):", 
                []
            ], 
            [
                "def check_fit1d_1sample(name, estimator_orig):", 
                []
            ], 
            [
                "def check_transformer_general(name, transformer):", 
                []
            ], 
            [
                "def check_transformer_data_not_an_array(name, transformer):", 
                []
            ], 
            [
                "def check_transformers_unfitted(name, transformer):", 
                []
            ], 
            [
                "def _check_transformer(name, transformer_orig, X, y):", 
                []
            ], 
            [
                "def check_pipeline_consistency(name, estimator_orig):", 
                []
            ], 
            [
                "def check_fit_score_takes_y(name, estimator_orig):", 
                []
            ], 
            [
                "def check_estimators_dtypes(name, estimator_orig):", 
                []
            ], 
            [
                "def check_estimators_empty_data_messages(name, estimator_orig):", 
                []
            ], 
            [
                "def check_estimators_nan_inf(name, estimator_orig):", 
                []
            ], 
            [
                "def check_estimators_pickle(name, estimator_orig):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def check_estimators_partial_fit_n_features(name, estimator_orig):", 
                []
            ], 
            [
                "def check_clustering(name, clusterer_orig):", 
                []
            ], 
            [
                "def check_clusterer_compute_labels_predict(name, clusterer_orig):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def check_classifiers_one_label(name, classifier_orig):", 
                []
            ], 
            [
                "def check_classifiers_train(name, classifier_orig):", 
                []
            ], 
            [
                "def check_estimators_fit_returns_self(name, estimator_orig):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def check_estimators_unfitted(name, estimator_orig):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def check_supervised_y_2d(name, estimator_orig):", 
                []
            ], 
            [
                "def check_classifiers_classes(name, classifier_orig):", 
                []
            ], 
            [
                "def check_regressors_int(name, regressor_orig):", 
                []
            ], 
            [
                "def check_regressors_train(name, regressor_orig):", 
                []
            ], 
            [
                "def check_regressors_no_decision_function(name, regressor_orig):", 
                []
            ], 
            [
                "def check_class_weight_classifiers(name, classifier_orig):", 
                []
            ], 
            [
                "def check_class_weight_balanced_classifiers(name, classifier_orig, X_train,\n                                            y_train, X_test, y_test, weights):", 
                []
            ], 
            [
                "def check_class_weight_balanced_linear_classifier(name, Classifier):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def check_estimators_overwrite_params(name, estimator_orig):", 
                []
            ], 
            [
                "def check_no_fit_attributes_set_in_init(name, Estimator):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def check_sparsify_coefficients(name, estimator_orig):", 
                []
            ], 
            [
                "def check_classifier_data_not_an_array(name, estimator_orig):", 
                []
            ], 
            [
                "def check_regressor_data_not_an_array(name, estimator_orig):", 
                []
            ], 
            [
                "def check_estimators_data_not_an_array(name, estimator_orig, X, y):", 
                []
            ], 
            [
                "def check_parameters_default_constructible(name, Estimator):", 
                []
            ], 
            [
                "def param_filter(p):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def multioutput_estimator_convert_y_2d(estimator, y):", 
                []
            ], 
            [
                "def check_non_transformer_estimators_n_iter(name, estimator_orig):", 
                []
            ], 
            [
                "def check_transformer_n_iter(name, estimator_orig):", 
                []
            ], 
            [
                "def check_get_params_invariance(name, estimator_orig):", 
                []
            ], 
            [
                "def __init__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def transform(self, X):", 
                []
            ], 
            [
                "def check_classifiers_regression_target(name, estimator_orig):", 
                []
            ], 
            [
                "def check_decision_proba_consistency(name, estimator_orig):", 
                []
            ]
        ], 
        68
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\tests\\test_theil_sen.py": [
        [
            [
                "def no_stdout_stderr():", 
                []
            ], 
            [
                "def gen_toy_problem_1d(intercept=True):", 
                []
            ], 
            [
                "def gen_toy_problem_2d():", 
                []
            ], 
            [
                "def gen_toy_problem_4d():", 
                []
            ], 
            [
                "def test_modweiszfeld_step_1d():", 
                []
            ], 
            [
                "def test_modweiszfeld_step_2d():", 
                []
            ], 
            [
                "def test_spatial_median_1d():", 
                []
            ], 
            [
                "def test_spatial_median_2d():", 
                []
            ], 
            [
                "def cost_func(y):", 
                []
            ], 
            [
                "def test_theil_sen_1d():", 
                []
            ], 
            [
                "def test_theil_sen_1d_no_intercept():", 
                []
            ], 
            [
                "def test_theil_sen_2d():", 
                []
            ], 
            [
                "def test_calc_breakdown_point():", 
                []
            ], 
            [
                "def test_checksubparams_negative_subpopulation():", 
                []
            ], 
            [
                "def test_checksubparams_too_few_subsamples():", 
                []
            ], 
            [
                "def test_checksubparams_too_many_subsamples():", 
                []
            ], 
            [
                "def test_checksubparams_n_subsamples_if_less_samples_than_features():", 
                []
            ], 
            [
                "def test_subpopulation():", 
                []
            ], 
            [
                "def test_subsamples():", 
                []
            ], 
            [
                "def test_verbosity():", 
                []
            ], 
            [
                "def test_theil_sen_parallel():", 
                []
            ], 
            [
                "def test_less_samples_than_features():", 
                []
            ]
        ], 
        22
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_testing.py": [
        [
            [
                "def test_assert_less():", 
                []
            ], 
            [
                "def test_assert_greater():", 
                []
            ], 
            [
                "def test_assert_less_equal():", 
                []
            ], 
            [
                "def test_assert_greater_equal():", 
                []
            ], 
            [
                "def test_set_random_state():", 
                []
            ], 
            [
                "def test_assert_allclose_dense_sparse():", 
                []
            ], 
            [
                "def test_assert_raises_msg():", 
                []
            ], 
            [
                "def test_assert_raise_message():", 
                []
            ], 
            [
                "def _raise_ValueError(message):", 
                []
            ], 
            [
                "def _no_raise():", 
                []
            ], 
            [
                "def test_ignore_warning():", 
                []
            ], 
            [
                "def _warning_function():", 
                []
            ], 
            [
                "def _multiple_warning_function():", 
                []
            ], 
            [
                "def decorator_no_warning():", 
                []
            ], 
            [
                "def decorator_no_warning_multiple():", 
                []
            ], 
            [
                "def decorator_no_deprecation_warning():", 
                []
            ], 
            [
                "def decorator_no_user_warning():", 
                []
            ], 
            [
                "def decorator_no_deprecation_multiple_warning():", 
                []
            ], 
            [
                "def decorator_no_user_multiple_warning():", 
                []
            ], 
            [
                "def context_manager_no_warning():", 
                []
            ], 
            [
                "def context_manager_no_warning_multiple():", 
                []
            ], 
            [
                "def context_manager_no_deprecation_warning():", 
                []
            ], 
            [
                "def context_manager_no_user_warning():", 
                []
            ], 
            [
                "def context_manager_no_deprecation_multiple_warning():", 
                []
            ], 
            [
                "def context_manager_no_user_multiple_warning():", 
                []
            ], 
            [
                "def test_warn(self):", 
                []
            ], 
            [
                "def f():", 
                []
            ], 
            [
                "def test_warn_wrong_warning(self):", 
                []
            ], 
            [
                "def f():", 
                []
            ], 
            [
                "def f_ok(a, b):", 
                [
                    [
                        [
                            [
                                "a", 
                                "int"
                            ], 
                            [
                                "b", 
                                "float"
                            ]
                        ], 
                        [
                            [
                                "c", 
                                "list"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def f_bad_sections(a, b):", 
                [
                    [
                        [
                            [
                                "a", 
                                "int"
                            ], 
                            [
                                "b", 
                                "float"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def f_bad_order(b, a):", 
                [
                    [
                        [
                            [
                                "a", 
                                "int"
                            ], 
                            [
                                "b", 
                                "float"
                            ]
                        ], 
                        [
                            [
                                "c", 
                                "list"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def f_missing(a, b):", 
                [
                    [
                        [
                            [
                                "a", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "c", 
                                "list"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def f_check_param_definition(a, b, c, d):", 
                [
                    [
                        [
                            [
                                "a", 
                                "int"
                            ], 
                            [
                                "b", 
                                ""
                            ], 
                            [
                                "c", 
                                ""
                            ], 
                            [
                                "d", 
                                "int"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def f_missing(self, X, y):", 
                []
            ], 
            [
                "def f_bad_sections(self, X, y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def predict_proba(self, X):", 
                []
            ], 
            [
                "def score(self, X):", 
                []
            ], 
            [
                "def __init__(self, delegate):", 
                []
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "y", 
                                "ndarray"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def score(self, X):", 
                [
                    [
                        [
                            [
                                "y", 
                                "ndarray"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict_log_proba(self, X):", 
                [
                    [
                        [
                            [
                                "y", 
                                "ndarray"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_check_docstring_parameters():", 
                []
            ]
        ], 
        48
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\tests\\test_ranking.py": [
        [
            [
                "def make_prediction(dataset=None, binary=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _auc(y_true, y_score):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _average_precision(y_true, y_score):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _average_precision_slow(y_true, y_score):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_roc_curve():", 
                []
            ], 
            [
                "def test_roc_curve_end_points():", 
                []
            ], 
            [
                "def test_roc_returns_consistency():", 
                []
            ], 
            [
                "def test_roc_curve_multi():", 
                []
            ], 
            [
                "def test_roc_curve_confidence():", 
                []
            ], 
            [
                "def test_roc_curve_hard():", 
                []
            ], 
            [
                "def test_roc_curve_one_label():", 
                []
            ], 
            [
                "def test_roc_curve_toydata():", 
                []
            ], 
            [
                "def test_roc_curve_drop_intermediate():", 
                []
            ], 
            [
                "def test_auc():", 
                []
            ], 
            [
                "def test_auc_duplicate_values():", 
                []
            ], 
            [
                "def test_auc_errors():", 
                []
            ], 
            [
                "def test_auc_score_non_binary_class():", 
                []
            ], 
            [
                "def test_precision_recall_curve():", 
                []
            ], 
            [
                "def test_precision_recall_curve_pos_label():", 
                []
            ], 
            [
                "def _test_precision_recall_curve(y_true, probas_pred):", 
                []
            ], 
            [
                "def test_precision_recall_curve_errors():", 
                []
            ], 
            [
                "def test_precision_recall_curve_toydata():", 
                []
            ], 
            [
                "def test_average_precision_constant_values():", 
                []
            ], 
            [
                "def test_score_scale_invariance():", 
                []
            ], 
            [
                "def check_lrap_toy(lrap_score):", 
                []
            ], 
            [
                "def check_zero_or_all_relevant_labels(lrap_score):", 
                []
            ], 
            [
                "def test_ndcg_score():", 
                []
            ], 
            [
                "def check_lrap_error_raised(lrap_score):", 
                []
            ], 
            [
                "def check_lrap_only_ties(lrap_score):", 
                []
            ], 
            [
                "def check_lrap_without_tie_and_increasing_score(lrap_score):", 
                []
            ], 
            [
                "def _my_lrap(y_true, y_score):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def check_alternative_lrap_implementation(lrap_score, n_classes=5,\n                                          n_samples=20, random_state=0):", 
                []
            ], 
            [
                "def test_label_ranking_avp():", 
                []
            ], 
            [
                "def test_coverage_error():", 
                []
            ], 
            [
                "def test_coverage_tie_handling():", 
                []
            ], 
            [
                "def test_label_ranking_loss():", 
                []
            ], 
            [
                "def test_ranking_appropriate_input_shape():", 
                []
            ], 
            [
                "def test_ranking_loss_ties_handling():", 
                []
            ]
        ], 
        38
    ], 
    "../scikit-learn-master\\sklearn\\utils\\sparsetools\\setup.py": [
        [
            [
                "def configuration(parent_package='', top_path=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\doc\\tutorial\\text_analytics\\data\\languages\\fetch_data.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\preprocessing\\plot_all_scaling.py": [
        [
            [
                "def create_axes(title, figsize=(16, 6)):", 
                []
            ], 
            [
                "def plot_distribution(axes, X, y, hist_nbins=50, title=\"\",\n                      x0_label=\"\", x1_label=\"\"):", 
                []
            ], 
            [
                "def make_plot(item_idx):", 
                []
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\tests\\test_regression.py": [
        [
            [
                "def test_regression_metrics(n_samples=50):", 
                []
            ], 
            [
                "def test_multioutput_regression():", 
                []
            ], 
            [
                "def test_regression_metrics_at_limits():", 
                []
            ], 
            [
                "def test__check_reg_targets():", 
                []
            ], 
            [
                "def test__check_reg_targets_exception():", 
                []
            ], 
            [
                "def test_regression_multioutput_array():", 
                []
            ], 
            [
                "def test_regression_custom_weights():", 
                []
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\ranking.py": [
        [
            [
                "def auc(x, y, reorder=False):", 
                [
                    [
                        [
                            [
                                "x", 
                                "array, shape = [n]"
                            ], 
                            [
                                "y", 
                                "array, shape = [n]"
                            ], 
                            [
                                "reorder", 
                                "boolean, optional (default=False)"
                            ]
                        ], 
                        [
                            [
                                "auc", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def average_precision_score(y_true, y_score, average=\"macro\",\n                            sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array, shape = [n_samples] or [n_samples, n_classes]"
                            ], 
                            [
                                "y_score", 
                                "array, shape = [n_samples] or [n_samples, n_classes]"
                            ], 
                            [
                                "average", 
                                "string, [None, 'micro', 'macro' (default), 'samples', 'weighted']"
                            ], 
                            [
                                "data", 
                                ""
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "average_precision", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _binary_uninterpolated_average_precision(\n            y_true, y_score, sample_weight=None):", 
                []
            ], 
            [
                "def roc_auc_score(y_true, y_score, average=\"macro\", sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array, shape = [n_samples] or [n_samples, n_classes]"
                            ], 
                            [
                                "y_score", 
                                "array, shape = [n_samples] or [n_samples, n_classes]"
                            ], 
                            [
                                "average", 
                                "string, [None, 'micro', 'macro' (default), 'samples', 'weighted']"
                            ], 
                            [
                                "data", 
                                ""
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "auc", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _binary_roc_auc_score(y_true, y_score, sample_weight=None):", 
                []
            ], 
            [
                "def _binary_clf_curve(y_true, y_score, pos_label=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "y_score", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "pos_label", 
                                "int or str, default=None"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "fps", 
                                "array, shape = [n_thresholds]"
                            ], 
                            [
                                "tps", 
                                "array, shape = [n_thresholds <= len(np.unique(y_score))]"
                            ], 
                            [
                                "thresholds", 
                                "array, shape = [n_thresholds]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def precision_recall_curve(y_true, probas_pred, pos_label=None,\n                           sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "probas_pred", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "pos_label", 
                                "int or str, default=None"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "precision", 
                                "array, shape = [n_thresholds + 1]"
                            ], 
                            [
                                "recall", 
                                "array, shape = [n_thresholds + 1]"
                            ], 
                            [
                                "thresholds", 
                                "array, shape = [n_thresholds <= len(np.unique(probas_pred))]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def roc_curve(y_true, y_score, pos_label=None, sample_weight=None,\n              drop_intermediate=True):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "y_score", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "pos_label", 
                                "int or str, default=None"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ], 
                            [
                                "drop_intermediate", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "fpr", 
                                "array, shape = [>2]"
                            ], 
                            [
                                "tpr", 
                                "array, shape = [>2]"
                            ], 
                            [
                                "thresholds", 
                                "array, shape = [n_thresholds]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def label_ranking_average_precision_score(y_true, y_score):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array or sparse matrix, shape = [n_samples, n_labels]"
                            ], 
                            [
                                "y_score", 
                                "array, shape = [n_samples, n_labels]"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def coverage_error(y_true, y_score, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array, shape = [n_samples, n_labels]"
                            ], 
                            [
                                "y_score", 
                                "array, shape = [n_samples, n_labels]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "coverage_error", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def label_ranking_loss(y_true, y_score, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array or sparse matrix, shape = [n_samples, n_labels]"
                            ], 
                            [
                                "y_score", 
                                "array, shape = [n_samples, n_labels]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "loss", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def dcg_score(y_true, y_score, k=5):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "y_score", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "k", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def ndcg_score(y_true, y_score, k=5):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "y_score", 
                                "array, shape = [n_samples, n_classes]"
                            ], 
                            [
                                "k", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        13
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\_feature_agglomeration.py": [
        [
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features] or [n_features]"
                            ]
                        ], 
                        [
                            [
                                "Y", 
                                "array, shape = [n_samples, n_clusters] or [n_clusters]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, Xred):", 
                [
                    [
                        [
                            [
                                "Xred", 
                                "array-like, shape=[n_samples, n_clusters] or [n_clusters,]"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array, shape=[n_samples, n_features] or [n_features]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\doc\\datasets\\twenty_newsgroups_fixture.py": [
        [
            [
                "def setup_module(module):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\model_selection\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\manifold\\mds.py": [
        [
            [
                "def _smacof_single(dissimilarities, metric=True, n_components=2, init=None,\n                   max_iter=300, verbose=0, eps=1e-3, random_state=None):", 
                [
                    [
                        [
                            [
                                "dissimilarities", 
                                "ndarray, shape (n_samples, n_samples)"
                            ], 
                            [
                                "metric", 
                                "boolean, optional, default"
                            ], 
                            [
                                "n_components", 
                                "int, optional, default"
                            ], 
                            [
                                "init", 
                                "ndarray, shape (n_samples, n_components), optional, default"
                            ], 
                            [
                                "max_iter", 
                                "int, optional, default"
                            ], 
                            [
                                "verbose", 
                                "int, optional, default"
                            ], 
                            [
                                "eps", 
                                "float, optional, default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "ndarray, shape (n_samples, n_components)"
                            ], 
                            [
                                "stress", 
                                "float"
                            ], 
                            [
                                "n_iter", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def smacof(dissimilarities, metric=True, n_components=2, init=None, n_init=8,\n           n_jobs=1, max_iter=300, verbose=0, eps=1e-3, random_state=None,\n           return_n_iter=False):", 
                [
                    [
                        [
                            [
                                "dissimilarities", 
                                "ndarray, shape (n_samples, n_samples)"
                            ], 
                            [
                                "metric", 
                                "boolean, optional, default"
                            ], 
                            [
                                "n_components", 
                                "int, optional, default"
                            ], 
                            [
                                "init", 
                                "ndarray, shape (n_samples, n_components), optional, default"
                            ], 
                            [
                                "n_init", 
                                "int, optional, default"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional, default"
                            ], 
                            [
                                "max_iter", 
                                "int, optional, default"
                            ], 
                            [
                                "verbose", 
                                "int, optional, default"
                            ], 
                            [
                                "eps", 
                                "float, optional, default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ], 
                            [
                                "return_n_iter", 
                                "bool, optional, default"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "ndarray, shape (n_samples, n_components)"
                            ], 
                            [
                                "stress", 
                                "float"
                            ], 
                            [
                                "n_iter", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=2, metric=True, n_init=4,\n                 max_iter=300, verbose=0, eps=1e-3, n_jobs=1,\n                 random_state=None, dissimilarity=\"euclidean\"):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int, optional, default"
                            ], 
                            [
                                "metric", 
                                "boolean, optional, default"
                            ], 
                            [
                                "n_init", 
                                "int, optional, default"
                            ], 
                            [
                                "max_iter", 
                                "int, optional, default"
                            ], 
                            [
                                "verbose", 
                                "int, optional, default"
                            ], 
                            [
                                "eps", 
                                "float, optional, default"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional, default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ], 
                            [
                                "dissimilarity", 
                                "'euclidean' | 'precomputed', optional, default"
                            ], 
                            [
                                "use", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _pairwise(self):", 
                []
            ], 
            [
                "def fit(self, X, y=None, init=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples, n_features) or (n_samples, n_samples)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ], 
                            [
                                "init", 
                                "ndarray, shape (n_samples,), optional, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None, init=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples, n_features) or (n_samples, n_samples)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ], 
                            [
                                "init", 
                                "ndarray, shape (n_samples,), optional, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\sklearn\\utils\\fixes.py": [
        [
            [
                "def _parse_version(version_string):", 
                []
            ], 
            [
                "def divide(x1, x2, out=None, dtype=None):", 
                []
            ], 
            [
                "def _minor_reduce(X, ufunc):", 
                []
            ], 
            [
                "def _min_or_max_axis(X, axis, min_or_max):", 
                []
            ], 
            [
                "def _sparse_min_or_max(X, axis, min_or_max):", 
                []
            ], 
            [
                "def sparse_min_max(X, axis):", 
                []
            ], 
            [
                "def sparse_min_max(X, axis):", 
                []
            ], 
            [
                "def parallel_helper(obj, methodname, *args, **kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def makedirs(name, mode=0o777, exist_ok=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __getstate__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        10
    ], 
    "../scikit-learn-master\\doc\\datasets\\conftest.py": [
        [
            [
                "def setup_labeled_faces():", 
                []
            ], 
            [
                "def setup_mldata():", 
                []
            ], 
            [
                "def teardown_mldata():", 
                []
            ], 
            [
                "def setup_rcv1():", 
                []
            ], 
            [
                "def setup_twenty_newsgroups():", 
                []
            ], 
            [
                "def setup_working_with_text_data():", 
                []
            ], 
            [
                "def pytest_runtest_setup(item):", 
                []
            ], 
            [
                "def pytest_runtest_teardown(item):", 
                []
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_iris_logistic.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_bench.py": [
        [
            [
                "def test_total_seconds():", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\gaussian_process\\tests\\test_kernels.py": [
        [
            [
                "def test_kernel_gradient():", 
                []
            ], 
            [
                "def eval_kernel_for_theta(theta):", 
                []
            ], 
            [
                "def test_kernel_theta():", 
                []
            ], 
            [
                "def test_auto_vs_cross():", 
                []
            ], 
            [
                "def test_kernel_diag():", 
                []
            ], 
            [
                "def test_kernel_operator_commutative():", 
                []
            ], 
            [
                "def test_kernel_anisotropic():", 
                []
            ], 
            [
                "def test_kernel_stationary():", 
                []
            ], 
            [
                "def check_hyperparameters_equal(kernel1, kernel2):", 
                []
            ], 
            [
                "def test_kernel_clone():", 
                []
            ], 
            [
                "def test_kernel_clone_after_set_params():", 
                []
            ], 
            [
                "def test_matern_kernel():", 
                []
            ], 
            [
                "def test_kernel_versus_pairwise():", 
                []
            ], 
            [
                "def test_set_get_params():", 
                []
            ], 
            [
                "def test_repr_kernels():", 
                []
            ]
        ], 
        15
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_kmeans_stability_low_dim_dense.py": [
        [
            [
                "def make_data(random_state, n_samples_per_center, grid_size, scale):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\model_selection\\plot_learning_curve.py": [
        [
            [
                "def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n                        n_jobs=1, train_sizes=np.linspace(.1, 1.0, 5)):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "object type that implements the \"fit\" and \"predict\" methods"
                            ], 
                            [
                                "title", 
                                "string"
                            ], 
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples) or (n_samples, n_features), optional"
                            ], 
                            [
                                "ylim", 
                                "tuple, shape (ymin, ymax), optional"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_extmath.py": [
        [
            [
                "def test_density():", 
                []
            ], 
            [
                "def test_uniform_weights():", 
                []
            ], 
            [
                "def test_random_weights():", 
                []
            ], 
            [
                "def test_logsumexp():", 
                []
            ], 
            [
                "def check_randomized_svd_low_rank(dtype):", 
                []
            ], 
            [
                "def test_randomized_svd_low_rank_all_dtypes():", 
                []
            ], 
            [
                "def test_norm_squared_norm():", 
                []
            ], 
            [
                "def test_row_norms():", 
                []
            ], 
            [
                "def test_randomized_svd_low_rank_with_noise():", 
                []
            ], 
            [
                "def test_randomized_svd_infinite_rank():", 
                []
            ], 
            [
                "def test_randomized_svd_transpose_consistency():", 
                []
            ], 
            [
                "def test_randomized_svd_power_iteration_normalizer():", 
                []
            ], 
            [
                "def test_svd_flip():", 
                []
            ], 
            [
                "def test_randomized_svd_sign_flip():", 
                []
            ], 
            [
                "def test_randomized_svd_sign_flip_with_transpose():", 
                []
            ], 
            [
                "def max_loading_is_positive(u, v):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_cartesian():", 
                []
            ], 
            [
                "def test_logistic_sigmoid():", 
                []
            ], 
            [
                "def naive_log_logistic(x):", 
                []
            ], 
            [
                "def test_incremental_variance_update_formulas():", 
                []
            ], 
            [
                "def test_incremental_variance_numerical_stability():", 
                []
            ], 
            [
                "def np_var(A):", 
                []
            ], 
            [
                "def one_pass_var(X):", 
                []
            ], 
            [
                "def two_pass_var(X):", 
                []
            ], 
            [
                "def naive_mean_variance_update(x, last_mean, last_variance,\n                                   last_sample_count):", 
                []
            ], 
            [
                "def test_incremental_variance_ddof():", 
                []
            ], 
            [
                "def test_vector_sign_flip():", 
                []
            ], 
            [
                "def test_softmax():", 
                []
            ], 
            [
                "def test_stable_cumsum():", 
                []
            ]
        ], 
        29
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\tests\\test_coordinate_descent.py": [
        [
            [
                "def test_lasso_zero():", 
                []
            ], 
            [
                "def test_lasso_toy():", 
                []
            ], 
            [
                "def test_enet_toy():", 
                []
            ], 
            [
                "def build_dataset(n_samples=50, n_features=200, n_informative_features=10,\n                  n_targets=1):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_lasso_cv():", 
                []
            ], 
            [
                "def test_lasso_cv_with_some_model_selection():", 
                []
            ], 
            [
                "def test_lasso_cv_positive_constraint():", 
                []
            ], 
            [
                "def test_lasso_path_return_models_vs_new_return_gives_same_coefficients():", 
                []
            ], 
            [
                "def test_enet_path():", 
                []
            ], 
            [
                "def test_path_parameters():", 
                []
            ], 
            [
                "def test_warm_start():", 
                []
            ], 
            [
                "def test_lasso_alpha_warning():", 
                []
            ], 
            [
                "def test_lasso_positive_constraint():", 
                []
            ], 
            [
                "def test_enet_positive_constraint():", 
                []
            ], 
            [
                "def test_enet_cv_positive_constraint():", 
                []
            ], 
            [
                "def test_uniform_targets():", 
                []
            ], 
            [
                "def test_multi_task_lasso_and_enet():", 
                []
            ], 
            [
                "def test_lasso_readonly_data():", 
                []
            ], 
            [
                "def test_multi_task_lasso_readonly_data():", 
                []
            ], 
            [
                "def test_enet_multitarget():", 
                []
            ], 
            [
                "def test_multioutput_enetcv_error():", 
                []
            ], 
            [
                "def test_multitask_enet_and_lasso_cv():", 
                []
            ], 
            [
                "def test_1d_multioutput_enet_and_multitask_enet_cv():", 
                []
            ], 
            [
                "def test_1d_multioutput_lasso_and_multitask_lasso_cv():", 
                []
            ], 
            [
                "def test_sparse_input_dtype_enet_and_lassocv():", 
                []
            ], 
            [
                "def test_precompute_invalid_argument():", 
                []
            ], 
            [
                "def test_warm_start_convergence():", 
                []
            ], 
            [
                "def test_warm_start_convergence_with_regularizer_decrement():", 
                []
            ], 
            [
                "def test_random_descent():", 
                []
            ], 
            [
                "def test_enet_path_positive():", 
                []
            ], 
            [
                "def test_sparse_dense_descent_paths():", 
                []
            ], 
            [
                "def test_check_input_false():", 
                []
            ], 
            [
                "def test_overrided_gram_matrix():", 
                []
            ], 
            [
                "def test_lasso_non_float_y():", 
                []
            ], 
            [
                "def test_enet_float_precision():", 
                []
            ], 
            [
                "def test_enet_l1_ratio():", 
                []
            ]
        ], 
        36
    ], 
    "../scikit-learn-master\\examples\\preprocessing\\plot_function_transformer.py": [
        [
            [
                "def _generate_vector(shift=0.5, noise=15):", 
                []
            ], 
            [
                "def generate_dataset():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def all_but_first_column(X):", 
                []
            ], 
            [
                "def drop_first_component(X, y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\tests\\test_nmf.py": [
        [
            [
                "def test_initialize_nn_output():", 
                []
            ], 
            [
                "def test_parameter_checking():", 
                []
            ], 
            [
                "def test_initialize_close():", 
                []
            ], 
            [
                "def test_initialize_variants():", 
                []
            ], 
            [
                "def test_nmf_fit_nn_output():", 
                []
            ], 
            [
                "def test_nmf_fit_close():", 
                []
            ], 
            [
                "def test_nmf_transform():", 
                []
            ], 
            [
                "def test_nmf_transform_custom_init():", 
                []
            ], 
            [
                "def test_nmf_inverse_transform():", 
                []
            ], 
            [
                "def test_n_components_greater_n_features():", 
                []
            ], 
            [
                "def test_nmf_sparse_input():", 
                []
            ], 
            [
                "def test_nmf_sparse_transform():", 
                []
            ], 
            [
                "def test_non_negative_factorization_consistency():", 
                []
            ], 
            [
                "def test_non_negative_factorization_checking():", 
                []
            ], 
            [
                "def _beta_divergence_dense(X, W, H, beta):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_beta_divergence():", 
                []
            ], 
            [
                "def test_special_sparse_dot():", 
                []
            ], 
            [
                "def test_nmf_multiplicative_update_sparse():", 
                []
            ], 
            [
                "def test_nmf_negative_beta_loss():", 
                []
            ], 
            [
                "def _assert_nmf_no_nan(X, beta_loss):", 
                []
            ], 
            [
                "def test_nmf_regularization():", 
                []
            ], 
            [
                "def test_nmf_decreasing():", 
                []
            ]
        ], 
        22
    ], 
    "../scikit-learn-master\\examples\\datasets\\plot_random_multilabel_dataset.py": [
        [
            [
                "def plot_2d(ax, n_labels=1, n_classes=3, length=50):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\lof.py": [
        [
            [
                "def __init__(self, n_neighbors=20, algorithm='auto', leaf_size=30,\n                 metric='minkowski', p=2, metric_params=None,\n                 contamination=0.1, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "n_neighbors", 
                                "int, optional (default=20)"
                            ], 
                            [
                                "for", 
                                "meth"
                            ], 
                            [
                                "algorithm", 
                                "{'auto', 'ball_tree', 'kd_tree', 'brute'}, optional"
                            ], 
                            [
                                "neighbors", 
                                ""
                            ], 
                            [
                                "use", 
                                "class"
                            ], 
                            [
                                "use", 
                                "class"
                            ], 
                            [
                                "to", 
                                "meth"
                            ], 
                            [
                                "Note", 
                                "fitting on sparse input will override the setting of"
                            ], 
                            [
                                "leaf_size", 
                                "int, optional (default=30)"
                            ], 
                            [
                                "to", 
                                "class"
                            ], 
                            [
                                "metric", 
                                "string or callable, default 'minkowski'"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "metrics", 
                                ""
                            ], 
                            [
                                "http", 
                                "//docs.scipy.org/doc/scipy/reference/spatial.distance.html"
                            ], 
                            [
                                "p", 
                                "integer, optional (default=2)"
                            ], 
                            [
                                "metric_params", 
                                "dict, optional (default=None)"
                            ], 
                            [
                                "contamination", 
                                "float in (0., 0.5), optional (default=0.1)"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default=1)"
                            ], 
                            [
                                "only", 
                                "meth"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit_predict(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features), default=None"
                            ]
                        ], 
                        [
                            [
                                "is_inlier", 
                                "array, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix, BallTree, KDTree}"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _predict(self, X=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features), default=None"
                            ]
                        ], 
                        [
                            [
                                "is_inlier", 
                                "array, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "opposite_lof_scores", 
                                "array, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _local_reachability_density(self, distances_X, neighbors_indices):", 
                [
                    [
                        [
                            [
                                "distances_X", 
                                "array, shape (n_query, self.n_neighbors)"
                            ], 
                            [
                                "neighbors_indices", 
                                "array, shape (n_query, self.n_neighbors)"
                            ]
                        ], 
                        [
                            [
                                "local_reachability_density", 
                                "array, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\tests\\test_k_means.py": [
        [
            [
                "def test_elkan_results():", 
                []
            ], 
            [
                "def test_labels_assignment_and_inertia():", 
                []
            ], 
            [
                "def test_minibatch_update_consistency():", 
                []
            ], 
            [
                "def _check_fitted_model(km):", 
                []
            ], 
            [
                "def test_k_means_plus_plus_init():", 
                []
            ], 
            [
                "def test_k_means_new_centers():", 
                []
            ], 
            [
                "def test_k_means_plus_plus_init_2_jobs():", 
                []
            ], 
            [
                "def test_k_means_precompute_distances_flag():", 
                []
            ], 
            [
                "def test_k_means_plus_plus_init_sparse():", 
                []
            ], 
            [
                "def test_k_means_random_init():", 
                []
            ], 
            [
                "def test_k_means_random_init_sparse():", 
                []
            ], 
            [
                "def test_k_means_plus_plus_init_not_precomputed():", 
                []
            ], 
            [
                "def test_k_means_random_init_not_precomputed():", 
                []
            ], 
            [
                "def test_k_means_perfect_init():", 
                []
            ], 
            [
                "def test_k_means_n_init():", 
                []
            ], 
            [
                "def test_k_means_explicit_init_shape():", 
                []
            ], 
            [
                "def test_k_means_fortran_aligned_data():", 
                []
            ], 
            [
                "def test_mb_k_means_plus_plus_init_dense_array():", 
                []
            ], 
            [
                "def test_mb_kmeans_verbose():", 
                []
            ], 
            [
                "def test_mb_k_means_plus_plus_init_sparse_matrix():", 
                []
            ], 
            [
                "def test_minibatch_init_with_large_k():", 
                []
            ], 
            [
                "def test_minibatch_k_means_random_init_dense_array():", 
                []
            ], 
            [
                "def test_minibatch_k_means_random_init_sparse_csr():", 
                []
            ], 
            [
                "def test_minibatch_k_means_perfect_init_dense_array():", 
                []
            ], 
            [
                "def test_minibatch_k_means_init_multiple_runs_with_explicit_centers():", 
                []
            ], 
            [
                "def test_minibatch_k_means_perfect_init_sparse_csr():", 
                []
            ], 
            [
                "def test_minibatch_sensible_reassign_fit():", 
                []
            ], 
            [
                "def test_minibatch_sensible_reassign_partial_fit():", 
                []
            ], 
            [
                "def test_minibatch_reassign():", 
                []
            ], 
            [
                "def test_minibatch_with_many_reassignments():", 
                []
            ], 
            [
                "def test_sparse_mb_k_means_callable_init():", 
                []
            ], 
            [
                "def test_init(X, k, random_state):", 
                []
            ], 
            [
                "def test_mini_batch_k_means_random_init_partial_fit():", 
                []
            ], 
            [
                "def test_minibatch_default_init_size():", 
                []
            ], 
            [
                "def test_minibatch_tol():", 
                []
            ], 
            [
                "def test_minibatch_set_init_size():", 
                []
            ], 
            [
                "def test_k_means_invalid_init():", 
                []
            ], 
            [
                "def test_mini_match_k_means_invalid_init():", 
                []
            ], 
            [
                "def test_k_means_copyx():", 
                []
            ], 
            [
                "def test_k_means_non_collapsed():", 
                []
            ], 
            [
                "def test_predict():", 
                []
            ], 
            [
                "def test_score():", 
                []
            ], 
            [
                "def test_predict_minibatch_dense_input():", 
                []
            ], 
            [
                "def test_predict_minibatch_kmeanspp_init_sparse_input():", 
                []
            ], 
            [
                "def test_predict_minibatch_random_init_sparse_input():", 
                []
            ], 
            [
                "def test_int_input():", 
                []
            ], 
            [
                "def test_transform():", 
                []
            ], 
            [
                "def test_fit_transform():", 
                []
            ], 
            [
                "def test_predict_equal_labels():", 
                []
            ], 
            [
                "def test_full_vs_elkan():", 
                []
            ], 
            [
                "def test_n_init():", 
                []
            ], 
            [
                "def test_k_means_function():", 
                []
            ], 
            [
                "def test_x_squared_norms_init_centroids():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_max_iter_error():", 
                []
            ], 
            [
                "def test_float_precision():", 
                []
            ], 
            [
                "def test_k_means_init_centers():", 
                []
            ], 
            [
                "def test_sparse_k_means_init_centers():", 
                []
            ], 
            [
                "def test_sparse_validate_centers():", 
                []
            ]
        ], 
        58
    ], 
    "../scikit-learn-master\\sklearn\\feature_extraction\\tests\\test_feature_hasher.py": [
        [
            [
                "def test_feature_hasher_dicts():", 
                []
            ], 
            [
                "def test_feature_hasher_strings():", 
                []
            ], 
            [
                "def test_feature_hasher_pairs():", 
                []
            ], 
            [
                "def test_feature_hasher_pairs_with_string_values():", 
                []
            ], 
            [
                "def test_hash_empty_input():", 
                []
            ], 
            [
                "def test_hasher_invalid_input():", 
                []
            ], 
            [
                "def test_hasher_set_params():", 
                []
            ], 
            [
                "def test_hasher_zeros():", 
                []
            ], 
            [
                "def test_hasher_alternate_sign():", 
                []
            ], 
            [
                "def test_hash_collisions():", 
                []
            ], 
            [
                "def test_hasher_negative():", 
                []
            ]
        ], 
        11
    ], 
    "../scikit-learn-master\\examples\\decomposition\\plot_kernel_pca.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\svm\\plot_custom_kernel.py": [
        [
            [
                "def my_kernel(X, Y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_class_weight.py": [
        [
            [
                "def test_compute_class_weight():", 
                []
            ], 
            [
                "def test_compute_class_weight_not_present():", 
                []
            ], 
            [
                "def test_compute_class_weight_dict():", 
                []
            ], 
            [
                "def test_compute_class_weight_invariance():", 
                []
            ], 
            [
                "def test_compute_class_weight_balanced_negative():", 
                []
            ], 
            [
                "def test_compute_class_weight_balanced_unordered():", 
                []
            ], 
            [
                "def test_compute_sample_weight():", 
                []
            ], 
            [
                "def test_compute_sample_weight_with_subsample():", 
                []
            ], 
            [
                "def test_compute_sample_weight_errors():", 
                []
            ]
        ], 
        9
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\theil_sen.py": [
        [
            [
                "def _modified_weiszfeld_step(X, x_old):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape = [n_samples, n_features]"
                            ], 
                            [
                                "x_old", 
                                "array, shape = [n_features]"
                            ]
                        ], 
                        [
                            [
                                "x_new", 
                                "array, shape = [n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _spatial_median(X, max_iter=300, tol=1.e-3):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape = [n_samples, n_features]"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ]
                        ], 
                        [
                            [
                                "spatial_median", 
                                "array, shape = [n_features]"
                            ], 
                            [
                                "n_iter", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _breakdown_point(n_samples, n_subsamples):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int"
                            ], 
                            [
                                "n_subsamples", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "breakdown_point", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _lstsq(X, y, indices, fit_intercept):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "indices", 
                                "array, shape = [n_subpopulation, n_subsamples]"
                            ], 
                            [
                                "fit_intercept", 
                                "bool"
                            ]
                        ], 
                        [
                            [
                                "weights", 
                                "array, shape = [n_subpopulation, n_features + intercept]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, fit_intercept=True, copy_X=True,\n                 max_subpopulation=1e4, n_subsamples=None, max_iter=300,\n                 tol=1.e-3, random_state=None, n_jobs=1, verbose=False):", 
                [
                    [
                        [
                            [
                                "fit_intercept", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "max_subpopulation", 
                                "int, optional, default 1e4"
                            ], 
                            [
                                "n_subsamples", 
                                "int, optional, default None"
                            ], 
                            [
                                "max_iter", 
                                "int, optional, default 300"
                            ], 
                            [
                                "tol", 
                                "float, optional, default 1.e-3"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional, default 1"
                            ], 
                            [
                                "verbose", 
                                "boolean, optional, default False"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_subparams(self, n_samples, n_features):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "numpy array of shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "numpy array of shape [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\examples\\mixture\\plot_gmm_selection.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\utils\\class_weight.py": [
        [
            [
                "def compute_class_weight(class_weight, classes, y):", 
                [
                    [
                        [
                            [
                                "class_weight", 
                                "dict, 'balanced' or None"
                            ], 
                            [
                                "classes", 
                                "ndarray"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "class_weight_vect", 
                                "ndarray, shape (n_classes,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def compute_sample_weight(class_weight, y, indices=None):", 
                [
                    [
                        [
                            [
                                "class_weight", 
                                "dict, list of dicts, \"balanced\", or None, optional"
                            ], 
                            [
                                "data", 
                                ""
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_outputs]"
                            ], 
                            [
                                "indices", 
                                "array-like, shape (n_subsample,), or None"
                            ]
                        ], 
                        [
                            [
                                "sample_weight_vect", 
                                "ndarray, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\randomized_l1.py": [
        [
            [
                "def _resample_model(estimator_func, X, y, scaling=.5, n_resampling=200,\n                    n_jobs=1, verbose=False, pre_dispatch='3*n_jobs',\n                    random_state=None, sample_fraction=.75, **params):", 
                []
            ], 
            [
                "def __init__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _make_estimator_and_params(self, X, y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _get_support_mask(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "support", 
                                "boolean array of shape [# input features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _randomized_lasso(X, y, weights, mask, alpha=1., verbose=False,\n                      precompute=False, eps=np.finfo(np.float).eps,\n                      max_iter=500):", 
                []
            ], 
            [
                "def __init__(self, alpha='aic', scaling=.5, sample_fraction=.75,\n                 n_resampling=200, selection_threshold=.25,\n                 fit_intercept=True, verbose=False,\n                 normalize=True, precompute='auto',\n                 max_iter=500,\n                 eps=np.finfo(np.float).eps, random_state=None,\n                 n_jobs=1, pre_dispatch='3*n_jobs',\n                 memory=None):", 
                [
                    [
                        [
                            [
                                "alpha", 
                                "float, 'aic', or 'bic', optional"
                            ], 
                            [
                                "Warning", 
                                "this is not the alpha parameter in the stability selection"
                            ], 
                            [
                                "scaling", 
                                "float, optional"
                            ], 
                            [
                                "sample_fraction", 
                                "float, optional"
                            ], 
                            [
                                "n_resampling", 
                                "int, optional"
                            ], 
                            [
                                "selection_threshold", 
                                "float, optional"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean, optional"
                            ], 
                            [
                                "verbose", 
                                "boolean or integer, optional"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "precompute", 
                                "True | False | 'auto' | array-like"
                            ], 
                            [
                                "max_iter", 
                                "integer, optional"
                            ], 
                            [
                                "eps", 
                                "float, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "pre_dispatch", 
                                "int, or string, optional"
                            ], 
                            [
                                "be", 
                                ""
                            ], 
                            [
                                "memory", 
                                "None, str or object with the joblib.Memory interface, optional \\"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _make_estimator_and_params(self, X, y):", 
                []
            ], 
            [
                "def _randomized_logistic(X, y, weights, mask, C=1., verbose=False,\n                         fit_intercept=True, tol=1e-3):", 
                []
            ], 
            [
                "def __init__(self, C=1, scaling=.5, sample_fraction=.75,\n                 n_resampling=200,\n                 selection_threshold=.25, tol=1e-3,\n                 fit_intercept=True, verbose=False,\n                 normalize=True,\n                 random_state=None,\n                 n_jobs=1, pre_dispatch='3*n_jobs',\n                 memory=None):", 
                [
                    [
                        [
                            [
                                "C", 
                                "float or array-like of shape [n_reg_parameter], optional, default=1"
                            ], 
                            [
                                "scaling", 
                                "float, optional, default=0.5"
                            ], 
                            [
                                "sample_fraction", 
                                "float, optional, default=0.75"
                            ], 
                            [
                                "n_resampling", 
                                "int, optional, default=200"
                            ], 
                            [
                                "selection_threshold", 
                                "float, optional, default=0.25"
                            ], 
                            [
                                "tol", 
                                "float, optional, default=1e-3"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean, optional, default=True"
                            ], 
                            [
                                "verbose", 
                                "boolean or integer, optional"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "pre_dispatch", 
                                "int, or string, optional"
                            ], 
                            [
                                "be", 
                                ""
                            ], 
                            [
                                "memory", 
                                "None, str or object with the joblib.Memory interface, optional \\"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _make_estimator_and_params(self, X, y):", 
                []
            ], 
            [
                "def _preprocess_data(self, X, y, fit_intercept, normalize=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _lasso_stability_path(X, y, mask, weights, eps):", 
                []
            ], 
            [
                "def lasso_stability_path(X, y, scaling=0.5, random_state=None,\n                         n_resampling=200, n_grid=100,\n                         sample_fraction=0.75,\n                         eps=4 * np.finfo(np.float).eps, n_jobs=1,\n                         verbose=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples]"
                            ], 
                            [
                                "scaling", 
                                "float, optional, default=0.5"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default=None"
                            ], 
                            [
                                "n_resampling", 
                                "int, optional, default=200"
                            ], 
                            [
                                "n_grid", 
                                "int, optional, default=100"
                            ], 
                            [
                                "sample_fraction", 
                                "float, optional, default=0.75"
                            ], 
                            [
                                "eps", 
                                "float, optional"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "verbose", 
                                "boolean or integer, optional"
                            ]
                        ], 
                        [
                            [
                                "alphas_grid", 
                                "array, shape ~ [n_grid]"
                            ], 
                            [
                                "scores_path", 
                                "array, shape = [n_features, n_grid]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        14
    ], 
    "../scikit-learn-master\\examples\\gaussian_process\\plot_compare_gpr_krr.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\applications\\svm_gui.py": [
        [
            [
                "def __init__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def changed(self, event):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def add_observer(self, observer):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def set_surface(self, surface):", 
                []
            ], 
            [
                "def dump_svmlight_file(self, file):", 
                []
            ], 
            [
                "def __init__(self, model):", 
                []
            ], 
            [
                "def fit(self):", 
                []
            ], 
            [
                "def decision_surface(self, cls):", 
                []
            ], 
            [
                "def clear_data(self):", 
                []
            ], 
            [
                "def add_example(self, x, y, label):", 
                []
            ], 
            [
                "def refit(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, root, controller):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def plot_kernels(self):", 
                []
            ], 
            [
                "def onclick(self, event):", 
                []
            ], 
            [
                "def update_example(self, model, idx):", 
                []
            ], 
            [
                "def update(self, event, model):", 
                []
            ], 
            [
                "def remove_surface(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def plot_support_vectors(self, support_vectors):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def plot_decision_surface(self, surface, type):", 
                []
            ], 
            [
                "def __init__(self, root, controller):", 
                []
            ], 
            [
                "def get_parser():", 
                []
            ], 
            [
                "def main(argv):", 
                []
            ]
        ], 
        22
    ], 
    "../scikit-learn-master\\sklearn\\setup.py": [
        [
            [
                "def configuration(parent_package='', top_path=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\neural_network\\_base.py": [
        [
            [
                "def identity(X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def logistic(X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def tanh(X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def relu(X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def softmax(X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def inplace_identity_derivative(Z, delta):", 
                [
                    [
                        [
                            [
                                "Z", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "delta", 
                                "{array-like}, shape (n_samples, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def inplace_logistic_derivative(Z, delta):", 
                [
                    [
                        [
                            [
                                "Z", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "delta", 
                                "{array-like}, shape (n_samples, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def inplace_tanh_derivative(Z, delta):", 
                [
                    [
                        [
                            [
                                "Z", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "delta", 
                                "{array-like}, shape (n_samples, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def inplace_relu_derivative(Z, delta):", 
                [
                    [
                        [
                            [
                                "Z", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "delta", 
                                "{array-like}, shape (n_samples, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def squared_loss(y_true, y_pred):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array-like or label indicator matrix"
                            ], 
                            [
                                "y_pred", 
                                "array-like or label indicator matrix"
                            ]
                        ], 
                        [
                            [
                                "loss", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def log_loss(y_true, y_prob):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array-like or label indicator matrix"
                            ], 
                            [
                                "y_prob", 
                                "array-like of float, shape = (n_samples, n_classes)"
                            ]
                        ], 
                        [
                            [
                                "loss", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def binary_log_loss(y_true, y_prob):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array-like or label indicator matrix"
                            ], 
                            [
                                "y_prob", 
                                "array-like of float, shape = (n_samples, n_classes)"
                            ]
                        ], 
                        [
                            [
                                "loss", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        12
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_init.py": [
        [
            [
                "def test_import_skl():", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\tests\\test_ransac.py": [
        [
            [
                "def test_ransac_inliers_outliers():", 
                []
            ], 
            [
                "def test_ransac_is_data_valid():", 
                []
            ], 
            [
                "def is_data_valid(X, y):", 
                []
            ], 
            [
                "def test_ransac_is_model_valid():", 
                []
            ], 
            [
                "def is_model_valid(estimator, X, y):", 
                []
            ], 
            [
                "def test_ransac_max_trials():", 
                []
            ], 
            [
                "def test_ransac_stop_n_inliers():", 
                []
            ], 
            [
                "def test_ransac_stop_score():", 
                []
            ], 
            [
                "def test_ransac_score():", 
                []
            ], 
            [
                "def test_ransac_predict():", 
                []
            ], 
            [
                "def test_ransac_resid_thresh_no_inliers():", 
                []
            ], 
            [
                "def test_ransac_no_valid_data():", 
                []
            ], 
            [
                "def is_data_valid(X, y):", 
                []
            ], 
            [
                "def test_ransac_no_valid_model():", 
                []
            ], 
            [
                "def is_model_valid(estimator, X, y):", 
                []
            ], 
            [
                "def test_ransac_exceed_max_skips():", 
                []
            ], 
            [
                "def is_data_valid(X, y):", 
                []
            ], 
            [
                "def test_ransac_warn_exceed_max_skips():", 
                []
            ], 
            [
                "def is_data_valid(X, y):", 
                []
            ], 
            [
                "def test_ransac_sparse_coo():", 
                []
            ], 
            [
                "def test_ransac_sparse_csr():", 
                []
            ], 
            [
                "def test_ransac_sparse_csc():", 
                []
            ], 
            [
                "def test_ransac_none_estimator():", 
                []
            ], 
            [
                "def test_ransac_min_n_samples():", 
                []
            ], 
            [
                "def test_ransac_multi_dimensional_targets():", 
                []
            ], 
            [
                "def test_ransac_residual_metric():", 
                []
            ], 
            [
                "def test_ransac_residual_loss():", 
                []
            ], 
            [
                "def test_ransac_default_residual_threshold():", 
                []
            ], 
            [
                "def test_ransac_dynamic_max_trials():", 
                []
            ], 
            [
                "def test_ransac_fit_sample_weight():", 
                []
            ]
        ], 
        30
    ], 
    "../scikit-learn-master\\sklearn\\gaussian_process\\gaussian_process.py": [
        [
            [
                "def l1_cross_distances(X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like"
                            ]
                        ], 
                        [
                            [
                                "D", 
                                "array with shape (n_samples * (n_samples - 1) / 2, n_features)"
                            ], 
                            [
                                "ij", 
                                "arrays with shape (n_samples * (n_samples - 1) / 2, 2)"
                            ], 
                            [
                                "D", 
                                "D[k] = np.abs(X[ij[k, 0]] - Y[ij[k, 1]])."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, regr='constant', corr='squared_exponential', beta0=None,\n                 storage_mode='full', verbose=False, theta0=1e-1,\n                 thetaL=None, thetaU=None, optimizer='fmin_cobyla',\n                 random_start=1, normalize=True,\n                 nugget=10. * MACHINE_EPSILON, random_state=None):", 
                [
                    [
                        [
                            [
                                "regr", 
                                "string or callable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "corr", 
                                "string or callable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "beta0", 
                                "double array_like, optional"
                            ], 
                            [
                                "storage_mode", 
                                "string, optional"
                            ], 
                            [
                                "verbose", 
                                "boolean, optional"
                            ], 
                            [
                                "theta0", 
                                "double array_like, optional"
                            ], 
                            [
                                "thetaL", 
                                "double array_like, optional"
                            ], 
                            [
                                "thetaU", 
                                "double array_like, optional"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional"
                            ], 
                            [
                                "nugget", 
                                "double or ndarray, optional"
                            ], 
                            [
                                "optimizer", 
                                "string, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "random_start", 
                                "int, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "double array_like"
                            ], 
                            [
                                "y", 
                                "double array_like"
                            ]
                        ], 
                        [
                            [
                                "gp", 
                                "self"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X, eval_MSE=False, batch_size=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like"
                            ], 
                            [
                                "eval_MSE", 
                                "boolean, optional"
                            ], 
                            [
                                "batch_size", 
                                "integer, optional"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array_like, shape (n_samples, ) or (n_samples, n_targets)"
                            ], 
                            [
                                "MSE", 
                                "array_like, optional (if eval_MSE == True)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def reduced_likelihood_function(self, theta=None):", 
                [
                    [
                        [
                            [
                                "theta", 
                                "array_like, optional"
                            ]
                        ], 
                        [
                            [
                                "reduced_likelihood_function_value", 
                                "double"
                            ], 
                            [
                                "par", 
                                "dict"
                            ], 
                            [
                                "parameters", 
                                ""
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _arg_max_reduced_likelihood_function(self):", 
                [
                    [
                        [
                            [
                                "self", 
                                "All parameters are stored in the Gaussian Process model object."
                            ]
                        ], 
                        [
                            [
                                "optimal_theta", 
                                "array_like"
                            ], 
                            [
                                "optimal_reduced_likelihood_function_value", 
                                "double"
                            ], 
                            [
                                "optimal_par", 
                                "dict"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def minus_reduced_likelihood_function(log10t):", 
                []
            ], 
            [
                "def corr_cut(t, d):", 
                []
            ], 
            [
                "def _check_params(self, n_samples=None):", 
                []
            ]
        ], 
        9
    ], 
    "../scikit-learn-master\\examples\\calibration\\plot_calibration_multiclass.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\gaussian_process\\plot_gpr_noisy.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\classification\\plot_lda_qda.py": [
        [
            [
                "def dataset_fixed_cov():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def dataset_cov():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def plot_data(lda, X, y, y_pred, fig_index):", 
                []
            ], 
            [
                "def plot_ellipse(splot, mean, cov, color):", 
                []
            ], 
            [
                "def plot_lda_cov(lda, splot):", 
                []
            ], 
            [
                "def plot_qda_cov(qda, splot):", 
                []
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\ridge.py": [
        [
            [
                "def _solve_sparse_cg(X, y, alpha, max_iter=None, tol=1e-3, verbose=0):", 
                []
            ], 
            [
                "def create_mv(curr_alpha):", 
                []
            ], 
            [
                "def _mv(x):", 
                []
            ], 
            [
                "def create_mv(curr_alpha):", 
                []
            ], 
            [
                "def _mv(x):", 
                []
            ], 
            [
                "def _solve_lsqr(X, y, alpha, max_iter=None, tol=1e-3):", 
                []
            ], 
            [
                "def _solve_cholesky(X, y, alpha):", 
                []
            ], 
            [
                "def _solve_cholesky_kernel(K, y, alpha, sample_weight=None, copy=False):", 
                []
            ], 
            [
                "def _solve_svd(X, y, alpha):", 
                []
            ], 
            [
                "def ridge_regression(X, y, alpha, sample_weight=None, solver='auto',\n                     max_iter=None, tol=1e-3, verbose=0, random_state=None,\n                     return_n_iter=False, return_intercept=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix, LinearOperator},"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_targets]"
                            ], 
                            [
                                "alpha", 
                                "{float, array-like},"
                            ], 
                            [
                                "sample_weight", 
                                "float or numpy array of shape [n_samples]"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "solver", 
                                "{'auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga'}"
                            ], 
                            [
                                "routines", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "verbose", 
                                "int"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ], 
                            [
                                "return_n_iter", 
                                "boolean, default False"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "return_intercept", 
                                "boolean, default False"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "coef", 
                                "array, shape = [n_features] or [n_targets, n_features]"
                            ], 
                            [
                                "n_iter", 
                                "int, optional"
                            ], 
                            [
                                "intercept", 
                                "float or array, shape = [n_targets]"
                            ]
                        ]
                    ], 
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, alpha=1.0, fit_intercept=True, normalize=False,\n                 copy_X=True, max_iter=None, tol=1e-3, solver=\"auto\",\n                 random_state=None):", 
                []
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                []
            ], 
            [
                "def __init__(self, alpha=1.0, fit_intercept=True, normalize=False,\n                 copy_X=True, max_iter=None, tol=1e-3, solver=\"auto\",\n                 random_state=None):", 
                [
                    [
                        [
                            [
                                "alpha", 
                                "{float, array-like}, shape (n_targets)"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "solver", 
                                "{'auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga'}"
                            ], 
                            [
                                "routines", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_targets]"
                            ], 
                            [
                                "sample_weight", 
                                "float or numpy array of shape [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, alpha=1.0, fit_intercept=True, normalize=False,\n                 copy_X=True, max_iter=None, tol=1e-3, class_weight=None,\n                 solver=\"auto\", random_state=None):", 
                [
                    [
                        [
                            [
                                "alpha", 
                                "float"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "class_weight", 
                                "dict or 'balanced', optional"
                            ], 
                            [
                                "solver", 
                                "{'auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga'}"
                            ], 
                            [
                                "routines", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples,n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples]"
                            ], 
                            [
                                "sample_weight", 
                                "float or numpy array of shape (n_samples,)"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def classes_(self):", 
                []
            ], 
            [
                "def __init__(self, alphas=(0.1, 1.0, 10.0),\n                 fit_intercept=True, normalize=False,\n                 scoring=None, copy_X=True,\n                 gcv_mode=None, store_cv_values=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _pre_compute(self, X, y, centered_kernel=True):", 
                []
            ], 
            [
                "def _decomp_diag(self, v_prime, Q):", 
                []
            ], 
            [
                "def _diag_dot(self, D, B):", 
                []
            ], 
            [
                "def _errors_and_values_helper(self, alpha, y, v, Q, QT_y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _errors(self, alpha, y, v, Q, QT_y):", 
                []
            ], 
            [
                "def _values(self, alpha, y, v, Q, QT_y):", 
                []
            ], 
            [
                "def _pre_compute_svd(self, X, y, centered_kernel=True):", 
                []
            ], 
            [
                "def _errors_and_values_svd_helper(self, alpha, y, v, U, UT_y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _errors_svd(self, alpha, y, v, U, UT_y):", 
                []
            ], 
            [
                "def _values_svd(self, alpha, y, v, U, UT_y):", 
                []
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_targets]"
                            ], 
                            [
                                "sample_weight", 
                                "float or array-like of shape [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "Returns self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def identity_estimator():", 
                []
            ], 
            [
                "def __init__(self, alphas=(0.1, 1.0, 10.0),\n                 fit_intercept=True, normalize=False, scoring=None,\n                 cv=None, gcv_mode=None,\n                 store_cv_values=False):", 
                []
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_targets]"
                            ], 
                            [
                                "sample_weight", 
                                "float or array-like of shape [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "Returns self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None):", 
                [
                    [
                        [
                            [
                                "alphas", 
                                "numpy array of shape [n_alphas]"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "scoring", 
                                "string, callable or None, optional, default"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "class_weight", 
                                "dict or 'balanced', optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "sample_weight", 
                                "float or numpy array of shape (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def classes_(self):", 
                []
            ]
        ], 
        35
    ], 
    "../scikit-learn-master\\examples\\gaussian_process\\plot_gpc_isoprobability.py": [
        [
            [
                "def g(x):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\coordinate_descent.py": [
        [
            [
                "def _alpha_grid(X, y, Xy=None, l1_ratio=1.0, fit_intercept=True,\n                eps=1e-3, n_alphas=100, normalize=False, copy_X=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "ndarray, shape (n_samples,)"
                            ], 
                            [
                                "Xy", 
                                "array-like, optional"
                            ], 
                            [
                                "l1_ratio", 
                                "float"
                            ], 
                            [
                                "eps", 
                                "float, optional"
                            ], 
                            [
                                "n_alphas", 
                                "int, optional"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean, default True"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def lasso_path(X, y, eps=1e-3, n_alphas=100, alphas=None,\n               precompute='auto', Xy=None, copy_X=True, coef_init=None,\n               verbose=False, return_n_iter=False, positive=False, **params):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "ndarray, shape (n_samples,), or (n_samples, n_outputs)"
                            ], 
                            [
                                "eps", 
                                "float, optional"
                            ], 
                            [
                                "n_alphas", 
                                "int, optional"
                            ], 
                            [
                                "alphas", 
                                "ndarray, optional"
                            ], 
                            [
                                "precompute", 
                                "True | False | 'auto' | array-like"
                            ], 
                            [
                                "Xy", 
                                "array-like, optional"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "coef_init", 
                                "array, shape (n_features, ) | None"
                            ], 
                            [
                                "verbose", 
                                "bool or integer"
                            ], 
                            [
                                "return_n_iter", 
                                "bool"
                            ], 
                            [
                                "positive", 
                                "bool, default False"
                            ]
                        ], 
                        [
                            [
                                "alphas", 
                                "array, shape (n_alphas,)"
                            ], 
                            [
                                "coefs", 
                                "array, shape (n_features, n_alphas) or \\"
                            ], 
                            [
                                "dual_gaps", 
                                "array, shape (n_alphas,)"
                            ], 
                            [
                                "n_iters", 
                                "array-like, shape (n_alphas,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def enet_path(X, y, l1_ratio=0.5, eps=1e-3, n_alphas=100, alphas=None,\n              precompute='auto', Xy=None, copy_X=True, coef_init=None,\n              verbose=False, return_n_iter=False, positive=False,\n              check_input=True, **params):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "ndarray, shape (n_samples,) or (n_samples, n_outputs)"
                            ], 
                            [
                                "l1_ratio", 
                                "float, optional"
                            ], 
                            [
                                "eps", 
                                "float"
                            ], 
                            [
                                "n_alphas", 
                                "int, optional"
                            ], 
                            [
                                "alphas", 
                                "ndarray, optional"
                            ], 
                            [
                                "precompute", 
                                "True | False | 'auto' | array-like"
                            ], 
                            [
                                "Xy", 
                                "array-like, optional"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "coef_init", 
                                "array, shape (n_features, ) | None"
                            ], 
                            [
                                "verbose", 
                                "bool or integer"
                            ], 
                            [
                                "return_n_iter", 
                                "bool"
                            ], 
                            [
                                "positive", 
                                "bool, default False"
                            ], 
                            [
                                "check_input", 
                                "bool, default True"
                            ]
                        ], 
                        [
                            [
                                "alphas", 
                                "array, shape (n_alphas,)"
                            ], 
                            [
                                "coefs", 
                                "array, shape (n_features, n_alphas) or \\"
                            ], 
                            [
                                "dual_gaps", 
                                "array, shape (n_alphas,)"
                            ], 
                            [
                                "n_iters", 
                                "array-like, shape (n_alphas,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, alpha=1.0, l1_ratio=0.5, fit_intercept=True,\n                 normalize=False, precompute=False, max_iter=1000,\n                 copy_X=True, tol=1e-4, warm_start=False, positive=False,\n                 random_state=None, selection='cyclic'):", 
                [
                    [
                        [
                            [
                                "alpha", 
                                "float, optional"
                            ], 
                            [
                                "the", 
                                "class"
                            ], 
                            [
                                "the", 
                                "class"
                            ], 
                            [
                                "l1_ratio", 
                                "float"
                            ], 
                            [
                                "fit_intercept", 
                                "bool"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "precompute", 
                                "True | False | array-like"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "optimization", 
                                "if the updates are"
                            ], 
                            [
                                "warm_start", 
                                "bool, optional"
                            ], 
                            [
                                "positive", 
                                "bool, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ], 
                            [
                                "selection", 
                                "str, default 'cyclic'"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, check_input=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray or scipy.sparse matrix, (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "ndarray, shape (n_samples,) or (n_samples, n_targets)"
                            ], 
                            [
                                "check_input", 
                                "boolean, (default=True)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def sparse_coef_(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "numpy array or scipy.sparse matrix of shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "T", 
                                "array, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, alpha=1.0, fit_intercept=True, normalize=False,\n                 precompute=False, copy_X=True, max_iter=1000,\n                 tol=1e-4, warm_start=False, positive=False,\n                 random_state=None, selection='cyclic'):", 
                [
                    [
                        [
                            [
                                "alpha", 
                                "float, optional"
                            ], 
                            [
                                "the", 
                                "class"
                            ], 
                            [
                                "the", 
                                "class"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "precompute", 
                                "True | False | array-like, default=False"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "optimization", 
                                "if the updates are"
                            ], 
                            [
                                "warm_start", 
                                "bool, optional"
                            ], 
                            [
                                "positive", 
                                "bool, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ], 
                            [
                                "selection", 
                                "str, default 'cyclic'"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _path_residuals(X, y, train, test, path, path_params, alphas=None,\n                    l1_ratio=1, X_order=None, dtype=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,) or (n_samples, n_targets)"
                            ], 
                            [
                                "train", 
                                "list of indices"
                            ], 
                            [
                                "test", 
                                "list of indices"
                            ], 
                            [
                                "path", 
                                "callable"
                            ], 
                            [
                                "path_params", 
                                "dictionary"
                            ], 
                            [
                                "alphas", 
                                "array-like, optional"
                            ], 
                            [
                                "l1_ratio", 
                                "float, optional"
                            ], 
                            [
                                "X_order", 
                                "{'F', 'C', or None}, optional"
                            ], 
                            [
                                "dtype", 
                                "a numpy dtype or None"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,) or (n_samples, n_targets)"
                            ], 
                            [
                                "train", 
                                "list of indices"
                            ], 
                            [
                                "test", 
                                "list of indices"
                            ], 
                            [
                                "path", 
                                "callable"
                            ], 
                            [
                                "path_params", 
                                "dictionary"
                            ], 
                            [
                                "alphas", 
                                "array-like, optional"
                            ], 
                            [
                                "l1_ratio", 
                                "float, optional"
                            ], 
                            [
                                "X_order", 
                                "{'F', 'C', or None}, optional"
                            ], 
                            [
                                "dtype", 
                                "a numpy dtype or None"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, eps=1e-3, n_alphas=100, alphas=None, fit_intercept=True,\n                 normalize=False, precompute='auto', max_iter=1000, tol=1e-4,\n                 copy_X=True, cv=None, verbose=False, n_jobs=1,\n                 positive=False, random_state=None, selection='cyclic'):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,) or (n_samples, n_targets)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, eps=1e-3, n_alphas=100, alphas=None, fit_intercept=True,\n                 normalize=False, precompute='auto', max_iter=1000, tol=1e-4,\n                 copy_X=True, cv=None, verbose=False, n_jobs=1,\n                 positive=False, random_state=None, selection='cyclic'):", 
                [
                    [
                        [
                            [
                                "eps", 
                                "float, optional"
                            ], 
                            [
                                "n_alphas", 
                                "int, optional"
                            ], 
                            [
                                "alphas", 
                                "numpy array, optional"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean, default True"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "precompute", 
                                "True | False | 'auto' | array-like"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "optimization", 
                                "if the updates are"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "verbose", 
                                "bool or integer"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "positive", 
                                "bool, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ], 
                            [
                                "selection", 
                                "str, default 'cyclic'"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, l1_ratio=0.5, eps=1e-3, n_alphas=100, alphas=None,\n                 fit_intercept=True, normalize=False, precompute='auto',\n                 max_iter=1000, tol=1e-4, cv=None, copy_X=True,\n                 verbose=0, n_jobs=1, positive=False, random_state=None,\n                 selection='cyclic'):", 
                [
                    [
                        [
                            [
                                "l1_ratio", 
                                "float or array of floats, optional"
                            ], 
                            [
                                "eps", 
                                "float, optional"
                            ], 
                            [
                                "n_alphas", 
                                "int, optional"
                            ], 
                            [
                                "alphas", 
                                "numpy array, optional"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "precompute", 
                                "True | False | 'auto' | array-like"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "optimization", 
                                "if the updates are"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "verbose", 
                                "bool or integer"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "positive", 
                                "bool, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ], 
                            [
                                "selection", 
                                "str, default 'cyclic'"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, alpha=1.0, l1_ratio=0.5, fit_intercept=True,\n                 normalize=False, copy_X=True, max_iter=1000, tol=1e-4,\n                 warm_start=False, random_state=None, selection='cyclic'):", 
                [
                    [
                        [
                            [
                                "alpha", 
                                "float, optional"
                            ], 
                            [
                                "l1_ratio", 
                                "float"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "optimization", 
                                "if the updates are"
                            ], 
                            [
                                "warm_start", 
                                "bool, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ], 
                            [
                                "selection", 
                                "str, default 'cyclic'"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "ndarray, shape (n_samples, n_tasks)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, alpha=1.0, fit_intercept=True, normalize=False,\n                 copy_X=True, max_iter=1000, tol=1e-4, warm_start=False,\n                 random_state=None, selection='cyclic'):", 
                [
                    [
                        [
                            [
                                "alpha", 
                                "float, optional"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "optimization", 
                                "if the updates are"
                            ], 
                            [
                                "warm_start", 
                                "bool, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ], 
                            [
                                "selection", 
                                "str, default 'cyclic'"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, l1_ratio=0.5, eps=1e-3, n_alphas=100, alphas=None,\n                 fit_intercept=True, normalize=False,\n                 max_iter=1000, tol=1e-4, cv=None, copy_X=True,\n                 verbose=0, n_jobs=1, random_state=None, selection='cyclic'):", 
                [
                    [
                        [
                            [
                                "l1_ratio", 
                                "float or array of floats"
                            ], 
                            [
                                "eps", 
                                "float, optional"
                            ], 
                            [
                                "n_alphas", 
                                "int, optional"
                            ], 
                            [
                                "alphas", 
                                "array-like, optional"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "optimization", 
                                "if the updates are"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "verbose", 
                                "bool or integer"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ], 
                            [
                                "selection", 
                                "str, default 'cyclic'"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, eps=1e-3, n_alphas=100, alphas=None, fit_intercept=True,\n                 normalize=False, max_iter=1000, tol=1e-4, copy_X=True,\n                 cv=None, verbose=False, n_jobs=1, random_state=None,\n                 selection='cyclic'):", 
                [
                    [
                        [
                            [
                                "eps", 
                                "float, optional"
                            ], 
                            [
                                "n_alphas", 
                                "int, optional"
                            ], 
                            [
                                "alphas", 
                                "array-like, optional"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "optimization", 
                                "if the updates are"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "verbose", 
                                "bool or integer"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ], 
                            [
                                "selection", 
                                "str, default 'cyclic'"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        18
    ], 
    "../scikit-learn-master\\sklearn\\manifold\\setup.py": [
        [
            [
                "def configuration(parent_package=\"\", top_path=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\tests\\test_bayes.py": [
        [
            [
                "def test_bayesian_on_diabetes():", 
                []
            ], 
            [
                "def test_bayesian_ridge_parameter():", 
                []
            ], 
            [
                "def test_toy_bayesian_ridge_object():", 
                []
            ], 
            [
                "def test_toy_ard_object():", 
                []
            ], 
            [
                "def test_return_std():", 
                []
            ], 
            [
                "def f(X):", 
                []
            ], 
            [
                "def f_noise(X, noise_mult):", 
                []
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\tests\\test_randomized_l1.py": [
        [
            [
                "def test_lasso_stability_path():", 
                []
            ], 
            [
                "def test_randomized_lasso_error_memory():", 
                []
            ], 
            [
                "def test_randomized_lasso():", 
                []
            ], 
            [
                "def test_randomized_lasso_precompute():", 
                []
            ], 
            [
                "def test_randomized_logistic():", 
                []
            ], 
            [
                "def test_randomized_logistic_sparse():", 
                []
            ], 
            [
                "def test_warning_raised():", 
                []
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\benchmarks\\bench_mnist.py": [
        [
            [
                "def load_data(dtype=np.float32, order='F'):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_voting_probas.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\tests\\test_factor_analysis.py": [
        [
            [
                "def test_factor_analysis():", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\tests\\test_classification.py": [
        [
            [
                "def make_prediction(dataset=None, binary=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_multilabel_accuracy_score_subset_accuracy():", 
                []
            ], 
            [
                "def test_precision_recall_f1_score_binary():", 
                []
            ], 
            [
                "def test_precision_recall_f_binary_single_class():", 
                []
            ], 
            [
                "def test_precision_recall_f_extra_labels():", 
                []
            ], 
            [
                "def test_precision_recall_f_ignored_labels():", 
                []
            ], 
            [
                "def test_average_precision_score_score_non_binary_class():", 
                []
            ], 
            [
                "def test_average_precision_score_duplicate_values():", 
                []
            ], 
            [
                "def test_average_precision_score_tied_values():", 
                []
            ], 
            [
                "def test_precision_recall_fscore_support_errors():", 
                []
            ], 
            [
                "def test_precision_recall_f_unused_pos_label():", 
                []
            ], 
            [
                "def test_confusion_matrix_binary():", 
                []
            ], 
            [
                "def test(y_true, y_pred):", 
                []
            ], 
            [
                "def test_cohen_kappa():", 
                []
            ], 
            [
                "def test_matthews_corrcoef_nan():", 
                []
            ], 
            [
                "def test_matthews_corrcoef_against_numpy_corrcoef():", 
                []
            ], 
            [
                "def test_matthews_corrcoef_against_jurman():", 
                []
            ], 
            [
                "def test_matthews_corrcoef():", 
                []
            ], 
            [
                "def test_matthews_corrcoef_multiclass():", 
                []
            ], 
            [
                "def test_matthews_corrcoef_overflow():", 
                []
            ], 
            [
                "def mcc_safe(y_true, y_pred):", 
                []
            ], 
            [
                "def random_ys(n_points):", 
                []
            ], 
            [
                "def test_precision_recall_f1_score_multiclass():", 
                []
            ], 
            [
                "def test_precision_refcall_f1_score_multilabel_unordered_labels():", 
                []
            ], 
            [
                "def test_precision_recall_f1_score_binary_averaged():", 
                []
            ], 
            [
                "def test_zero_precision_recall():", 
                []
            ], 
            [
                "def test_confusion_matrix_multiclass():", 
                []
            ], 
            [
                "def test(y_true, y_pred, string_type=False):", 
                []
            ], 
            [
                "def test_confusion_matrix_sample_weight():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_confusion_matrix_multiclass_subset_labels():", 
                []
            ], 
            [
                "def test_confusion_matrix_dtype():", 
                []
            ], 
            [
                "def test_classification_report_multiclass():", 
                [
                    [
                        null, 
                        null
                    ], 
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_classification_report_multiclass_with_digits():", 
                [
                    [
                        null, 
                        null
                    ], 
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_classification_report_multiclass_with_string_label():", 
                [
                    [
                        null, 
                        null
                    ], 
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_classification_report_multiclass_with_unicode_label():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_classification_report_multiclass_with_long_string_label():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_classification_report_labels_target_names_unequal_length():", 
                []
            ], 
            [
                "def test_multilabel_classification_report():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_multilabel_zero_one_loss_subset():", 
                []
            ], 
            [
                "def test_multilabel_hamming_loss():", 
                []
            ], 
            [
                "def test_multilabel_jaccard_similarity_score():", 
                []
            ], 
            [
                "def test_precision_recall_f1_score_multilabel_1():", 
                []
            ], 
            [
                "def test_precision_recall_f1_score_multilabel_2():", 
                []
            ], 
            [
                "def test_precision_recall_f1_score_with_an_empty_prediction():", 
                []
            ], 
            [
                "def test_precision_recall_f1_no_labels():", 
                []
            ], 
            [
                "def test_prf_warnings():", 
                []
            ], 
            [
                "def test_recall_warnings():", 
                []
            ], 
            [
                "def test_precision_warnings():", 
                []
            ], 
            [
                "def test_fscore_warnings():", 
                []
            ], 
            [
                "def test_prf_average_binary_data_non_binary():", 
                []
            ], 
            [
                "def test__check_targets():", 
                []
            ], 
            [
                "def test__check_targets_multiclass_with_both_y_true_and_y_pred_binary():", 
                []
            ], 
            [
                "def test_hinge_loss_binary():", 
                []
            ], 
            [
                "def test_hinge_loss_multiclass():", 
                []
            ], 
            [
                "def test_hinge_loss_multiclass_missing_labels_with_labels_none():", 
                []
            ], 
            [
                "def test_hinge_loss_multiclass_with_missing_labels():", 
                []
            ], 
            [
                "def test_hinge_loss_multiclass_invariance_lists():", 
                []
            ], 
            [
                "def test_log_loss():", 
                []
            ], 
            [
                "def test_log_loss_pandas_input():", 
                []
            ], 
            [
                "def test_brier_score_loss():", 
                []
            ]
        ], 
        60
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\tests\\test_kde.py": [
        [
            [
                "def compute_kernel_slow(Y, X, kernel, h):", 
                []
            ], 
            [
                "def check_results(kernel, bandwidth, atol, rtol, X, Y, dens_true):", 
                []
            ], 
            [
                "def test_kernel_density(n_samples=100, n_features=3):", 
                []
            ], 
            [
                "def test_kernel_density_sampling(n_samples=100, n_features=3):", 
                []
            ], 
            [
                "def test_kde_algorithm_metric_choice():", 
                []
            ], 
            [
                "def test_kde_score(n_samples=100, n_features=3):", 
                []
            ], 
            [
                "def test_kde_badargs():", 
                []
            ], 
            [
                "def test_kde_pipeline_gridsearch():", 
                []
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\sklearn\\covariance\\graph_lasso_.py": [
        [
            [
                "def _objective(mle, precision_, alpha):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _dual_gap(emp_cov, precision_, alpha):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def alpha_max(emp_cov):", 
                [
                    [
                        [
                            [
                                "emp_cov", 
                                "2D array, (n_features, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def graph_lasso(emp_cov, alpha, cov_init=None, mode='cd', tol=1e-4,\n                enet_tol=1e-4, max_iter=100, verbose=False,\n                return_costs=False, eps=np.finfo(np.float64).eps,\n                return_n_iter=False):", 
                [
                    [
                        [
                            [
                                "emp_cov", 
                                "2D ndarray, shape (n_features, n_features)"
                            ], 
                            [
                                "alpha", 
                                "positive float"
                            ], 
                            [
                                "parameter", 
                                "the higher alpha, the more"
                            ], 
                            [
                                "cov_init", 
                                "2D array (n_features, n_features), optional"
                            ], 
                            [
                                "mode", 
                                "{'cd', 'lars'}"
                            ], 
                            [
                                "use", 
                                "coordinate descent or LARS. Use LARS for"
                            ], 
                            [
                                "tol", 
                                "positive float, optional"
                            ], 
                            [
                                "convergence", 
                                "if the dual gap goes below"
                            ], 
                            [
                                "enet_tol", 
                                "positive float, optional"
                            ], 
                            [
                                "max_iter", 
                                "integer, optional"
                            ], 
                            [
                                "verbose", 
                                "boolean, optional"
                            ], 
                            [
                                "return_costs", 
                                "boolean, optional"
                            ], 
                            [
                                "eps", 
                                "float, optional"
                            ], 
                            [
                                "return_n_iter", 
                                "bool, optional"
                            ]
                        ], 
                        [
                            [
                                "covariance", 
                                "2D ndarray, shape (n_features, n_features)"
                            ], 
                            [
                                "precision", 
                                "2D ndarray, shape (n_features, n_features)"
                            ], 
                            [
                                "costs", 
                                "list of (objective, dual_gap) pairs"
                            ], 
                            [
                                "n_iter", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, alpha=.01, mode='cd', tol=1e-4, enet_tol=1e-4,\n                 max_iter=100, verbose=False, assume_centered=False):", 
                [
                    [
                        [
                            [
                                "alpha", 
                                "positive float, default 0.01"
                            ], 
                            [
                                "parameter", 
                                "the higher alpha, the more"
                            ], 
                            [
                                "mode", 
                                "{'cd', 'lars'}, default 'cd'"
                            ], 
                            [
                                "use", 
                                "coordinate descent or LARS. Use LARS for"
                            ], 
                            [
                                "tol", 
                                "positive float, default 1e-4"
                            ], 
                            [
                                "convergence", 
                                "if the dual gap goes below"
                            ], 
                            [
                                "enet_tol", 
                                "positive float, optional"
                            ], 
                            [
                                "max_iter", 
                                "integer, default 100"
                            ], 
                            [
                                "verbose", 
                                "boolean, default False"
                            ], 
                            [
                                "assume_centered", 
                                "boolean, default False"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "(ignored)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def graph_lasso_path(X, alphas, cov_init=None, X_test=None, mode='cd',\n                     tol=1e-4, enet_tol=1e-4, max_iter=100, verbose=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "2D ndarray, shape (n_samples, n_features)"
                            ], 
                            [
                                "alphas", 
                                "list of positive floats"
                            ], 
                            [
                                "X_test", 
                                "2D array, shape (n_test_samples, n_features), optional"
                            ], 
                            [
                                "mode", 
                                "{'cd', 'lars'}"
                            ], 
                            [
                                "use", 
                                "coordinate descent or LARS. Use LARS for"
                            ], 
                            [
                                "tol", 
                                "positive float, optional"
                            ], 
                            [
                                "convergence", 
                                "if the dual gap goes below"
                            ], 
                            [
                                "enet_tol", 
                                "positive float, optional"
                            ], 
                            [
                                "max_iter", 
                                "integer, optional"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ]
                        ], 
                        [
                            [
                                "covariances_", 
                                "List of 2D ndarray, shape (n_features, n_features)"
                            ], 
                            [
                                "precisions_", 
                                "List of 2D ndarray, shape (n_features, n_features)"
                            ], 
                            [
                                "scores_", 
                                "List of float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, alphas=4, n_refinements=4, cv=None, tol=1e-4,\n                 enet_tol=1e-4, max_iter=100, mode='cd', n_jobs=1,\n                 verbose=False, assume_centered=False):", 
                [
                    [
                        [
                            [
                                "alphas", 
                                "integer, or list positive float, optional"
                            ], 
                            [
                                "n_refinements", 
                                "strictly positive integer"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "inputs", 
                                "class"
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "tol", 
                                "positive float, optional"
                            ], 
                            [
                                "convergence", 
                                "if the dual gap goes below"
                            ], 
                            [
                                "enet_tol", 
                                "positive float, optional"
                            ], 
                            [
                                "max_iter", 
                                "integer, optional"
                            ], 
                            [
                                "mode", 
                                "{'cd', 'lars'}"
                            ], 
                            [
                                "use", 
                                "coordinate descent or LARS. Use LARS for"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional"
                            ], 
                            [
                                "verbose", 
                                "boolean, optional"
                            ], 
                            [
                                "assume_centered", 
                                "Boolean"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def grid_scores(self):", 
                []
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "(ignored)"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        10
    ], 
    "../scikit-learn-master\\examples\\applications\\wikipedia_principal_eigenvector.py": [
        [
            [
                "def index(redirects, index_map, k):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def short_name(nt_uri):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get_redirects(redirects_filename):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get_adjacency_matrix(redirects_filename, page_links_filename, limit=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def centrality_scores(X, alpha=0.85, max_iter=100, tol=1e-10):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\tests\\test_weight_boosting.py": [
        [
            [
                "def test_samme_proba():", 
                []
            ], 
            [
                "def predict_proba(self, X):", 
                []
            ], 
            [
                "def test_oneclass_adaboost_proba():", 
                []
            ], 
            [
                "def test_classification_toy():", 
                []
            ], 
            [
                "def test_regression_toy():", 
                []
            ], 
            [
                "def test_iris():", 
                []
            ], 
            [
                "def test_boston():", 
                []
            ], 
            [
                "def test_staged_predict():", 
                []
            ], 
            [
                "def test_gridsearch():", 
                []
            ], 
            [
                "def test_pickle():", 
                []
            ], 
            [
                "def test_importances():", 
                []
            ], 
            [
                "def test_error():", 
                []
            ], 
            [
                "def test_base_estimator():", 
                []
            ], 
            [
                "def test_sample_weight_missing():", 
                []
            ], 
            [
                "def test_sparse_classification():", 
                []
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_sparse_regression():", 
                []
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_sample_weight_adaboost_regressor():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ]
        ], 
        21
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\partial_dependence.py": [
        [
            [
                "def _grid_from_X(X, percentiles=(0.05, 0.95), grid_resolution=100):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray"
                            ], 
                            [
                                "percentiles", 
                                "tuple of floats"
                            ], 
                            [
                                "grid_resolution", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "grid", 
                                "ndarray"
                            ], 
                            [
                                "axes", 
                                "seq of ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def partial_dependence(gbrt, target_variables, grid=None, X=None,\n                       percentiles=(0.05, 0.95), grid_resolution=100):", 
                [
                    [
                        [
                            [
                                "gbrt", 
                                "BaseGradientBoosting"
                            ], 
                            [
                                "target_variables", 
                                "array-like, dtype=int"
                            ], 
                            [
                                "grid", 
                                "array-like, shape=(n_points, len(target_variables))"
                            ], 
                            [
                                "X", 
                                "array-like, shape=(n_samples, n_features)"
                            ], 
                            [
                                "percentiles", 
                                "(low, high), default=(0.05, 0.95)"
                            ], 
                            [
                                "grid_resolution", 
                                "int, default=100"
                            ]
                        ], 
                        [
                            [
                                "pdp", 
                                "array, shape=(n_classes, n_points)"
                            ], 
                            [
                                "axes", 
                                "seq of ndarray or None"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def plot_partial_dependence(gbrt, X, features, feature_names=None,\n                            label=None, n_cols=3, grid_resolution=100,\n                            percentiles=(0.05, 0.95), n_jobs=1,\n                            verbose=0, ax=None, line_kw=None,\n                            contour_kw=None, **fig_kw):", 
                [
                    [
                        [
                            [
                                "gbrt", 
                                "BaseGradientBoosting"
                            ], 
                            [
                                "X", 
                                "array-like, shape=(n_samples, n_features)"
                            ], 
                            [
                                "features", 
                                "seq of ints, strings, or tuples of ints or strings"
                            ], 
                            [
                                "feature_names", 
                                "seq of str"
                            ], 
                            [
                                "label", 
                                "object"
                            ], 
                            [
                                "n_cols", 
                                "int"
                            ], 
                            [
                                "percentiles", 
                                "(low, high), default=(0.05, 0.95)"
                            ], 
                            [
                                "grid_resolution", 
                                "int, default=100"
                            ], 
                            [
                                "n_jobs", 
                                "int"
                            ], 
                            [
                                "verbose", 
                                "int"
                            ], 
                            [
                                "ax", 
                                "Matplotlib axis object, default None"
                            ], 
                            [
                                "line_kw", 
                                "dict"
                            ], 
                            [
                                "contour_kw", 
                                "dict"
                            ], 
                            [
                                "fig_kw", 
                                "dict"
                            ]
                        ], 
                        [
                            [
                                "fig", 
                                "figure"
                            ], 
                            [
                                "axs", 
                                "seq of Axis objects"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def convert_feature(fx):", 
                []
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\sklearn\\gaussian_process\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\utils\\stats.py": [
        [
            [
                "def rankdata(*args, **kwargs):", 
                []
            ], 
            [
                "def _weighted_percentile(array, sample_weight, percentile=50):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\_parallel_backends.py": [
        [
            [
                "def effective_n_jobs(self, n_jobs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def apply_async(self, func, callback=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def configure(self, n_jobs=1, parallel=None, **backend_args):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def terminate(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def compute_batch_size(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def batch_completed(self, batch_size, duration):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get_exceptions(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def abort_everything(self, ensure_ready=True):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def effective_n_jobs(self, n_jobs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def apply_async(self, func, callback=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def effective_n_jobs(self, n_jobs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def terminate(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def apply_async(self, func, callback=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def abort_everything(self, ensure_ready=True):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def compute_batch_size(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def batch_completed(self, batch_size, duration):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def configure(self, n_jobs=1, parallel=None, **backend_args):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def effective_n_jobs(self, n_jobs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def configure(self, n_jobs=1, parallel=None, **backend_args):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def terminate(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, batch):", 
                []
            ], 
            [
                "def get(self):", 
                []
            ], 
            [
                "def __init__(self, func):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __call__(self, *args, **kwargs):", 
                []
            ], 
            [
                "def __init__(self, backend):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        25
    ], 
    "../scikit-learn-master\\sklearn\\feature_selection\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\model_selection\\grid_search_text_feature_extraction.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\covtype.py": [
        [
            [
                "def fetch_covtype(data_home=None, download_if_missing=True,\n                  random_state=None, shuffle=False):", 
                [
                    [
                        [
                            [
                                "data_home", 
                                "string, optional"
                            ], 
                            [
                                "download_if_missing", 
                                "boolean, default=True"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "shuffle", 
                                "bool, default=False"
                            ]
                        ], 
                        [
                            [
                                "dataset", 
                                "dict-like object with the following attributes"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\exercises\\plot_digits_classification_exercise.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\tests\\test_sparse_pca.py": [
        [
            [
                "def generate_toy_data(n_components, n_samples, image_size, random_state=None):", 
                []
            ], 
            [
                "def test_correct_shapes():", 
                []
            ], 
            [
                "def test_fit_transform():", 
                []
            ], 
            [
                "def test_fit_transform_parallel():", 
                []
            ], 
            [
                "def test_transform_nan():", 
                []
            ], 
            [
                "def test_fit_transform_tall():", 
                []
            ], 
            [
                "def test_initialization():", 
                []
            ], 
            [
                "def test_mini_batch_correct_shapes():", 
                []
            ], 
            [
                "def test_mini_batch_fit_transform():", 
                []
            ]
        ], 
        9
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\kde.py": [
        [
            [
                "def __init__(self, bandwidth=1.0, algorithm='auto',\n                 kernel='gaussian', metric=\"euclidean\", atol=0, rtol=0,\n                 breadth_first=True, leaf_size=40, metric_params=None):", 
                [
                    [
                        [
                            [
                                "bandwidth", 
                                "float"
                            ], 
                            [
                                "algorithm", 
                                "string"
                            ], 
                            [
                                "kernel", 
                                "string"
                            ], 
                            [
                                "metric", 
                                "string"
                            ], 
                            [
                                "and", 
                                "class"
                            ], 
                            [
                                "atol", 
                                "float"
                            ], 
                            [
                                "rtol", 
                                "float"
                            ], 
                            [
                                "breadth_first", 
                                "boolean"
                            ], 
                            [
                                "leaf_size", 
                                "int"
                            ], 
                            [
                                "See", 
                                "class"
                            ], 
                            [
                                "or", 
                                "class"
                            ], 
                            [
                                "metric_params", 
                                "dict"
                            ], 
                            [
                                "or", 
                                "class"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _choose_algorithm(self, algorithm, metric):", 
                []
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like, shape (n_samples, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def score_samples(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "density", 
                                "ndarray, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def score(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "logprob", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def sample(self, n_samples=1, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None. default to None"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array_like, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\examples\\feature_selection\\plot_select_from_model_boston.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\model_selection\\plot_nested_cross_validation_iris.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\tests\\test_incremental_pca.py": [
        [
            [
                "def test_incremental_pca():", 
                []
            ], 
            [
                "def test_incremental_pca_check_projection():", 
                []
            ], 
            [
                "def test_incremental_pca_inverse():", 
                []
            ], 
            [
                "def test_incremental_pca_validation():", 
                []
            ], 
            [
                "def test_n_components_none():", 
                []
            ], 
            [
                "def test_incremental_pca_set_params():", 
                []
            ], 
            [
                "def test_incremental_pca_num_features_change():", 
                []
            ], 
            [
                "def test_incremental_pca_batch_signs():", 
                []
            ], 
            [
                "def test_incremental_pca_batch_values():", 
                []
            ], 
            [
                "def test_incremental_pca_partial_fit():", 
                []
            ], 
            [
                "def test_incremental_pca_against_pca_iris():", 
                []
            ], 
            [
                "def test_incremental_pca_against_pca_random_data():", 
                []
            ], 
            [
                "def test_explained_variances():", 
                []
            ], 
            [
                "def test_singular_values():", 
                []
            ], 
            [
                "def test_whitening():", 
                []
            ], 
            [
                "def test_incremental_pca_partial_fit_float_division():", 
                []
            ]
        ], 
        16
    ], 
    "../scikit-learn-master\\examples\\bicluster\\plot_spectral_biclustering.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\manifold\\plot_lle_digits.py": [
        [
            [
                "def plot_embedding(X, title=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\utils\\bench.py": [
        [
            [
                "def total_seconds(delta):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_optimize.py": [
        [
            [
                "def test_newton_cg():", 
                []
            ], 
            [
                "def func(x):", 
                []
            ], 
            [
                "def grad(x):", 
                []
            ], 
            [
                "def hess(x, p):", 
                []
            ], 
            [
                "def grad_hess(x):", 
                []
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\sklearn\\manifold\\tests\\test_isomap.py": [
        [
            [
                "def test_isomap_simple_grid():", 
                []
            ], 
            [
                "def test_isomap_reconstruction_error():", 
                []
            ], 
            [
                "def test_transform():", 
                []
            ], 
            [
                "def test_pipeline():", 
                []
            ], 
            [
                "def test_isomap_clone_bug():", 
                []
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\voting_classifier.py": [
        [
            [
                "def _parallel_fit_estimator(estimator, X, y, sample_weight=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, estimators, voting='hard', weights=None, n_jobs=1,\n                 flatten_transform=None):", 
                [
                    [
                        [
                            [
                                "estimators", 
                                "list of (string, estimator) tuples"
                            ], 
                            [
                                "voting", 
                                "str, {'hard', 'soft'} (default='hard')"
                            ], 
                            [
                                "weights", 
                                "array-like, shape = [n_classifiers], optional (default=`None`)"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default=1)"
                            ], 
                            [
                                "flatten_transform", 
                                "bool, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def named_estimators(self):", 
                []
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples] or None"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _weights_not_none(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "maj", 
                                "array-like, shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _collect_probas(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _predict_proba(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def predict_proba(self):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "avg", 
                                "array-like, shape = [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def set_params(self, **params):", 
                [
                    [
                        [
                            [
                                "params", 
                                "keyword arguments"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def get_params(self, deep=True):", 
                [
                    [
                        [
                            [
                                "deep", 
                                "bool"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _predict(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        13
    ], 
    "../scikit-learn-master\\sklearn\\externals\\setup.py": [
        [
            [
                "def configuration(parent_package='', top_path=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\gaussian_process\\gpc.py": [
        [
            [
                "def optimizer(obj_func, initial_theta, bounds):", 
                []
            ], 
            [
                "def __init__(self, kernel=None, optimizer=\"fmin_l_bfgs_b\",\n                 n_restarts_optimizer=0, max_iter_predict=100,\n                 warm_start=False, copy_X_train=True, random_state=None):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape = (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def obj_func(theta, eval_gradient=True):", 
                []
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape = (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array-like, shape = (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def log_marginal_likelihood(self, theta=None, eval_gradient=False):", 
                [
                    [
                        [
                            [
                                "theta", 
                                "array-like, shape = (n_kernel_params,) or None"
                            ], 
                            [
                                "eval_gradient", 
                                "bool, default"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def _posterior_mode(self, K, return_temporaries=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _constrained_optimization(self, obj_func, initial_theta, bounds):", 
                []
            ], 
            [
                "def optimizer(obj_func, initial_theta, bounds):", 
                []
            ], 
            [
                "def __init__(self, kernel=None, optimizer=\"fmin_l_bfgs_b\",\n                 n_restarts_optimizer=0, max_iter_predict=100,\n                 warm_start=False, copy_X_train=True, random_state=None,\n                 multi_class=\"one_vs_rest\", n_jobs=1):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape = (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape = (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array-like, shape = (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def kernel_(self):", 
                []
            ], 
            [
                "def log_marginal_likelihood(self, theta=None, eval_gradient=False):", 
                [
                    [
                        [
                            [
                                "theta", 
                                "array-like, shape = (n_kernel_params,) or none"
                            ], 
                            [
                                "eval_gradient", 
                                "bool, default"
                            ]
                        ], 
                        []
                    ]
                ]
            ]
        ], 
        16
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\setup.py": [
        [
            [
                "def configuration(parent_package=\"\", top_path=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\benchmarks\\bench_plot_ward.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\neighbors\\plot_nearest_centroid.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_cluster_iris.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_lasso_and_elasticnet.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\tests\\test_bagging.py": [
        [
            [
                "def test_classification():", 
                []
            ], 
            [
                "def test_sparse_classification():", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def test_regression():", 
                []
            ], 
            [
                "def test_sparse_regression():", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def test_bootstrap_samples():", 
                []
            ], 
            [
                "def test_bootstrap_features():", 
                []
            ], 
            [
                "def test_probability():", 
                []
            ], 
            [
                "def test_oob_score_classification():", 
                []
            ], 
            [
                "def test_oob_score_regression():", 
                []
            ], 
            [
                "def test_single_estimator():", 
                []
            ], 
            [
                "def test_error():", 
                []
            ], 
            [
                "def test_parallel_classification():", 
                []
            ], 
            [
                "def test_parallel_regression():", 
                []
            ], 
            [
                "def test_gridsearch():", 
                []
            ], 
            [
                "def test_base_estimator():", 
                []
            ], 
            [
                "def test_bagging_with_pipeline():", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def test_bagging_sample_weight_unsupported_but_passed():", 
                []
            ], 
            [
                "def test_warm_start(random_state=42):", 
                []
            ], 
            [
                "def test_warm_start_smaller_n_estimators():", 
                []
            ], 
            [
                "def test_warm_start_equal_n_estimators():", 
                []
            ], 
            [
                "def test_warm_start_equivalence():", 
                []
            ], 
            [
                "def test_warm_start_with_oob_score_fails():", 
                []
            ], 
            [
                "def test_oob_score_removed_on_warm_start():", 
                []
            ], 
            [
                "def test_oob_score_consistency():", 
                []
            ], 
            [
                "def test_estimators_samples():", 
                []
            ], 
            [
                "def test_max_samples_consistency():", 
                []
            ], 
            [
                "def test_set_oob_score_label_encoding():", 
                []
            ]
        ], 
        31
    ], 
    "../scikit-learn-master\\examples\\gaussian_process\\plot_gpr_noisy_targets.py": [
        [
            [
                "def f(x):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\semi_supervised\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\utils\\optimize.py": [
        [
            [
                "def _line_search_wolfe12(f, fprime, xk, pk, gfk, old_fval, old_old_fval,\n                         **kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _cg(fhess_p, fgrad, maxiter, tol):", 
                [
                    [
                        [
                            [
                                "fhess_p", 
                                "callable"
                            ], 
                            [
                                "fgrad", 
                                "ndarray, shape (n_features,) or (n_features + 1,)"
                            ], 
                            [
                                "maxiter", 
                                "int"
                            ], 
                            [
                                "tol", 
                                "float"
                            ]
                        ], 
                        [
                            [
                                "xsupi", 
                                "ndarray, shape (n_features,) or (n_features + 1,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def newton_cg(grad_hess, func, grad, x0, args=(), tol=1e-4,\n              maxiter=100, maxinner=200, line_search=True, warn=True):", 
                [
                    [
                        [
                            [
                                "grad_hess", 
                                "callable"
                            ], 
                            [
                                "func", 
                                "callable"
                            ], 
                            [
                                "grad", 
                                "callable"
                            ], 
                            [
                                "x0", 
                                "array of float"
                            ], 
                            [
                                "args", 
                                "tuple, optional"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "maxiter", 
                                "int"
                            ], 
                            [
                                "maxinner", 
                                "int"
                            ], 
                            [
                                "line_search", 
                                "boolean"
                            ], 
                            [
                                "warn", 
                                "boolean"
                            ]
                        ], 
                        [
                            [
                                "xk", 
                                "ndarray of float"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_huber_vs_ridge.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\feature_extraction\\tests\\test_text.py": [
        [
            [
                "def uppercase(s):", 
                []
            ], 
            [
                "def strip_eacute(s):", 
                []
            ], 
            [
                "def split_tokenize(s):", 
                []
            ], 
            [
                "def lazy_analyze(s):", 
                []
            ], 
            [
                "def test_strip_accents():", 
                []
            ], 
            [
                "def test_to_ascii():", 
                []
            ], 
            [
                "def test_word_analyzer_unigrams():", 
                []
            ], 
            [
                "def test_word_analyzer_unigrams_and_bigrams():", 
                []
            ], 
            [
                "def test_unicode_decode_error():", 
                []
            ], 
            [
                "def test_char_ngram_analyzer():", 
                []
            ], 
            [
                "def test_char_wb_ngram_analyzer():", 
                []
            ], 
            [
                "def test_word_ngram_analyzer():", 
                []
            ], 
            [
                "def test_countvectorizer_custom_vocabulary():", 
                []
            ], 
            [
                "def test_countvectorizer_custom_vocabulary_pipeline():", 
                []
            ], 
            [
                "def test_countvectorizer_custom_vocabulary_repeated_indeces():", 
                []
            ], 
            [
                "def test_countvectorizer_custom_vocabulary_gap_index():", 
                []
            ], 
            [
                "def test_countvectorizer_stop_words():", 
                []
            ], 
            [
                "def test_countvectorizer_empty_vocabulary():", 
                []
            ], 
            [
                "def test_fit_countvectorizer_twice():", 
                []
            ], 
            [
                "def test_tf_idf_smoothing():", 
                []
            ], 
            [
                "def test_tfidf_no_smoothing():", 
                []
            ], 
            [
                "def test_sublinear_tf():", 
                []
            ], 
            [
                "def test_vectorizer():", 
                []
            ], 
            [
                "def test_tfidf_vectorizer_setters():", 
                []
            ], 
            [
                "def test_hashing_vectorizer():", 
                []
            ], 
            [
                "def test_feature_names():", 
                []
            ], 
            [
                "def test_vectorizer_max_features():", 
                []
            ], 
            [
                "def test_count_vectorizer_max_features():", 
                []
            ], 
            [
                "def test_vectorizer_max_df():", 
                []
            ], 
            [
                "def test_vectorizer_min_df():", 
                []
            ], 
            [
                "def test_count_binary_occurrences():", 
                []
            ], 
            [
                "def test_hashed_binary_occurrences():", 
                []
            ], 
            [
                "def test_vectorizer_inverse_transform():", 
                []
            ], 
            [
                "def test_count_vectorizer_pipeline_grid_selection():", 
                []
            ], 
            [
                "def test_vectorizer_pipeline_grid_selection():", 
                []
            ], 
            [
                "def test_vectorizer_pipeline_cross_validation():", 
                []
            ], 
            [
                "def test_vectorizer_unicode():", 
                []
            ], 
            [
                "def test_tfidf_vectorizer_with_fixed_vocabulary():", 
                []
            ], 
            [
                "def test_pickling_vectorizer():", 
                []
            ], 
            [
                "def test_countvectorizer_vocab_sets_when_pickling():", 
                []
            ], 
            [
                "def test_countvectorizer_vocab_dicts_when_pickling():", 
                []
            ], 
            [
                "def test_stop_words_removal():", 
                []
            ], 
            [
                "def test_pickling_transformer():", 
                []
            ], 
            [
                "def test_non_unique_vocab():", 
                []
            ], 
            [
                "def test_hashingvectorizer_nan_in_docs():", 
                []
            ], 
            [
                "def func():", 
                []
            ], 
            [
                "def test_tfidfvectorizer_binary():", 
                []
            ], 
            [
                "def test_tfidfvectorizer_export_idf():", 
                []
            ], 
            [
                "def test_vectorizer_vocab_clone():", 
                []
            ], 
            [
                "def test_vectorizer_string_object_as_input():", 
                []
            ]
        ], 
        50
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\truncated_svd.py": [
        [
            [
                "def __init__(self, n_components=2, algorithm=\"randomized\", n_iter=5,\n                 random_state=None, tol=0.):", 
                []
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_multi_task_lasso_support.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\huber.py": [
        [
            [
                "def _huber_loss_and_gradient(w, X, y, epsilon, alpha, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "w", 
                                "ndarray, shape (n_features + 1,) or (n_features + 2,)"
                            ], 
                            [
                                "X", 
                                "ndarray, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "ndarray, shape (n_samples,)"
                            ], 
                            [
                                "epsilon", 
                                "float"
                            ], 
                            [
                                "alpha", 
                                "float"
                            ], 
                            [
                                "sample_weight", 
                                "ndarray, shape (n_samples,), optional"
                            ]
                        ], 
                        [
                            [
                                "w", 
                                "ndarray, shape (n_features + 1,) or (n_features + 2,)"
                            ], 
                            [
                                "X", 
                                "ndarray, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "ndarray, shape (n_samples,)"
                            ], 
                            [
                                "epsilon", 
                                "float"
                            ], 
                            [
                                "alpha", 
                                "float"
                            ], 
                            [
                                "sample_weight", 
                                "ndarray, shape (n_samples,), optional"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, epsilon=1.35, max_iter=100, alpha=0.0001,\n                 warm_start=False, fit_intercept=True, tol=1e-05):", 
                [
                    [
                        [
                            [
                                "epsilon", 
                                "float, greater than 1.0, default 1.35"
                            ], 
                            [
                                "max_iter", 
                                "int, default 100"
                            ], 
                            [
                                "alpha", 
                                "float, default 0.0001"
                            ], 
                            [
                                "warm_start", 
                                "bool, default False"
                            ], 
                            [
                                "fit_intercept", 
                                "bool, default True"
                            ], 
                            [
                                "tol", 
                                "float, default 1e-5"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_metaestimators.py": [
        [
            [
                "def func(self):", 
                []
            ], 
            [
                "def func(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_delegated_docstring():", 
                []
            ], 
            [
                "def __init__(self, sub_est, better_sub_est=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self):", 
                []
            ], 
            [
                "def predict(self):", 
                []
            ], 
            [
                "def predict(self):", 
                []
            ], 
            [
                "def predict(self):", 
                []
            ], 
            [
                "def test_if_delegate_has_method():", 
                []
            ]
        ], 
        9
    ], 
    "../scikit-learn-master\\examples\\plot_compare_reduction.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\model_selection\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\manifold\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\tree\\tree.py": [
        [
            [
                "def __init__(self,\n                 criterion,\n                 splitter,\n                 max_depth,\n                 min_samples_split,\n                 min_samples_leaf,\n                 min_weight_fraction_leaf,\n                 max_features,\n                 max_leaf_nodes,\n                 random_state,\n                 min_impurity_decrease,\n                 min_impurity_split,\n                 class_weight=None,\n                 presort=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None, check_input=True,\n            X_idx_sorted=None):", 
                []
            ], 
            [
                "def _validate_X_predict(self, X, check_input):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X, check_input=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix of shape = [n_samples, n_features]"
                            ], 
                            [
                                "check_input", 
                                "boolean, (default=True)"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array of shape = [n_samples] or [n_samples, n_outputs]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def apply(self, X, check_input=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like or sparse matrix, shape = [n_samples, n_features]"
                            ], 
                            [
                                "check_input", 
                                "boolean, (default=True)"
                            ]
                        ], 
                        [
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "X", 
                                "array_like or sparse matrix, shape = [n_samples, n_features]"
                            ], 
                            [
                                "check_input", 
                                "boolean, (default=True)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def decision_path(self, X, check_input=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like or sparse matrix, shape = [n_samples, n_features]"
                            ], 
                            [
                                "check_input", 
                                "boolean, (default=True)"
                            ]
                        ], 
                        [
                            [
                                "indicator", 
                                "sparse csr array, shape = [n_samples, n_nodes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def feature_importances_(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "feature_importances_", 
                                "array, shape = [n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self,\n                 criterion=\"gini\",\n                 splitter=\"best\",\n                 max_depth=None,\n                 min_samples_split=2,\n                 min_samples_leaf=1,\n                 min_weight_fraction_leaf=0.,\n                 max_features=None,\n                 random_state=None,\n                 max_leaf_nodes=None,\n                 min_impurity_decrease=0.,\n                 min_impurity_split=None,\n                 class_weight=None,\n                 presort=False):", 
                [
                    [
                        [
                            [
                                "criterion", 
                                "string, optional (default=\"gini\")"
                            ], 
                            [
                                "splitter", 
                                "string, optional (default=\"best\")"
                            ], 
                            [
                                "max_depth", 
                                "int or None, optional (default=None)"
                            ], 
                            [
                                "min_samples_split", 
                                "int, float, optional (default=2)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_samples_leaf", 
                                "int, float, optional (default=1)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_weight_fraction_leaf", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "max_features", 
                                "int, float, string or None, optional (default=None)"
                            ], 
                            [
                                "split", 
                                ""
                            ], 
                            [
                                "Note", 
                                "the search for a split does not stop until at least one"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "max_leaf_nodes", 
                                "int or None, optional (default=None)"
                            ], 
                            [
                                "min_impurity_decrease", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "following", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "min_impurity_split", 
                                "float,"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "class_weight", 
                                "dict, list of dicts, \"balanced\" or None, default=None"
                            ], 
                            [
                                "presort", 
                                "bool, optional (default=False)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None, check_input=True,\n            X_idx_sorted=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_outputs]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples] or None"
                            ], 
                            [
                                "check_input", 
                                "boolean, (default=True)"
                            ], 
                            [
                                "X_idx_sorted", 
                                "array-like, shape = [n_samples, n_features], optional"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X, check_input=True):", 
                []
            ], 
            [
                "def predict_log_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix of shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "p", 
                                "array of shape = [n_samples, n_classes], or a list of n_outputs"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self,\n                 criterion=\"mse\",\n                 splitter=\"best\",\n                 max_depth=None,\n                 min_samples_split=2,\n                 min_samples_leaf=1,\n                 min_weight_fraction_leaf=0.,\n                 max_features=None,\n                 random_state=None,\n                 max_leaf_nodes=None,\n                 min_impurity_decrease=0.,\n                 min_impurity_split=None,\n                 presort=False):", 
                [
                    [
                        [
                            [
                                "criterion", 
                                "string, optional (default=\"mse\")"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "splitter", 
                                "string, optional (default=\"best\")"
                            ], 
                            [
                                "max_depth", 
                                "int or None, optional (default=None)"
                            ], 
                            [
                                "min_samples_split", 
                                "int, float, optional (default=2)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_samples_leaf", 
                                "int, float, optional (default=1)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_weight_fraction_leaf", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "max_features", 
                                "int, float, string or None, optional (default=None)"
                            ], 
                            [
                                "split", 
                                ""
                            ], 
                            [
                                "Note", 
                                "the search for a split does not stop until at least one"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "max_leaf_nodes", 
                                "int or None, optional (default=None)"
                            ], 
                            [
                                "min_impurity_decrease", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "following", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "min_impurity_split", 
                                "float,"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "presort", 
                                "bool, optional (default=False)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None, check_input=True,\n            X_idx_sorted=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_outputs]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples] or None"
                            ], 
                            [
                                "check_input", 
                                "boolean, (default=True)"
                            ], 
                            [
                                "X_idx_sorted", 
                                "array-like, shape = [n_samples, n_features], optional"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self,\n                 criterion=\"gini\",\n                 splitter=\"random\",\n                 max_depth=None,\n                 min_samples_split=2,\n                 min_samples_leaf=1,\n                 min_weight_fraction_leaf=0.,\n                 max_features=\"auto\",\n                 random_state=None,\n                 max_leaf_nodes=None,\n                 min_impurity_decrease=0.,\n                 min_impurity_split=None,\n                 class_weight=None):", 
                [
                    [
                        [
                            [
                                "criterion", 
                                "string, optional (default=\"gini\")"
                            ], 
                            [
                                "splitter", 
                                "string, optional (default=\"best\")"
                            ], 
                            [
                                "max_depth", 
                                "int or None, optional (default=None)"
                            ], 
                            [
                                "min_samples_split", 
                                "int, float, optional (default=2)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_samples_leaf", 
                                "int, float, optional (default=1)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_weight_fraction_leaf", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "max_features", 
                                "int, float, string or None, optional (default=None)"
                            ], 
                            [
                                "split", 
                                ""
                            ], 
                            [
                                "Note", 
                                "the search for a split does not stop until at least one"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "max_leaf_nodes", 
                                "int or None, optional (default=None)"
                            ], 
                            [
                                "min_impurity_decrease", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "following", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "min_impurity_split", 
                                "float,"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "class_weight", 
                                "dict, list of dicts, \"balanced\" or None, default=None"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self,\n                 criterion=\"mse\",\n                 splitter=\"random\",\n                 max_depth=None,\n                 min_samples_split=2,\n                 min_samples_leaf=1,\n                 min_weight_fraction_leaf=0.,\n                 max_features=\"auto\",\n                 random_state=None,\n                 min_impurity_decrease=0.,\n                 min_impurity_split=None,\n                 max_leaf_nodes=None):", 
                [
                    [
                        [
                            [
                                "criterion", 
                                "string, optional (default=\"mse\")"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "splitter", 
                                "string, optional (default=\"best\")"
                            ], 
                            [
                                "max_depth", 
                                "int or None, optional (default=None)"
                            ], 
                            [
                                "min_samples_split", 
                                "int, float, optional (default=2)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_samples_leaf", 
                                "int, float, optional (default=1)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_weight_fraction_leaf", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "max_features", 
                                "int, float, string or None, optional (default=None)"
                            ], 
                            [
                                "split", 
                                ""
                            ], 
                            [
                                "Note", 
                                "the search for a split does not stop until at least one"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "min_impurity_decrease", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "following", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "min_impurity_split", 
                                "float,"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "max_leaf_nodes", 
                                "int or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        15
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\dict_learning.py": [
        [
            [
                "def _sparse_encode(X, dictionary, gram, cov=None, algorithm='lasso_lars',\n                   regularization=None, copy_cov=True,\n                   init=None, max_iter=1000, check_input=True, verbose=0):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array of shape (n_samples, n_features)"
                            ], 
                            [
                                "dictionary", 
                                "array of shape (n_components, n_features)"
                            ], 
                            [
                                "gram", 
                                "None | array, shape=(n_components, n_components)"
                            ], 
                            [
                                "cov", 
                                "array, shape=(n_components, n_samples)"
                            ], 
                            [
                                "algorithm", 
                                "{'lasso_lars', 'lasso_cd', 'lars', 'omp', 'threshold'}"
                            ], 
                            [
                                "lars", 
                                "uses the least angle regression method (linear_model.lars_path)"
                            ], 
                            [
                                "lasso_lars", 
                                "uses Lars to compute the Lasso solution"
                            ], 
                            [
                                "lasso_cd", 
                                "uses the coordinate descent method to compute the"
                            ], 
                            [
                                "omp", 
                                "uses orthogonal matching pursuit to estimate the sparse solution"
                            ], 
                            [
                                "threshold", 
                                "squashes to zero all coefficients less than regularization"
                            ], 
                            [
                                "regularization", 
                                "int | float"
                            ], 
                            [
                                "init", 
                                "array of shape (n_samples, n_components)"
                            ], 
                            [
                                "max_iter", 
                                "int, 1000 by default"
                            ], 
                            [
                                "copy_cov", 
                                "boolean, optional"
                            ], 
                            [
                                "check_input", 
                                "boolean, optional"
                            ], 
                            [
                                "verbose", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "code", 
                                "array of shape (n_components, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def sparse_encode(X, dictionary, gram=None, cov=None, algorithm='lasso_lars',\n                  n_nonzero_coefs=None, alpha=None, copy_cov=True, init=None,\n                  max_iter=1000, n_jobs=1, check_input=True, verbose=0):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array of shape (n_samples, n_features)"
                            ], 
                            [
                                "dictionary", 
                                "array of shape (n_components, n_features)"
                            ], 
                            [
                                "gram", 
                                "array, shape=(n_components, n_components)"
                            ], 
                            [
                                "cov", 
                                "array, shape=(n_components, n_samples)"
                            ], 
                            [
                                "algorithm", 
                                "{'lasso_lars', 'lasso_cd', 'lars', 'omp', 'threshold'}"
                            ], 
                            [
                                "lars", 
                                "uses the least angle regression method (linear_model.lars_path)"
                            ], 
                            [
                                "lasso_lars", 
                                "uses Lars to compute the Lasso solution"
                            ], 
                            [
                                "lasso_cd", 
                                "uses the coordinate descent method to compute the"
                            ], 
                            [
                                "omp", 
                                "uses orthogonal matching pursuit to estimate the sparse solution"
                            ], 
                            [
                                "threshold", 
                                "squashes to zero all coefficients less than alpha from"
                            ], 
                            [
                                "n_nonzero_coefs", 
                                "int, 0.1 * n_features by default"
                            ], 
                            [
                                "alpha", 
                                "float, 1. by default"
                            ], 
                            [
                                "parameter", 
                                "the value of"
                            ], 
                            [
                                "copy_cov", 
                                "boolean, optional"
                            ], 
                            [
                                "init", 
                                "array of shape (n_samples, n_components)"
                            ], 
                            [
                                "max_iter", 
                                "int, 1000 by default"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional"
                            ], 
                            [
                                "check_input", 
                                "boolean, optional"
                            ], 
                            [
                                "verbose", 
                                "int, optional"
                            ]
                        ], 
                        [
                            [
                                "code", 
                                "array of shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _update_dict(dictionary, Y, code, verbose=False, return_r2=False,\n                 random_state=None):", 
                [
                    [
                        [
                            [
                                "dictionary", 
                                "array of shape (n_features, n_components)"
                            ], 
                            [
                                "Y", 
                                "array of shape (n_features, n_samples)"
                            ], 
                            [
                                "code", 
                                "array of shape (n_components, n_samples)"
                            ], 
                            [
                                "verbose", 
                                ""
                            ], 
                            [
                                "return_r2", 
                                "bool"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "dictionary", 
                                "array of shape (n_features, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def dict_learning(X, n_components, alpha, max_iter=100, tol=1e-8,\n                  method='lars', n_jobs=1, dict_init=None, code_init=None,\n                  callback=None, verbose=False, random_state=None,\n                  return_n_iter=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array of shape (n_samples, n_features)"
                            ], 
                            [
                                "n_components", 
                                "int,"
                            ], 
                            [
                                "alpha", 
                                "int,"
                            ], 
                            [
                                "max_iter", 
                                "int,"
                            ], 
                            [
                                "tol", 
                                "float,"
                            ], 
                            [
                                "method", 
                                "{'lars', 'cd'}"
                            ], 
                            [
                                "lars", 
                                "uses the least angle regression method to solve the lasso problem"
                            ], 
                            [
                                "cd", 
                                "uses the coordinate descent method to compute the"
                            ], 
                            [
                                "n_jobs", 
                                "int,"
                            ], 
                            [
                                "dict_init", 
                                "array of shape (n_components, n_features),"
                            ], 
                            [
                                "code_init", 
                                "array of shape (n_samples, n_components),"
                            ], 
                            [
                                "callback", 
                                "callable or None, optional (default"
                            ], 
                            [
                                "verbose", 
                                "bool, optional (default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "return_n_iter", 
                                "bool"
                            ]
                        ], 
                        [
                            [
                                "code", 
                                "array of shape (n_samples, n_components)"
                            ], 
                            [
                                "dictionary", 
                                "array of shape (n_components, n_features),"
                            ], 
                            [
                                "errors", 
                                "array"
                            ], 
                            [
                                "n_iter", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def dict_learning_online(X, n_components=2, alpha=1, n_iter=100,\n                         return_code=True, dict_init=None, callback=None,\n                         batch_size=3, verbose=False, shuffle=True, n_jobs=1,\n                         method='lars', iter_offset=0, random_state=None,\n                         return_inner_stats=False, inner_stats=None,\n                         return_n_iter=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array of shape (n_samples, n_features)"
                            ], 
                            [
                                "n_components", 
                                "int,"
                            ], 
                            [
                                "alpha", 
                                "float,"
                            ], 
                            [
                                "n_iter", 
                                "int,"
                            ], 
                            [
                                "return_code", 
                                "boolean,"
                            ], 
                            [
                                "dict_init", 
                                "array of shape (n_components, n_features),"
                            ], 
                            [
                                "callback", 
                                "callable or None, optional (default"
                            ], 
                            [
                                "batch_size", 
                                "int,"
                            ], 
                            [
                                "verbose", 
                                "bool, optional (default"
                            ], 
                            [
                                "shuffle", 
                                "boolean,"
                            ], 
                            [
                                "n_jobs", 
                                "int,"
                            ], 
                            [
                                "method", 
                                "{'lars', 'cd'}"
                            ], 
                            [
                                "lars", 
                                "uses the least angle regression method to solve the lasso problem"
                            ], 
                            [
                                "cd", 
                                "uses the coordinate descent method to compute the"
                            ], 
                            [
                                "iter_offset", 
                                "int, default 0"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "return_inner_stats", 
                                "boolean, optional"
                            ], 
                            [
                                "inner_stats", 
                                "tuple of (A, B) ndarrays"
                            ], 
                            [
                                "return_n_iter", 
                                "bool"
                            ]
                        ], 
                        [
                            [
                                "code", 
                                "array of shape (n_samples, n_components),"
                            ], 
                            [
                                "dictionary", 
                                "array of shape (n_components, n_features),"
                            ], 
                            [
                                "n_iter", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _set_sparse_coding_params(self, n_components,\n                                  transform_algorithm='omp',\n                                  transform_n_nonzero_coefs=None,\n                                  transform_alpha=None, split_sign=False,\n                                  n_jobs=1):", 
                []
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array of shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "dictionary", 
                                "array, [n_components, n_features]"
                            ], 
                            [
                                "transform_algorithm", 
                                "{'lasso_lars', 'lasso_cd', 'lars', 'omp', \\"
                            ], 
                            [
                                "data", 
                                ""
                            ], 
                            [
                                "lars", 
                                "uses the least angle regression method (linear_model.lars_path)"
                            ], 
                            [
                                "lasso_lars", 
                                "uses Lars to compute the Lasso solution"
                            ], 
                            [
                                "lasso_cd", 
                                "uses the coordinate descent method to compute the"
                            ], 
                            [
                                "omp", 
                                "uses orthogonal matching pursuit to estimate the sparse solution"
                            ], 
                            [
                                "threshold", 
                                "squashes to zero all coefficients less than alpha from"
                            ], 
                            [
                                "transform_n_nonzero_coefs", 
                                "int, ``0.1 * n_features`` by default"
                            ], 
                            [
                                "transform_alpha", 
                                "float, 1. by default"
                            ], 
                            [
                                "parameter", 
                                "the value of"
                            ], 
                            [
                                "split_sign", 
                                "bool, False by default"
                            ], 
                            [
                                "n_jobs", 
                                "int,"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "Ignored"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=None, alpha=1, max_iter=1000, tol=1e-8,\n                 fit_algorithm='lars', transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 n_jobs=1, code_init=None, dict_init=None, verbose=False,\n                 split_sign=False, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int,"
                            ], 
                            [
                                "alpha", 
                                "float,"
                            ], 
                            [
                                "max_iter", 
                                "int,"
                            ], 
                            [
                                "tol", 
                                "float,"
                            ], 
                            [
                                "fit_algorithm", 
                                "{'lars', 'cd'}"
                            ], 
                            [
                                "lars", 
                                "uses the least angle regression method to solve the lasso problem"
                            ], 
                            [
                                "cd", 
                                "uses the coordinate descent method to compute the"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "transform_algorithm", 
                                "{'lasso_lars', 'lasso_cd', 'lars', 'omp', \\"
                            ], 
                            [
                                "lars", 
                                "uses the least angle regression method (linear_model.lars_path)"
                            ], 
                            [
                                "lasso_lars", 
                                "uses Lars to compute the Lasso solution"
                            ], 
                            [
                                "lasso_cd", 
                                "uses the coordinate descent method to compute the"
                            ], 
                            [
                                "omp", 
                                "uses orthogonal matching pursuit to estimate the sparse solution"
                            ], 
                            [
                                "threshold", 
                                "squashes to zero all coefficients less than alpha from"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "transform_n_nonzero_coefs", 
                                "int, ``0.1 * n_features`` by default"
                            ], 
                            [
                                "transform_alpha", 
                                "float, 1. by default"
                            ], 
                            [
                                "parameter", 
                                "the value of"
                            ], 
                            [
                                "n_jobs", 
                                "int,"
                            ], 
                            [
                                "code_init", 
                                "array of shape (n_samples, n_components),"
                            ], 
                            [
                                "dict_init", 
                                "array of shape (n_components, n_features),"
                            ], 
                            [
                                "verbose", 
                                "bool, optional (default"
                            ], 
                            [
                                "split_sign", 
                                "bool, False by default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=None, alpha=1, n_iter=1000,\n                 fit_algorithm='lars', n_jobs=1, batch_size=3,\n                 shuffle=True, dict_init=None, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 verbose=False, split_sign=False, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int,"
                            ], 
                            [
                                "alpha", 
                                "float,"
                            ], 
                            [
                                "n_iter", 
                                "int,"
                            ], 
                            [
                                "fit_algorithm", 
                                "{'lars', 'cd'}"
                            ], 
                            [
                                "lars", 
                                "uses the least angle regression method to solve the lasso problem"
                            ], 
                            [
                                "cd", 
                                "uses the coordinate descent method to compute the"
                            ], 
                            [
                                "n_jobs", 
                                "int,"
                            ], 
                            [
                                "batch_size", 
                                "int,"
                            ], 
                            [
                                "shuffle", 
                                "bool,"
                            ], 
                            [
                                "dict_init", 
                                "array of shape (n_components, n_features),"
                            ], 
                            [
                                "transform_algorithm", 
                                "{'lasso_lars', 'lasso_cd', 'lars', 'omp', \\"
                            ], 
                            [
                                "lars", 
                                "uses the least angle regression method (linear_model.lars_path)"
                            ], 
                            [
                                "lasso_lars", 
                                "uses Lars to compute the Lasso solution"
                            ], 
                            [
                                "lasso_cd", 
                                "uses the coordinate descent method to compute the"
                            ], 
                            [
                                "omp", 
                                "uses orthogonal matching pursuit to estimate the sparse solution"
                            ], 
                            [
                                "threshold", 
                                "squashes to zero all coefficients less than alpha from"
                            ], 
                            [
                                "transform_n_nonzero_coefs", 
                                "int, ``0.1 * n_features`` by default"
                            ], 
                            [
                                "transform_alpha", 
                                "float, 1. by default"
                            ], 
                            [
                                "parameter", 
                                "the value of"
                            ], 
                            [
                                "verbose", 
                                "bool, optional (default"
                            ], 
                            [
                                "split_sign", 
                                "bool, False by default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X, y=None, iter_offset=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ], 
                            [
                                "iter_offset", 
                                "integer, optional"
                            ], 
                            [
                                "optional", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        14
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\neural_network\\tests\\test_rbm.py": [
        [
            [
                "def test_fit():", 
                []
            ], 
            [
                "def test_partial_fit():", 
                []
            ], 
            [
                "def test_transform():", 
                []
            ], 
            [
                "def test_small_sparse():", 
                []
            ], 
            [
                "def test_small_sparse_partial_fit():", 
                []
            ], 
            [
                "def test_sample_hiddens():", 
                []
            ], 
            [
                "def test_fit_gibbs():", 
                []
            ], 
            [
                "def test_fit_gibbs_sparse():", 
                []
            ], 
            [
                "def test_gibbs_smoke():", 
                []
            ], 
            [
                "def test_score_samples():", 
                []
            ], 
            [
                "def test_rbm_verbose():", 
                []
            ], 
            [
                "def test_sparse_and_verbose():", 
                []
            ]
        ], 
        12
    ], 
    "../scikit-learn-master\\sklearn\\utils\\arpack.py": [
        [
            [
                "def eigs(A, *args, **kwargs):", 
                []
            ], 
            [
                "def eigsh(A, *args, **kwargs):", 
                []
            ], 
            [
                "def svds(A, *args, **kwargs):", 
                []
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\sklearn\\preprocessing\\data.py": [
        [
            [
                "def _handle_zeros_in_scale(scale, copy=True):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def scale(X, axis=0, with_mean=True, with_std=True, copy=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}"
                            ], 
                            [
                                "axis", 
                                "int (0 by default)"
                            ], 
                            [
                                "with_mean", 
                                "boolean, True by default"
                            ], 
                            [
                                "with_std", 
                                "boolean, True by default"
                            ], 
                            [
                                "copy", 
                                "boolean, optional, default True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, feature_range=(0, 1), copy=True):", 
                [
                    [
                        [
                            [
                                "feature_range", 
                                "tuple (min, max), default=(0, 1)"
                            ], 
                            [
                                "copy", 
                                "boolean, optional, default True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _reset(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape [n_samples, n_features]"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "Passthrough for ``Pipeline`` compatibility."
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape [n_samples, n_features]"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape [n_samples, n_features]"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def minmax_scale(X, feature_range=(0, 1), axis=0, copy=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "feature_range", 
                                "tuple (min, max), default=(0, 1)"
                            ], 
                            [
                                "axis", 
                                "int (0 by default)"
                            ], 
                            [
                                "copy", 
                                "boolean, optional, default is True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, copy=True, with_mean=True, with_std=True):", 
                [
                    [
                        [
                            [
                                "copy", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "with_mean", 
                                "boolean, True by default"
                            ], 
                            [
                                "with_std", 
                                "boolean, True by default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _reset(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "Passthrough for ``Pipeline`` compatibility."
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "Passthrough for ``Pipeline`` compatibility."
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X, y='deprecated', copy=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "(ignored)"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "copy", 
                                "bool, optional (default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, X, copy=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape [n_samples, n_features]"
                            ], 
                            [
                                "copy", 
                                "bool, optional (default"
                            ]
                        ], 
                        [
                            [
                                "X_tr", 
                                "array-like, shape [n_samples, n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, copy=True):", 
                [
                    [
                        [
                            [
                                "copy", 
                                "boolean, optional, default is True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _reset(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape [n_samples, n_features]"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "Passthrough for ``Pipeline`` compatibility."
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def maxabs_scale(X, axis=0, copy=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "axis", 
                                "int (0 by default)"
                            ], 
                            [
                                "copy", 
                                "boolean, optional, default is True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, with_centering=True, with_scaling=True,\n                 quantile_range=(25.0, 75.0), copy=True):", 
                [
                    [
                        [
                            [
                                "with_centering", 
                                "boolean, True by default"
                            ], 
                            [
                                "with_scaling", 
                                "boolean, True by default"
                            ], 
                            [
                                "quantile_range", 
                                "tuple (q_min, q_max), 0.0 < q_min < q_max < 100.0"
                            ], 
                            [
                                "Default", 
                                "(25.0, 75.0) = (1st quantile, 3rd quantile) = IQR"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "copy", 
                                "boolean, optional, default is True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_array(self, X, copy):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape [n_samples, n_features]"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def robust_scale(X, axis=0, with_centering=True, with_scaling=True,\n                 quantile_range=(25.0, 75.0), copy=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like"
                            ], 
                            [
                                "axis", 
                                "int (0 by default)"
                            ], 
                            [
                                "with_centering", 
                                "boolean, True by default"
                            ], 
                            [
                                "with_scaling", 
                                "boolean, True by default"
                            ], 
                            [
                                "quantile_range", 
                                "tuple (q_min, q_max), 0.0 < q_min < q_max < 100.0"
                            ], 
                            [
                                "Default", 
                                "(25.0, 75.0) = (1st quantile, 3rd quantile) = IQR"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "copy", 
                                "boolean, optional, default is True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, degree=2, interaction_only=False, include_bias=True):", 
                [
                    [
                        [
                            [
                                "degree", 
                                "integer"
                            ], 
                            [
                                "interaction_only", 
                                "boolean, default = False"
                            ], 
                            [
                                "produced", 
                                "features that are"
                            ], 
                            [
                                "include_bias", 
                                "boolean"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _combinations(n_features, degree, interaction_only, include_bias):", 
                []
            ], 
            [
                "def powers_(self):", 
                []
            ], 
            [
                "def get_feature_names(self, input_features=None):", 
                [
                    [
                        [
                            [
                                "input_features", 
                                "list of string, length n_features, optional"
                            ]
                        ], 
                        [
                            [
                                "output_feature_names", 
                                "list of string, length n_output_features"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "instance"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "XP", 
                                "np.ndarray shape [n_samples, NP]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def normalize(X, norm='l2', axis=1, copy=True, return_norm=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape [n_samples, n_features]"
                            ], 
                            [
                                "norm", 
                                "'l1', 'l2', or 'max', optional ('l2' by default)"
                            ], 
                            [
                                "axis", 
                                "0 or 1, optional (1 by default)"
                            ], 
                            [
                                "copy", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "return_norm", 
                                "boolean, default False"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape [n_samples, n_features]"
                            ], 
                            [
                                "norms", 
                                "array, shape [n_samples] if axis=1 else [n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, norm='l2', copy=True):", 
                [
                    [
                        [
                            [
                                "norm", 
                                "'l1', 'l2', or 'max', optional ('l2' by default)"
                            ], 
                            [
                                "copy", 
                                "boolean, optional, default True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X, y='deprecated', copy=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "(ignored)"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "copy", 
                                "bool, optional (default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def binarize(X, threshold=0.0, copy=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape [n_samples, n_features]"
                            ], 
                            [
                                "threshold", 
                                "float, optional (0.0 by default)"
                            ], 
                            [
                                "copy", 
                                "boolean, optional, default True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, threshold=0.0, copy=True):", 
                [
                    [
                        [
                            [
                                "threshold", 
                                "float, optional (0.0 by default)"
                            ], 
                            [
                                "copy", 
                                "boolean, optional, default True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X, y='deprecated', copy=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "(ignored)"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "copy", 
                                "bool"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, K, y=None):", 
                [
                    [
                        [
                            [
                                "K", 
                                "numpy array of shape [n_samples, n_samples]"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, K, y='deprecated', copy=True):", 
                [
                    [
                        [
                            [
                                "K", 
                                "numpy array of shape [n_samples1, n_samples2]"
                            ], 
                            [
                                "y", 
                                "(ignored)"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "copy", 
                                "boolean, optional, default True"
                            ]
                        ], 
                        [
                            [
                                "K_new", 
                                "numpy array of shape [n_samples1, n_samples2]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _pairwise(self):", 
                []
            ], 
            [
                "def add_dummy_feature(X, value=1.0):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape [n_samples, n_features]"
                            ], 
                            [
                                "value", 
                                "float"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "{array, sparse matrix}, shape [n_samples, n_features + 1]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _transform_selected(X, transform, selected=\"all\", copy=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape [n_samples, n_features]"
                            ], 
                            [
                                "transform", 
                                "callable"
                            ], 
                            [
                                "copy", 
                                "boolean, optional"
                            ], 
                            [
                                "selected", 
                                "\"all\" or array of indices or mask"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array or sparse matrix, shape=(n_samples, n_features_new)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_values=\"auto\", categorical_features=\"all\",\n                 dtype=np.float64, sparse=True, handle_unknown='error'):", 
                [
                    [
                        [
                            [
                                "n_values", 
                                "'auto', int or array of ints"
                            ], 
                            [
                                "int", 
                                "number of categorical values per feature."
                            ], 
                            [
                                "array", 
                                "``n_values[i]`` is the number of categorical values in"
                            ], 
                            [
                                "categorical_features", 
                                "\"all\" or array of indices or mask"
                            ], 
                            [
                                "indices", 
                                "Array of categorical feature indices."
                            ], 
                            [
                                "mask", 
                                "Array of length n_features and with dtype=bool."
                            ], 
                            [
                                "dtype", 
                                "number type, default=np.float"
                            ], 
                            [
                                "sparse", 
                                "boolean, default=True"
                            ], 
                            [
                                "handle_unknown", 
                                "str, 'error' or 'ignore'"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape [n_samples, n_feature]"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def _fit_transform(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape [n_samples, n_feature]"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _transform(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "X_out", 
                                "sparse matrix if sparse=True else a 2-d array, dtype=int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_quantiles=1000, output_distribution='uniform',\n                 ignore_implicit_zeros=False, subsample=int(1e5),\n                 random_state=None, copy=True):", 
                [
                    [
                        [
                            [
                                "n_quantiles", 
                                "int, optional (default=1000)"
                            ], 
                            [
                                "output_distribution", 
                                "str, optional (default='uniform')"
                            ], 
                            [
                                "ignore_implicit_zeros", 
                                "bool, optional (default=False)"
                            ], 
                            [
                                "subsample", 
                                "int, optional (default=1e5)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "copy", 
                                "boolean, optional, (default=True)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _dense_fit(self, X, random_state):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray, shape (n_samples, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _sparse_fit(self, X, random_state):", 
                [
                    [
                        [
                            [
                                "X", 
                                "sparse matrix CSC, shape (n_samples, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray or sparse matrix, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _transform_col(self, X_col, quantiles, inverse):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _check_inputs(self, X, accept_sparse_negative=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _check_is_fitted(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _transform(self, X, inverse=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray, shape (n_samples, n_features)"
                            ], 
                            [
                                "inverse", 
                                "bool, optional (default=False)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "ndarray, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray or sparse matrix, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "Xt", 
                                "ndarray or sparse matrix, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray or sparse matrix, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "Xt", 
                                "ndarray or sparse matrix, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def quantile_transform(X, axis=0, n_quantiles=1000,\n                       output_distribution='uniform',\n                       ignore_implicit_zeros=False,\n                       subsample=int(1e5),\n                       random_state=None,\n                       copy=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, sparse matrix"
                            ], 
                            [
                                "axis", 
                                "int, (default=0)"
                            ], 
                            [
                                "n_quantiles", 
                                "int, optional (default=1000)"
                            ], 
                            [
                                "output_distribution", 
                                "str, optional (default='uniform')"
                            ], 
                            [
                                "ignore_implicit_zeros", 
                                "bool, optional (default=False)"
                            ], 
                            [
                                "subsample", 
                                "int, optional (default=1e5)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "copy", 
                                "boolean, optional, (default=True)"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        64
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\olivetti_faces.py": [
        [
            [
                "def fetch_olivetti_faces(data_home=None, shuffle=False, random_state=0,\n                         download_if_missing=True):", 
                [
                    [
                        [
                            [
                                "data_home", 
                                "optional, default"
                            ], 
                            [
                                "shuffle", 
                                "boolean, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=0)"
                            ], 
                            [
                                "download_if_missing", 
                                "optional, True by default"
                            ]
                        ], 
                        [
                            [
                                "attributes", 
                                ""
                            ], 
                            [
                                "data", 
                                "numpy array of shape (400, 4096)"
                            ], 
                            [
                                "images", 
                                "numpy array of shape (400, 64, 64)"
                            ], 
                            [
                                "target", 
                                "numpy array of shape (400, )"
                            ], 
                            [
                                "DESCR", 
                                "string"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\tree\\plot_tree_regression_multioutput.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\doc\\tutorial\\machine_learning_map\\pyparsing.py": [
        [
            [
                "def _ustr(obj):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _str2dict(strg):", 
                []
            ], 
            [
                "def __init__( self, pstr, loc=0, msg=None, elem=None ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __getattr__( self, aname ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def __repr__( self ):", 
                []
            ], 
            [
                "def markInputline( self, markerString = \">!<\" ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__( self, parseElementList ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def __init__(self,p1,p2):", 
                []
            ], 
            [
                "def __getitem__(self,i):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __new__(cls, toklist, name=None, asList=True, modal=True ):", 
                []
            ], 
            [
                "def __init__( self, toklist, name=None, asList=True, modal=True ):", 
                []
            ], 
            [
                "def __getitem__( self, i ):", 
                []
            ], 
            [
                "def __setitem__( self, k, v ):", 
                []
            ], 
            [
                "def __delitem__( self, i ):", 
                []
            ], 
            [
                "def __contains__(self, k):", 
                []
            ], 
            [
                "def __len__( self ):", 
                []
            ], 
            [
                "def __bool__(self):", 
                []
            ], 
            [
                "def __nonzero__( self ):", 
                []
            ], 
            [
                "def __iter__( self ):", 
                []
            ], 
            [
                "def __reversed__( self ):", 
                []
            ], 
            [
                "def keys( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def pop( self, index=-1 ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get(self, key, defaultValue=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def insert( self, index, insStr ):", 
                []
            ], 
            [
                "def items( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def values( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __getattr__( self, name ):", 
                []
            ], 
            [
                "def __add__( self, other ):", 
                []
            ], 
            [
                "def __iadd__( self, other ):", 
                []
            ], 
            [
                "def __repr__( self ):", 
                []
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def _asStringList( self, sep='' ):", 
                []
            ], 
            [
                "def asList( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def asDict( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def copy( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def asXML( self, doctag=None, namedItemsOnly=False, indent=\"\", formatted=True ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __lookup(self,sub):", 
                []
            ], 
            [
                "def getName(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def dump(self,indent='',depth=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __getstate__(self):", 
                []
            ], 
            [
                "def __setstate__(self,state):", 
                []
            ], 
            [
                "def col (loc,strg):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def lineno(loc,strg):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def line( loc, strg ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _defaultStartDebugAction( instring, loc, expr ):", 
                []
            ], 
            [
                "def _defaultSuccessDebugAction( instring, startloc, endloc, expr, toks ):", 
                []
            ], 
            [
                "def _defaultExceptionDebugAction( instring, loc, expr, exc ):", 
                []
            ], 
            [
                "def nullDebugAction(*args):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def setDefaultWhitespaceChars( chars ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__( self, savelist=False ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def copy( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def setName( self, name ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def setResultsName( self, name, listAllMatches=False ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def setBreak(self,breakFlag = True):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def breaker(instring, loc, doActions=True, callPreParse=True):", 
                []
            ], 
            [
                "def _normalizeParseActionArgs( f ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def tmp(s,l,t):", 
                []
            ], 
            [
                "def tmp(s,l,t):", 
                []
            ], 
            [
                "def tmp(s,l,t):", 
                []
            ], 
            [
                "def setParseAction( self, *fns, **kwargs ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def addParseAction( self, *fns, **kwargs ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def setFailAction( self, fn ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _skipIgnorables( self, instring, loc ):", 
                []
            ], 
            [
                "def preParse( self, instring, loc ):", 
                []
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def postParse( self, instring, loc, tokenlist ):", 
                []
            ], 
            [
                "def _parseNoCache( self, instring, loc, doActions=True, callPreParse=True ):", 
                []
            ], 
            [
                "def tryParse( self, instring, loc ):", 
                []
            ], 
            [
                "def _parseCache( self, instring, loc, doActions=True, callPreParse=True ):", 
                []
            ], 
            [
                "def resetCache():", 
                []
            ], 
            [
                "def enablePackrat():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseString( self, instring ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def scanString( self, instring, maxMatches=__MAX_INT__ ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def transformString( self, instring ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def searchString( self, instring, maxMatches=__MAX_INT__ ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __add__(self, other ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __radd__(self, other ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __mul__(self,other):", 
                []
            ], 
            [
                "def makeOptionalList(n):", 
                []
            ], 
            [
                "def __rmul__(self, other):", 
                []
            ], 
            [
                "def __or__(self, other ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __ror__(self, other ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __xor__(self, other ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __rxor__(self, other ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __and__(self, other ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __rand__(self, other ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __invert__( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __call__(self, name):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def suppress( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def leaveWhitespace( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def setWhitespaceChars( self, chars ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseWithTabs( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def ignore( self, other ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def setDebugActions( self, startAction, successAction, exceptionAction ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def setDebug( self, flag=True ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def __repr__( self ):", 
                []
            ], 
            [
                "def streamline( self ):", 
                []
            ], 
            [
                "def checkRecursion( self, parseElementList ):", 
                []
            ], 
            [
                "def validate( self, validateTrace=[] ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseFile( self, file_or_filename ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def getException(self):", 
                []
            ], 
            [
                "def __getattr__(self,aname):", 
                []
            ], 
            [
                "def __eq__(self,other):", 
                []
            ], 
            [
                "def __req__(self,other):", 
                []
            ], 
            [
                "def __init__( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def setName(self, name):", 
                []
            ], 
            [
                "def __init__( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __init__( self, matchString ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __init__( self, matchString, identChars=DEFAULT_KEYWORD_CHARS, caseless=False ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def copy(self):", 
                []
            ], 
            [
                "def setDefaultKeywordChars( chars ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__( self, matchString ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __init__( self, matchString, identChars=Keyword.DEFAULT_KEYWORD_CHARS ):", 
                []
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __init__( self, initChars, bodyChars=None, min=1, max=0, exact=0, asKeyword=False ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def charsAsStr(s):", 
                []
            ], 
            [
                "def __init__( self, pattern, flags=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def __init__( self, quoteChar, escChar=None, escQuote=None, multiline=False, unquoteResults=True, endQuoteChar=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def __init__( self, notChars, min=1, max=0, exact=0 ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def __init__(self, ws=\" \\t\\r\\n\", min=1, max=0, exact=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __init__( self ):", 
                []
            ], 
            [
                "def __init__( self, colno ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def preParse( self, instring, loc ):", 
                []
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __init__( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def preParse( self, instring, loc ):", 
                []
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __init__( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __init__( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __init__( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __init__(self, wordChars = printables):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl(self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __init__(self, wordChars = printables):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl(self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __init__( self, exprs, savelist = False ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __getitem__( self, i ):", 
                []
            ], 
            [
                "def append( self, other ):", 
                []
            ], 
            [
                "def leaveWhitespace( self ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def ignore( self, other ):", 
                []
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def streamline( self ):", 
                []
            ], 
            [
                "def setResultsName( self, name, listAllMatches=False ):", 
                []
            ], 
            [
                "def validate( self, validateTrace=[] ):", 
                []
            ], 
            [
                "def __init__( self, exprs, savelist = True ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __iadd__(self, other ):", 
                []
            ], 
            [
                "def checkRecursion( self, parseElementList ):", 
                []
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def __init__( self, exprs, savelist = False ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __ixor__(self, other ):", 
                []
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def checkRecursion( self, parseElementList ):", 
                []
            ], 
            [
                "def __init__( self, exprs, savelist = False ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __ior__(self, other ):", 
                []
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def checkRecursion( self, parseElementList ):", 
                []
            ], 
            [
                "def __init__( self, exprs, savelist = True ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def checkRecursion( self, parseElementList ):", 
                []
            ], 
            [
                "def __init__( self, expr, savelist=False ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def leaveWhitespace( self ):", 
                []
            ], 
            [
                "def ignore( self, other ):", 
                []
            ], 
            [
                "def streamline( self ):", 
                []
            ], 
            [
                "def checkRecursion( self, parseElementList ):", 
                []
            ], 
            [
                "def validate( self, validateTrace=[] ):", 
                []
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def __init__( self, expr ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __init__( self, expr ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def __init__( self, expr ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def setResultsName( self, name, listAllMatches=False ):", 
                []
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def setResultsName( self, name, listAllMatches=False ):", 
                []
            ], 
            [
                "def __bool__(self):", 
                []
            ], 
            [
                "def __str__(self):", 
                []
            ], 
            [
                "def __init__( self, exprs, default=_optionalNotMatched ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def __init__( self, other, include=False, ignore=None ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parseImpl( self, instring, loc, doActions=True ):", 
                []
            ], 
            [
                "def __init__( self, other=None ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __lshift__( self, other ):", 
                []
            ], 
            [
                "def leaveWhitespace( self ):", 
                []
            ], 
            [
                "def streamline( self ):", 
                []
            ], 
            [
                "def validate( self, validateTrace=[] ):", 
                []
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def copy(self):", 
                []
            ], 
            [
                "def __str__( self ):", 
                []
            ], 
            [
                "def __init__( self, expr, savelist=False ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, *args):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def postParse( self, instring, loc, tokenlist ):", 
                []
            ], 
            [
                "def __init__( self, expr, joinString=\"\", adjacent=True ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def ignore( self, other ):", 
                []
            ], 
            [
                "def postParse( self, instring, loc, tokenlist ):", 
                []
            ], 
            [
                "def __init__( self, expr ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def postParse( self, instring, loc, tokenlist ):", 
                []
            ], 
            [
                "def __init__( self, exprs ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def postParse( self, instring, loc, tokenlist ):", 
                []
            ], 
            [
                "def postParse( self, instring, loc, tokenlist ):", 
                []
            ], 
            [
                "def suppress( self ):", 
                []
            ], 
            [
                "def __init__(self, methodCall):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __call__(self,s,l,t):", 
                []
            ], 
            [
                "def reset(self):", 
                []
            ], 
            [
                "def traceParseAction(f):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def z(*paArgs):", 
                []
            ], 
            [
                "def delimitedList( expr, delim=\",\", combine=False ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def countedArray( expr ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def countFieldParseAction(s,l,t):", 
                []
            ], 
            [
                "def _flatten(L):", 
                []
            ], 
            [
                "def matchPreviousLiteral(expr):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def copyTokenToRepeater(s,l,t):", 
                []
            ], 
            [
                "def matchPreviousExpr(expr):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def copyTokenToRepeater(s,l,t):", 
                []
            ], 
            [
                "def mustMatchTheseTokens(s,l,t):", 
                []
            ], 
            [
                "def _escapeRegexRangeChars(s):", 
                []
            ], 
            [
                "def oneOf( strs, caseless=False, useRegex=True ):", 
                [
                    [
                        [], 
                        null
                    ]
                ]
            ], 
            [
                "def dictOf( key, value ):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def srange(s):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def matchOnlyAtCol(n):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def verifyCol(strg,locn,toks):", 
                []
            ], 
            [
                "def replaceWith(replStr):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _replFunc(*args):", 
                []
            ], 
            [
                "def removeQuotes(s,l,t):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def upcaseTokens(s,l,t):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def downcaseTokens(s,l,t):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def keepOriginalText(s,startLoc,t):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def getTokensEndLoc():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _makeTags(tagStr, xml):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def makeHTMLTags(tagStr):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def makeXMLTags(tagStr):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def withAttribute(*args,**attrDict):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def pa(s,l,tokens):", 
                []
            ], 
            [
                "def operatorPrecedence( baseExpr, opList ):", 
                [
                    [
                        [
                            [
                                "where", 
                                ""
                            ]
                        ], 
                        null
                    ], 
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def nestedExpr(opener=\"(\", closer=\")\", content=None, ignoreExpr=quotedString):", 
                [
                    [
                        [], 
                        null
                    ]
                ]
            ], 
            [
                "def test( teststring ):", 
                []
            ]
        ], 
        265
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_sparse_logistic_regression_20newsgroups.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\tests\\test_hierarchical.py": [
        [
            [
                "def test_deprecation_of_n_components_in_linkage_tree():", 
                []
            ], 
            [
                "def test_linkage_misc():", 
                []
            ], 
            [
                "def test_structured_linkage_tree():", 
                []
            ], 
            [
                "def test_unstructured_linkage_tree():", 
                []
            ], 
            [
                "def test_height_linkage_tree():", 
                []
            ], 
            [
                "def test_agglomerative_clustering_wrong_arg_memory():", 
                []
            ], 
            [
                "def test_agglomerative_clustering():", 
                []
            ], 
            [
                "def test_ward_agglomeration():", 
                []
            ], 
            [
                "def assess_same_labelling(cut1, cut2):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_scikit_vs_scipy():", 
                []
            ], 
            [
                "def test_connectivity_propagation():", 
                []
            ], 
            [
                "def test_ward_tree_children_order():", 
                []
            ], 
            [
                "def test_ward_linkage_tree_return_distance():", 
                []
            ], 
            [
                "def test_connectivity_fixing_non_lil():", 
                []
            ], 
            [
                "def test_int_float_dict():", 
                []
            ], 
            [
                "def test_connectivity_callable():", 
                []
            ], 
            [
                "def test_connectivity_ignores_diagonal():", 
                []
            ], 
            [
                "def test_compute_full_tree():", 
                []
            ], 
            [
                "def test_n_components():", 
                []
            ], 
            [
                "def test_agg_n_clusters():", 
                []
            ], 
            [
                "def test_affinity_passed_to_fix_connectivity():", 
                []
            ], 
            [
                "def __init__(self):", 
                []
            ], 
            [
                "def increment(self, *args, **kwargs):", 
                []
            ]
        ], 
        23
    ], 
    "../scikit-learn-master\\examples\\neighbors\\plot_digits_kde_sampling.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\covariance\\robust_covariance.py": [
        [
            [
                "def c_step(X, n_support, remaining_iterations=30, initial_estimates=None,\n           verbose=False, cov_computation_method=empirical_covariance,\n           random_state=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "n_support", 
                                "int, > n_samples / 2"
                            ], 
                            [
                                "remaining_iterations", 
                                "int, optional"
                            ], 
                            [
                                "initial_estimates", 
                                "2-tuple, optional"
                            ], 
                            [
                                "procedure", 
                                ""
                            ], 
                            [
                                "verbose", 
                                "boolean, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "cov_computation_method", 
                                "callable, default empirical_covariance"
                            ]
                        ], 
                        [
                            [
                                "location", 
                                "array-like, shape (n_features,)"
                            ], 
                            [
                                "covariance", 
                                "array-like, shape (n_features, n_features)"
                            ], 
                            [
                                "support", 
                                "array-like, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _c_step(X, n_support, random_state, remaining_iterations=30,\n            initial_estimates=None, verbose=False,\n            cov_computation_method=empirical_covariance):", 
                []
            ], 
            [
                "def select_candidates(X, n_support, n_trials, select=1, n_iter=30,\n                      verbose=False,\n                      cov_computation_method=empirical_covariance,\n                      random_state=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "n_support", 
                                "int, [(n + p + 1)/2] < n_support < n"
                            ], 
                            [
                                "select", 
                                "int, int > 0"
                            ], 
                            [
                                "n_trials", 
                                "int, nb_trials > 0 or 2-tuple"
                            ], 
                            [
                                "case", 
                                ""
                            ], 
                            [
                                "n_iter", 
                                "int, nb_iter > 0"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "cov_computation_method", 
                                "callable, default empirical_covariance"
                            ], 
                            [
                                "verbose", 
                                "boolean, default False"
                            ]
                        ], 
                        [
                            [
                                "best_locations", 
                                "array-like, shape (select, n_features)"
                            ], 
                            [
                                "best_covariances", 
                                "array-like, shape (select, n_features, n_features)"
                            ], 
                            [
                                "best_supports", 
                                "array-like, shape (select, n_samples)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fast_mcd(X, support_fraction=None,\n             cov_computation_method=empirical_covariance,\n             random_state=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "support_fraction", 
                                "float, 0 < support_fraction < 1"
                            ], 
                            [
                                "algorithm", 
                                ""
                            ], 
                            [
                                "cov_computation_method", 
                                "callable, default empirical_covariance"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "location", 
                                "array-like, shape (n_features,)"
                            ], 
                            [
                                "covariance", 
                                "array-like, shape (n_features, n_features)"
                            ], 
                            [
                                "support", 
                                "array-like, type boolean, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, store_precision=True, assume_centered=False,\n                 support_fraction=None, random_state=None):", 
                [
                    [
                        [
                            [
                                "store_precision", 
                                "bool"
                            ], 
                            [
                                "assume_centered", 
                                "Boolean"
                            ], 
                            [
                                "support_fraction", 
                                "float, 0 < support_fraction < 1"
                            ], 
                            [
                                "algorithm", 
                                ""
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "not used, present for API consistence purpose."
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def correct_covariance(self, data):", 
                [
                    [
                        [
                            [
                                "data", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "covariance_corrected", 
                                "array-like, shape (n_features, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def reweight_covariance(self, data):", 
                [
                    [
                        [
                            [
                                "data", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "location_reweighted", 
                                "array-like, shape (n_features, )"
                            ], 
                            [
                                "covariance_reweighted", 
                                "array-like, shape (n_features, n_features)"
                            ], 
                            [
                                "support_reweighted", 
                                "array-like, type boolean, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\examples\\svm\\plot_oneclass.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\tests\\test_iforest.py": [
        [
            [
                "def test_iforest():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_iforest_sparse():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_iforest_error():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_recalculate_max_depth():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_max_samples_attribute():", 
                []
            ], 
            [
                "def test_iforest_parallel_regression():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_iforest_performance():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_iforest_works():", 
                []
            ], 
            [
                "def test_max_samples_consistency():", 
                []
            ], 
            [
                "def test_iforest_subsampled_features():", 
                []
            ], 
            [
                "def test_iforest_average_path_length():", 
                []
            ]
        ], 
        11
    ], 
    "../scikit-learn-master\\examples\\text\\document_clustering.py": [
        [
            [
                "def is_interactive():", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\lfw.py": [
        [
            [
                "def scale_face(face):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def check_fetch_lfw(data_home=None, funneled=True, download_if_missing=True):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _load_imgs(file_paths, slice_, color, resize):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _fetch_lfw_people(data_folder_path, slice_=None, color=False, resize=None,\n                      min_faces_per_person=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fetch_lfw_people(data_home=None, funneled=True, resize=0.5,\n                     min_faces_per_person=0, color=False,\n                     slice_=(slice(70, 195), slice(78, 172)),\n                     download_if_missing=True):", 
                [
                    [
                        [
                            [
                                "data_home", 
                                "optional, default"
                            ], 
                            [
                                "funneled", 
                                "boolean, optional, default"
                            ], 
                            [
                                "resize", 
                                "float, optional, default 0.5"
                            ], 
                            [
                                "min_faces_per_person", 
                                "int, optional, default None"
                            ], 
                            [
                                "color", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "slice_", 
                                "optional"
                            ], 
                            [
                                "download_if_missing", 
                                "optional, True by default"
                            ]
                        ], 
                        [
                            [
                                "dataset", 
                                "dict-like object with the following attributes"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _fetch_lfw_pairs(index_file_path, data_folder_path, slice_=None,\n                     color=False, resize=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fetch_lfw_pairs(subset='train', data_home=None, funneled=True, resize=0.5,\n                    color=False, slice_=(slice(70, 195), slice(78, 172)),\n                    download_if_missing=True):", 
                [
                    [
                        [
                            [
                                "subset", 
                                "optional, default"
                            ], 
                            [
                                "load", 
                                "'train' for the development training"
                            ], 
                            [
                                "data_home", 
                                "optional, default"
                            ], 
                            [
                                "funneled", 
                                "boolean, optional, default"
                            ], 
                            [
                                "resize", 
                                "float, optional, default 0.5"
                            ], 
                            [
                                "color", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "slice_", 
                                "optional"
                            ], 
                            [
                                "download_if_missing", 
                                "optional, True by default"
                            ]
                        ], 
                        [
                            [
                                "attributes", 
                                ""
                            ], 
                            [
                                "data", 
                                "numpy array of shape (2200, 5828). Shape depends on ``subset``."
                            ], 
                            [
                                "pairs", 
                                "numpy array of shape (2200, 2, 62, 47). Shape depends on"
                            ], 
                            [
                                "target", 
                                "numpy array of shape (2200,). Shape depends on ``subset``."
                            ], 
                            [
                                "DESCR", 
                                "string"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\tests\\test_neighbors.py": [
        [
            [
                "def _weight_func(dist):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_unsupervised_kneighbors(n_samples=20, n_features=5,\n                                 n_query_pts=2, n_neighbors=5):", 
                []
            ], 
            [
                "def test_unsupervised_inputs():", 
                []
            ], 
            [
                "def test_precomputed(random_state=42):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_precomputed_cross_validation():", 
                []
            ], 
            [
                "def test_unsupervised_radius_neighbors(n_samples=20, n_features=5,\n                                       n_query_pts=2, radius=0.5,\n                                       random_state=0):", 
                []
            ], 
            [
                "def test_kneighbors_classifier(n_samples=40,\n                               n_features=5,\n                               n_test_pts=10,\n                               n_neighbors=5,\n                               random_state=0):", 
                []
            ], 
            [
                "def test_kneighbors_classifier_float_labels(n_samples=40, n_features=5,\n                                            n_test_pts=10, n_neighbors=5,\n                                            random_state=0):", 
                []
            ], 
            [
                "def test_kneighbors_classifier_predict_proba():", 
                []
            ], 
            [
                "def test_radius_neighbors_classifier(n_samples=40,\n                                     n_features=5,\n                                     n_test_pts=10,\n                                     radius=0.5,\n                                     random_state=0):", 
                []
            ], 
            [
                "def test_radius_neighbors_classifier_when_no_neighbors():", 
                []
            ], 
            [
                "def test_radius_neighbors_classifier_outlier_labeling():", 
                []
            ], 
            [
                "def test_radius_neighbors_classifier_zero_distance():", 
                []
            ], 
            [
                "def test_neighbors_regressors_zero_distance():", 
                []
            ], 
            [
                "def test_radius_neighbors_boundary_handling():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_RadiusNeighborsClassifier_multioutput():", 
                []
            ], 
            [
                "def test_kneighbors_classifier_sparse(n_samples=40,\n                                      n_features=5,\n                                      n_test_pts=10,\n                                      n_neighbors=5,\n                                      random_state=0):", 
                []
            ], 
            [
                "def test_KNeighborsClassifier_multioutput():", 
                []
            ], 
            [
                "def test_kneighbors_regressor(n_samples=40,\n                              n_features=5,\n                              n_test_pts=10,\n                              n_neighbors=3,\n                              random_state=0):", 
                []
            ], 
            [
                "def test_KNeighborsRegressor_multioutput_uniform_weight():", 
                []
            ], 
            [
                "def test_kneighbors_regressor_multioutput(n_samples=40,\n                                          n_features=5,\n                                          n_test_pts=10,\n                                          n_neighbors=3,\n                                          random_state=0):", 
                []
            ], 
            [
                "def test_radius_neighbors_regressor(n_samples=40,\n                                    n_features=3,\n                                    n_test_pts=10,\n                                    radius=0.5,\n                                    random_state=0):", 
                []
            ], 
            [
                "def test_RadiusNeighborsRegressor_multioutput_with_uniform_weight():", 
                []
            ], 
            [
                "def test_RadiusNeighborsRegressor_multioutput(n_samples=40,\n                                              n_features=5,\n                                              n_test_pts=10,\n                                              n_neighbors=3,\n                                              random_state=0):", 
                []
            ], 
            [
                "def test_kneighbors_regressor_sparse(n_samples=40,\n                                     n_features=5,\n                                     n_test_pts=10,\n                                     n_neighbors=5,\n                                     random_state=0):", 
                []
            ], 
            [
                "def test_neighbors_iris():", 
                []
            ], 
            [
                "def test_neighbors_digits():", 
                []
            ], 
            [
                "def test_kneighbors_graph():", 
                []
            ], 
            [
                "def test_kneighbors_graph_sparse(seed=36):", 
                []
            ], 
            [
                "def test_radius_neighbors_graph():", 
                []
            ], 
            [
                "def test_radius_neighbors_graph_sparse(seed=36):", 
                []
            ], 
            [
                "def test_neighbors_badargs():", 
                []
            ], 
            [
                "def test_neighbors_metrics(n_samples=20, n_features=3,\n                           n_query_pts=2, n_neighbors=5):", 
                []
            ], 
            [
                "def test_callable_metric():", 
                []
            ], 
            [
                "def custom_metric(x1, x2):", 
                []
            ], 
            [
                "def test_valid_brute_metric_for_auto_algorithm():", 
                []
            ], 
            [
                "def test_metric_params_interface():", 
                []
            ], 
            [
                "def test_predict_sparse_ball_kd_tree():", 
                []
            ], 
            [
                "def test_non_euclidean_kneighbors():", 
                []
            ], 
            [
                "def check_object_arrays(nparray, list_check):", 
                []
            ], 
            [
                "def test_k_and_radius_neighbors_train_is_not_query():", 
                []
            ], 
            [
                "def test_k_and_radius_neighbors_X_None():", 
                []
            ], 
            [
                "def test_k_and_radius_neighbors_duplicates():", 
                []
            ], 
            [
                "def test_include_self_neighbors_graph():", 
                []
            ], 
            [
                "def test_same_knn_parallel():", 
                []
            ], 
            [
                "def check_same_knn_parallel(algorithm):", 
                []
            ], 
            [
                "def test_dtype_convert():", 
                []
            ], 
            [
                "def test_pairwise_boolean_distance():", 
                []
            ]
        ], 
        48
    ], 
    "../scikit-learn-master\\examples\\manifold\\plot_swissroll.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\memory.py": [
        [
            [
                "def extract_first_line(func_code):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _get_func_fullname(func):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _cache_key_to_dir(cachedir, func, argument_hash):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _load_output(output_dir, func_name, timestamp=None, metadata=None,\n                 mmap_mode=None, verbose=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _get_cache_items(root_path):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _get_cache_items_to_delete(root_path, bytes_limit):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def concurrency_safe_write(to_write, filename, write_func):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, cachedir, func, argument_hash,\n                 mmap_mode=None, verbose=0, timestamp=None, metadata=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def clear(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __reduce__(self):", 
                []
            ], 
            [
                "def __init__(self, value):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get(self):", 
                []
            ], 
            [
                "def clear(self):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __getstate__(self):", 
                []
            ], 
            [
                "def __setstate__(self, state):", 
                []
            ], 
            [
                "def __init__(self, func):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __call__(self, *args, **kwargs):", 
                []
            ], 
            [
                "def call_and_shelve(self, *args, **kwargs):", 
                []
            ], 
            [
                "def __reduce__(self):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def clear(self, warn=True):", 
                []
            ], 
            [
                "def __init__(self, func, cachedir, ignore=None, mmap_mode=None,\n                 compress=False, verbose=1, timestamp=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _cached_call(self, args, kwargs):", 
                [
                    [
                        null, 
                        [
                            [
                                "output", 
                                "value or tuple"
                            ], 
                            [
                                "argument_hash", 
                                "string"
                            ], 
                            [
                                "metadata", 
                                "dict"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def call_and_shelve(self, *args, **kwargs):", 
                []
            ], 
            [
                "def __call__(self, *args, **kwargs):", 
                []
            ], 
            [
                "def __reduce__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _get_argument_hash(self, *args, **kwargs):", 
                []
            ], 
            [
                "def _get_output_dir(self, *args, **kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _get_func_dir(self, mkdir=True):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _hash_func(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _write_func_code(self, filename, func_code, first_line):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _check_previous_func_code(self, stacklevel=2):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def clear(self, warn=True):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def call(self, *args, **kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _persist_output(self, output, dir):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _persist_input(self, output_dir, duration, args, kwargs,\n                       this_duration_limit=0.5):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def write_func(output, dest_filename):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __init__(self, cachedir, mmap_mode=None, compress=False, verbose=1,\n                 bytes_limit=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def cache(self, func=None, ignore=None, verbose=None,\n                        mmap_mode=False):", 
                [
                    [
                        [
                            [
                                "func", 
                                "callable, optional"
                            ], 
                            [
                                "ignore", 
                                "list of strings"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ], 
                            [
                                "mmap_mode", 
                                "{None, 'r+', 'r', 'w+', 'c'}, optional"
                            ]
                        ], 
                        [
                            [
                                "decorated_func", 
                                "MemorizedFunc object"
                            ], 
                            [
                                "for", 
                                "class"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def clear(self, warn=True):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def reduce_size(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def eval(self, func, *args, **kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __reduce__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        48
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_gradient_boosting_oob.py": [
        [
            [
                "def heldout_score(clf, X_test, y_test):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def cv_estimate(n_splits=3):", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\benchmarks\\bench_plot_fastkmeans.py": [
        [
            [
                "def compute_bench(samples_range, features_range):", 
                []
            ], 
            [
                "def compute_bench_2(chunks):", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\feature_selection\\base.py": [
        [
            [
                "def get_support(self, indices=False):", 
                [
                    [
                        [
                            [
                                "indices", 
                                "boolean (default False)"
                            ]
                        ], 
                        [
                            [
                                "support", 
                                "array"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _get_support_mask(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "support", 
                                "boolean array of shape [# input features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array of shape [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "X_r", 
                                "array of shape [n_samples, n_selected_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array of shape [n_samples, n_selected_features]"
                            ]
                        ], 
                        [
                            [
                                "X_r", 
                                "array of shape [n_samples, n_original_features]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\sklearn\\feature_extraction\\tests\\test_dict_vectorizer.py": [
        [
            [
                "def test_dictvectorizer():", 
                []
            ], 
            [
                "def test_feature_selection():", 
                []
            ], 
            [
                "def test_one_of_k():", 
                []
            ], 
            [
                "def test_unseen_or_no_features():", 
                []
            ], 
            [
                "def test_deterministic_vocabulary():", 
                []
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\tests\\test_dict_learning.py": [
        [
            [
                "def test_sparse_encode_shapes_omp():", 
                []
            ], 
            [
                "def test_dict_learning_shapes():", 
                []
            ], 
            [
                "def test_dict_learning_overcomplete():", 
                []
            ], 
            [
                "def test_dict_learning_reconstruction():", 
                []
            ], 
            [
                "def test_dict_learning_reconstruction_parallel():", 
                []
            ], 
            [
                "def test_dict_learning_lassocd_readonly_data():", 
                []
            ], 
            [
                "def test_dict_learning_nonzero_coefs():", 
                []
            ], 
            [
                "def test_dict_learning_unknown_fit_algorithm():", 
                []
            ], 
            [
                "def test_dict_learning_split():", 
                []
            ], 
            [
                "def test_dict_learning_online_shapes():", 
                []
            ], 
            [
                "def test_dict_learning_online_verbosity():", 
                []
            ], 
            [
                "def test_dict_learning_online_estimator_shapes():", 
                []
            ], 
            [
                "def test_dict_learning_online_overcomplete():", 
                []
            ], 
            [
                "def test_dict_learning_online_initialization():", 
                []
            ], 
            [
                "def test_dict_learning_online_partial_fit():", 
                []
            ], 
            [
                "def test_sparse_encode_shapes():", 
                []
            ], 
            [
                "def test_sparse_encode_input():", 
                []
            ], 
            [
                "def test_sparse_encode_error():", 
                []
            ], 
            [
                "def test_sparse_encode_error_default_sparsity():", 
                []
            ], 
            [
                "def test_unknown_method():", 
                []
            ], 
            [
                "def test_sparse_coder_estimator():", 
                []
            ]
        ], 
        21
    ], 
    "../scikit-learn-master\\examples\\bicluster\\plot_bicluster_newsgroups.py": [
        [
            [
                "def number_normalizer(tokens):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def build_tokenizer(self):", 
                []
            ], 
            [
                "def bicluster_ncut(i):", 
                []
            ], 
            [
                "def most_common(d):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\examples\\classification\\plot_classifier_comparison.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\mixture\\plot_gmm_sin.py": [
        [
            [
                "def plot_results(X, Y, means, covariances, index, title):", 
                []
            ], 
            [
                "def plot_samples(X, Y, n_components, index, title):", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\tests\\test_ball_tree.py": [
        [
            [
                "def dist_func(x1, x2, p):", 
                []
            ], 
            [
                "def brute_force_neighbors(X, Y, k, metric, **kwargs):", 
                []
            ], 
            [
                "def test_ball_tree_query():", 
                []
            ], 
            [
                "def check_neighbors(dualtree, breadth_first, k, metric, kwargs):", 
                []
            ], 
            [
                "def test_ball_tree_query_boolean_metrics():", 
                []
            ], 
            [
                "def check_neighbors(metric):", 
                []
            ], 
            [
                "def test_ball_tree_query_discrete_metrics():", 
                []
            ], 
            [
                "def check_neighbors(metric):", 
                []
            ], 
            [
                "def test_ball_tree_query_radius(n_samples=100, n_features=10):", 
                []
            ], 
            [
                "def test_ball_tree_query_radius_distance(n_samples=100, n_features=10):", 
                []
            ], 
            [
                "def compute_kernel_slow(Y, X, kernel, h):", 
                []
            ], 
            [
                "def check_results(kernel, h, atol, rtol, breadth_first, bt, Y, dens_true):", 
                []
            ], 
            [
                "def test_ball_tree_kde(n_samples=100, n_features=3):", 
                []
            ], 
            [
                "def test_gaussian_kde(n_samples=1000):", 
                []
            ], 
            [
                "def test_ball_tree_two_point(n_samples=100, n_features=3):", 
                []
            ], 
            [
                "def check_two_point(r, dualtree):", 
                []
            ], 
            [
                "def test_ball_tree_pickle():", 
                []
            ], 
            [
                "def check_pickle_protocol(protocol):", 
                []
            ], 
            [
                "def test_neighbors_heap(n_pts=5, n_nbrs=10):", 
                []
            ], 
            [
                "def test_node_heap(n_nodes=50):", 
                []
            ], 
            [
                "def test_simultaneous_sort(n_rows=10, n_pts=201):", 
                []
            ], 
            [
                "def test_query_haversine():", 
                []
            ]
        ], 
        22
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\bagging.py": [
        [
            [
                "def _generate_indices(random_state, bootstrap, n_population, n_samples):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _generate_bagging_indices(random_state, bootstrap_features,\n                              bootstrap_samples, n_features, n_samples,\n                              max_features, max_samples):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _parallel_build_estimators(n_estimators, ensemble, X, y, sample_weight,\n                               seeds, total_n_estimators, verbose):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _parallel_predict_proba(estimators, estimators_features, X, n_classes):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _parallel_predict_log_proba(estimators, estimators_features, X, n_classes):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _parallel_decision_function(estimators, estimators_features, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _parallel_predict_regression(estimators, estimators_features, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self,\n                 base_estimator=None,\n                 n_estimators=10,\n                 max_samples=1.0,\n                 max_features=1.0,\n                 bootstrap=True,\n                 bootstrap_features=False,\n                 oob_score=False,\n                 warm_start=False,\n                 n_jobs=1,\n                 random_state=None,\n                 verbose=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples] or None"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _fit(self, X, y, max_samples=None, max_depth=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples]"
                            ], 
                            [
                                "max_samples", 
                                "int or float, optional (default=None)"
                            ], 
                            [
                                "max_depth", 
                                "int, optional (default=None)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples] or None"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _set_oob_score(self, X, y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _validate_y(self, y):", 
                []
            ], 
            [
                "def _get_estimators_indices(self):", 
                []
            ], 
            [
                "def estimators_samples_(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "Note", 
                                "the list is re-created at each call to the property in order"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self,\n                 base_estimator=None,\n                 n_estimators=10,\n                 max_samples=1.0,\n                 max_features=1.0,\n                 bootstrap=True,\n                 bootstrap_features=False,\n                 oob_score=False,\n                 warm_start=False,\n                 n_jobs=1,\n                 random_state=None,\n                 verbose=0):", 
                [
                    [
                        [
                            [
                                "base_estimator", 
                                "object or None, optional (default=None)"
                            ], 
                            [
                                "n_estimators", 
                                "int, optional (default=10)"
                            ], 
                            [
                                "max_samples", 
                                "int or float, optional (default=1.0)"
                            ], 
                            [
                                "max_features", 
                                "int or float, optional (default=1.0)"
                            ], 
                            [
                                "bootstrap", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "bootstrap_features", 
                                "boolean, optional (default=False)"
                            ], 
                            [
                                "oob_score", 
                                "bool"
                            ], 
                            [
                                "warm_start", 
                                "bool, optional (default=False)"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default=1)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "verbose", 
                                "int, optional (default=0)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _validate_estimator(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _set_oob_score(self, X, y):", 
                []
            ], 
            [
                "def _validate_y(self, y):", 
                []
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array of shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "p", 
                                "array of shape = [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_log_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "p", 
                                "array of shape = [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "array, shape = [n_samples, k]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self,\n                 base_estimator=None,\n                 n_estimators=10,\n                 max_samples=1.0,\n                 max_features=1.0,\n                 bootstrap=True,\n                 bootstrap_features=False,\n                 oob_score=False,\n                 warm_start=False,\n                 n_jobs=1,\n                 random_state=None,\n                 verbose=0):", 
                [
                    [
                        [
                            [
                                "base_estimator", 
                                "object or None, optional (default=None)"
                            ], 
                            [
                                "n_estimators", 
                                "int, optional (default=10)"
                            ], 
                            [
                                "max_samples", 
                                "int or float, optional (default=1.0)"
                            ], 
                            [
                                "max_features", 
                                "int or float, optional (default=1.0)"
                            ], 
                            [
                                "bootstrap", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "bootstrap_features", 
                                "boolean, optional (default=False)"
                            ], 
                            [
                                "oob_score", 
                                "bool"
                            ], 
                            [
                                "warm_start", 
                                "bool, optional (default=False)"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default=1)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "verbose", 
                                "int, optional (default=0)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array of shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _validate_estimator(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _set_oob_score(self, X, y):", 
                []
            ]
        ], 
        26
    ], 
    "../scikit-learn-master\\examples\\gaussian_process\\plot_gpc_iris.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\gaussian_process\\gpr.py": [
        [
            [
                "def optimizer(obj_func, initial_theta, bounds):", 
                []
            ], 
            [
                "def __init__(self, kernel=None, alpha=1e-10,\n                 optimizer=\"fmin_l_bfgs_b\", n_restarts_optimizer=0,\n                 normalize_y=False, copy_X_train=True, random_state=None):", 
                []
            ], 
            [
                "def rng(self):", 
                []
            ], 
            [
                "def y_train_mean(self):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape = (n_samples, [n_output_dims])"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def obj_func(theta, eval_gradient=True):", 
                []
            ], 
            [
                "def predict(self, X, return_std=False, return_cov=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = (n_samples, n_features)"
                            ], 
                            [
                                "return_std", 
                                "bool, default"
                            ], 
                            [
                                "return_cov", 
                                "bool, default"
                            ]
                        ], 
                        [
                            [
                                "y_mean", 
                                "array, shape = (n_samples, [n_output_dims])"
                            ], 
                            [
                                "y_std", 
                                "array, shape = (n_samples,), optional"
                            ], 
                            [
                                "y_cov", 
                                "array, shape = (n_samples, n_samples), optional"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def sample_y(self, X, n_samples=1, random_state=0):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = (n_samples_X, n_features)"
                            ], 
                            [
                                "n_samples", 
                                "int, default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=0)"
                            ]
                        ], 
                        [
                            [
                                "y_samples", 
                                "array, shape = (n_samples_X, [n_output_dims], n_samples)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def log_marginal_likelihood(self, theta=None, eval_gradient=False):", 
                [
                    [
                        [
                            [
                                "theta", 
                                "array-like, shape = (n_kernel_params,) or None"
                            ], 
                            [
                                "eval_gradient", 
                                "bool, default"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def _constrained_optimization(self, obj_func, initial_theta, bounds):", 
                []
            ]
        ], 
        10
    ], 
    "../scikit-learn-master\\sklearn\\feature_selection\\tests\\test_feature_select.py": [
        [
            [
                "def test_f_oneway_vs_scipy_stats():", 
                []
            ], 
            [
                "def test_f_oneway_ints():", 
                []
            ], 
            [
                "def test_f_classif():", 
                []
            ], 
            [
                "def test_f_regression():", 
                []
            ], 
            [
                "def test_f_regression_input_dtype():", 
                []
            ], 
            [
                "def test_f_regression_center():", 
                []
            ], 
            [
                "def test_f_classif_multi_class():", 
                []
            ], 
            [
                "def test_select_percentile_classif():", 
                []
            ], 
            [
                "def test_select_percentile_classif_sparse():", 
                []
            ], 
            [
                "def test_select_kbest_classif():", 
                []
            ], 
            [
                "def test_select_kbest_all():", 
                []
            ], 
            [
                "def test_select_kbest_zero():", 
                []
            ], 
            [
                "def test_select_heuristics_classif():", 
                []
            ], 
            [
                "def assert_best_scores_kept(score_filter):", 
                []
            ], 
            [
                "def test_select_percentile_regression():", 
                []
            ], 
            [
                "def test_select_percentile_regression_full():", 
                []
            ], 
            [
                "def test_invalid_percentile():", 
                []
            ], 
            [
                "def test_select_kbest_regression():", 
                []
            ], 
            [
                "def test_select_heuristics_regression():", 
                []
            ], 
            [
                "def test_boundary_case_ch2():", 
                []
            ], 
            [
                "def test_select_fdr_regression():", 
                []
            ], 
            [
                "def single_fdr(alpha, n_informative, random_state):", 
                []
            ], 
            [
                "def test_select_fwe_regression():", 
                []
            ], 
            [
                "def test_selectkbest_tiebreaking():", 
                []
            ], 
            [
                "def test_selectpercentile_tiebreaking():", 
                []
            ], 
            [
                "def test_tied_pvalues():", 
                []
            ], 
            [
                "def test_scorefunc_multilabel():", 
                []
            ], 
            [
                "def test_tied_scores():", 
                []
            ], 
            [
                "def test_nans():", 
                []
            ], 
            [
                "def test_score_func_error():", 
                []
            ], 
            [
                "def test_invalid_k():", 
                []
            ], 
            [
                "def test_f_classif_constant_feature():", 
                []
            ], 
            [
                "def test_no_feature_selected():", 
                []
            ], 
            [
                "def test_mutual_info_classif():", 
                []
            ], 
            [
                "def test_mutual_info_regression():", 
                []
            ]
        ], 
        35
    ], 
    "../scikit-learn-master\\examples\\svm\\plot_separating_hyperplane_unbalanced.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_ransac.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\doc\\tutorial\\text_analytics\\working_with_text_data_fixture.py": [
        [
            [
                "def setup_module():", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_validation.py": [
        [
            [
                "def test_as_float_array():", 
                []
            ], 
            [
                "def test_np_matrix():", 
                []
            ], 
            [
                "def test_memmap():", 
                []
            ], 
            [
                "def test_ordering():", 
                []
            ], 
            [
                "def test_check_array():", 
                []
            ], 
            [
                "def test_check_array_pandas_dtype_object_conversion():", 
                []
            ], 
            [
                "def test_check_array_on_mock_dataframe():", 
                []
            ], 
            [
                "def test_check_array_dtype_stability():", 
                []
            ], 
            [
                "def test_check_array_dtype_warning():", 
                []
            ], 
            [
                "def test_check_array_accept_sparse_type_exception():", 
                []
            ], 
            [
                "def test_check_array_accept_sparse_no_exception():", 
                []
            ], 
            [
                "def test_check_array_min_samples_and_features_messages():", 
                []
            ], 
            [
                "def test_check_array_complex_data_error():", 
                []
            ], 
            [
                "def test_has_fit_parameter():", 
                []
            ], 
            [
                "def test_check_symmetric():", 
                []
            ], 
            [
                "def test_check_is_fitted():", 
                []
            ], 
            [
                "def test_check_consistent_length():", 
                []
            ], 
            [
                "def test_check_dataframe_fit_attribute():", 
                []
            ], 
            [
                "def test_suppress_validation():", 
                []
            ], 
            [
                "def cache(self, func):", 
                []
            ], 
            [
                "def test_check_memory():", 
                []
            ]
        ], 
        21
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\classification.py": [
        [
            [
                "def _check_targets(y_true, y_pred):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array-like"
                            ], 
                            [
                                "y_pred", 
                                "array-like"
                            ]
                        ], 
                        [
                            [
                                "type_true", 
                                "one of {'multilabel-indicator', 'multiclass', 'binary'}"
                            ], 
                            [
                                "y_true", 
                                "array or indicator matrix"
                            ], 
                            [
                                "y_pred", 
                                "array or indicator matrix"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _weighted_sum(sample_score, sample_weight, normalize=False):", 
                []
            ], 
            [
                "def accuracy_score(y_true, y_pred, normalize=True, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "y_pred", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "normalize", 
                                "bool, optional (default=True)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "y_pred", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "labels", 
                                "array, shape = [n_classes], optional"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape = [n_classes, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def cohen_kappa_score(y1, y2, labels=None, weights=None, sample_weight=None):", 
                []
            ], 
            [
                "def jaccard_similarity_score(y_true, y_pred, normalize=True,\n                             sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "y_pred", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "normalize", 
                                "bool, optional (default=True)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def matthews_corrcoef(y_true, y_pred, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "y_pred", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], default None"
                            ]
                        ], 
                        [
                            [
                                "mcc", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def zero_one_loss(y_true, y_pred, normalize=True, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "y_pred", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "normalize", 
                                "bool, optional (default=True)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "loss", 
                                "float or int,"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def f1_score(y_true, y_pred, labels=None, pos_label=1, average='binary',\n             sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "y_pred", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "labels", 
                                "list, optional"
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "pos_label", 
                                "str or int, 1 by default"
                            ], 
                            [
                                "average", 
                                "string, [None, 'binary' (default), 'micro', 'macro', 'samples', \\"
                            ], 
                            [
                                "data", 
                                ""
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "f1_score", 
                                "float or array of float, shape = [n_unique_labels]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fbeta_score(y_true, y_pred, beta, labels=None, pos_label=1,\n                average='binary', sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "y_pred", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "beta", 
                                "float"
                            ], 
                            [
                                "labels", 
                                "list, optional"
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "pos_label", 
                                "str or int, 1 by default"
                            ], 
                            [
                                "average", 
                                "string, [None, 'binary' (default), 'micro', 'macro', 'samples', \\"
                            ], 
                            [
                                "data", 
                                ""
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "fbeta_score", 
                                "float (if average is not None) or array of float, shape =\\"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _prf_divide(numerator, denominator, metric, modifier, average, warn_for):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def precision_recall_fscore_support(y_true, y_pred, beta=1.0, labels=None,\n                                    pos_label=1, average=None,\n                                    warn_for=('precision', 'recall',\n                                              'f-score'),\n                                    sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "y_pred", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "beta", 
                                "float, 1.0 by default"
                            ], 
                            [
                                "labels", 
                                "list, optional"
                            ], 
                            [
                                "pos_label", 
                                "str or int, 1 by default"
                            ], 
                            [
                                "average", 
                                "string, [None (default), 'binary', 'micro', 'macro', 'samples', \\"
                            ], 
                            [
                                "data", 
                                ""
                            ], 
                            [
                                "warn_for", 
                                "tuple or set, for internal use"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "precision", 
                                "float (if average is not None) or array of float, shape =\\"
                            ], 
                            [
                                "recall", 
                                "float (if average is not None) or array of float, , shape =\\"
                            ], 
                            [
                                "fbeta_score", 
                                "float (if average is not None) or array of float, shape =\\"
                            ], 
                            [
                                "support", 
                                "int (if average is not None) or array of int, shape =\\"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def precision_score(y_true, y_pred, labels=None, pos_label=1,\n                    average='binary', sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "y_pred", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "labels", 
                                "list, optional"
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "pos_label", 
                                "str or int, 1 by default"
                            ], 
                            [
                                "average", 
                                "string, [None, 'binary' (default), 'micro', 'macro', 'samples', \\"
                            ], 
                            [
                                "data", 
                                ""
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "precision", 
                                "float (if average is not None) or array of float, shape =\\"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def recall_score(y_true, y_pred, labels=None, pos_label=1, average='binary',\n                 sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "y_pred", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "labels", 
                                "list, optional"
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "pos_label", 
                                "str or int, 1 by default"
                            ], 
                            [
                                "average", 
                                "string, [None, 'binary' (default), 'micro', 'macro', 'samples', \\"
                            ], 
                            [
                                "data", 
                                ""
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "recall", 
                                "float (if average is not None) or array of float, shape =\\"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def classification_report(y_true, y_pred, labels=None, target_names=None,\n                          sample_weight=None, digits=2):", 
                []
            ], 
            [
                "def hamming_loss(y_true, y_pred, labels=None, sample_weight=None,\n                 classes=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "y_pred", 
                                "1d array-like, or label indicator array / sparse matrix"
                            ], 
                            [
                                "labels", 
                                "array, shape = [n_labels], optional (default=None)"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "classes", 
                                "array, shape = [n_labels], optional"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "loss", 
                                "float or int,"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def log_loss(y_true, y_pred, eps=1e-15, normalize=True, sample_weight=None,\n             labels=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array-like or label indicator matrix"
                            ], 
                            [
                                "y_pred", 
                                "array-like of float, shape = (n_samples, n_classes) or (n_samples,)"
                            ], 
                            [
                                "eps", 
                                "float"
                            ], 
                            [
                                "normalize", 
                                "bool, optional (default=True)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ], 
                            [
                                "labels", 
                                "array-like, optional (default=None)"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "loss", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def hinge_loss(y_true, pred_decision, labels=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "pred_decision", 
                                "array, shape = [n_samples] or [n_samples, n_classes]"
                            ], 
                            [
                                "labels", 
                                "array, optional, default None"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "loss", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _check_binary_probabilistic_predictions(y_true, y_prob):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def brier_score_loss(y_true, y_prob, sample_weight=None, pos_label=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array, shape (n_samples,)"
                            ], 
                            [
                                "y_prob", 
                                "array, shape (n_samples,)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ], 
                            [
                                "pos_label", 
                                "int or str, default=None"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        20
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_adaboost_twoclass.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\svm\\plot_svm_regression.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\parallel.py": [
        [
            [
                "def get_active_backend():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parallel_backend(backend, n_jobs=-1, **backend_params):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, iterator_slice):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __call__(self):", 
                []
            ], 
            [
                "def __len__(self):", 
                []
            ], 
            [
                "def cpu_count():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _verbosity_filter(index, verbose):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def delayed(function, check_pickle=True):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def delayed_function(*args, **kwargs):", 
                []
            ], 
            [
                "def __init__(self, dispatch_timestamp, batch_size, parallel):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __call__(self, out):", 
                []
            ], 
            [
                "def register_parallel_backend(name, factory, make_default=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def effective_n_jobs(n_jobs=-1):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, n_jobs=1, backend=None, verbose=0, timeout=None,\n                 pre_dispatch='2 * n_jobs', batch_size='auto',\n                 temp_folder=None, max_nbytes='1M', mmap_mode='r'):", 
                [
                    [
                        [
                            [
                                "n_jobs", 
                                "int, default"
                            ], 
                            [
                                "backend", 
                                "str, ParallelBackendBase instance or None, \\"
                            ], 
                            [
                                "default", 
                                "'multiprocessing'"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "verbose", 
                                "int, optional"
                            ], 
                            [
                                "level", 
                                "if non zero, progress messages are"
                            ], 
                            [
                                "timeout", 
                                "float, optional"
                            ], 
                            [
                                "pre_dispatch", 
                                "{'all', integer, or expression, as in '3*n_jobs'}"
                            ], 
                            [
                                "batch_size", 
                                "int or 'auto', default"
                            ], 
                            [
                                "temp_folder", 
                                "str, optional"
                            ], 
                            [
                                "order", 
                                ""
                            ], 
                            [
                                "writable", 
                                "this is a"
                            ], 
                            [
                                "mmap_mode", 
                                "{None, 'r+', 'r', 'w+', 'c'}"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __enter__(self):", 
                []
            ], 
            [
                "def __exit__(self, exc_type, exc_value, traceback):", 
                []
            ], 
            [
                "def _initialize_backend(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _effective_n_jobs(self):", 
                []
            ], 
            [
                "def _terminate_backend(self):", 
                []
            ], 
            [
                "def _dispatch(self, batch):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def dispatch_next(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def dispatch_one_batch(self, iterator):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _print(self, msg, msg_args):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def print_progress(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def retrieve(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __call__(self, iterable):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ]
        ], 
        27
    ], 
    "../scikit-learn-master\\examples\\exercises\\plot_cv_digits.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_random_forest_regression_multioutput.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\nmf.py": [
        [
            [
                "def norm(x):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def trace_dot(X, Y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _check_init(A, shape, whom):", 
                []
            ], 
            [
                "def _beta_divergence(X, W, H, beta, square_root=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "float or array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "W", 
                                "float or dense array-like, shape (n_samples, n_components)"
                            ], 
                            [
                                "H", 
                                "float or dense array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "beta", 
                                "float, string in {'frobenius', 'kullback-leibler', 'itakura-saito'}"
                            ], 
                            [
                                "square_root", 
                                "boolean, default False"
                            ]
                        ], 
                        [
                            [
                                "res", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _special_sparse_dot(W, H, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _compute_regularization(alpha, l1_ratio, regularization):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _check_string_param(solver, regularization, beta_loss, init):", 
                []
            ], 
            [
                "def _beta_loss_to_float(beta_loss):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _initialize_nmf(X, n_components, init=None, eps=1e-6,\n                    random_state=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "n_components", 
                                "integer"
                            ], 
                            [
                                "init", 
                                "None | 'random' | 'nndsvd' | 'nndsvda' | 'nndsvdar'"
                            ], 
                            [
                                "Default", 
                                "'nndsvd' if n_components < n_features, otherwise 'random'."
                            ], 
                            [
                                "options", 
                                ""
                            ], 
                            [
                                "with", 
                                ""
                            ], 
                            [
                                "eps", 
                                "float"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ]
                        ], 
                        [
                            [
                                "W", 
                                "array-like, shape (n_samples, n_components)"
                            ], 
                            [
                                "H", 
                                "array-like, shape (n_components, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _update_coordinate_descent(X, W, Ht, l1_reg, l2_reg, shuffle,\n                               random_state):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _fit_coordinate_descent(X, W, H, tol=1e-4, max_iter=200, l1_reg_W=0,\n                            l1_reg_H=0, l2_reg_W=0, l2_reg_H=0, update_H=True,\n                            verbose=0, shuffle=False, random_state=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "W", 
                                "array-like, shape (n_samples, n_components)"
                            ], 
                            [
                                "H", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "tol", 
                                "float, default"
                            ], 
                            [
                                "max_iter", 
                                "integer, default"
                            ], 
                            [
                                "l1_reg_W", 
                                "double, default"
                            ], 
                            [
                                "l1_reg_H", 
                                "double, default"
                            ], 
                            [
                                "l2_reg_W", 
                                "double, default"
                            ], 
                            [
                                "l2_reg_H", 
                                "double, default"
                            ], 
                            [
                                "update_H", 
                                "boolean, default"
                            ], 
                            [
                                "verbose", 
                                "integer, default"
                            ], 
                            [
                                "shuffle", 
                                "boolean, default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ]
                        ], 
                        [
                            [
                                "W", 
                                "array-like, shape (n_samples, n_components)"
                            ], 
                            [
                                "H", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "n_iter", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _multiplicative_update_w(X, W, H, beta_loss, l1_reg_W, l2_reg_W, gamma,\n                             H_sum=None, HHt=None, XHt=None, update_H=True):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _multiplicative_update_h(X, W, H, beta_loss, l1_reg_H, l2_reg_H, gamma):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _fit_multiplicative_update(X, W, H, beta_loss='frobenius',\n                               max_iter=200, tol=1e-4,\n                               l1_reg_W=0, l1_reg_H=0, l2_reg_W=0, l2_reg_H=0,\n                               update_H=True, verbose=0):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "W", 
                                "array-like, shape (n_samples, n_components)"
                            ], 
                            [
                                "H", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "beta_loss", 
                                "float or string, default 'frobenius'"
                            ], 
                            [
                                "max_iter", 
                                "integer, default"
                            ], 
                            [
                                "tol", 
                                "float, default"
                            ], 
                            [
                                "l1_reg_W", 
                                "double, default"
                            ], 
                            [
                                "l1_reg_H", 
                                "double, default"
                            ], 
                            [
                                "l2_reg_W", 
                                "double, default"
                            ], 
                            [
                                "l2_reg_H", 
                                "double, default"
                            ], 
                            [
                                "update_H", 
                                "boolean, default"
                            ], 
                            [
                                "verbose", 
                                "integer, default"
                            ]
                        ], 
                        [
                            [
                                "W", 
                                "array, shape (n_samples, n_components)"
                            ], 
                            [
                                "H", 
                                "array, shape (n_components, n_features)"
                            ], 
                            [
                                "n_iter", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def non_negative_factorization(X, W=None, H=None, n_components=None,\n                               init='random', update_H=True, solver='cd',\n                               beta_loss='frobenius', tol=1e-4,\n                               max_iter=200, alpha=0., l1_ratio=0.,\n                               regularization=None, random_state=None,\n                               verbose=0, shuffle=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "W", 
                                "array-like, shape (n_samples, n_components)"
                            ], 
                            [
                                "H", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "n_components", 
                                "integer"
                            ], 
                            [
                                "init", 
                                "None | 'random' | 'nndsvd' | 'nndsvda' | 'nndsvdar' | 'custom'"
                            ], 
                            [
                                "Default", 
                                "'nndsvd' if n_components < n_features, otherwise random."
                            ], 
                            [
                                "options", 
                                ""
                            ], 
                            [
                                "with", 
                                ""
                            ], 
                            [
                                "update_H", 
                                "boolean, default"
                            ], 
                            [
                                "solver", 
                                "'cd' | 'mu'"
                            ], 
                            [
                                "use", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "beta_loss", 
                                "float or string, default 'frobenius'"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "tol", 
                                "float, default"
                            ], 
                            [
                                "max_iter", 
                                "integer, default"
                            ], 
                            [
                                "alpha", 
                                "double, default"
                            ], 
                            [
                                "l1_ratio", 
                                "double, default"
                            ], 
                            [
                                "regularization", 
                                "'both' | 'components' | 'transformation' | None"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ], 
                            [
                                "verbose", 
                                "integer, default"
                            ], 
                            [
                                "shuffle", 
                                "boolean, default"
                            ]
                        ], 
                        [
                            [
                                "W", 
                                "array-like, shape (n_samples, n_components)"
                            ], 
                            [
                                "H", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "n_iter", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=None, init=None, solver='cd',\n                 beta_loss='frobenius', tol=1e-4, max_iter=200,\n                 random_state=None, alpha=0., l1_ratio=0., verbose=0,\n                 shuffle=False):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int or None"
                            ], 
                            [
                                "init", 
                                "'random' | 'nndsvd' |  'nndsvda' | 'nndsvdar' | 'custom'"
                            ], 
                            [
                                "Default", 
                                "'nndsvd' if n_components < n_features, otherwise random."
                            ], 
                            [
                                "options", 
                                ""
                            ], 
                            [
                                "with", 
                                ""
                            ], 
                            [
                                "solver", 
                                "'cd' | 'mu'"
                            ], 
                            [
                                "use", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "beta_loss", 
                                "float or string, default 'frobenius'"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "tol", 
                                "float, default"
                            ], 
                            [
                                "max_iter", 
                                "integer, default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ], 
                            [
                                "alpha", 
                                "double, default"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "l1_ratio", 
                                "double, default"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "verbose", 
                                "bool, default=False"
                            ], 
                            [
                                "shuffle", 
                                "boolean, default"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None, W=None, H=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ], 
                            [
                                "W", 
                                "array-like, shape (n_samples, n_components)"
                            ], 
                            [
                                "H", 
                                "array-like, shape (n_components, n_features)"
                            ]
                        ], 
                        [
                            [
                                "W", 
                                "array, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None, **params):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "W", 
                                "array, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, W):", 
                [
                    [
                        [
                            [
                                "W", 
                                "{array-like, sparse matrix}, shape (n_samples, n_components)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        20
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_sgd_iris.py": [
        [
            [
                "def plot_hyperplane(c, color):", 
                []
            ], 
            [
                "def line(x0):", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\doc\\tutorial\\text_analytics\\skeletons\\exercise_01_language_train_model.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\tests\\test_rcv1.py": [
        [
            [
                "def test_fetch_rcv1():", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\cluster\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\neural_network\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\bicluster.py": [
        [
            [
                "def _scale_normalize(X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _bistochastic_normalize(X, max_iter=1000, tol=1e-5):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _log_normalize(X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, n_clusters=3, svd_method=\"randomized\",\n                 n_svd_vecs=None, mini_batch=False, init=\"k-means++\",\n                 n_init=10, n_jobs=1, random_state=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _check_parameters(self):", 
                []
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _svd(self, array, n_components, n_discard):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _k_means(self, data, n_clusters):", 
                []
            ], 
            [
                "def __init__(self, n_clusters=3, svd_method='randomized',\n                 n_svd_vecs=None, mini_batch=False, init='k-means++',\n                 n_init=10, n_jobs=1, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_clusters", 
                                "integer, optional, default"
                            ], 
                            [
                                "svd_method", 
                                "string, optional, default"
                            ], 
                            [
                                "n_svd_vecs", 
                                "int, optional, default"
                            ], 
                            [
                                "mini_batch", 
                                "bool, optional, default"
                            ], 
                            [
                                "init", 
                                "{'k-means++', 'random' or an ndarray}"
                            ], 
                            [
                                "n_init", 
                                "int, optional, default"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional, default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _fit(self, X):", 
                []
            ], 
            [
                "def __init__(self, n_clusters=3, method='bistochastic',\n                 n_components=6, n_best=3, svd_method='randomized',\n                 n_svd_vecs=None, mini_batch=False, init='k-means++',\n                 n_init=10, n_jobs=1, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_clusters", 
                                "integer or tuple (n_row_clusters, n_column_clusters)"
                            ], 
                            [
                                "method", 
                                "string, optional, default"
                            ], 
                            [
                                "CAUTION", 
                                "if `method='log'`, the"
                            ], 
                            [
                                "n_components", 
                                "integer, optional, default"
                            ], 
                            [
                                "n_best", 
                                "integer, optional, default"
                            ], 
                            [
                                "svd_method", 
                                "string, optional, default"
                            ], 
                            [
                                "n_svd_vecs", 
                                "int, optional, default"
                            ], 
                            [
                                "mini_batch", 
                                "bool, optional, default"
                            ], 
                            [
                                "init", 
                                "{'k-means++', 'random' or an ndarray}"
                            ], 
                            [
                                "n_init", 
                                "int, optional, default"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional, default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_parameters(self):", 
                []
            ], 
            [
                "def _fit(self, X):", 
                []
            ], 
            [
                "def _fit_best_piecewise(self, vectors, n_best, n_clusters):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def make_piecewise(v):", 
                []
            ], 
            [
                "def _project_and_cluster(self, data, vectors, n_clusters):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        16
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_feature_transformation.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\model_selection\\tests\\test_validation.py": [
        [
            [
                "def __init__(self, n_max_train_sizes):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X_subset, y_subset=None):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def score(self, X=None, Y=None):", 
                []
            ], 
            [
                "def _is_training_data(self, X):", 
                []
            ], 
            [
                "def __init__(self, n_max_train_sizes):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _is_training_data(self, X):", 
                []
            ], 
            [
                "def partial_fit(self, X, y=None, **params):", 
                []
            ], 
            [
                "def __init__(self, param=0.5):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X_subset, y_subset):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def score(self, X=None, y=None):", 
                []
            ], 
            [
                "def _is_training_data(self, X):", 
                []
            ], 
            [
                "def fit(self, X_subset, y_subset):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def __init__(self, a=0, allow_nd=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, Y=None, sample_weight=None, class_prior=None,\n            sparse_sample_weight=None, sparse_param=None, dummy_int=None,\n            dummy_str=None, dummy_obj=None, callback=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, T):", 
                []
            ], 
            [
                "def score(self, X=None, Y=None):", 
                []
            ], 
            [
                "def get_params(self, deep=False):", 
                []
            ], 
            [
                "def test_cross_val_score():", 
                []
            ], 
            [
                "def test_cross_validate_invalid_scoring_param():", 
                []
            ], 
            [
                "def test_cross_validate():", 
                []
            ], 
            [
                "def check_cross_validate_single_metric(clf, X, y, scores):", 
                []
            ], 
            [
                "def check_cross_validate_multi_metric(clf, X, y, scores):", 
                []
            ], 
            [
                "def test_cross_val_score_predict_groups():", 
                []
            ], 
            [
                "def test_cross_val_score_pandas():", 
                []
            ], 
            [
                "def test_cross_val_score_mask():", 
                []
            ], 
            [
                "def test_cross_val_score_precomputed():", 
                []
            ], 
            [
                "def test_cross_val_score_fit_params():", 
                []
            ], 
            [
                "def assert_fit_params(clf):", 
                []
            ], 
            [
                "def test_cross_val_score_score_func():", 
                []
            ], 
            [
                "def score_func(y_test, y_predict):", 
                []
            ], 
            [
                "def test_cross_val_score_errors():", 
                []
            ], 
            [
                "def test_cross_val_score_with_score_func_classification():", 
                []
            ], 
            [
                "def test_cross_val_score_with_score_func_regression():", 
                []
            ], 
            [
                "def test_permutation_score():", 
                []
            ], 
            [
                "def custom_score(y_true, y_pred):", 
                []
            ], 
            [
                "def test_permutation_test_score_allow_nans():", 
                []
            ], 
            [
                "def test_cross_val_score_allow_nans():", 
                []
            ], 
            [
                "def test_cross_val_score_multilabel():", 
                []
            ], 
            [
                "def test_cross_val_predict():", 
                []
            ], 
            [
                "def split(self, X, y=None, groups=None):", 
                []
            ], 
            [
                "def test_cross_val_predict_input_types():", 
                []
            ], 
            [
                "def test_cross_val_predict_pandas():", 
                []
            ], 
            [
                "def test_cross_val_score_sparse_fit_params():", 
                []
            ], 
            [
                "def test_learning_curve():", 
                []
            ], 
            [
                "def test_learning_curve_unsupervised():", 
                []
            ], 
            [
                "def test_learning_curve_verbose():", 
                []
            ], 
            [
                "def test_learning_curve_incremental_learning_not_possible():", 
                []
            ], 
            [
                "def test_learning_curve_incremental_learning():", 
                []
            ], 
            [
                "def test_learning_curve_incremental_learning_unsupervised():", 
                []
            ], 
            [
                "def test_learning_curve_batch_and_incremental_learning_are_equal():", 
                []
            ], 
            [
                "def test_learning_curve_n_sample_range_out_of_bounds():", 
                []
            ], 
            [
                "def test_learning_curve_remove_duplicate_sample_sizes():", 
                []
            ], 
            [
                "def test_learning_curve_with_boolean_indices():", 
                []
            ], 
            [
                "def test_learning_curve_with_shuffle():", 
                []
            ], 
            [
                "def test_validation_curve():", 
                []
            ], 
            [
                "def test_validation_curve_clone_estimator():", 
                []
            ], 
            [
                "def test_validation_curve_cv_splits_consistency():", 
                []
            ], 
            [
                "def test_check_is_permutation():", 
                []
            ], 
            [
                "def test_cross_val_predict_sparse_prediction():", 
                []
            ], 
            [
                "def check_cross_val_predict_with_method(est):", 
                []
            ], 
            [
                "def test_cross_val_predict_with_method():", 
                []
            ], 
            [
                "def test_cross_val_predict_method_checking():", 
                []
            ], 
            [
                "def test_gridsearchcv_cross_val_predict_with_method():", 
                []
            ], 
            [
                "def get_expected_predictions(X, y, cv, classes, est, method):", 
                []
            ], 
            [
                "def test_cross_val_predict_class_subset():", 
                []
            ], 
            [
                "def test_score_memmap():", 
                []
            ], 
            [
                "def test_permutation_test_score_pandas():", 
                []
            ]
        ], 
        70
    ], 
    "../scikit-learn-master\\doc\\datasets\\rcv1_fixture.py": [
        [
            [
                "def setup_module():", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\neural_network\\_stochastic_optimizers.py": [
        [
            [
                "def __init__(self, params, learning_rate_init=0.1):", 
                [
                    [
                        [
                            [
                                "params", 
                                "list, length = len(coefs_) + len(intercepts_)"
                            ], 
                            [
                                "learning_rate_init", 
                                "float, optional, default 0.1"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def update_params(self, grads):", 
                [
                    [
                        [
                            [
                                "grads", 
                                "list, length = len(params)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def iteration_ends(self, time_step):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def trigger_stopping(self, msg, verbose):", 
                [
                    [
                        [
                            [
                                "msg", 
                                "str"
                            ], 
                            [
                                "verbose", 
                                "bool"
                            ]
                        ], 
                        [
                            [
                                "is_stopping", 
                                "bool"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, params, learning_rate_init=0.1, lr_schedule='constant',\n                 momentum=0.9, nesterov=True, power_t=0.5):", 
                [
                    [
                        [
                            [
                                "params", 
                                "list, length = len(coefs_) + len(intercepts_)"
                            ], 
                            [
                                "learning_rate_init", 
                                "float, optional, default 0.1"
                            ], 
                            [
                                "lr_schedule", 
                                "{'constant', 'adaptive', 'invscaling'}, default 'constant'"
                            ], 
                            [
                                "momentum", 
                                "float, optional, default 0.9"
                            ], 
                            [
                                "nesterov", 
                                "bool, optional, default True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def iteration_ends(self, time_step):", 
                [
                    [
                        [
                            [
                                "time_step", 
                                "int"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def trigger_stopping(self, msg, verbose):", 
                []
            ], 
            [
                "def _get_updates(self, grads):", 
                [
                    [
                        [
                            [
                                "grads", 
                                "list, length = len(coefs_) + len(intercepts_)"
                            ]
                        ], 
                        [
                            [
                                "updates", 
                                "list, length = len(grads)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, params, learning_rate_init=0.001, beta_1=0.9,\n                 beta_2=0.999, epsilon=1e-8):", 
                [
                    [
                        [
                            [
                                "params", 
                                "list, length = len(coefs_) + len(intercepts_)"
                            ], 
                            [
                                "learning_rate_init", 
                                "float, optional, default 0.1"
                            ], 
                            [
                                "beta_1", 
                                "float, optional, default 0.9"
                            ], 
                            [
                                "beta_2", 
                                "float, optional, default 0.999"
                            ], 
                            [
                                "epsilon", 
                                "float, optional, default 1e-8"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _get_updates(self, grads):", 
                [
                    [
                        [
                            [
                                "grads", 
                                "list, length = len(coefs_) + len(intercepts_)"
                            ]
                        ], 
                        [
                            [
                                "updates", 
                                "list, length = len(grads)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        10
    ], 
    "../scikit-learn-master\\sklearn\\tree\\tests\\test_export.py": [
        [
            [
                "def test_graphviz_toy():", 
                []
            ], 
            [
                "def test_graphviz_errors():", 
                []
            ], 
            [
                "def test_friedman_mse_in_graphviz():", 
                []
            ], 
            [
                "def test_precision():", 
                []
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\sklearn\\utils\\graph.py": [
        [
            [
                "def single_source_shortest_path_length(graph, source, cutoff=None):", 
                [
                    [
                        [
                            [
                                "graph", 
                                "sparse matrix or 2D array (preferably LIL matrix)"
                            ], 
                            [
                                "source", 
                                "node label"
                            ], 
                            [
                                "cutoff", 
                                "integer, optional"
                            ]
                        ], 
                        [
                            [
                                "graph", 
                                "sparse matrix or 2D array (preferably LIL matrix)"
                            ], 
                            [
                                "source", 
                                "node label"
                            ], 
                            [
                                "cutoff", 
                                "integer, optional"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def connected_components(*args, **kwargs):", 
                []
            ], 
            [
                "def graph_laplacian(*args, **kwargs):", 
                []
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\samples_generator.py": [
        [
            [
                "def _generate_hypercube(samples, dimensions, rng):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def make_classification(n_samples=100, n_features=20, n_informative=2,\n                        n_redundant=2, n_repeated=0, n_classes=2,\n                        n_clusters_per_class=2, weights=None, flip_y=0.01,\n                        class_sep=1.0, hypercube=True, shift=0.0, scale=1.0,\n                        shuffle=True, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "n_features", 
                                "int, optional (default=20)"
                            ], 
                            [
                                "n_informative", 
                                "int, optional (default=2)"
                            ], 
                            [
                                "n_redundant", 
                                "int, optional (default=2)"
                            ], 
                            [
                                "n_repeated", 
                                "int, optional (default=0)"
                            ], 
                            [
                                "n_classes", 
                                "int, optional (default=2)"
                            ], 
                            [
                                "n_clusters_per_class", 
                                "int, optional (default=2)"
                            ], 
                            [
                                "weights", 
                                "list of floats or None (default=None)"
                            ], 
                            [
                                "flip_y", 
                                "float, optional (default=0.01)"
                            ], 
                            [
                                "class_sep", 
                                "float, optional (default=1.0)"
                            ], 
                            [
                                "hypercube", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "shift", 
                                "float, array of shape [n_features] or None, optional (default=0.0)"
                            ], 
                            [
                                "scale", 
                                "float, array of shape [n_features] or None, optional (default=1.0)"
                            ], 
                            [
                                "shuffle", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_multilabel_classification(n_samples=100, n_features=20, n_classes=5,\n                                   n_labels=2, length=50, allow_unlabeled=True,\n                                   sparse=False, return_indicator='dense',\n                                   return_distributions=False,\n                                   random_state=None):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "n_features", 
                                "int, optional (default=20)"
                            ], 
                            [
                                "n_classes", 
                                "int, optional (default=5)"
                            ], 
                            [
                                "n_labels", 
                                "int, optional (default=2)"
                            ], 
                            [
                                "length", 
                                "int, optional (default=50)"
                            ], 
                            [
                                "allow_unlabeled", 
                                "bool, optional (default=True)"
                            ], 
                            [
                                "sparse", 
                                "bool, optional (default=False)"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "return_indicator", 
                                "'dense' (default) | 'sparse' | False"
                            ], 
                            [
                                "return_distributions", 
                                "bool, optional (default=False)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape [n_samples, n_features]"
                            ], 
                            [
                                "Y", 
                                "array or sparse CSR matrix of shape [n_samples, n_classes]"
                            ], 
                            [
                                "p_c", 
                                "array, shape [n_classes]"
                            ], 
                            [
                                "p_w_c", 
                                "array, shape [n_features, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def sample_example():", 
                []
            ], 
            [
                "def make_hastie_10_2(n_samples=12000, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int, optional (default=12000)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape [n_samples, 10]"
                            ], 
                            [
                                "y", 
                                "array of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_regression(n_samples=100, n_features=100, n_informative=10,\n                    n_targets=1, bias=0.0, effective_rank=None,\n                    tail_strength=0.5, noise=0.0, shuffle=True, coef=False,\n                    random_state=None):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "n_features", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "n_informative", 
                                "int, optional (default=10)"
                            ], 
                            [
                                "n_targets", 
                                "int, optional (default=1)"
                            ], 
                            [
                                "bias", 
                                "float, optional (default=0.0)"
                            ], 
                            [
                                "effective_rank", 
                                "int or None, optional (default=None)"
                            ], 
                            [
                                "None", 
                                ""
                            ], 
                            [
                                "None", 
                                ""
                            ], 
                            [
                                "tail_strength", 
                                "float between 0.0 and 1.0, optional (default=0.5)"
                            ], 
                            [
                                "noise", 
                                "float, optional (default=0.0)"
                            ], 
                            [
                                "shuffle", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "coef", 
                                "boolean, optional (default=False)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array of shape [n_samples] or [n_samples, n_targets]"
                            ], 
                            [
                                "coef", 
                                "array of shape [n_features] or [n_features, n_targets], optional"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_circles(n_samples=100, shuffle=True, noise=None, random_state=None,\n                 factor=.8):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "shuffle", 
                                "bool, optional (default=True)"
                            ], 
                            [
                                "noise", 
                                "double or None (default=None)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "factor", 
                                "double < 1 (default=.8)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape [n_samples, 2]"
                            ], 
                            [
                                "y", 
                                "array of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_moons(n_samples=100, shuffle=True, noise=None, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "shuffle", 
                                "bool, optional (default=True)"
                            ], 
                            [
                                "noise", 
                                "double or None (default=None)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape [n_samples, 2]"
                            ], 
                            [
                                "y", 
                                "array of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_blobs(n_samples=100, n_features=2, centers=3, cluster_std=1.0,\n               center_box=(-10.0, 10.0), shuffle=True, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "n_features", 
                                "int, optional (default=2)"
                            ], 
                            [
                                "centers", 
                                "int or array of shape [n_centers, n_features], optional"
                            ], 
                            [
                                "cluster_std", 
                                "float or sequence of floats, optional (default=1.0)"
                            ], 
                            [
                                "center_box", 
                                "pair of floats (min, max), optional (default=(-10.0, 10.0))"
                            ], 
                            [
                                "shuffle", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_friedman1(n_samples=100, n_features=10, noise=0.0, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "n_features", 
                                "int, optional (default=10)"
                            ], 
                            [
                                "noise", 
                                "float, optional (default=0.0)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_friedman2(n_samples=100, noise=0.0, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "noise", 
                                "float, optional (default=0.0)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape [n_samples, 4]"
                            ], 
                            [
                                "y", 
                                "array of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_friedman3(n_samples=100, noise=0.0, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "noise", 
                                "float, optional (default=0.0)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape [n_samples, 4]"
                            ], 
                            [
                                "y", 
                                "array of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_low_rank_matrix(n_samples=100, n_features=100, effective_rank=10,\n                         tail_strength=0.5, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "n_features", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "effective_rank", 
                                "int, optional (default=10)"
                            ], 
                            [
                                "tail_strength", 
                                "float between 0.0 and 1.0, optional (default=0.5)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape [n_samples, n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_sparse_coded_signal(n_samples, n_components, n_features,\n                             n_nonzero_coefs, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int"
                            ], 
                            [
                                "n_components", 
                                "int,"
                            ], 
                            [
                                "n_features", 
                                "int"
                            ], 
                            [
                                "n_nonzero_coefs", 
                                "int"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "the", 
                                "ref"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_sparse_uncorrelated(n_samples=100, n_features=10, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "n_features", 
                                "int, optional (default=10)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_spd_matrix(n_dim, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_dim", 
                                "int"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape [n_dim, n_dim]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_sparse_spd_matrix(dim=1, alpha=0.95, norm_diag=False,\n                           smallest_coef=.1, largest_coef=.9,\n                           random_state=None):", 
                [
                    [
                        [
                            [
                                "dim", 
                                "integer, optional (default=1)"
                            ], 
                            [
                                "alpha", 
                                "float between 0 and 1, optional (default=0.95)"
                            ], 
                            [
                                "norm_diag", 
                                "boolean, optional (default=False)"
                            ], 
                            [
                                "smallest_coef", 
                                "float between 0 and 1, optional (default=0.1)"
                            ], 
                            [
                                "largest_coef", 
                                "float between 0 and 1, optional (default=0.9)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "prec", 
                                "sparse matrix of shape (dim, dim)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_swiss_roll(n_samples=100, noise=0.0, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "noise", 
                                "float, optional (default=0.0)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape [n_samples, 3]"
                            ], 
                            [
                                "t", 
                                "array of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_s_curve(n_samples=100, noise=0.0, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "noise", 
                                "float, optional (default=0.0)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape [n_samples, 3]"
                            ], 
                            [
                                "t", 
                                "array of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_gaussian_quantiles(mean=None, cov=1., n_samples=100,\n                            n_features=2, n_classes=3,\n                            shuffle=True, random_state=None):", 
                [
                    [
                        [
                            [
                                "mean", 
                                "array of shape [n_features], optional (default=None)"
                            ], 
                            [
                                "cov", 
                                "float, optional (default=1.)"
                            ], 
                            [
                                "n_samples", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "n_features", 
                                "int, optional (default=2)"
                            ], 
                            [
                                "n_classes", 
                                "int, optional (default=3)"
                            ], 
                            [
                                "shuffle", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _shuffle(data, random_state=None):", 
                []
            ], 
            [
                "def make_biclusters(shape, n_clusters, noise=0.0, minval=10,\n                    maxval=100, shuffle=True, random_state=None):", 
                [
                    [
                        [
                            [
                                "shape", 
                                "iterable (n_rows, n_cols)"
                            ], 
                            [
                                "n_clusters", 
                                "integer"
                            ], 
                            [
                                "noise", 
                                "float, optional (default=0.0)"
                            ], 
                            [
                                "minval", 
                                "int, optional (default=10)"
                            ], 
                            [
                                "maxval", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "shuffle", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape `shape`"
                            ], 
                            [
                                "rows", 
                                "array of shape (n_clusters, X.shape[0],)"
                            ], 
                            [
                                "cols", 
                                "array of shape (n_clusters, X.shape[1],)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def make_checkerboard(shape, n_clusters, noise=0.0, minval=10,\n                      maxval=100, shuffle=True, random_state=None):", 
                [
                    [
                        [
                            [
                                "shape", 
                                "iterable (n_rows, n_cols)"
                            ], 
                            [
                                "n_clusters", 
                                "integer or iterable (n_row_clusters, n_column_clusters)"
                            ], 
                            [
                                "noise", 
                                "float, optional (default=0.0)"
                            ], 
                            [
                                "minval", 
                                "int, optional (default=10)"
                            ], 
                            [
                                "maxval", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "shuffle", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array of shape `shape`"
                            ], 
                            [
                                "rows", 
                                "array of shape (n_clusters, X.shape[0],)"
                            ], 
                            [
                                "cols", 
                                "array of shape (n_clusters, X.shape[1],)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        23
    ], 
    "../scikit-learn-master\\sklearn\\semi_supervised\\tests\\test_label_propagation.py": [
        [
            [
                "def test_fit_transduction():", 
                []
            ], 
            [
                "def test_distribution():", 
                []
            ], 
            [
                "def test_predict():", 
                []
            ], 
            [
                "def test_predict_proba():", 
                []
            ], 
            [
                "def test_alpha_deprecation():", 
                []
            ], 
            [
                "def test_label_spreading_closed_form():", 
                []
            ], 
            [
                "def test_label_propagation_closed_form():", 
                []
            ], 
            [
                "def test_valid_alpha():", 
                []
            ], 
            [
                "def test_convergence_speed():", 
                []
            ], 
            [
                "def test_convergence_warning():", 
                []
            ]
        ], 
        10
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_graph.py": [
        [
            [
                "def test_graph_laplacian():", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\manifold\\tests\\test_locally_linear.py": [
        [
            [
                "def test_barycenter_kneighbors_graph():", 
                []
            ], 
            [
                "def test_lle_simple_grid():", 
                []
            ], 
            [
                "def test_lle_manifold():", 
                []
            ], 
            [
                "def test_lle_init_parameters():", 
                []
            ], 
            [
                "def test_pipeline():", 
                []
            ], 
            [
                "def test_singular_matrix():", 
                []
            ], 
            [
                "def test_integer_input():", 
                []
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\sklearn\\mixture\\tests\\test_gaussian_mixture.py": [
        [
            [
                "def generate_data(n_samples, n_features, weights, means, precisions,\n                  covariance_type):", 
                []
            ], 
            [
                "def __init__(self, rng, n_samples=500, n_components=2, n_features=2,\n                 scale=50):", 
                []
            ], 
            [
                "def test_gaussian_mixture_attributes():", 
                []
            ], 
            [
                "def test_check_X():", 
                []
            ], 
            [
                "def test_check_weights():", 
                []
            ], 
            [
                "def test_check_means():", 
                []
            ], 
            [
                "def test_check_precisions():", 
                []
            ], 
            [
                "def test_suffstat_sk_full():", 
                []
            ], 
            [
                "def test_suffstat_sk_tied():", 
                []
            ], 
            [
                "def test_suffstat_sk_diag():", 
                []
            ], 
            [
                "def test_gaussian_suffstat_sk_spherical():", 
                []
            ], 
            [
                "def test_compute_log_det_cholesky():", 
                []
            ], 
            [
                "def _naive_lmvnpdf_diag(X, means, covars):", 
                []
            ], 
            [
                "def test_gaussian_mixture_log_probabilities():", 
                []
            ], 
            [
                "def test_gaussian_mixture_estimate_log_prob_resp():", 
                []
            ], 
            [
                "def test_gaussian_mixture_predict_predict_proba():", 
                []
            ], 
            [
                "def test_gaussian_mixture_fit():", 
                []
            ], 
            [
                "def test_gaussian_mixture_fit_best_params():", 
                []
            ], 
            [
                "def test_gaussian_mixture_fit_convergence_warning():", 
                []
            ], 
            [
                "def test_multiple_init():", 
                []
            ], 
            [
                "def test_gaussian_mixture_n_parameters():", 
                []
            ], 
            [
                "def test_bic_1d_1component():", 
                []
            ], 
            [
                "def test_gaussian_mixture_aic_bic():", 
                []
            ], 
            [
                "def test_gaussian_mixture_verbose():", 
                []
            ], 
            [
                "def test_warm_start():", 
                []
            ], 
            [
                "def test_score():", 
                []
            ], 
            [
                "def test_score_samples():", 
                []
            ], 
            [
                "def test_monotonic_likelihood():", 
                []
            ], 
            [
                "def test_regularisation():", 
                []
            ], 
            [
                "def test_property():", 
                []
            ], 
            [
                "def test_sample():", 
                []
            ], 
            [
                "def test_init():", 
                []
            ]
        ], 
        32
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_segmentation_toy.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\multioutput\\plot_classifier_chain_yeast.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\kernel_ridge.py": [
        [
            [
                "def __init__(self, alpha=1, kernel=\"linear\", gamma=None, degree=3, coef0=1,\n                 kernel_params=None):", 
                [
                    [
                        [
                            [
                                "alpha", 
                                "{float, array-like}, shape = [n_targets]"
                            ], 
                            [
                                "kernel", 
                                "string or callable, default=\"linear\""
                            ], 
                            [
                                "gamma", 
                                "float, default=None"
                            ], 
                            [
                                "degree", 
                                "float, default=3"
                            ], 
                            [
                                "coef0", 
                                "float, default=1"
                            ], 
                            [
                                "kernel_params", 
                                "mapping of string to any, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _get_kernel(self, X, Y=None):", 
                []
            ], 
            [
                "def _pairwise(self):", 
                []
            ], 
            [
                "def fit(self, X, y=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_targets]"
                            ], 
                            [
                                "sample_weight", 
                                "float or array-like of shape [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape = [n_samples] or [n_samples, n_targets]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\ransac.py": [
        [
            [
                "def _dynamic_max_trials(n_inliers, n_samples, min_samples, probability):", 
                [
                    [
                        [
                            [
                                "n_inliers", 
                                "int"
                            ], 
                            [
                                "n_samples", 
                                "int"
                            ], 
                            [
                                "min_samples", 
                                "int"
                            ], 
                            [
                                "probability", 
                                "float"
                            ]
                        ], 
                        [
                            [
                                "trials", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, base_estimator=None, min_samples=None,\n                 residual_threshold=None, is_data_valid=None,\n                 is_model_valid=None, max_trials=100, max_skips=np.inf,\n                 stop_n_inliers=np.inf, stop_score=np.inf,\n                 stop_probability=0.99, residual_metric=None,\n                 loss='absolute_loss', random_state=None):", 
                [
                    [
                        [
                            [
                                "base_estimator", 
                                "object, optional"
                            ], 
                            [
                                "methods", 
                                ""
                            ], 
                            [
                                "min_samples", 
                                "int (>= 1) or float ([0, 1]), optional"
                            ], 
                            [
                                "residual_threshold", 
                                "float, optional"
                            ], 
                            [
                                "is_data_valid", 
                                "callable, optional"
                            ], 
                            [
                                "it", 
                                "`is_data_valid(X, y)`. If its return value is"
                            ], 
                            [
                                "is_model_valid", 
                                "callable, optional"
                            ], 
                            [
                                "data", 
                                "`is_model_valid(model, X, y)`. If its return value is"
                            ], 
                            [
                                "max_trials", 
                                "int, optional"
                            ], 
                            [
                                "max_skips", 
                                "int, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "stop_n_inliers", 
                                "int, optional"
                            ], 
                            [
                                "stop_score", 
                                "float, optional"
                            ], 
                            [
                                "stop_probability", 
                                "float in range [0, 1], optional"
                            ], 
                            [
                                "residual_metric", 
                                "callable, optional"
                            ], 
                            [
                                "used", 
                                ""
                            ], 
                            [
                                "dy", 
                                "np.sum(np.abs(dy), axis=1)"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "loss", 
                                "string, callable, optional, default \"absolute_loss\""
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ]
                        ], 
                        [
                            [
                                "min_samples", 
                                "int (>= 1) or float ([0, 1]), optional"
                            ], 
                            [
                                "residual_threshold", 
                                "float, optional"
                            ], 
                            [
                                "is_data_valid", 
                                "callable, optional"
                            ], 
                            [
                                "it", 
                                "`is_data_valid(X, y)`. If its return value is"
                            ], 
                            [
                                "is_model_valid", 
                                "callable, optional"
                            ], 
                            [
                                "data", 
                                "`is_model_valid(model, X, y)`. If its return value is"
                            ], 
                            [
                                "max_trials", 
                                "int, optional"
                            ], 
                            [
                                "max_skips", 
                                "int, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "stop_n_inliers", 
                                "int, optional"
                            ], 
                            [
                                "stop_score", 
                                "float, optional"
                            ], 
                            [
                                "stop_probability", 
                                "float in range [0, 1], optional"
                            ], 
                            [
                                "residual_metric", 
                                "callable, optional"
                            ], 
                            [
                                "used", 
                                ""
                            ], 
                            [
                                "dy", 
                                "np.sum(np.abs(dy), axis=1)"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "loss", 
                                "string, callable, optional, default \"absolute_loss\""
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_targets]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples]"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "numpy array of shape [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array, shape = [n_samples] or [n_samples, n_targets]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def score(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "numpy array or sparse matrix of shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array, shape = [n_samples] or [n_samples, n_targets]"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "numpy array or sparse matrix of shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array, shape = [n_samples] or [n_samples, n_targets]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\sklearn\\cross_decomposition\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\datasets\\plot_iris_dataset.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\gaussian_process\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_ard.py": [
        [
            [
                "def f(x, noise_amount):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\benchmarks\\bench_isolation_forest.py": [
        [
            [
                "def print_outlier_ratio(y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\mixture\\tests\\test_bayesian_mixture.py": [
        [
            [
                "def test_log_dirichlet_norm():", 
                []
            ], 
            [
                "def test_log_wishart_norm():", 
                []
            ], 
            [
                "def test_bayesian_mixture_covariance_type():", 
                []
            ], 
            [
                "def test_bayesian_mixture_weight_concentration_prior_type():", 
                []
            ], 
            [
                "def test_bayesian_mixture_weights_prior_initialisation():", 
                []
            ], 
            [
                "def test_bayesian_mixture_means_prior_initialisation():", 
                []
            ], 
            [
                "def test_bayesian_mixture_precisions_prior_initialisation():", 
                []
            ], 
            [
                "def test_bayesian_mixture_check_is_fitted():", 
                []
            ], 
            [
                "def test_bayesian_mixture_weights():", 
                []
            ], 
            [
                "def test_monotonic_likelihood():", 
                []
            ], 
            [
                "def test_compare_covar_type():", 
                []
            ], 
            [
                "def test_check_covariance_precision():", 
                []
            ], 
            [
                "def test_invariant_translation():", 
                []
            ]
        ], 
        13
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\forest.py": [
        [
            [
                "def _generate_sample_indices(random_state, n_samples):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _generate_unsampled_indices(random_state, n_samples):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _parallel_build_trees(tree, forest, X, y, sample_weight, tree_idx, n_trees,\n                          verbose=0, class_weight=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self,\n                 base_estimator,\n                 n_estimators=10,\n                 estimator_params=tuple(),\n                 bootstrap=False,\n                 oob_score=False,\n                 n_jobs=1,\n                 random_state=None,\n                 verbose=0,\n                 warm_start=False,\n                 class_weight=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def apply(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "X_leaves", 
                                "array_like, shape = [n_samples, n_estimators]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def decision_path(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "indicator", 
                                "sparse csr array, shape = [n_samples, n_nodes]"
                            ], 
                            [
                                "n_nodes_ptr", 
                                "array of size (n_estimators + 1, )"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix of shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_outputs]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples] or None"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _set_oob_score(self, X, y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _validate_y_class_weight(self, y):", 
                []
            ], 
            [
                "def _validate_X_predict(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def feature_importances_(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "feature_importances_", 
                                "array, shape = [n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def accumulate_prediction(predict, X, out):", 
                []
            ], 
            [
                "def __init__(self,\n                 base_estimator,\n                 n_estimators=10,\n                 estimator_params=tuple(),\n                 bootstrap=False,\n                 oob_score=False,\n                 n_jobs=1,\n                 random_state=None,\n                 verbose=0,\n                 warm_start=False,\n                 class_weight=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _set_oob_score(self, X, y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _validate_y_class_weight(self, y):", 
                []
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix of shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array of shape = [n_samples] or [n_samples, n_outputs]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                []
            ], 
            [
                "def predict_log_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix of shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "p", 
                                "array of shape = [n_samples, n_classes], or a list of n_outputs"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self,\n                 base_estimator,\n                 n_estimators=10,\n                 estimator_params=tuple(),\n                 bootstrap=False,\n                 oob_score=False,\n                 n_jobs=1,\n                 random_state=None,\n                 verbose=0,\n                 warm_start=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix of shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array of shape = [n_samples] or [n_samples, n_outputs]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _set_oob_score(self, X, y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self,\n                 n_estimators=10,\n                 criterion=\"gini\",\n                 max_depth=None,\n                 min_samples_split=2,\n                 min_samples_leaf=1,\n                 min_weight_fraction_leaf=0.,\n                 max_features=\"auto\",\n                 max_leaf_nodes=None,\n                 min_impurity_decrease=0.,\n                 min_impurity_split=None,\n                 bootstrap=True,\n                 oob_score=False,\n                 n_jobs=1,\n                 random_state=None,\n                 verbose=0,\n                 warm_start=False,\n                 class_weight=None):", 
                []
            ], 
            [
                "def __init__(self,\n                 n_estimators=10,\n                 criterion=\"mse\",\n                 max_depth=None,\n                 min_samples_split=2,\n                 min_samples_leaf=1,\n                 min_weight_fraction_leaf=0.,\n                 max_features=\"auto\",\n                 max_leaf_nodes=None,\n                 min_impurity_decrease=0.,\n                 min_impurity_split=None,\n                 bootstrap=True,\n                 oob_score=False,\n                 n_jobs=1,\n                 random_state=None,\n                 verbose=0,\n                 warm_start=False):", 
                [
                    [
                        [
                            [
                                "n_estimators", 
                                "integer, optional (default=10)"
                            ], 
                            [
                                "criterion", 
                                "string, optional (default=\"mse\")"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "max_features", 
                                "int, float, string or None, optional (default=\"auto\")"
                            ], 
                            [
                                "split", 
                                ""
                            ], 
                            [
                                "Note", 
                                "the search for a split does not stop until at least one"
                            ], 
                            [
                                "max_depth", 
                                "integer or None, optional (default=None)"
                            ], 
                            [
                                "min_samples_split", 
                                "int, float, optional (default=2)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_samples_leaf", 
                                "int, float, optional (default=1)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_weight_fraction_leaf", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "max_leaf_nodes", 
                                "int or None, optional (default=None)"
                            ], 
                            [
                                "min_impurity_split", 
                                "float,"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "min_impurity_decrease", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "following", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "bootstrap", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "oob_score", 
                                "bool, optional (default=False)"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional (default=1)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "verbose", 
                                "int, optional (default=0)"
                            ], 
                            [
                                "warm_start", 
                                "bool, optional (default=False)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self,\n                 n_estimators=10,\n                 criterion=\"gini\",\n                 max_depth=None,\n                 min_samples_split=2,\n                 min_samples_leaf=1,\n                 min_weight_fraction_leaf=0.,\n                 max_features=\"auto\",\n                 max_leaf_nodes=None,\n                 min_impurity_decrease=0.,\n                 min_impurity_split=None,\n                 bootstrap=False,\n                 oob_score=False,\n                 n_jobs=1,\n                 random_state=None,\n                 verbose=0,\n                 warm_start=False,\n                 class_weight=None):", 
                []
            ], 
            [
                "def __init__(self,\n                 n_estimators=10,\n                 criterion=\"mse\",\n                 max_depth=None,\n                 min_samples_split=2,\n                 min_samples_leaf=1,\n                 min_weight_fraction_leaf=0.,\n                 max_features=\"auto\",\n                 max_leaf_nodes=None,\n                 min_impurity_decrease=0.,\n                 min_impurity_split=None,\n                 bootstrap=False,\n                 oob_score=False,\n                 n_jobs=1,\n                 random_state=None,\n                 verbose=0,\n                 warm_start=False):", 
                [
                    [
                        [
                            [
                                "n_estimators", 
                                "integer, optional (default=10)"
                            ], 
                            [
                                "criterion", 
                                "string, optional (default=\"mse\")"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "max_features", 
                                "int, float, string or None, optional (default=\"auto\")"
                            ], 
                            [
                                "split", 
                                ""
                            ], 
                            [
                                "Note", 
                                "the search for a split does not stop until at least one"
                            ], 
                            [
                                "max_depth", 
                                "integer or None, optional (default=None)"
                            ], 
                            [
                                "min_samples_split", 
                                "int, float, optional (default=2)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_samples_leaf", 
                                "int, float, optional (default=1)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_weight_fraction_leaf", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "max_leaf_nodes", 
                                "int or None, optional (default=None)"
                            ], 
                            [
                                "min_impurity_split", 
                                "float,"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "min_impurity_decrease", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "following", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "bootstrap", 
                                "boolean, optional (default=False)"
                            ], 
                            [
                                "oob_score", 
                                "bool, optional (default=False)"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional (default=1)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "verbose", 
                                "int, optional (default=0)"
                            ], 
                            [
                                "warm_start", 
                                "bool, optional (default=False)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self,\n                 n_estimators=10,\n                 max_depth=5,\n                 min_samples_split=2,\n                 min_samples_leaf=1,\n                 min_weight_fraction_leaf=0.,\n                 max_leaf_nodes=None,\n                 min_impurity_decrease=0.,\n                 min_impurity_split=None,\n                 sparse_output=True,\n                 n_jobs=1,\n                 random_state=None,\n                 verbose=0,\n                 warm_start=False):", 
                [
                    [
                        [
                            [
                                "n_estimators", 
                                "integer, optional (default=10)"
                            ], 
                            [
                                "max_depth", 
                                "integer, optional (default=5)"
                            ], 
                            [
                                "min_samples_split", 
                                "int, float, optional (default=2)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_samples_leaf", 
                                "int, float, optional (default=1)"
                            ], 
                            [
                                "node", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "min_weight_fraction_leaf", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "max_leaf_nodes", 
                                "int or None, optional (default=None)"
                            ], 
                            [
                                "min_impurity_split", 
                                "float,"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "min_impurity_decrease", 
                                "float, optional (default=0.)"
                            ], 
                            [
                                "following", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "bootstrap", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "sparse_output", 
                                "bool, optional (default=True)"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional (default=1)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "verbose", 
                                "int, optional (default=0)"
                            ], 
                            [
                                "warm_start", 
                                "bool, optional (default=False)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _set_oob_score(self, X, y):", 
                []
            ], 
            [
                "def fit(self, X, y=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape=(n_samples, n_features)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples] or None"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape=(n_samples, n_features)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples] or None"
                            ]
                        ], 
                        [
                            [
                                "X_transformed", 
                                "sparse matrix, shape=(n_samples, n_out)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape=(n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_transformed", 
                                "sparse matrix, shape=(n_samples, n_out)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        30
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\cluster\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_utils.py": [
        [
            [
                "def test_make_rng():", 
                []
            ], 
            [
                "def test_deprecated():", 
                []
            ], 
            [
                "def ham():", 
                []
            ], 
            [
                "def test_resample():", 
                []
            ], 
            [
                "def test_safe_mask():", 
                []
            ], 
            [
                "def test_pinvh_simple_real():", 
                []
            ], 
            [
                "def test_pinvh_nonpositive():", 
                []
            ], 
            [
                "def test_pinvh_simple_complex():", 
                []
            ], 
            [
                "def test_arpack_eigsh_initialization():", 
                []
            ], 
            [
                "def test_column_or_1d():", 
                []
            ], 
            [
                "def test_safe_indexing():", 
                []
            ], 
            [
                "def test_safe_indexing_pandas():", 
                []
            ], 
            [
                "def test_safe_indexing_mock_pandas():", 
                []
            ], 
            [
                "def test_shuffle_on_ndim_equals_three():", 
                []
            ], 
            [
                "def to_tuple(A):", 
                []
            ], 
            [
                "def test_shuffle_dont_convert_to_array():", 
                []
            ], 
            [
                "def test_gen_even_slices():", 
                []
            ]
        ], 
        17
    ], 
    "../scikit-learn-master\\examples\\neighbors\\plot_species_kde.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_digits_linkage.py": [
        [
            [
                "def nudge_images(X, y):", 
                []
            ], 
            [
                "def plot_clustering(X_red, X, labels, title=None):", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\examples\\neighbors\\plot_classification.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\covariance\\shrunk_covariance_.py": [
        [
            [
                "def shrunk_covariance(emp_cov, shrinkage=0.1):", 
                [
                    [
                        [
                            [
                                "emp_cov", 
                                "array-like, shape (n_features, n_features)"
                            ], 
                            [
                                "shrinkage", 
                                "float, 0 <= shrinkage <= 1"
                            ]
                        ], 
                        [
                            [
                                "shrunk_cov", 
                                "array-like"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, store_precision=True, assume_centered=False,\n                 shrinkage=0.1):", 
                [
                    [
                        [
                            [
                                "store_precision", 
                                "boolean, default True"
                            ], 
                            [
                                "assume_centered", 
                                "boolean, default False"
                            ], 
                            [
                                "shrinkage", 
                                "float, 0 <= shrinkage <= 1, default 0.1"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "not used, present for API consistence purpose."
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def ledoit_wolf_shrinkage(X, assume_centered=False, block_size=1000):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "assume_centered", 
                                "Boolean"
                            ], 
                            [
                                "block_size", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "shrinkage", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def ledoit_wolf(X, assume_centered=False, block_size=1000):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "assume_centered", 
                                "boolean, default=False"
                            ], 
                            [
                                "block_size", 
                                "int, default=1000"
                            ]
                        ], 
                        [
                            [
                                "shrunk_cov", 
                                "array-like, shape (n_features, n_features)"
                            ], 
                            [
                                "shrinkage", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, store_precision=True, assume_centered=False,\n                 block_size=1000):", 
                [
                    [
                        [
                            [
                                "store_precision", 
                                "bool, default=True"
                            ], 
                            [
                                "assume_centered", 
                                "bool, default=False"
                            ], 
                            [
                                "block_size", 
                                "int, default=1000"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "not used, present for API consistence purpose."
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def oas(X, assume_centered=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "assume_centered", 
                                "boolean"
                            ]
                        ], 
                        [
                            [
                                "shrunk_cov", 
                                "array-like, shape (n_features, n_features)"
                            ], 
                            [
                                "shrinkage", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "not used, present for API consistence purpose."
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        9
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\cluster\\tests\\test_supervised.py": [
        [
            [
                "def test_error_messages_on_wrong_input():", 
                []
            ], 
            [
                "def test_perfect_matches():", 
                []
            ], 
            [
                "def test_homogeneous_but_not_complete_labeling():", 
                []
            ], 
            [
                "def test_complete_but_not_homogeneous_labeling():", 
                []
            ], 
            [
                "def test_not_complete_and_not_homogeneous_labeling():", 
                []
            ], 
            [
                "def test_non_consicutive_labels():", 
                []
            ], 
            [
                "def uniform_labelings_scores(score_func, n_samples, k_range, n_runs=10,\n                             seed=42):", 
                []
            ], 
            [
                "def test_adjustment_for_chance():", 
                []
            ], 
            [
                "def test_adjusted_mutual_info_score():", 
                []
            ], 
            [
                "def test_expected_mutual_info_overflow():", 
                []
            ], 
            [
                "def test_entropy():", 
                []
            ], 
            [
                "def test_contingency_matrix():", 
                []
            ], 
            [
                "def test_contingency_matrix_sparse():", 
                []
            ], 
            [
                "def test_exactly_zero_info_score():", 
                []
            ], 
            [
                "def test_v_measure_and_mutual_information(seed=36):", 
                []
            ], 
            [
                "def test_fowlkes_mallows_score():", 
                []
            ], 
            [
                "def test_fowlkes_mallows_score_properties():", 
                []
            ]
        ], 
        17
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\regression.py": [
        [
            [
                "def __init__(self, n_neighbors=5, weights='uniform',\n                 algorithm='auto', leaf_size=30,\n                 p=2, metric='minkowski', metric_params=None, n_jobs=1,\n                 **kwargs):", 
                [
                    [
                        [
                            [
                                "n_neighbors", 
                                "int, optional (default = 5)"
                            ], 
                            [
                                "for", 
                                "meth"
                            ], 
                            [
                                "weights", 
                                "str or callable"
                            ], 
                            [
                                "values", 
                                ""
                            ], 
                            [
                                "algorithm", 
                                "{'auto', 'ball_tree', 'kd_tree', 'brute'}, optional"
                            ], 
                            [
                                "neighbors", 
                                ""
                            ], 
                            [
                                "use", 
                                "class"
                            ], 
                            [
                                "use", 
                                "class"
                            ], 
                            [
                                "to", 
                                "meth"
                            ], 
                            [
                                "Note", 
                                "fitting on sparse input will override the setting of"
                            ], 
                            [
                                "leaf_size", 
                                "int, optional (default = 30)"
                            ], 
                            [
                                "p", 
                                "integer, optional (default = 2)"
                            ], 
                            [
                                "metric", 
                                "string or callable, default 'minkowski'"
                            ], 
                            [
                                "metric_params", 
                                "dict, optional (default = None)"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default = 1)"
                            ], 
                            [
                                "affect", 
                                "meth"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_query, n_features), \\"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array of int, shape = [n_samples] or [n_samples, n_outputs]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, radius=1.0, weights='uniform',\n                 algorithm='auto', leaf_size=30,\n                 p=2, metric='minkowski', metric_params=None, **kwargs):", 
                [
                    [
                        [
                            [
                                "radius", 
                                "float, optional (default = 1.0)"
                            ], 
                            [
                                "for", 
                                "meth"
                            ], 
                            [
                                "weights", 
                                "str or callable"
                            ], 
                            [
                                "values", 
                                ""
                            ], 
                            [
                                "algorithm", 
                                "{'auto', 'ball_tree', 'kd_tree', 'brute'}, optional"
                            ], 
                            [
                                "neighbors", 
                                ""
                            ], 
                            [
                                "use", 
                                "class"
                            ], 
                            [
                                "use", 
                                "class"
                            ], 
                            [
                                "to", 
                                "meth"
                            ], 
                            [
                                "Note", 
                                "fitting on sparse input will override the setting of"
                            ], 
                            [
                                "leaf_size", 
                                "int, optional (default = 30)"
                            ], 
                            [
                                "p", 
                                "integer, optional (default = 2)"
                            ], 
                            [
                                "metric", 
                                "string or callable, default 'minkowski'"
                            ], 
                            [
                                "metric_params", 
                                "dict, optional (default = None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_query, n_features), \\"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array of int, shape = [n_samples] or [n_samples, n_outputs]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\tests\\common.py": [
        [
            [
                "def generate_clustered_data(seed=0, n_clusters=3, n_features=2,\n                            n_samples_per_cluster=20, std=.4):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\benchmarks\\bench_tree.py": [
        [
            [
                "def bench_scikit_tree_classifier(X, Y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def bench_scikit_tree_regressor(X, Y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\doc\\tutorial\\text_analytics\\skeletons\\exercise_02_sentiment.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\benchmarks\\bench_plot_neighbors.py": [
        [
            [
                "def get_data(N, D, dataset='dense'):", 
                []
            ], 
            [
                "def barplot_neighbors(Nrange=2 ** np.arange(1, 11),\n                      Drange=2 ** np.arange(7),\n                      krange=2 ** np.arange(10),\n                      N=1000,\n                      D=64,\n                      k=5,\n                      leaf_size=30,\n                      dataset='digits'):", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\examples\\svm\\plot_rbf_parameters.py": [
        [
            [
                "def __init__(self, vmin=None, vmax=None, midpoint=None, clip=False):", 
                []
            ], 
            [
                "def __call__(self, value, clip=None):", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\tests\\test_base.py": [
        [
            [
                "def _remove_dir(path):", 
                []
            ], 
            [
                "def teardown_module():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def setup_load_files():", 
                []
            ], 
            [
                "def teardown_load_files():", 
                []
            ], 
            [
                "def test_data_home():", 
                []
            ], 
            [
                "def test_default_empty_load_files():", 
                []
            ], 
            [
                "def test_default_load_files():", 
                []
            ], 
            [
                "def test_load_files_w_categories_desc_and_encoding():", 
                []
            ], 
            [
                "def test_load_files_wo_load_content():", 
                []
            ], 
            [
                "def test_load_sample_images():", 
                []
            ], 
            [
                "def test_load_digits():", 
                []
            ], 
            [
                "def test_load_digits_n_class_lt_10():", 
                []
            ], 
            [
                "def test_load_sample_image():", 
                []
            ], 
            [
                "def test_load_missing_sample_image_error():", 
                []
            ], 
            [
                "def test_load_diabetes():", 
                []
            ], 
            [
                "def test_load_linnerud():", 
                []
            ], 
            [
                "def test_load_iris():", 
                []
            ], 
            [
                "def test_load_wine():", 
                []
            ], 
            [
                "def test_load_breast_cancer():", 
                []
            ], 
            [
                "def test_load_boston():", 
                []
            ], 
            [
                "def test_loads_dumps_bunch():", 
                []
            ], 
            [
                "def test_bunch_pickle_generated_with_0_16_and_read_with_0_17():", 
                []
            ], 
            [
                "def test_bunch_dir():", 
                []
            ]
        ], 
        23
    ], 
    "../scikit-learn-master\\sklearn\\preprocessing\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\benchmarks\\bench_tsne_mnist.py": [
        [
            [
                "def load_data(dtype=np.float32, order='C', shuffle=True, seed=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def nn_accuracy(X, X_embedded, k=1):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def tsne_fit_transform(model, data):", 
                []
            ], 
            [
                "def sanitize(filename):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def bhtsne(X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\pca.py": [
        [
            [
                "def _assess_dimension_(spectrum, rank, n_samples, n_features):", 
                [
                    [
                        [
                            [
                                "spectrum", 
                                "array of shape (n)"
                            ], 
                            [
                                "rank", 
                                "int"
                            ], 
                            [
                                "n_samples", 
                                "int"
                            ], 
                            [
                                "n_features", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "ll", 
                                "float,"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _infer_dimension_(spectrum, n_samples, n_features):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=None, copy=True, whiten=False,\n                 svd_solver='auto', tol=0.0, iterated_power='auto',\n                 random_state=None):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int, float, None or string"
                            ], 
                            [
                                "kept", 
                                ""
                            ], 
                            [
                                "in", 
                                ""
                            ], 
                            [
                                "copy", 
                                "bool (default True)"
                            ], 
                            [
                                "whiten", 
                                "bool, optional (default False)"
                            ], 
                            [
                                "svd_solver", 
                                "string {'auto', 'full', 'arpack', 'randomized'}"
                            ], 
                            [
                                "auto", 
                                ""
                            ], 
                            [
                                "full", 
                                ""
                            ], 
                            [
                                "arpack", 
                                ""
                            ], 
                            [
                                "randomized", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "tol", 
                                "float >= 0, optional (default .0)"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "iterated_power", 
                                "int >= 0, or 'auto', (default 'auto')"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default None)"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _fit(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _fit_full(self, X, n_components):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _fit_truncated(self, X, n_components, svd_solver):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def score_samples(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape(n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "ll", 
                                "array, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def score(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape(n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "ll", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=None, copy=True, iterated_power=2,\n                 whiten=False, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int, optional"
                            ], 
                            [
                                "copy", 
                                "bool"
                            ], 
                            [
                                "iterated_power", 
                                "int, default=2"
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "whiten", 
                                "bool, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default=None"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _fit(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "ndarray, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        16
    ], 
    "../scikit-learn-master\\sklearn\\covariance\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\decomposition\\plot_pca_vs_fa_model_selection.py": [
        [
            [
                "def compute_scores(X):", 
                []
            ], 
            [
                "def shrunk_cov_score(X):", 
                []
            ], 
            [
                "def lw_score(X):", 
                []
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\sklearn\\preprocessing\\tests\\test_data.py": [
        [
            [
                "def toarray(a):", 
                []
            ], 
            [
                "def _check_dim_1axis(a):", 
                []
            ], 
            [
                "def assert_correct_incr(i, batch_start, batch_stop, n, chunk_size,\n                        n_samples_seen):", 
                []
            ], 
            [
                "def test_polynomial_features():", 
                []
            ], 
            [
                "def test_polynomial_feature_names():", 
                []
            ], 
            [
                "def test_standard_scaler_1d():", 
                []
            ], 
            [
                "def test_scale_1d():", 
                []
            ], 
            [
                "def test_standard_scaler_numerical_stability():", 
                []
            ], 
            [
                "def test_scaler_2d_arrays():", 
                []
            ], 
            [
                "def test_handle_zeros_in_scale():", 
                []
            ], 
            [
                "def test_minmax_scaler_partial_fit():", 
                []
            ], 
            [
                "def test_standard_scaler_partial_fit():", 
                []
            ], 
            [
                "def test_standard_scaler_partial_fit_numerical_stability():", 
                []
            ], 
            [
                "def test_partial_fit_sparse_input():", 
                []
            ], 
            [
                "def test_standard_scaler_trasform_with_partial_fit():", 
                []
            ], 
            [
                "def test_min_max_scaler_iris():", 
                []
            ], 
            [
                "def test_min_max_scaler_zero_variance_features():", 
                []
            ], 
            [
                "def test_minmax_scale_axis1():", 
                []
            ], 
            [
                "def test_min_max_scaler_1d():", 
                []
            ], 
            [
                "def test_scaler_without_centering():", 
                []
            ], 
            [
                "def test_scaler_int():", 
                []
            ], 
            [
                "def test_scaler_without_copy():", 
                []
            ], 
            [
                "def test_scale_sparse_with_mean_raise_exception():", 
                []
            ], 
            [
                "def test_scale_input_finiteness_validation():", 
                []
            ], 
            [
                "def test_robust_scaler_2d_arrays():", 
                []
            ], 
            [
                "def test_robust_scaler_transform_one_row_csr():", 
                []
            ], 
            [
                "def test_robust_scaler_iris():", 
                []
            ], 
            [
                "def test_robust_scaler_iris_quantiles():", 
                []
            ], 
            [
                "def test_quantile_transform_iris():", 
                []
            ], 
            [
                "def test_quantile_transform_check_error():", 
                []
            ], 
            [
                "def test_quantile_transform_sparse_ignore_zeros():", 
                []
            ], 
            [
                "def test_quantile_transform_dense_toy():", 
                []
            ], 
            [
                "def test_quantile_transform_subsampling():", 
                []
            ], 
            [
                "def test_quantile_transform_sparse_toy():", 
                []
            ], 
            [
                "def test_quantile_transform_axis1():", 
                []
            ], 
            [
                "def test_quantile_transform_bounds():", 
                []
            ], 
            [
                "def test_quantile_transform_and_inverse():", 
                []
            ], 
            [
                "def test_robust_scaler_invalid_range():", 
                []
            ], 
            [
                "def test_scale_function_without_centering():", 
                []
            ], 
            [
                "def test_robust_scale_axis1():", 
                []
            ], 
            [
                "def test_robust_scale_1d_array():", 
                []
            ], 
            [
                "def test_robust_scaler_zero_variance_features():", 
                []
            ], 
            [
                "def test_maxabs_scaler_zero_variance_features():", 
                []
            ], 
            [
                "def test_maxabs_scaler_large_negative_value():", 
                []
            ], 
            [
                "def test_maxabs_scaler_transform_one_row_csr():", 
                []
            ], 
            [
                "def test_warning_scaling_integers():", 
                []
            ], 
            [
                "def test_maxabs_scaler_1d():", 
                []
            ], 
            [
                "def test_maxabs_scaler_partial_fit():", 
                []
            ], 
            [
                "def test_normalizer_l1():", 
                []
            ], 
            [
                "def test_normalizer_l2():", 
                []
            ], 
            [
                "def test_normalizer_max():", 
                []
            ], 
            [
                "def test_normalize():", 
                []
            ], 
            [
                "def test_binarizer():", 
                []
            ], 
            [
                "def test_center_kernel():", 
                []
            ], 
            [
                "def test_cv_pipeline_precomputed():", 
                []
            ], 
            [
                "def test_fit_transform():", 
                []
            ], 
            [
                "def test_add_dummy_feature():", 
                []
            ], 
            [
                "def test_add_dummy_feature_coo():", 
                []
            ], 
            [
                "def test_add_dummy_feature_csc():", 
                []
            ], 
            [
                "def test_add_dummy_feature_csr():", 
                []
            ], 
            [
                "def test_one_hot_encoder_sparse():", 
                []
            ], 
            [
                "def test_one_hot_encoder_dense():", 
                []
            ], 
            [
                "def _check_transform_selected(X, X_expected, sel):", 
                []
            ], 
            [
                "def test_transform_selected():", 
                []
            ], 
            [
                "def test_transform_selected_copy_arg():", 
                []
            ], 
            [
                "def _mutating_transformer(X):", 
                []
            ], 
            [
                "def _run_one_hot(X, X2, cat):", 
                []
            ], 
            [
                "def _check_one_hot(X, X2, cat, n_features):", 
                []
            ], 
            [
                "def test_one_hot_encoder_categorical_features():", 
                []
            ], 
            [
                "def test_one_hot_encoder_unknown_transform():", 
                []
            ], 
            [
                "def test_fit_cold_start():", 
                []
            ], 
            [
                "def test_quantile_transform_valid_axis():", 
                []
            ]
        ], 
        72
    ], 
    "../scikit-learn-master\\sklearn\\utils\\deprecation.py": [
        [
            [
                "def __init__(self, extra=''):", 
                [
                    [
                        [
                            [
                                "extra", 
                                "string"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __call__(self, obj):", 
                [
                    [
                        [
                            [
                                "obj", 
                                "object"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _decorate_class(self, cls):", 
                []
            ], 
            [
                "def wrapped(*args, **kwargs):", 
                []
            ], 
            [
                "def _decorate_fun(self, fun):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def wrapped(*args, **kwargs):", 
                []
            ], 
            [
                "def _update_doc(self, olddoc):", 
                []
            ], 
            [
                "def _is_deprecated(func):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\sklearn\\multiclass.py": [
        [
            [
                "def _fit_binary(estimator, X, y, classes=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _partial_fit_binary(estimator, X, y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _predict_binary(estimator, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _check_estimator(estimator):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def decision_function(self, X):", 
                []
            ], 
            [
                "def predict_proba(self, X):", 
                []
            ], 
            [
                "def __init__(self, estimator, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "(sparse) array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "(sparse) array-like, shape = [n_samples, ], [n_samples, n_classes]"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X, y, classes=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "(sparse) array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "(sparse) array-like, shape = [n_samples, ], [n_samples, n_classes]"
                            ], 
                            [
                                "classes", 
                                "array, shape (n_classes, )"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "(sparse) array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "(sparse) array-like, shape = [n_samples, ], [n_samples, n_classes]."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "T", 
                                "(sparse) array-like, shape = [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def multilabel_(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def n_classes_(self):", 
                []
            ], 
            [
                "def coef_(self):", 
                []
            ], 
            [
                "def intercept_(self):", 
                []
            ], 
            [
                "def _pairwise(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _first_estimator(self):", 
                []
            ], 
            [
                "def _fit_ovo_binary(estimator, X, y, i, j):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _partial_fit_ovo_binary(estimator, X, y, i, j):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, estimator, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "(sparse) array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples]"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X, y, classes=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "(sparse) array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples]"
                            ], 
                            [
                                "classes", 
                                "array, shape (n_classes, )"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "(sparse) array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "numpy array of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "Y", 
                                "array-like, shape = [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def n_classes_(self):", 
                []
            ], 
            [
                "def _pairwise(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, estimator, code_size=1.5, random_state=None, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object"
                            ], 
                            [
                                "code_size", 
                                "float"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "(sparse) array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "numpy array of shape [n_samples]"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "(sparse) array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "numpy array of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        32
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\tests\\test_ridge.py": [
        [
            [
                "def test_ridge():", 
                []
            ], 
            [
                "def test_primal_dual_relationship():", 
                []
            ], 
            [
                "def test_ridge_singular():", 
                []
            ], 
            [
                "def test_ridge_regression_sample_weights():", 
                []
            ], 
            [
                "def test_ridge_sample_weights():", 
                []
            ], 
            [
                "def test_ridge_shapes():", 
                []
            ], 
            [
                "def test_ridge_intercept():", 
                []
            ], 
            [
                "def test_toy_ridge_object():", 
                []
            ], 
            [
                "def test_ridge_vs_lstsq():", 
                []
            ], 
            [
                "def test_ridge_individual_penalties():", 
                []
            ], 
            [
                "def _test_ridge_loo(filter_):", 
                []
            ], 
            [
                "def _test_ridge_cv_normalize(filter_):", 
                []
            ], 
            [
                "def _test_ridge_cv(filter_):", 
                []
            ], 
            [
                "def _test_ridge_diabetes(filter_):", 
                []
            ], 
            [
                "def _test_multi_ridge_diabetes(filter_):", 
                []
            ], 
            [
                "def _test_ridge_classifiers(filter_):", 
                []
            ], 
            [
                "def _test_tolerance(filter_):", 
                []
            ], 
            [
                "def check_dense_sparse(test_func):", 
                []
            ], 
            [
                "def test_dense_sparse():", 
                []
            ], 
            [
                "def test_ridge_cv_sparse_svd():", 
                []
            ], 
            [
                "def test_ridge_sparse_svd():", 
                []
            ], 
            [
                "def test_class_weights():", 
                []
            ], 
            [
                "def test_class_weight_vs_sample_weight():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_class_weights_cv():", 
                []
            ], 
            [
                "def test_ridgecv_store_cv_values():", 
                []
            ], 
            [
                "def test_ridgecv_sample_weight():", 
                []
            ], 
            [
                "def test_raises_value_error_if_sample_weights_greater_than_1d():", 
                []
            ], 
            [
                "def fit_ridge_not_ok():", 
                []
            ], 
            [
                "def fit_ridge_not_ok_2():", 
                []
            ], 
            [
                "def test_sparse_design_with_sample_weights():", 
                []
            ], 
            [
                "def test_raises_value_error_if_solver_not_supported():", 
                []
            ], 
            [
                "def func():", 
                []
            ], 
            [
                "def test_sparse_cg_max_iter():", 
                []
            ], 
            [
                "def test_n_iter():", 
                []
            ], 
            [
                "def test_ridge_fit_intercept_sparse():", 
                []
            ], 
            [
                "def test_errors_and_values_helper():", 
                []
            ], 
            [
                "def test_errors_and_values_svd_helper():", 
                []
            ], 
            [
                "def test_ridge_classifier_no_support_multilabel():", 
                []
            ], 
            [
                "def test_dtype_match():", 
                []
            ], 
            [
                "def test_dtype_match_cholesky():", 
                []
            ]
        ], 
        40
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\tests\\test_pairwise.py": [
        [
            [
                "def test_pairwise_distances():", 
                []
            ], 
            [
                "def test_pairwise_boolean_distance():", 
                []
            ], 
            [
                "def test_pairwise_precomputed():", 
                []
            ], 
            [
                "def check_pairwise_parallel(func, metric, kwds):", 
                []
            ], 
            [
                "def test_pairwise_parallel():", 
                []
            ], 
            [
                "def test_pairwise_callable_nonstrict_metric():", 
                []
            ], 
            [
                "def callable_rbf_kernel(x, y, **kwds):", 
                []
            ], 
            [
                "def test_pairwise_kernels():", 
                []
            ], 
            [
                "def test_pairwise_kernels_filter_param():", 
                []
            ], 
            [
                "def test_paired_distances():", 
                []
            ], 
            [
                "def test_pairwise_distances_argmin_min():", 
                []
            ], 
            [
                "def test_euclidean_distances():", 
                []
            ], 
            [
                "def test_cosine_distances():", 
                []
            ], 
            [
                "def test_paired_euclidean_distances():", 
                []
            ], 
            [
                "def test_paired_manhattan_distances():", 
                []
            ], 
            [
                "def test_chi_square_kernel():", 
                []
            ], 
            [
                "def test_kernel_symmetry():", 
                []
            ], 
            [
                "def test_kernel_sparse():", 
                []
            ], 
            [
                "def test_linear_kernel():", 
                []
            ], 
            [
                "def test_rbf_kernel():", 
                []
            ], 
            [
                "def test_laplacian_kernel():", 
                []
            ], 
            [
                "def test_cosine_similarity_sparse_output():", 
                []
            ], 
            [
                "def test_cosine_similarity():", 
                []
            ], 
            [
                "def test_check_dense_matrices():", 
                []
            ], 
            [
                "def test_check_XB_returned():", 
                []
            ], 
            [
                "def test_check_different_dimensions():", 
                []
            ], 
            [
                "def test_check_invalid_dimensions():", 
                []
            ], 
            [
                "def test_check_sparse_arrays():", 
                []
            ], 
            [
                "def tuplify(X):", 
                []
            ], 
            [
                "def test_check_tuple_input():", 
                []
            ], 
            [
                "def test_check_preserve_type():", 
                []
            ]
        ], 
        31
    ], 
    "../scikit-learn-master\\examples\\mixture\\plot_gmm_pdf.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\nearest_centroid.py": [
        [
            [
                "def __init__(self, metric='euclidean', shrink_threshold=None):", 
                [
                    [
                        [
                            [
                                "metric", 
                                "string, or callable"
                            ], 
                            [
                                "shrink_threshold", 
                                "float, optional (default = None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array, shape = [n_samples]"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_ridge_coeffs.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\benchmarks\\bench_sample_without_replacement.py": [
        [
            [
                "def compute_time(t_start, delta):", 
                []
            ], 
            [
                "def bench_sample(sampling, n_population, n_samples):", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\covariance\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\model_selection\\plot_grid_search_digits.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\tests\\test_covtype.py": [
        [
            [
                "def fetch(*args, **kwargs):", 
                []
            ], 
            [
                "def test_fetch():", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\examples\\applications\\plot_species_distribution_modeling.py": [
        [
            [
                "def create_species_bunch(species_name, train, test, coverages, xgrid, ygrid):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def plot_species_distribution(species=(\"bradypus_variegatus_0\",\n                                       \"microryzomys_minutus_0\")):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_ward_structured_vs_unstructured.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_docstring_parameters.py": [
        [
            [
                "def test_docstring_parameters():", 
                []
            ], 
            [
                "def test_tabs():", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\externals\\test_externals_setup.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_common.py": [
        [
            [
                "def test_all_estimator_no_base_class():", 
                []
            ], 
            [
                "def test_all_estimators():", 
                []
            ], 
            [
                "def test_non_meta_estimators():", 
                []
            ], 
            [
                "def test_configure():", 
                []
            ], 
            [
                "def test_class_weight_balanced_linear_classifiers():", 
                []
            ], 
            [
                "def test_import_all_consistency():", 
                []
            ], 
            [
                "def test_root_import_all_completeness():", 
                []
            ], 
            [
                "def test_all_tests_are_importable():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\tests\\test_20news.py": [
        [
            [
                "def test_20news():", 
                []
            ], 
            [
                "def test_20news_length_consistency():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_20news_vectorized():", 
                []
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\decomposition\\plot_pca_vs_lda.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_learning_curve.py": [
        [
            [
                "def __init__(self, n_max_train_sizes):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X_subset, y_subset=None):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def score(self, X=None, Y=None):", 
                []
            ], 
            [
                "def _is_training_data(self, X):", 
                []
            ], 
            [
                "def __init__(self, n_max_train_sizes):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _is_training_data(self, X):", 
                []
            ], 
            [
                "def partial_fit(self, X, y=None, **params):", 
                []
            ], 
            [
                "def __init__(self, param=0.5):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X_subset, y_subset):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def score(self, X=None, y=None):", 
                []
            ], 
            [
                "def _is_training_data(self, X):", 
                []
            ], 
            [
                "def fit(self, X_subset, y_subset):", 
                []
            ], 
            [
                "def score(self, X=None, y=None):", 
                []
            ], 
            [
                "def fit(self, X_subset, y_subset):", 
                []
            ], 
            [
                "def test_learning_curve():", 
                []
            ], 
            [
                "def test_learning_curve_unsupervised():", 
                []
            ], 
            [
                "def test_learning_curve_verbose():", 
                []
            ], 
            [
                "def test_learning_curve_error_score():", 
                []
            ], 
            [
                "def test_learning_curve_error_score_default_raise():", 
                []
            ], 
            [
                "def test_learning_curve_incremental_learning_not_possible():", 
                []
            ], 
            [
                "def test_learning_curve_incremental_learning():", 
                []
            ], 
            [
                "def test_learning_curve_incremental_learning_unsupervised():", 
                []
            ], 
            [
                "def test_learning_curve_batch_and_incremental_learning_are_equal():", 
                []
            ], 
            [
                "def test_learning_curve_n_sample_range_out_of_bounds():", 
                []
            ], 
            [
                "def test_learning_curve_remove_duplicate_sample_sizes():", 
                []
            ], 
            [
                "def test_learning_curve_with_boolean_indices():", 
                []
            ], 
            [
                "def test_validation_curve():", 
                []
            ], 
            [
                "def test_validation_curve_clone_estimator():", 
                []
            ]
        ], 
        30
    ], 
    "../scikit-learn-master\\sklearn\\utils\\extmath.py": [
        [
            [
                "def norm(x):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def squared_norm(x):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def row_norms(X, squared=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fast_logdet(A):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _impose_f_order(X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fast_dot(a, b, out=None):", 
                []
            ], 
            [
                "def density(w, **kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def safe_sparse_dot(a, b, dense_output=False):", 
                [
                    [
                        [
                            [
                                "a", 
                                "array or sparse matrix"
                            ], 
                            [
                                "b", 
                                "array or sparse matrix"
                            ], 
                            [
                                "dense_output", 
                                "boolean, default False"
                            ]
                        ], 
                        [
                            [
                                "dot_product", 
                                "array or sparse matrix"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def randomized_range_finder(A, size, n_iter,\n                            power_iteration_normalizer='auto',\n                            random_state=None):", 
                [
                    [
                        [
                            [
                                "A", 
                                "2D array"
                            ], 
                            [
                                "size", 
                                "integer"
                            ], 
                            [
                                "n_iter", 
                                "integer"
                            ], 
                            [
                                "power_iteration_normalizer", 
                                "'auto' (default), 'QR', 'LU', 'none'"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "Q", 
                                "2D array"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def randomized_svd(M, n_components, n_oversamples=10, n_iter='auto',\n                   power_iteration_normalizer='auto', transpose='auto',\n                   flip_sign=True, random_state=0):", 
                [
                    [
                        [
                            [
                                "M", 
                                "ndarray or sparse matrix"
                            ], 
                            [
                                "n_components", 
                                "int"
                            ], 
                            [
                                "n_oversamples", 
                                "int (default is 10)"
                            ], 
                            [
                                "n_iter", 
                                "int or 'auto' (default is 'auto')"
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "power_iteration_normalizer", 
                                "'auto' (default), 'QR', 'LU', 'none'"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "transpose", 
                                "True, False or 'auto' (default)"
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "flip_sign", 
                                "boolean, (True by default)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def logsumexp(arr, axis=0):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def weighted_mode(a, w, axis=0):", 
                [
                    [
                        [
                            [
                                "a", 
                                "array_like"
                            ], 
                            [
                                "w", 
                                "array_like"
                            ], 
                            [
                                "axis", 
                                "int, optional"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def pinvh(a, cond=None, rcond=None, lower=True):", 
                []
            ], 
            [
                "def cartesian(arrays, out=None):", 
                [
                    [
                        [
                            [
                                "arrays", 
                                "list of array-like"
                            ], 
                            [
                                "out", 
                                "ndarray"
                            ]
                        ], 
                        [
                            [
                                "out", 
                                "ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def svd_flip(u, v, u_based_decision=True):", 
                [
                    [
                        [
                            [
                                "v", 
                                "ndarray"
                            ], 
                            [
                                "u_based_decision", 
                                "boolean, (default=True)"
                            ]
                        ], 
                        [
                            [
                                "v_adjusted", 
                                "arrays with the same dimensions as the input."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def log_logistic(X, out=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (M, N) or (M, )"
                            ], 
                            [
                                "out", 
                                "array-like, shape"
                            ]
                        ], 
                        [
                            [
                                "out", 
                                "array, shape (M, N) or (M, )"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def softmax(X, copy=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (M, N)"
                            ], 
                            [
                                "copy", 
                                "bool, optional"
                            ]
                        ], 
                        [
                            [
                                "out", 
                                "array, shape (M, N)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def safe_min(X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def make_nonnegative(X, min_value=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _incremental_mean_and_var(X, last_mean=.0, last_variance=None,\n                              last_sample_count=0):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "last_mean", 
                                "array-like, shape"
                            ], 
                            [
                                "last_variance", 
                                "array-like, shape"
                            ], 
                            [
                                "last_sample_count", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "updated_mean", 
                                "array, shape (n_features,)"
                            ], 
                            [
                                "updated_variance", 
                                "array, shape (n_features,)"
                            ], 
                            [
                                "updated_sample_count", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _deterministic_vector_sign_flip(u):", 
                [
                    [
                        [
                            [
                                "u", 
                                "ndarray"
                            ]
                        ], 
                        [
                            [
                                "u_flipped", 
                                "ndarray with same shape as u"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def stable_cumsum(arr, axis=None, rtol=1e-05, atol=1e-08):", 
                [
                    [
                        [
                            [
                                "arr", 
                                "array-like"
                            ], 
                            [
                                "axis", 
                                "int, optional"
                            ], 
                            [
                                "rtol", 
                                "float"
                            ], 
                            [
                                "atol", 
                                "float"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        22
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\graph.py": [
        [
            [
                "def _check_params(X, metric, p, metric_params):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _query_include_self(X, include_self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def kneighbors_graph(X, n_neighbors, mode='connectivity', metric='minkowski',\n                     p=2, metric_params=None, include_self=False, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or BallTree, shape = [n_samples, n_features]"
                            ], 
                            [
                                "n_neighbors", 
                                "int"
                            ], 
                            [
                                "mode", 
                                "{'connectivity', 'distance'}, optional"
                            ], 
                            [
                                "matrix", 
                                "'connectivity' will return the connectivity"
                            ], 
                            [
                                "metric", 
                                "string, default 'minkowski'"
                            ], 
                            [
                                "p", 
                                "int, default 2"
                            ], 
                            [
                                "metric_params", 
                                "dict, optional"
                            ], 
                            [
                                "include_self", 
                                "bool, default=False."
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default = 1)"
                            ]
                        ], 
                        [
                            [
                                "A", 
                                "sparse matrix in CSR format, shape = [n_samples, n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def radius_neighbors_graph(X, radius, mode='connectivity', metric='minkowski',\n                           p=2, metric_params=None, include_self=False, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or BallTree, shape = [n_samples, n_features]"
                            ], 
                            [
                                "radius", 
                                "float"
                            ], 
                            [
                                "mode", 
                                "{'connectivity', 'distance'}, optional"
                            ], 
                            [
                                "matrix", 
                                "'connectivity' will return the connectivity"
                            ], 
                            [
                                "metric", 
                                "string, default 'minkowski'"
                            ], 
                            [
                                "p", 
                                "int, default 2"
                            ], 
                            [
                                "metric_params", 
                                "dict, optional"
                            ], 
                            [
                                "include_self", 
                                "bool, default=False"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default = 1)"
                            ]
                        ], 
                        [
                            [
                                "A", 
                                "sparse matrix in CSR format, shape = [n_samples, n_samples]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_mean_shift.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\feature_extraction\\image.py": [
        [
            [
                "def _make_edges_3d(n_x, n_y, n_z=1):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _compute_gradient_3d(edges, img):", 
                []
            ], 
            [
                "def _mask_edges_weights(mask, edges, weights=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _to_graph(n_x, n_y, n_z, mask=None, img=None,\n              return_as=sparse.coo_matrix, dtype=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def img_to_graph(img, mask=None, return_as=sparse.coo_matrix, dtype=None):", 
                [
                    [
                        [
                            [
                                "img", 
                                "ndarray, 2D or 3D"
                            ], 
                            [
                                "mask", 
                                "ndarray of booleans, optional"
                            ], 
                            [
                                "return_as", 
                                "np.ndarray or a sparse matrix class, optional"
                            ], 
                            [
                                "dtype", 
                                "None or dtype, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def grid_to_graph(n_x, n_y, n_z=1, mask=None, return_as=sparse.coo_matrix,\n                  dtype=np.int):", 
                [
                    [
                        [
                            [
                                "n_x", 
                                "int"
                            ], 
                            [
                                "n_y", 
                                "int"
                            ], 
                            [
                                "n_z", 
                                "int, optional, default 1"
                            ], 
                            [
                                "mask", 
                                "ndarray of booleans, optional"
                            ], 
                            [
                                "return_as", 
                                "np.ndarray or a sparse matrix class, optional"
                            ], 
                            [
                                "dtype", 
                                "dtype, optional, default int"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _compute_n_patches(i_h, i_w, p_h, p_w, max_patches=None):", 
                [
                    [
                        [
                            [
                                "i_h", 
                                "int"
                            ], 
                            [
                                "i_w", 
                                "int"
                            ], 
                            [
                                "p_h", 
                                "int"
                            ], 
                            [
                                "p_w", 
                                "int"
                            ], 
                            [
                                "max_patches", 
                                "integer or float, optional default is None"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def extract_patches(arr, patch_shape=8, extraction_step=1):", 
                [
                    [
                        [
                            [
                                "arr", 
                                "ndarray"
                            ], 
                            [
                                "patch_shape", 
                                "integer or tuple of length arr.ndim"
                            ], 
                            [
                                "extraction_step", 
                                "integer or tuple of length arr.ndim"
                            ]
                        ], 
                        [
                            [
                                "patches", 
                                "strided ndarray"
                            ], 
                            [
                                "patches", 
                                ""
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def extract_patches_2d(image, patch_size, max_patches=None, random_state=None):", 
                [
                    [
                        [
                            [
                                "image", 
                                "array, shape = (image_height, image_width) or"
                            ], 
                            [
                                "channel", 
                                "a RGB image would have `n_channels=3`."
                            ], 
                            [
                                "patch_size", 
                                "tuple of ints (patch_height, patch_width)"
                            ], 
                            [
                                "max_patches", 
                                "integer or float, optional default is None"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "patches", 
                                "array, shape = (n_patches, patch_height, patch_width) or"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def reconstruct_from_patches_2d(patches, image_size):", 
                [
                    [
                        [
                            [
                                "patches", 
                                "array, shape = (n_patches, patch_height, patch_width) or"
                            ], 
                            [
                                "dimension", 
                                "RGB patches would"
                            ], 
                            [
                                "image_size", 
                                "tuple of ints (image_height, image_width) or"
                            ]
                        ], 
                        [
                            [
                                "image", 
                                "array, shape = image_size"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, patch_size=None, max_patches=None, random_state=None):", 
                [
                    [
                        [
                            [
                                "patch_size", 
                                "tuple of ints (patch_height, patch_width)"
                            ], 
                            [
                                "max_patches", 
                                "integer or float, optional default is None"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape = (n_samples, image_height, image_width) or"
                            ], 
                            [
                                "channel", 
                                "a RGB image would have"
                            ]
                        ], 
                        [
                            [
                                "patches", 
                                "array, shape = (n_patches, patch_height, patch_width) or"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        13
    ], 
    "../scikit-learn-master\\sklearn\\utils\\metaestimators.py": [
        [
            [
                "def __init__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _get_params(self, attr, deep=True):", 
                []
            ], 
            [
                "def _set_params(self, attr, **params):", 
                []
            ], 
            [
                "def _replace_estimator(self, attr, name, new_val):", 
                []
            ], 
            [
                "def _validate_names(self, names):", 
                []
            ], 
            [
                "def __init__(self, fn, delegate_names, attribute_name):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __get__(self, obj, type=None):", 
                []
            ], 
            [
                "def if_delegate_has_method(delegate):", 
                [
                    [
                        [
                            [
                                "delegate", 
                                "string, list of strings or tuple of strings"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _safe_split(estimator, X, y, indices, train_indices=None):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "object"
                            ], 
                            [
                                "X", 
                                "array-like, sparse matrix or iterable"
                            ], 
                            [
                                "y", 
                                "array-like, sparse matrix or iterable"
                            ], 
                            [
                                "indices", 
                                "array of int"
                            ], 
                            [
                                "train_indices", 
                                "array of int or None, default=None"
                            ]
                        ], 
                        [
                            [
                                "X_sliced", 
                                "array-like, sparse matrix or list"
                            ], 
                            [
                                "y_sliced", 
                                "array-like, sparse matrix or list"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        9
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_sgd_comparison.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_kernel_ridge.py": [
        [
            [
                "def test_kernel_ridge():", 
                []
            ], 
            [
                "def test_kernel_ridge_csr():", 
                []
            ], 
            [
                "def test_kernel_ridge_csc():", 
                []
            ], 
            [
                "def test_kernel_ridge_singular_kernel():", 
                []
            ], 
            [
                "def test_kernel_ridge_precomputed():", 
                []
            ], 
            [
                "def test_kernel_ridge_precomputed_kernel_unchanged():", 
                []
            ], 
            [
                "def test_kernel_ridge_sample_weights():", 
                []
            ], 
            [
                "def test_kernel_ridge_multi_output():", 
                []
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\sklearn\\cross_decomposition\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\benchmarks\\bench_sgd_regression.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\disk.py": [
        [
            [
                "def disk_used(path):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def memstr_to_bytes(text):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def mkdirp(d):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def rm_subdirs(path, onerror=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\sklearn\\preprocessing\\tests\\test_label.py": [
        [
            [
                "def toarray(a):", 
                []
            ], 
            [
                "def test_label_binarizer():", 
                []
            ], 
            [
                "def test_label_binarizer_unseen_labels():", 
                []
            ], 
            [
                "def test_label_binarizer_set_label_encoding():", 
                []
            ], 
            [
                "def test_label_binarizer_errors():", 
                []
            ], 
            [
                "def test_label_encoder():", 
                []
            ], 
            [
                "def test_label_encoder_fit_transform():", 
                []
            ], 
            [
                "def test_label_encoder_errors():", 
                []
            ], 
            [
                "def test_sparse_output_multilabel_binarizer():", 
                []
            ], 
            [
                "def test_multilabel_binarizer():", 
                []
            ], 
            [
                "def test_multilabel_binarizer_empty_sample():", 
                []
            ], 
            [
                "def test_multilabel_binarizer_unknown_class():", 
                []
            ], 
            [
                "def test_multilabel_binarizer_given_classes():", 
                []
            ], 
            [
                "def test_multilabel_binarizer_same_length_sequence():", 
                []
            ], 
            [
                "def test_multilabel_binarizer_non_integer_labels():", 
                []
            ], 
            [
                "def test_multilabel_binarizer_non_unique():", 
                []
            ], 
            [
                "def test_multilabel_binarizer_inverse_validation():", 
                []
            ], 
            [
                "def test_label_binarize_with_class_order():", 
                []
            ], 
            [
                "def check_binarized_results(y, classes, pos_label, neg_label, expected):", 
                []
            ], 
            [
                "def test_label_binarize_binary():", 
                []
            ], 
            [
                "def test_label_binarize_multiclass():", 
                []
            ], 
            [
                "def test_label_binarize_multilabel():", 
                []
            ], 
            [
                "def test_invalid_input_label_binarize():", 
                []
            ], 
            [
                "def test_inverse_binarize_multiclass():", 
                []
            ]
        ], 
        24
    ], 
    "../scikit-learn-master\\sklearn\\utils\\testing.py": [
        [
            [
                "def assert_warns(warning_class, func, *args, **kw):", 
                [
                    [
                        [
                            [
                                "warning_class", 
                                "the warning class"
                            ], 
                            [
                                "func", 
                                "callable"
                            ], 
                            [
                                "*args", 
                                "the positional arguments to `func`."
                            ]
                        ], 
                        [
                            [
                                "result", 
                                "the return value of `func`"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def assert_warns_message(warning_class, message, func, *args, **kw):", 
                [
                    [
                        [
                            [
                                "warning_class", 
                                "the warning class"
                            ], 
                            [
                                "message", 
                                "str | callable"
                            ], 
                            [
                                "func", 
                                "callable"
                            ], 
                            [
                                "*args", 
                                "the positional arguments to `func`."
                            ]
                        ], 
                        [
                            [
                                "result", 
                                "the return value of `func`"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def assert_no_warnings(func, *args, **kw):", 
                []
            ], 
            [
                "def ignore_warnings(obj=None, category=Warning):", 
                [
                    [
                        [
                            [
                                "category", 
                                "warning class, defaults to Warning."
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, category):", 
                [
                    [
                        [
                            [
                                "category", 
                                "tuple of warning class, default to Warning"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __call__(self, fn):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def wrapper(*args, **kwargs):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __enter__(self):", 
                []
            ], 
            [
                "def __exit__(self, *exc_info):", 
                []
            ], 
            [
                "def _assert_allclose(actual, desired, rtol=1e-7, atol=0,\n                     err_msg='', verbose=True):", 
                []
            ], 
            [
                "def assert_raise_message(exceptions, message, function, *args, **kwargs):", 
                [
                    [
                        [
                            [
                                "exceptions", 
                                "exception or tuple of exception"
                            ], 
                            [
                                "function", 
                                "callable"
                            ], 
                            [
                                "*args", 
                                "the positional arguments to `function`."
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def assert_allclose_dense_sparse(x, y, rtol=1e-07, atol=1e-9, err_msg=''):", 
                [
                    [
                        [
                            [
                                "x", 
                                "array-like or sparse matrix"
                            ], 
                            [
                                "y", 
                                "array-like or sparse matrix"
                            ], 
                            [
                                "rtol", 
                                "float, optional"
                            ], 
                            [
                                "atol", 
                                "float, optional"
                            ], 
                            [
                                "err_msg", 
                                "string, default=''"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fake_mldata(columns_dict, dataname, matfile, ordering=None):", 
                [
                    [
                        [
                            [
                                "columns_dict", 
                                "dict, keys=str, values=ndarray"
                            ], 
                            [
                                "dataname", 
                                "string"
                            ], 
                            [
                                "matfile", 
                                "string or file object"
                            ], 
                            [
                                "ordering", 
                                "list, default None"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, mock_datasets):", 
                []
            ], 
            [
                "def __call__(self, urlname):", 
                []
            ], 
            [
                "def install_mldata_mock(mock_datasets):", 
                []
            ], 
            [
                "def uninstall_mldata_mock():", 
                []
            ], 
            [
                "def all_estimators(include_meta_estimators=False,\n                   include_other=False, type_filter=None,\n                   include_dont_test=False):", 
                [
                    [
                        [
                            [
                                "include_meta_estimators", 
                                "boolean, default=False"
                            ], 
                            [
                                "include_other", 
                                "boolean, default=False"
                            ], 
                            [
                                "include_dont_test", 
                                "boolean, default=False"
                            ], 
                            [
                                "type_filter", 
                                "string, list of string,  or None, default=None"
                            ]
                        ], 
                        [
                            [
                                "estimators", 
                                "list of tuples"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def is_abstract(c):", 
                []
            ], 
            [
                "def set_random_state(estimator, random_state=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def if_matplotlib(func):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def run_test(*args, **kwargs):", 
                []
            ], 
            [
                "def skip_if_32bit(func):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def run_test(*args, **kwargs):", 
                []
            ], 
            [
                "def if_safe_multiprocessing_with_blas(func):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def run_test(*args, **kwargs):", 
                []
            ], 
            [
                "def clean_warning_registry():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def check_skip_network():", 
                []
            ], 
            [
                "def check_skip_travis():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _delete_folder(folder_path, warn=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, data, mmap_mode='r'):", 
                []
            ], 
            [
                "def __enter__(self):", 
                []
            ], 
            [
                "def __exit__(self, exc_type, exc_val, exc_tb):", 
                []
            ], 
            [
                "def __init__(self, check, arg_text):", 
                [
                    [
                        [
                            [
                                "check", 
                                "function"
                            ], 
                            [
                                "arg_text", 
                                "str"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __call__(self, *args, **kwargs):", 
                []
            ], 
            [
                "def _get_args(function, varargs=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _get_func_name(func, class_name=None):", 
                [
                    [
                        [
                            [
                                "func", 
                                "callable"
                            ], 
                            [
                                "class_name", 
                                "string, optional (default"
                            ]
                        ], 
                        [
                            [
                                "name", 
                                "str"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def check_docstring_parameters(func, doc=None, ignore=None, class_name=None):", 
                [
                    [
                        [
                            [
                                "func", 
                                "callable"
                            ], 
                            [
                                "doc", 
                                "str, optional (default"
                            ], 
                            [
                                "ignore", 
                                "None | list"
                            ], 
                            [
                                "class_name", 
                                "string, optional (default"
                            ]
                        ], 
                        [
                            [
                                "incorrect", 
                                "list"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        39
    ], 
    "../scikit-learn-master\\sklearn\\feature_extraction\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\datasets\\plot_digits_last_image.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_partial_dependence.py": [
        [
            [
                "def main():", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\feature_selection\\plot_permutation_test_for_classification.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\tests\\test_forest.py": [
        [
            [
                "def check_classification_toy(name):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_classification_toy():", 
                []
            ], 
            [
                "def check_iris_criterion(name, criterion):", 
                []
            ], 
            [
                "def test_iris():", 
                []
            ], 
            [
                "def check_boston_criterion(name, criterion):", 
                []
            ], 
            [
                "def test_boston():", 
                []
            ], 
            [
                "def check_regressor_attributes(name):", 
                []
            ], 
            [
                "def test_regressor_attributes():", 
                []
            ], 
            [
                "def check_probability(name):", 
                []
            ], 
            [
                "def test_probability():", 
                []
            ], 
            [
                "def check_importances(name, criterion, dtype, tolerance):", 
                []
            ], 
            [
                "def test_importances():", 
                []
            ], 
            [
                "def test_importances_asymptotic():", 
                []
            ], 
            [
                "def binomial(k, n):", 
                []
            ], 
            [
                "def entropy(samples):", 
                []
            ], 
            [
                "def mdi_importance(X_m, X, y):", 
                []
            ], 
            [
                "def check_unfitted_feature_importances(name):", 
                []
            ], 
            [
                "def test_unfitted_feature_importances():", 
                []
            ], 
            [
                "def check_oob_score(name, X, y, n_estimators=20):", 
                []
            ], 
            [
                "def test_oob_score():", 
                []
            ], 
            [
                "def check_oob_score_raise_error(name):", 
                []
            ], 
            [
                "def test_oob_score_raise_error():", 
                []
            ], 
            [
                "def check_gridsearch(name):", 
                []
            ], 
            [
                "def test_gridsearch():", 
                []
            ], 
            [
                "def check_parallel(name, X, y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_parallel():", 
                []
            ], 
            [
                "def check_pickle(name, X, y):", 
                []
            ], 
            [
                "def test_pickle():", 
                []
            ], 
            [
                "def check_multioutput(name):", 
                []
            ], 
            [
                "def test_multioutput():", 
                []
            ], 
            [
                "def check_classes_shape(name):", 
                []
            ], 
            [
                "def test_classes_shape():", 
                []
            ], 
            [
                "def test_random_trees_dense_type():", 
                []
            ], 
            [
                "def test_random_trees_dense_equal():", 
                []
            ], 
            [
                "def test_random_hasher():", 
                []
            ], 
            [
                "def test_random_hasher_sparse_data():", 
                []
            ], 
            [
                "def test_parallel_train():", 
                []
            ], 
            [
                "def test_distribution():", 
                []
            ], 
            [
                "def check_max_leaf_nodes_max_depth(name):", 
                []
            ], 
            [
                "def test_max_leaf_nodes_max_depth():", 
                []
            ], 
            [
                "def check_min_samples_split(name):", 
                []
            ], 
            [
                "def test_min_samples_split():", 
                []
            ], 
            [
                "def check_min_samples_leaf(name):", 
                []
            ], 
            [
                "def test_min_samples_leaf():", 
                []
            ], 
            [
                "def check_min_weight_fraction_leaf(name):", 
                []
            ], 
            [
                "def test_min_weight_fraction_leaf():", 
                []
            ], 
            [
                "def check_sparse_input(name, X, X_sparse, y):", 
                []
            ], 
            [
                "def test_sparse_input():", 
                []
            ], 
            [
                "def check_memory_layout(name, dtype):", 
                []
            ], 
            [
                "def test_memory_layout():", 
                []
            ], 
            [
                "def check_1d_input(name, X, X_2d, y):", 
                []
            ], 
            [
                "def test_1d_input():", 
                []
            ], 
            [
                "def check_class_weights(name):", 
                []
            ], 
            [
                "def test_class_weights():", 
                []
            ], 
            [
                "def check_class_weight_balanced_and_bootstrap_multi_output(name):", 
                []
            ], 
            [
                "def test_class_weight_balanced_and_bootstrap_multi_output():", 
                []
            ], 
            [
                "def check_class_weight_errors(name):", 
                []
            ], 
            [
                "def test_class_weight_errors():", 
                []
            ], 
            [
                "def check_warm_start(name, random_state=42):", 
                []
            ], 
            [
                "def test_warm_start():", 
                []
            ], 
            [
                "def check_warm_start_clear(name):", 
                []
            ], 
            [
                "def test_warm_start_clear():", 
                []
            ], 
            [
                "def check_warm_start_smaller_n_estimators(name):", 
                []
            ], 
            [
                "def test_warm_start_smaller_n_estimators():", 
                []
            ], 
            [
                "def check_warm_start_equal_n_estimators(name):", 
                []
            ], 
            [
                "def test_warm_start_equal_n_estimators():", 
                []
            ], 
            [
                "def check_warm_start_oob(name):", 
                []
            ], 
            [
                "def test_warm_start_oob():", 
                []
            ], 
            [
                "def test_dtype_convert(n_classes=15):", 
                []
            ], 
            [
                "def check_decision_path(name):", 
                []
            ], 
            [
                "def test_decision_path():", 
                []
            ], 
            [
                "def test_min_impurity_split():", 
                []
            ], 
            [
                "def test_min_impurity_decrease():", 
                []
            ]
        ], 
        73
    ], 
    "../scikit-learn-master\\sklearn\\model_selection\\tests\\test_search.py": [
        [
            [
                "def __init__(self, foo_param=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, Y):", 
                []
            ], 
            [
                "def predict(self, T):", 
                []
            ], 
            [
                "def transform(self, X):", 
                []
            ], 
            [
                "def inverse_transform(self, X):", 
                []
            ], 
            [
                "def score(self, X=None, Y=None):", 
                []
            ], 
            [
                "def get_params(self, deep=False):", 
                []
            ], 
            [
                "def set_params(self, **params):", 
                []
            ], 
            [
                "def score(self):", 
                []
            ], 
            [
                "def assert_grid_iter_equals_getitem(grid):", 
                []
            ], 
            [
                "def test_parameter_grid():", 
                []
            ], 
            [
                "def test_grid_search():", 
                []
            ], 
            [
                "def check_hyperparameter_searcher_with_fit_params(klass, **klass_kwargs):", 
                []
            ], 
            [
                "def test_grid_search_with_fit_params():", 
                []
            ], 
            [
                "def test_random_search_with_fit_params():", 
                []
            ], 
            [
                "def test_grid_search_fit_params_deprecation():", 
                []
            ], 
            [
                "def test_grid_search_fit_params_two_places():", 
                []
            ], 
            [
                "def test_grid_search_no_score():", 
                []
            ], 
            [
                "def test_grid_search_score_method():", 
                []
            ], 
            [
                "def test_grid_search_groups():", 
                []
            ], 
            [
                "def test_classes__property():", 
                []
            ], 
            [
                "def test_trivial_cv_results_attr():", 
                []
            ], 
            [
                "def test_no_refit():", 
                []
            ], 
            [
                "def test_grid_search_error():", 
                []
            ], 
            [
                "def test_grid_search_one_grid_point():", 
                []
            ], 
            [
                "def test_grid_search_when_param_grid_includes_range():", 
                []
            ], 
            [
                "def test_grid_search_bad_param_grid():", 
                []
            ], 
            [
                "def test_grid_search_sparse():", 
                []
            ], 
            [
                "def test_grid_search_sparse_scoring():", 
                []
            ], 
            [
                "def f1_loss(y_true_, y_pred_):", 
                []
            ], 
            [
                "def test_grid_search_precomputed_kernel():", 
                []
            ], 
            [
                "def test_grid_search_precomputed_kernel_error_nonsquare():", 
                []
            ], 
            [
                "def __init__(self, parameter=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def test_refit():", 
                []
            ], 
            [
                "def test_gridsearch_nd():", 
                []
            ], 
            [
                "def test_X_as_list():", 
                []
            ], 
            [
                "def test_y_as_list():", 
                []
            ], 
            [
                "def test_pandas_input():", 
                []
            ], 
            [
                "def check_df(x):", 
                []
            ], 
            [
                "def check_series(x):", 
                []
            ], 
            [
                "def test_unsupervised_grid_search():", 
                []
            ], 
            [
                "def test_gridsearch_no_predict():", 
                []
            ], 
            [
                "def custom_scoring(estimator, X):", 
                []
            ], 
            [
                "def test_param_sampler():", 
                []
            ], 
            [
                "def check_cv_results_array_types(search, param_keys, score_keys):", 
                []
            ], 
            [
                "def check_cv_results_keys(cv_results, param_keys, score_keys, n_cand):", 
                []
            ], 
            [
                "def check_cv_results_grid_scores_consistency(search):", 
                []
            ], 
            [
                "def test_grid_search_cv_results():", 
                []
            ], 
            [
                "def test_random_search_cv_results():", 
                []
            ], 
            [
                "def test_search_iid_param():", 
                []
            ], 
            [
                "def test_grid_search_cv_results_multimetric():", 
                []
            ], 
            [
                "def test_random_search_cv_results_multimetric():", 
                []
            ], 
            [
                "def compare_cv_results_multimetric_with_single(\n        search_multi, search_acc, search_rec, iid):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def compare_refit_methods_when_refit_with_acc(search_multi, search_acc, refit):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_search_cv_results_rank_tie_breaking():", 
                []
            ], 
            [
                "def test_search_cv_results_none_param():", 
                []
            ], 
            [
                "def test_search_cv_timing():", 
                []
            ], 
            [
                "def test_grid_search_correct_score_results():", 
                []
            ], 
            [
                "def test_fit_grid_point():", 
                []
            ], 
            [
                "def test_pickle():", 
                []
            ], 
            [
                "def test_grid_search_with_multioutput_data():", 
                []
            ], 
            [
                "def test_predict_proba_disabled():", 
                []
            ], 
            [
                "def test_grid_search_allows_nans():", 
                []
            ], 
            [
                "def __init__(self, parameter=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def test_grid_search_failing_classifier():", 
                []
            ], 
            [
                "def get_cand_scores(i):", 
                []
            ], 
            [
                "def test_grid_search_failing_classifier_raise():", 
                []
            ], 
            [
                "def test_parameters_sampler_replacement():", 
                []
            ], 
            [
                "def test_stochastic_gradient_loss_param():", 
                []
            ], 
            [
                "def test_search_train_scores_set_to_false():", 
                []
            ], 
            [
                "def test_grid_search_cv_splits_consistency():", 
                []
            ], 
            [
                "def _pop_time_keys(cv_results):", 
                []
            ], 
            [
                "def test_transform_inverse_transform_round_trip():", 
                []
            ]
        ], 
        77
    ], 
    "../scikit-learn-master\\examples\\model_selection\\plot_precision_recall.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\numpy_pickle_compat.py": [
        [
            [
                "def hex_str(an_int):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def asbytes(s):", 
                []
            ], 
            [
                "def read_zfile(file_handle):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def write_zfile(file_handle, data, compress=1):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, filename, subclass, allow_mmap=True):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def read(self, unpickler):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, filename, init_args, state):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def read(self, unpickler):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, filename, file_handle, mmap_mode=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _open_pickle(self, file_handle):", 
                []
            ], 
            [
                "def load_build(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def load_compatibility(filename):", 
                [
                    [
                        [
                            [
                                "filename", 
                                "string"
                            ]
                        ], 
                        [
                            [
                                "result", 
                                "any Python object"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        12
    ], 
    "../scikit-learn-master\\sklearn\\feature_selection\\tests\\test_mutual_info.py": [
        [
            [
                "def test_compute_mi_dd():", 
                []
            ], 
            [
                "def test_compute_mi_cc():", 
                []
            ], 
            [
                "def test_compute_mi_cd():", 
                []
            ], 
            [
                "def test_compute_mi_cd_unique_label():", 
                []
            ], 
            [
                "def test_mutual_info_classif_discrete():", 
                []
            ], 
            [
                "def test_mutual_info_regression():", 
                []
            ], 
            [
                "def test_mutual_info_classif_mixed():", 
                []
            ], 
            [
                "def test_mutual_info_options():", 
                []
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_sparse_logistic_regression_mnist.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\tests\\test_lof.py": [
        [
            [
                "def test_lof():", 
                []
            ], 
            [
                "def test_lof_performance():", 
                []
            ], 
            [
                "def test_lof_values():", 
                []
            ], 
            [
                "def test_lof_precomputed(random_state=42):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_n_neighbors_attribute():", 
                []
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\examples\\text\\document_classification_20newsgroups.py": [
        [
            [
                "def is_interactive():", 
                []
            ], 
            [
                "def size_mb(docs):", 
                []
            ], 
            [
                "def trim(s):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def benchmark(clf):", 
                []
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_kmeans_digits.py": [
        [
            [
                "def bench_k_means(estimator, name, data):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_affinity_propagation.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\svm\\tests\\test_sparse.py": [
        [
            [
                "def check_svm_model_equal(dense_svm, sparse_svm, X_train, y_train, X_test):", 
                []
            ], 
            [
                "def test_svc():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_unsorted_indices():", 
                []
            ], 
            [
                "def test_svc_with_custom_kernel():", 
                []
            ], 
            [
                "def test_svc_iris():", 
                []
            ], 
            [
                "def test_sparse_decision_function():", 
                []
            ], 
            [
                "def test_error():", 
                []
            ], 
            [
                "def test_linearsvc():", 
                []
            ], 
            [
                "def test_linearsvc_iris():", 
                []
            ], 
            [
                "def test_weight():", 
                []
            ], 
            [
                "def test_sample_weights():", 
                []
            ], 
            [
                "def test_sparse_liblinear_intercept_handling():", 
                []
            ], 
            [
                "def test_sparse_oneclasssvm():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_sparse_realdata():", 
                []
            ], 
            [
                "def test_sparse_svc_clone_with_callable_kernel():", 
                []
            ], 
            [
                "def test_timeout():", 
                []
            ], 
            [
                "def test_consistent_proba():", 
                []
            ]
        ], 
        17
    ], 
    "../scikit-learn-master\\sklearn\\cross_decomposition\\tests\\test_pls.py": [
        [
            [
                "def test_pls():", 
                []
            ], 
            [
                "def check_ortho(M, err_msg):", 
                []
            ], 
            [
                "def test_PLSSVD():", 
                []
            ], 
            [
                "def test_univariate_pls_regression():", 
                []
            ], 
            [
                "def test_predict_transform_copy():", 
                []
            ], 
            [
                "def test_scale_and_stability():", 
                []
            ], 
            [
                "def test_pls_errors():", 
                []
            ], 
            [
                "def test_pls_scaling():", 
                []
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_forest_importances_faces.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\classification\\plot_lda.py": [
        [
            [
                "def generate_data(n_samples, n_features):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\tests\\test_sag.py": [
        [
            [
                "def log_dloss(p, y):", 
                []
            ], 
            [
                "def log_loss(p, y):", 
                []
            ], 
            [
                "def squared_dloss(p, y):", 
                []
            ], 
            [
                "def squared_loss(p, y):", 
                []
            ], 
            [
                "def get_pobj(w, alpha, myX, myy, loss):", 
                []
            ], 
            [
                "def sag(X, y, step_size, alpha, n_iter=1, dloss=None, sparse=False,\n        sample_weight=None, fit_intercept=True, saga=False):", 
                []
            ], 
            [
                "def sag_sparse(X, y, step_size, alpha, n_iter=1,\n               dloss=None, sample_weight=None, sparse=False,\n               fit_intercept=True, saga=False):", 
                []
            ], 
            [
                "def get_step_size(X, alpha, fit_intercept, classification=True):", 
                []
            ], 
            [
                "def test_classifier_matching():", 
                []
            ], 
            [
                "def test_regressor_matching():", 
                []
            ], 
            [
                "def test_sag_pobj_matches_logistic_regression():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_sag_pobj_matches_ridge_regression():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_sag_regressor_computed_correctly():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_get_auto_step_size():", 
                []
            ], 
            [
                "def test_sag_regressor():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_sag_classifier_computed_correctly():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_sag_multiclass_computed_correctly():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_classifier_results():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_binary_classifier_class_weight():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_multiclass_classifier_class_weight():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_classifier_single_class():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_step_size_alpha_error():", 
                []
            ], 
            [
                "def test_multinomial_loss():", 
                []
            ], 
            [
                "def test_multinomial_loss_ground_truth():", 
                []
            ]
        ], 
        24
    ], 
    "../scikit-learn-master\\examples\\applications\\plot_prediction_latency.py": [
        [
            [
                "def _not_in_sphinx():", 
                []
            ], 
            [
                "def atomic_benchmark_estimator(estimator, X_test, verbose=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def bulk_benchmark_estimator(estimator, X_test, n_bulk_repeats, verbose):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def benchmark_estimator(estimator, X_test, n_bulk_repeats=30, verbose=False):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "already trained estimator supporting `predict()`"
                            ], 
                            [
                                "X_test", 
                                "test input"
                            ], 
                            [
                                "n_bulk_repeats", 
                                "how many times to repeat when evaluating bulk mode"
                            ]
                        ], 
                        [
                            [
                                "bulk_runtimes", 
                                "a pair of `np.array` which contain the"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def generate_dataset(n_train, n_test, n_features, noise=0.1, verbose=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def boxplot_runtimes(runtimes, pred_type, configuration):", 
                [
                    [
                        [
                            [
                                "runtimes", 
                                "list of `np.array` of latencies in micro-seconds"
                            ], 
                            [
                                "cls_names", 
                                "list of estimator class names that generated the runtimes"
                            ], 
                            [
                                "pred_type", 
                                "'bulk' or 'atomic'"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def benchmark(configuration):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def n_feature_influence(estimators, n_train, n_test, n_features, percentile):", 
                [
                    [
                        [
                            [
                                "estimators", 
                                "dict of (name (str), estimator) to benchmark"
                            ], 
                            [
                                "n_train", 
                                "nber of training instances (int)"
                            ], 
                            [
                                "n_test", 
                                "nber of testing instances (int)"
                            ], 
                            [
                                "n_features", 
                                "list of feature-space dimensionality to test (int)"
                            ], 
                            [
                                "percentile", 
                                "percentile at which to measure the speed (int [0-100])"
                            ], 
                            [
                                "Returns", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "percentiles", 
                                "dict(estimator_name,"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def plot_n_features_influence(percentiles, percentile):", 
                []
            ], 
            [
                "def benchmark_throughputs(configuration, duration_secs=0.1):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def plot_benchmark_throughput(throughputs, configuration):", 
                []
            ]
        ], 
        11
    ], 
    "../scikit-learn-master\\sklearn\\manifold\\tests\\test_t_sne.py": [
        [
            [
                "def test_gradient_descent_stops():", 
                []
            ], 
            [
                "def __init__(self):", 
                []
            ], 
            [
                "def __call__(self, _):", 
                []
            ], 
            [
                "def flat_function(_):", 
                []
            ], 
            [
                "def test_binary_search():", 
                []
            ], 
            [
                "def test_binary_search_neighbors():", 
                []
            ], 
            [
                "def test_binary_perplexity_stability():", 
                []
            ], 
            [
                "def test_gradient():", 
                []
            ], 
            [
                "def fun(params):", 
                []
            ], 
            [
                "def grad(params):", 
                []
            ], 
            [
                "def test_trustworthiness():", 
                []
            ], 
            [
                "def test_preserve_trustworthiness_approximately():", 
                []
            ], 
            [
                "def test_optimization_minimizes_kl_divergence():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_fit_csr_matrix():", 
                []
            ], 
            [
                "def test_preserve_trustworthiness_approximately_with_precomputed_distances():", 
                []
            ], 
            [
                "def test_early_exaggeration_too_small():", 
                []
            ], 
            [
                "def test_too_few_iterations():", 
                []
            ], 
            [
                "def test_non_square_precomputed_distances():", 
                []
            ], 
            [
                "def test_non_positive_precomputed_distances():", 
                []
            ], 
            [
                "def test_non_positive_computed_distances():", 
                []
            ], 
            [
                "def metric(x, y):", 
                []
            ], 
            [
                "def test_init_not_available():", 
                []
            ], 
            [
                "def test_init_ndarray():", 
                []
            ], 
            [
                "def test_init_ndarray_precomputed():", 
                []
            ], 
            [
                "def test_distance_not_available():", 
                []
            ], 
            [
                "def test_method_not_available():", 
                []
            ], 
            [
                "def test_angle_out_of_range_checks():", 
                []
            ], 
            [
                "def test_pca_initialization_not_compatible_with_precomputed_kernel():", 
                []
            ], 
            [
                "def test_n_components_range():", 
                []
            ], 
            [
                "def test_early_exaggeration_used():", 
                []
            ], 
            [
                "def test_n_iter_used():", 
                []
            ], 
            [
                "def test_answer_gradient_two_points():", 
                []
            ], 
            [
                "def test_answer_gradient_four_points():", 
                []
            ], 
            [
                "def test_skip_num_points_gradient():", 
                []
            ], 
            [
                "def _run_answer_test(pos_input, pos_output, neighbors, grad_output,\n                     verbose=False, perplexity=0.1, skip_num_points=0):", 
                []
            ], 
            [
                "def test_verbose():", 
                []
            ], 
            [
                "def test_chebyshev_metric():", 
                []
            ], 
            [
                "def test_reduction_to_one_component():", 
                []
            ], 
            [
                "def test_no_sparse_on_barnes_hut():", 
                []
            ], 
            [
                "def test_64bit():", 
                []
            ], 
            [
                "def test_barnes_hut_angle():", 
                []
            ], 
            [
                "def test_n_iter_without_progress():", 
                []
            ], 
            [
                "def test_min_grad_norm():", 
                []
            ], 
            [
                "def test_accessible_kl_divergence():", 
                []
            ], 
            [
                "def check_uniform_grid(method, seeds=[0, 1, 2], n_iter=1000):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_uniform_grid():", 
                []
            ], 
            [
                "def test_bh_match_exact():", 
                []
            ]
        ], 
        47
    ], 
    "../scikit-learn-master\\benchmarks\\bench_lof.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\setup.py": [
        [
            [
                "def configuration(parent_package=\"\", top_path=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\cross_decomposition\\cca_.py": [
        [
            [
                "def __init__(self, n_components=2, scale=True,\n                 max_iter=500, tol=1e-06, copy=True):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int, (default 2)."
                            ], 
                            [
                                "scale", 
                                "boolean, (default True)"
                            ], 
                            [
                                "max_iter", 
                                "an integer, (default 500)"
                            ], 
                            [
                                "tol", 
                                "non-negative real, default 1e-06."
                            ], 
                            [
                                "copy", 
                                "boolean"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_logistic_multinomial.py": [
        [
            [
                "def plot_hyperplane(c, color):", 
                []
            ], 
            [
                "def line(x0):", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\_multiprocessing_helpers.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\tests\\test_lfw.py": [
        [
            [
                "def setup_module():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def teardown_module():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_load_empty_lfw_people():", 
                []
            ], 
            [
                "def test_load_fake_lfw_people():", 
                []
            ], 
            [
                "def test_load_fake_lfw_people_too_restrictive():", 
                []
            ], 
            [
                "def test_load_empty_lfw_pairs():", 
                []
            ], 
            [
                "def test_load_fake_lfw_pairs():", 
                []
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\sklearn\\pipeline.py": [
        [
            [
                "def __init__(self, steps, memory=None):", 
                [
                    [
                        [
                            [
                                "steps", 
                                "list"
                            ], 
                            [
                                "memory", 
                                "None, str or object with the joblib.Memory interface, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def get_params(self, deep=True):", 
                [
                    [
                        [
                            [
                                "deep", 
                                "boolean, optional"
                            ]
                        ], 
                        [
                            [
                                "params", 
                                "mapping of string to any"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def set_params(self, **kwargs):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def _validate_steps(self):", 
                []
            ], 
            [
                "def _estimator_type(self):", 
                []
            ], 
            [
                "def named_steps(self):", 
                []
            ], 
            [
                "def _final_estimator(self):", 
                []
            ], 
            [
                "def _fit(self, X, y=None, **fit_params):", 
                []
            ], 
            [
                "def fit(self, X, y=None, **fit_params):", 
                [
                    [
                        [
                            [
                                "X", 
                                "iterable"
                            ], 
                            [
                                "y", 
                                "iterable, default=None"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "Pipeline"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None, **fit_params):", 
                [
                    [
                        [
                            [
                                "X", 
                                "iterable"
                            ], 
                            [
                                "y", 
                                "iterable, default=None"
                            ]
                        ], 
                        [
                            [
                                "Xt", 
                                "array-like, shape = [n_samples, n_transformed_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "iterable"
                            ]
                        ], 
                        [
                            [
                                "y_pred", 
                                "array-like"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_predict(self, X, y=None, **fit_params):", 
                [
                    [
                        [
                            [
                                "X", 
                                "iterable"
                            ], 
                            [
                                "y", 
                                "iterable, default=None"
                            ]
                        ], 
                        [
                            [
                                "y_pred", 
                                "array-like"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "iterable"
                            ]
                        ], 
                        [
                            [
                                "y_proba", 
                                "array-like, shape = [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "iterable"
                            ]
                        ], 
                        [
                            [
                                "y_score", 
                                "array-like, shape = [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_log_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "iterable"
                            ]
                        ], 
                        [
                            [
                                "y_score", 
                                "array-like, shape = [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self):", 
                [
                    [
                        [
                            [
                                "X", 
                                "iterable"
                            ]
                        ], 
                        [
                            [
                                "Xt", 
                                "array-like, shape = [n_samples, n_transformed_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _transform(self, X):", 
                []
            ], 
            [
                "def inverse_transform(self):", 
                [
                    [
                        [
                            [
                                "Xt", 
                                "array-like, shape = [n_samples, n_transformed_features]"
                            ]
                        ], 
                        [
                            [
                                "Xt", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _inverse_transform(self, X):", 
                []
            ], 
            [
                "def score(self, X, y=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "iterable"
                            ], 
                            [
                                "y", 
                                "iterable, default=None"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, default=None"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def classes_(self):", 
                []
            ], 
            [
                "def _pairwise(self):", 
                []
            ], 
            [
                "def _name_estimators(estimators):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def make_pipeline(*steps, **kwargs):", 
                [
                    [
                        [
                            [
                                "*steps", 
                                "list of estimators,"
                            ], 
                            [
                                "memory", 
                                "None, str or object with the joblib.Memory interface, optional"
                            ]
                        ], 
                        [
                            [
                                "p", 
                                "Pipeline"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _fit_one_transformer(transformer, X, y):", 
                []
            ], 
            [
                "def _transform_one(transformer, weight, X):", 
                []
            ], 
            [
                "def _fit_transform_one(transformer, weight, X, y,\n                       **fit_params):", 
                []
            ], 
            [
                "def __init__(self, transformer_list, n_jobs=1, transformer_weights=None):", 
                [
                    [
                        [
                            [
                                "the", 
                                "ref"
                            ], 
                            [
                                "transformer_list", 
                                "list of (string, transformer) tuples"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional"
                            ], 
                            [
                                "transformer_weights", 
                                "dict, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def get_params(self, deep=True):", 
                [
                    [
                        [
                            [
                                "deep", 
                                "boolean, optional"
                            ]
                        ], 
                        [
                            [
                                "params", 
                                "mapping of string to any"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def set_params(self, **kwargs):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def _validate_transformers(self):", 
                []
            ], 
            [
                "def _iter(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get_feature_names(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "feature_names", 
                                "list of strings"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "iterable or array-like, depending on transformers"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples, ...), optional"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "FeatureUnion"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None, **fit_params):", 
                [
                    [
                        [
                            [
                                "X", 
                                "iterable or array-like, depending on transformers"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples, ...), optional"
                            ]
                        ], 
                        [
                            [
                                "X_t", 
                                "array-like or sparse matrix, shape (n_samples, sum_n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "iterable or array-like, depending on transformers"
                            ]
                        ], 
                        [
                            [
                                "X_t", 
                                "array-like or sparse matrix, shape (n_samples, sum_n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _update_transformer_list(self, transformers):", 
                []
            ], 
            [
                "def make_union(*transformers, **kwargs):", 
                [
                    [
                        [
                            [
                                "*transformers", 
                                "list of estimators"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional"
                            ]
                        ], 
                        [
                            [
                                "f", 
                                "FeatureUnion"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        38
    ], 
    "../scikit-learn-master\\benchmarks\\bench_glm.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\feature_selection\\tests\\test_variance_threshold.py": [
        [
            [
                "def test_zero_variance():", 
                []
            ], 
            [
                "def test_variance_threshold():", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\externals\\six.py": [
        [
            [
                "def __len__(self):", 
                []
            ], 
            [
                "def _add_doc(func, doc):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _import_module(name):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, name):", 
                []
            ], 
            [
                "def __get__(self, obj, tp):", 
                []
            ], 
            [
                "def __init__(self, name, old, new=None):", 
                []
            ], 
            [
                "def _resolve(self):", 
                []
            ], 
            [
                "def __init__(self, name, old_mod, new_mod, old_attr=None, new_attr=None):", 
                []
            ], 
            [
                "def _resolve(self):", 
                []
            ], 
            [
                "def add_move(move):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def remove_move(name):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def advance_iterator(it):", 
                []
            ], 
            [
                "def callable(obj):", 
                []
            ], 
            [
                "def get_unbound_function(unbound):", 
                []
            ], 
            [
                "def get_unbound_function(unbound):", 
                []
            ], 
            [
                "def create_bound_method(func, obj):", 
                []
            ], 
            [
                "def next(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def iterkeys(d, **kw):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def itervalues(d, **kw):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def iteritems(d, **kw):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def iterlists(d, **kw):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def b(s):", 
                []
            ], 
            [
                "def u(s):", 
                []
            ], 
            [
                "def int2byte(i):", 
                []
            ], 
            [
                "def b(s):", 
                []
            ], 
            [
                "def u(s):", 
                []
            ], 
            [
                "def byte2int(bs):", 
                []
            ], 
            [
                "def indexbytes(buf, i):", 
                []
            ], 
            [
                "def iterbytes(buf):", 
                [
                    [
                        null, 
                        null
                    ], 
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def reraise(tp, value, tb=None):", 
                []
            ], 
            [
                "def exec_(_code_, _globs_=None, _locs_=None):", 
                [
                    [
                        null, 
                        null
                    ], 
                    [
                        null, 
                        null
                    ], 
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def print_(*args, **kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def write(data):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def with_metaclass(meta, *bases):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def add_metaclass(metaclass):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def wrapper(cls):", 
                []
            ]
        ], 
        36
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_multiclass.py": [
        [
            [
                "def test_ovr_exceptions():", 
                []
            ], 
            [
                "def test_check_classification_targets():", 
                []
            ], 
            [
                "def test_ovr_fit_predict():", 
                []
            ], 
            [
                "def test_ovr_partial_fit():", 
                []
            ], 
            [
                "def test_ovr_partial_fit_exceptions():", 
                []
            ], 
            [
                "def test_ovr_ovo_regressor():", 
                []
            ], 
            [
                "def test_ovr_fit_predict_sparse():", 
                []
            ], 
            [
                "def test_ovr_always_present():", 
                []
            ], 
            [
                "def test_ovr_multiclass():", 
                []
            ], 
            [
                "def test_ovr_binary():", 
                []
            ], 
            [
                "def conduct_test(base_clf, test_predict_proba=False):", 
                []
            ], 
            [
                "def test_ovr_multilabel():", 
                []
            ], 
            [
                "def test_ovr_fit_predict_svc():", 
                []
            ], 
            [
                "def test_ovr_multilabel_dataset():", 
                []
            ], 
            [
                "def test_ovr_multilabel_predict_proba():", 
                []
            ], 
            [
                "def test_ovr_single_label_predict_proba():", 
                []
            ], 
            [
                "def test_ovr_multilabel_decision_function():", 
                []
            ], 
            [
                "def test_ovr_single_label_decision_function():", 
                []
            ], 
            [
                "def test_ovr_gridsearch():", 
                []
            ], 
            [
                "def test_ovr_pipeline():", 
                []
            ], 
            [
                "def test_ovr_coef_():", 
                []
            ], 
            [
                "def test_ovr_coef_exceptions():", 
                []
            ], 
            [
                "def test_ovo_exceptions():", 
                []
            ], 
            [
                "def test_ovo_fit_on_list():", 
                []
            ], 
            [
                "def test_ovo_fit_predict():", 
                []
            ], 
            [
                "def test_ovo_partial_fit_predict():", 
                []
            ], 
            [
                "def test_ovo_decision_function():", 
                []
            ], 
            [
                "def test_ovo_gridsearch():", 
                []
            ], 
            [
                "def test_ovo_ties():", 
                []
            ], 
            [
                "def test_ovo_ties2():", 
                []
            ], 
            [
                "def test_ovo_string_y():", 
                []
            ], 
            [
                "def test_ovo_one_class():", 
                []
            ], 
            [
                "def test_ovo_float_y():", 
                []
            ], 
            [
                "def test_ecoc_exceptions():", 
                []
            ], 
            [
                "def test_ecoc_fit_predict():", 
                []
            ], 
            [
                "def test_ecoc_gridsearch():", 
                []
            ], 
            [
                "def test_ecoc_float_y():", 
                []
            ], 
            [
                "def test_pairwise_indices():", 
                []
            ], 
            [
                "def test_pairwise_attribute():", 
                []
            ], 
            [
                "def test_pairwise_cross_val_score():", 
                []
            ]
        ], 
        40
    ], 
    "../scikit-learn-master\\examples\\svm\\plot_svm_anova.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\neighbors\\plot_lof.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_face_compress.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\doc\\tutorial\\text_analytics\\data\\twenty_newsgroups\\fetch_data.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\mixture\\gaussian_mixture.py": [
        [
            [
                "def _check_weights(weights, n_components):", 
                [
                    [
                        [
                            [
                                "weights", 
                                "array-like, shape (n_components,)"
                            ], 
                            [
                                "n_components", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "weights", 
                                "array, shape (n_components,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _check_means(means, n_components, n_features):", 
                [
                    [
                        [
                            [
                                "means", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "n_components", 
                                "int"
                            ], 
                            [
                                "n_features", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "means", 
                                "array, (n_components, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _check_precision_positivity(precision, covariance_type):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _check_precision_matrix(precision, covariance_type):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _check_precisions_full(precisions, covariance_type):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _check_precisions(precisions, covariance_type, n_components, n_features):", 
                [
                    [
                        [
                            [
                                "precisions", 
                                "array-like,"
                            ], 
                            [
                                "covariance_type", 
                                "string"
                            ], 
                            [
                                "n_components", 
                                "int"
                            ], 
                            [
                                "n_features", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "precisions", 
                                "array"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _estimate_gaussian_covariances_full(resp, X, nk, means, reg_covar):", 
                [
                    [
                        [
                            [
                                "resp", 
                                "array-like, shape (n_samples, n_components)"
                            ], 
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "nk", 
                                "array-like, shape (n_components,)"
                            ], 
                            [
                                "means", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "reg_covar", 
                                "float"
                            ]
                        ], 
                        [
                            [
                                "covariances", 
                                "array, shape (n_components, n_features, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _estimate_gaussian_covariances_tied(resp, X, nk, means, reg_covar):", 
                [
                    [
                        [
                            [
                                "resp", 
                                "array-like, shape (n_samples, n_components)"
                            ], 
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "nk", 
                                "array-like, shape (n_components,)"
                            ], 
                            [
                                "means", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "reg_covar", 
                                "float"
                            ]
                        ], 
                        [
                            [
                                "covariance", 
                                "array, shape (n_features, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _estimate_gaussian_covariances_diag(resp, X, nk, means, reg_covar):", 
                [
                    [
                        [
                            [
                                "responsibilities", 
                                "array-like, shape (n_samples, n_components)"
                            ], 
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "nk", 
                                "array-like, shape (n_components,)"
                            ], 
                            [
                                "means", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "reg_covar", 
                                "float"
                            ]
                        ], 
                        [
                            [
                                "covariances", 
                                "array, shape (n_components, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _estimate_gaussian_covariances_spherical(resp, X, nk, means, reg_covar):", 
                [
                    [
                        [
                            [
                                "responsibilities", 
                                "array-like, shape (n_samples, n_components)"
                            ], 
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "nk", 
                                "array-like, shape (n_components,)"
                            ], 
                            [
                                "means", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "reg_covar", 
                                "float"
                            ]
                        ], 
                        [
                            [
                                "variances", 
                                "array, shape (n_components,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _estimate_gaussian_parameters(X, resp, reg_covar, covariance_type):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "resp", 
                                "array-like, shape (n_samples, n_components)"
                            ], 
                            [
                                "reg_covar", 
                                "float"
                            ], 
                            [
                                "covariance_type", 
                                "{'full', 'tied', 'diag', 'spherical'}"
                            ]
                        ], 
                        [
                            [
                                "nk", 
                                "array-like, shape (n_components,)"
                            ], 
                            [
                                "means", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "covariances", 
                                "array-like"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _compute_precision_cholesky(covariances, covariance_type):", 
                [
                    [
                        [
                            [
                                "covariances", 
                                "array-like"
                            ], 
                            [
                                "covariance_type", 
                                "{'full', 'tied', 'diag', 'spherical'}"
                            ]
                        ], 
                        [
                            [
                                "precisions_cholesky", 
                                "array-like"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _compute_log_det_cholesky(matrix_chol, covariance_type, n_features):", 
                [
                    [
                        [
                            [
                                "matrix_chol", 
                                "array-like,"
                            ], 
                            [
                                "covariance_type", 
                                "{'full', 'tied', 'diag', 'spherical'}"
                            ], 
                            [
                                "n_features", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "log_det_precision_chol", 
                                "array-like, shape (n_components,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _estimate_log_gaussian_prob(X, means, precisions_chol, covariance_type):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "means", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "precisions_chol", 
                                "array-like,"
                            ], 
                            [
                                "covariance_type", 
                                "{'full', 'tied', 'diag', 'spherical'}"
                            ]
                        ], 
                        [
                            [
                                "log_prob", 
                                "array, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=1, covariance_type='full', tol=1e-3,\n                 reg_covar=1e-6, max_iter=100, n_init=1, init_params='kmeans',\n                 weights_init=None, means_init=None, precisions_init=None,\n                 random_state=None, warm_start=False,\n                 verbose=0, verbose_interval=10):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int, defaults to 1."
                            ], 
                            [
                                "covariance_type", 
                                "{'full', 'tied', 'diag', 'spherical'},"
                            ], 
                            [
                                "of", 
                                ""
                            ], 
                            [
                                "tol", 
                                "float, defaults to 1e-3."
                            ], 
                            [
                                "reg_covar", 
                                "float, defaults to 1e-6."
                            ], 
                            [
                                "max_iter", 
                                "int, defaults to 100."
                            ], 
                            [
                                "n_init", 
                                "int, defaults to 1."
                            ], 
                            [
                                "init_params", 
                                "{'kmeans', 'random'}, defaults to 'kmeans'."
                            ], 
                            [
                                "of", 
                                ""
                            ], 
                            [
                                "weights_init", 
                                "array-like, shape (n_components, ), optional"
                            ], 
                            [
                                "means_init", 
                                "array-like, shape (n_components, n_features), optional"
                            ], 
                            [
                                "precisions_init", 
                                "array-like, optional."
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "warm_start", 
                                "bool, default to False."
                            ], 
                            [
                                "verbose", 
                                "int, default to 0."
                            ], 
                            [
                                "verbose_interval", 
                                "int, default to 10."
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_parameters(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _initialize(self, X, resp):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "resp", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _m_step(self, X, log_resp):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "log_resp", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _estimate_log_prob(self, X):", 
                []
            ], 
            [
                "def _estimate_log_weights(self):", 
                []
            ], 
            [
                "def _compute_lower_bound(self, _, log_prob_norm):", 
                []
            ], 
            [
                "def _check_is_fitted(self):", 
                []
            ], 
            [
                "def _get_parameters(self):", 
                []
            ], 
            [
                "def _set_parameters(self, params):", 
                []
            ], 
            [
                "def _n_parameters(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def bic(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array of shape (n_samples, n_dimensions)"
                            ]
                        ], 
                        [
                            [
                                "bic", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def aic(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array of shape (n_samples, n_dimensions)"
                            ]
                        ], 
                        [
                            [
                                "aic", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        27
    ], 
    "../scikit-learn-master\\examples\\neural_networks\\plot_mlp_alpha.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\my_exceptions.py": [
        [
            [
                "def __init__(self, *args):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __init__(self, message, etype):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _mk_exception(exception, name=None):", 
                []
            ], 
            [
                "def _mk_common_exceptions():", 
                []
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_face_segmentation.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_shortest_path.py": [
        [
            [
                "def floyd_warshall_slow(graph, directed=False):", 
                []
            ], 
            [
                "def generate_graph(N=20):", 
                []
            ], 
            [
                "def test_floyd_warshall():", 
                []
            ], 
            [
                "def test_dijkstra():", 
                []
            ], 
            [
                "def test_shortest_path():", 
                []
            ], 
            [
                "def test_dijkstra_bug_fix():", 
                []
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\sklearn\\svm\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\applications\\plot_tomography_l1_reconstruction.py": [
        [
            [
                "def _weights(x, dx=1, orig=0):", 
                []
            ], 
            [
                "def _generate_center_coordinates(l_x):", 
                []
            ], 
            [
                "def build_projection_operator(l_x, n_dir):", 
                [
                    [
                        [
                            [
                                "l_x", 
                                "int"
                            ], 
                            [
                                "n_dir", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "p", 
                                "sparse matrix of shape (n_dir l_x, l_x**2)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def generate_synthetic_data():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\sklearn\\mixture\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\conftest.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\base.py": [
        [
            [
                "def make_dataset(X, y, sample_weight, random_state=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def sparse_center_data(X, y, fit_intercept, normalize=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def center_data(X, y, fit_intercept, normalize=False, copy=True,\n                sample_weight=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _preprocess_data(X, y, fit_intercept, normalize=False, copy=True,\n                     sample_weight=None, return_mean=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _rescale_data(X, y, sample_weight):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _decision_function(self, X):", 
                []
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape = (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _set_intercept(self, X_offset, y_offset, X_scale):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def decision_function(self, X):", 
                []
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _predict_proba_lr(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def densify(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "self", 
                                "estimator"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def sparsify(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "self", 
                                "estimator"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, fit_intercept=True, normalize=False, copy_X=True,\n                 n_jobs=1):", 
                [
                    [
                        [
                            [
                                "fit_intercept", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional, default 1"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "numpy array or sparse matrix of shape [n_samples,n_features]"
                            ], 
                            [
                                "y", 
                                "numpy array of shape [n_samples, n_targets]"
                            ], 
                            [
                                "sample_weight", 
                                "numpy array of shape [n_samples]"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _pre_fit(X, y, Xy, precompute, normalize, fit_intercept, copy):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        17
    ], 
    "../scikit-learn-master\\benchmarks\\bench_plot_parallel_pairwise.py": [
        [
            [
                "def plot(func):", 
                []
            ], 
            [
                "def euclidean_distances(X, n_jobs):", 
                []
            ], 
            [
                "def rbf_kernels(X, n_jobs):", 
                []
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\sklearn\\preprocessing\\label.py": [
        [
            [
                "def fit(self, y):", 
                [
                    [
                        [
                            [
                                "y", 
                                "array-like of shape (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_transform(self, y):", 
                [
                    [
                        [
                            [
                                "y", 
                                "array-like of shape [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array-like of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, y):", 
                [
                    [
                        [
                            [
                                "y", 
                                "array-like of shape [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array-like of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, y):", 
                [
                    [
                        [
                            [
                                "y", 
                                "numpy array of shape [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "numpy array of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, neg_label=0, pos_label=1, sparse_output=False):", 
                [
                    [
                        [
                            [
                                "neg_label", 
                                "int (default"
                            ], 
                            [
                                "pos_label", 
                                "int (default"
                            ], 
                            [
                                "sparse_output", 
                                "boolean (default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, y):", 
                [
                    [
                        [
                            [
                                "y", 
                                "array of shape [n_samples,] or [n_samples, n_classes]"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_transform(self, y):", 
                [
                    [
                        [
                            [
                                "y", 
                                "array or sparse matrix of shape [n_samples,] or \\"
                            ]
                        ], 
                        [
                            [
                                "Y", 
                                "array or CSR matrix of shape [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, y):", 
                [
                    [
                        [
                            [
                                "y", 
                                "array or sparse matrix of shape [n_samples,] or \\"
                            ]
                        ], 
                        [
                            [
                                "Y", 
                                "numpy array or CSR matrix of shape [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, Y, threshold=None):", 
                [
                    [
                        [
                            [
                                "Y", 
                                "numpy array or sparse matrix with shape [n_samples, n_classes]"
                            ], 
                            [
                                "threshold", 
                                "float or None"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "numpy array or CSR matrix of shape [n_samples] Target values."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def label_binarize(y, classes, neg_label=0, pos_label=1, sparse_output=False):", 
                [
                    [
                        [
                            [
                                "y", 
                                "array-like"
                            ], 
                            [
                                "classes", 
                                "array-like of shape [n_classes]"
                            ], 
                            [
                                "neg_label", 
                                "int (default"
                            ], 
                            [
                                "pos_label", 
                                "int (default"
                            ], 
                            [
                                "sparse_output", 
                                "boolean (default"
                            ]
                        ], 
                        [
                            [
                                "Y", 
                                "numpy array or CSR matrix of shape [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _inverse_binarize_multiclass(y, classes):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _inverse_binarize_thresholding(y, output_type, classes, threshold):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, classes=None, sparse_output=False):", 
                [
                    [
                        [
                            [
                                "classes", 
                                "array-like of shape [n_classes] (optional)"
                            ], 
                            [
                                "sparse_output", 
                                "boolean (default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, y):", 
                [
                    [
                        [
                            [
                                "y", 
                                "iterable of iterables"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns this MultiLabelBinarizer instance"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_transform(self, y):", 
                [
                    [
                        [
                            [
                                "y", 
                                "iterable of iterables"
                            ]
                        ], 
                        [
                            [
                                "y_indicator", 
                                "array or CSR matrix, shape (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, y):", 
                [
                    [
                        [
                            [
                                "y", 
                                "iterable of iterables"
                            ]
                        ], 
                        [
                            [
                                "y_indicator", 
                                "array or CSR matrix, shape (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _transform(self, y, class_mapping):", 
                [
                    [
                        [
                            [
                                "y", 
                                "iterable of iterables"
                            ], 
                            [
                                "class_mapping", 
                                "Mapping"
                            ]
                        ], 
                        [
                            [
                                "y_indicator", 
                                "sparse CSR matrix, shape (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, yt):", 
                [
                    [
                        [
                            [
                                "yt", 
                                "array or sparse matrix of shape (n_samples, n_classes)"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "list of tuples"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        18
    ], 
    "../scikit-learn-master\\examples\\model_selection\\plot_validation_curve.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\model_selection\\_search.py": [
        [
            [
                "def __init__(self, param_grid):", 
                [
                    [
                        [
                            [
                                "param_grid", 
                                "dict of string to sequence, or sequence of such"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __iter__(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "params", 
                                "iterator over dict of string to any"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __len__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __getitem__(self, ind):", 
                [
                    [
                        [
                            [
                                "ind", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "params", 
                                "dict of string to any"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, param_distributions, n_iter, random_state=None):", 
                [
                    [
                        [
                            [
                                "param_distributions", 
                                "dict"
                            ], 
                            [
                                "n_iter", 
                                "integer"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "params", 
                                "dict of string to any"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __iter__(self):", 
                []
            ], 
            [
                "def __len__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit_grid_point(X, y, estimator, parameters, train, test, scorer,\n                   verbose, error_score='raise', **fit_params):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, sparse matrix or list"
                            ], 
                            [
                                "y", 
                                "array-like or None"
                            ], 
                            [
                                "estimator", 
                                "estimator object"
                            ], 
                            [
                                "parameters", 
                                "dict"
                            ], 
                            [
                                "train", 
                                "ndarray, dtype int or bool"
                            ], 
                            [
                                "test", 
                                "ndarray, dtype int or bool"
                            ], 
                            [
                                "scorer", 
                                "callable or None"
                            ], 
                            [
                                "verbose", 
                                "int"
                            ], 
                            [
                                "error_score", 
                                "'raise' (default) or numeric"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ], 
                            [
                                "parameters", 
                                "dict"
                            ], 
                            [
                                "n_samples_test", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _check_param_grid(param_grid):", 
                []
            ], 
            [
                "def __repr__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, estimator, scoring=None,\n                 fit_params=None, n_jobs=1, iid=True,\n                 refit=True, cv=None, verbose=0, pre_dispatch='2*n_jobs',\n                 error_score='raise', return_train_score=True):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _estimator_type(self):", 
                []
            ], 
            [
                "def score(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_output], optional"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_output], optional"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _check_is_fitted(self, method_name):", 
                []
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "indexable, length n_samples"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "indexable, length n_samples"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict_log_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "indexable, length n_samples"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "indexable, length n_samples"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "indexable, length n_samples"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, Xt):", 
                [
                    [
                        [
                            [
                                "Xt", 
                                "indexable, length n_samples"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def classes_(self):", 
                []
            ], 
            [
                "def fit(self, X, y=None, groups=None, **fit_params):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_output], optional"
                            ], 
                            [
                                "groups", 
                                "array-like, with shape (n_samples,), optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _store(key_name, array, weights=None, splits=False, rank=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def grid_scores_(self):", 
                []
            ], 
            [
                "def __init__(self, estimator, param_grid, scoring=None, fit_params=None,\n                 n_jobs=1, iid=True, refit=True, cv=None, verbose=0,\n                 pre_dispatch='2*n_jobs', error_score='raise',\n                 return_train_score=True):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object."
                            ], 
                            [
                                "param_grid", 
                                "dict or list of dictionaries"
                            ], 
                            [
                                "scoring", 
                                "string, callable, list/tuple, dict or None, default"
                            ], 
                            [
                                "See", 
                                "ref"
                            ], 
                            [
                                "fit_params", 
                                "dict, optional"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "n_jobs", 
                                "int, default=1"
                            ], 
                            [
                                "pre_dispatch", 
                                "int, or string, optional"
                            ], 
                            [
                                "be", 
                                ""
                            ], 
                            [
                                "iid", 
                                "boolean, default=True"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "refit", 
                                "boolean, or string, default=True"
                            ], 
                            [
                                "verbose", 
                                "integer"
                            ], 
                            [
                                "verbosity", 
                                "the higher, the more messages."
                            ], 
                            [
                                "error_score", 
                                "'raise' (default) or numeric"
                            ], 
                            [
                                "return_train_score", 
                                "boolean, default=True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _get_param_iterator(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, estimator, param_distributions, n_iter=10, scoring=None,\n                 fit_params=None, n_jobs=1, iid=True, refit=True, cv=None,\n                 verbose=0, pre_dispatch='2*n_jobs', random_state=None,\n                 error_score='raise', return_train_score=True):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object."
                            ], 
                            [
                                "param_distributions", 
                                "dict"
                            ], 
                            [
                                "n_iter", 
                                "int, default=10"
                            ], 
                            [
                                "scoring", 
                                "string, callable, list/tuple, dict or None, default"
                            ], 
                            [
                                "See", 
                                "ref"
                            ], 
                            [
                                "fit_params", 
                                "dict, optional"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "n_jobs", 
                                "int, default=1"
                            ], 
                            [
                                "pre_dispatch", 
                                "int, or string, optional"
                            ], 
                            [
                                "be", 
                                ""
                            ], 
                            [
                                "iid", 
                                "boolean, default=True"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "refit", 
                                "boolean, or string default=True"
                            ], 
                            [
                                "verbose", 
                                "integer"
                            ], 
                            [
                                "verbosity", 
                                "the higher, the more messages."
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default=None"
                            ], 
                            [
                                "error_score", 
                                "'raise' (default) or numeric"
                            ], 
                            [
                                "return_train_score", 
                                "boolean, default=True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _get_param_iterator(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        28
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\tests\\test_logistic.py": [
        [
            [
                "def check_predictions(clf, X, y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_predict_2_classes():", 
                []
            ], 
            [
                "def test_error():", 
                []
            ], 
            [
                "def test_lr_liblinear_warning():", 
                []
            ], 
            [
                "def test_predict_3_classes():", 
                []
            ], 
            [
                "def test_predict_iris():", 
                []
            ], 
            [
                "def test_multinomial_validation():", 
                []
            ], 
            [
                "def test_check_solver_option():", 
                []
            ], 
            [
                "def test_multinomial_binary():", 
                []
            ], 
            [
                "def test_sparsify():", 
                []
            ], 
            [
                "def test_inconsistent_input():", 
                []
            ], 
            [
                "def test_write_parameters():", 
                []
            ], 
            [
                "def test_nan():", 
                []
            ], 
            [
                "def test_consistency_path():", 
                []
            ], 
            [
                "def test_liblinear_dual_random_state():", 
                []
            ], 
            [
                "def test_logistic_loss_and_grad():", 
                []
            ], 
            [
                "def test_logistic_grad_hess():", 
                []
            ], 
            [
                "def test_logistic_cv():", 
                []
            ], 
            [
                "def test_multinomial_logistic_regression_string_inputs():", 
                []
            ], 
            [
                "def test_logistic_cv_sparse():", 
                []
            ], 
            [
                "def test_intercept_logistic_helper():", 
                []
            ], 
            [
                "def test_ovr_multinomial_iris():", 
                []
            ], 
            [
                "def test_logistic_regression_solvers():", 
                []
            ], 
            [
                "def test_logistic_regression_solvers_multiclass():", 
                []
            ], 
            [
                "def test_logistic_regressioncv_class_weights():", 
                []
            ], 
            [
                "def test_logistic_regression_sample_weights():", 
                []
            ], 
            [
                "def _compute_class_weight_dictionary(y):", 
                []
            ], 
            [
                "def test_logistic_regression_class_weights():", 
                []
            ], 
            [
                "def test_logistic_regression_convergence_warnings():", 
                []
            ], 
            [
                "def test_logistic_regression_multinomial():", 
                []
            ], 
            [
                "def test_multinomial_grad_hess():", 
                []
            ], 
            [
                "def test_liblinear_decision_function_zero():", 
                []
            ], 
            [
                "def test_liblinear_logregcv_sparse():", 
                []
            ], 
            [
                "def test_saga_sparse():", 
                []
            ], 
            [
                "def test_logreg_intercept_scaling():", 
                []
            ], 
            [
                "def test_logreg_intercept_scaling_zero():", 
                []
            ], 
            [
                "def test_logreg_l1():", 
                []
            ], 
            [
                "def test_logreg_l1_sparse_data():", 
                []
            ], 
            [
                "def test_logreg_cv_penalty():", 
                []
            ], 
            [
                "def test_logreg_predict_proba_multinomial():", 
                []
            ], 
            [
                "def test_max_iter():", 
                []
            ], 
            [
                "def test_n_iter():", 
                []
            ], 
            [
                "def test_warm_start():", 
                []
            ], 
            [
                "def test_saga_vs_liblinear():", 
                []
            ], 
            [
                "def test_dtype_match():", 
                []
            ]
        ], 
        45
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_forest_importances.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\mixture\\plot_concentration_prior.py": [
        [
            [
                "def plot_ellipses(ax, weights, means, covars):", 
                []
            ], 
            [
                "def plot_results(ax1, ax2, estimator, X, y, title, plot_title=False):", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\cluster\\tests\\test_bicluster.py": [
        [
            [
                "def test_jaccard():", 
                []
            ], 
            [
                "def test_consensus_score():", 
                []
            ], 
            [
                "def test_consensus_score_issue2445():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\examples\\svm\\plot_svm_nonlinear.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\neural_networks\\plot_mnist_filters.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\base.py": [
        [
            [
                "def get_covariance(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "cov", 
                                "array, shape=(n_features, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def get_precision(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "precision", 
                                "array, shape=(n_features, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ], 
                        []
                    ]
                ]
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\tests\\test_partial_dependence.py": [
        [
            [
                "def test_partial_dependence_classifier():", 
                []
            ], 
            [
                "def test_partial_dependence_multiclass():", 
                []
            ], 
            [
                "def test_partial_dependence_regressor():", 
                []
            ], 
            [
                "def test_partial_dependecy_input():", 
                []
            ], 
            [
                "def test_plot_partial_dependence():", 
                []
            ], 
            [
                "def test_plot_partial_dependence_input():", 
                []
            ], 
            [
                "def test_plot_partial_dependence_multiclass():", 
                []
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_dict_face_patches.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\tests\\test_sparse_coordinate_descent.py": [
        [
            [
                "def test_sparse_coef():", 
                []
            ], 
            [
                "def test_normalize_option():", 
                []
            ], 
            [
                "def test_lasso_zero():", 
                []
            ], 
            [
                "def test_enet_toy_list_input():", 
                []
            ], 
            [
                "def test_enet_toy_explicit_sparse_input():", 
                []
            ], 
            [
                "def make_sparse_data(n_samples=100, n_features=100, n_informative=10, seed=42,\n                     positive=False, n_targets=1):", 
                []
            ], 
            [
                "def _test_sparse_enet_not_as_toy_dataset(alpha, fit_intercept, positive):", 
                []
            ], 
            [
                "def test_sparse_enet_not_as_toy_dataset():", 
                []
            ], 
            [
                "def test_sparse_lasso_not_as_toy_dataset():", 
                []
            ], 
            [
                "def test_enet_multitarget():", 
                []
            ], 
            [
                "def test_path_parameters():", 
                []
            ], 
            [
                "def test_same_output_sparse_dense_lasso_and_enet_cv():", 
                []
            ], 
            [
                "def test_same_multiple_output_sparse_dense():", 
                []
            ]
        ], 
        13
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\backports.py": [
        [
            [
                "def make_memmap(filename, dtype='uint8', mode='r+', offset=0,\n                    shape=None, order='C'):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def make_memmap(filename, dtype='uint8', mode='r+', offset=0,\n                    shape=None, order='C'):", 
                []
            ], 
            [
                "def replace(src, dst):", 
                []
            ], 
            [
                "def concurrency_safe_rename(src, dst):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\setup.py": [
        [
            [
                "def run(self):", 
                []
            ], 
            [
                "def configuration(parent_package='', top_path=None):", 
                []
            ], 
            [
                "def get_scipy_status():", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def get_numpy_status():", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def setup_package():", 
                []
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\least_angle.py": [
        [
            [
                "def lars_path(X, y, Xy=None, Gram=None, max_iter=500,\n              alpha_min=0, method='lar', copy_X=True,\n              eps=np.finfo(np.float).eps,\n              copy_Gram=True, verbose=0, return_path=True,\n              return_n_iter=False, positive=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape"
                            ], 
                            [
                                "y", 
                                "array, shape"
                            ], 
                            [
                                "Xy", 
                                "array-like, shape (n_samples,) or (n_samples, n_targets), \\"
                            ], 
                            [
                                "Gram", 
                                "None, 'auto', array, shape"
                            ], 
                            [
                                "max_iter", 
                                "integer, optional (default=500)"
                            ], 
                            [
                                "alpha_min", 
                                "float, optional (default=0)"
                            ], 
                            [
                                "method", 
                                "{'lar', 'lasso'}, optional (default='lar')"
                            ], 
                            [
                                "copy_X", 
                                "bool, optional (default=True)"
                            ], 
                            [
                                "eps", 
                                "float, optional (default=``np.finfo(np.float).eps``)"
                            ], 
                            [
                                "copy_Gram", 
                                "bool, optional (default=True)"
                            ], 
                            [
                                "verbose", 
                                "int (default=0)"
                            ], 
                            [
                                "return_path", 
                                "bool, optional (default=True)"
                            ], 
                            [
                                "return_n_iter", 
                                "bool, optional (default=False)"
                            ], 
                            [
                                "positive", 
                                "boolean (default=False)"
                            ]
                        ], 
                        [
                            [
                                "alphas", 
                                "array, shape"
                            ], 
                            [
                                "active", 
                                "array, shape [n_alphas]"
                            ], 
                            [
                                "coefs", 
                                "array, shape (n_features, n_alphas + 1)"
                            ], 
                            [
                                "n_iter", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, fit_intercept=True, verbose=False, normalize=True,\n                 precompute='auto', n_nonzero_coefs=500,\n                 eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,\n                 positive=False):", 
                [
                    [
                        [
                            [
                                "fit_intercept", 
                                "boolean"
                            ], 
                            [
                                "verbose", 
                                "boolean or integer, optional"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "precompute", 
                                "True | False | 'auto' | array-like"
                            ], 
                            [
                                "n_nonzero_coefs", 
                                "int, optional"
                            ], 
                            [
                                "eps", 
                                "float, optional"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "fit_path", 
                                "boolean"
                            ], 
                            [
                                "positive", 
                                "boolean (default=False)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _get_gram(self, precompute, X, y):", 
                []
            ], 
            [
                "def _fit(self, X, y, max_iter, alpha, fit_path, Xy=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, Xy=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,) or (n_samples, n_targets)"
                            ], 
                            [
                                "Xy", 
                                "array-like, shape (n_samples,) or (n_samples, n_targets), \\"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, alpha=1.0, fit_intercept=True, verbose=False,\n                 normalize=True, precompute='auto', max_iter=500,\n                 eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,\n                 positive=False):", 
                [
                    [
                        [
                            [
                                "alpha", 
                                "float"
                            ], 
                            [
                                "by", 
                                "class"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean"
                            ], 
                            [
                                "verbose", 
                                "boolean or integer, optional"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "precompute", 
                                "True | False | 'auto' | array-like"
                            ], 
                            [
                                "max_iter", 
                                "integer, optional"
                            ], 
                            [
                                "eps", 
                                "float, optional"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "fit_path", 
                                "boolean"
                            ], 
                            [
                                "positive", 
                                "boolean (default=False)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_copy_and_writeable(array, copy=False):", 
                []
            ], 
            [
                "def _lars_path_residues(X_train, y_train, X_test, y_test, Gram=None,\n                        copy=True, method='lars', verbose=False,\n                        fit_intercept=True, normalize=True, max_iter=500,\n                        eps=np.finfo(np.float).eps, positive=False):", 
                [
                    [
                        [
                            [
                                "X_train", 
                                "array, shape (n_samples, n_features)"
                            ], 
                            [
                                "y_train", 
                                "array, shape (n_samples)"
                            ], 
                            [
                                "X_test", 
                                "array, shape (n_samples, n_features)"
                            ], 
                            [
                                "y_test", 
                                "array, shape (n_samples)"
                            ], 
                            [
                                "Gram", 
                                "None, 'auto', array, shape"
                            ], 
                            [
                                "copy", 
                                "boolean, optional"
                            ], 
                            [
                                "method", 
                                "'lar' | 'lasso'"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean"
                            ], 
                            [
                                "positive", 
                                "boolean (default=False)"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "max_iter", 
                                "integer, optional"
                            ], 
                            [
                                "eps", 
                                "float, optional"
                            ]
                        ], 
                        [
                            [
                                "alphas", 
                                "array, shape (n_alphas,)"
                            ], 
                            [
                                "active", 
                                "list"
                            ], 
                            [
                                "coefs", 
                                "array, shape (n_features, n_alphas)"
                            ], 
                            [
                                "residues", 
                                "array, shape (n_alphas, n_samples)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, fit_intercept=True, verbose=False, max_iter=500,\n                 normalize=True, precompute='auto', cv=None,\n                 max_n_alphas=1000, n_jobs=1, eps=np.finfo(np.float).eps,\n                 copy_X=True, positive=False):", 
                [
                    [
                        [
                            [
                                "fit_intercept", 
                                "boolean"
                            ], 
                            [
                                "verbose", 
                                "boolean or integer, optional"
                            ], 
                            [
                                "max_iter", 
                                "integer, optional"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "precompute", 
                                "True | False | 'auto' | array-like"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "max_n_alphas", 
                                "integer, optional"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "eps", 
                                "float, optional"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "positive", 
                                "boolean (default=False)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def alpha(self):", 
                []
            ], 
            [
                "def cv_mse_path_(self):", 
                []
            ], 
            [
                "def __init__(self, fit_intercept=True, verbose=False, max_iter=500,\n                 normalize=True, precompute='auto', cv=None,\n                 max_n_alphas=1000, n_jobs=1, eps=np.finfo(np.float).eps,\n                 copy_X=True, positive=False):", 
                [
                    [
                        [
                            [
                                "fit_intercept", 
                                "boolean"
                            ], 
                            [
                                "verbose", 
                                "boolean or integer, optional"
                            ], 
                            [
                                "max_iter", 
                                "integer, optional"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "precompute", 
                                "True | False | 'auto'"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "max_n_alphas", 
                                "integer, optional"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "eps", 
                                "float, optional"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "positive", 
                                "boolean (default=False)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, criterion='aic', fit_intercept=True, verbose=False,\n                 normalize=True, precompute='auto', max_iter=500,\n                 eps=np.finfo(np.float).eps, copy_X=True, positive=False):", 
                [
                    [
                        [
                            [
                                "criterion", 
                                "'bic' | 'aic'"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean"
                            ], 
                            [
                                "verbose", 
                                "boolean or integer, optional"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "precompute", 
                                "True | False | 'auto' | array-like"
                            ], 
                            [
                                "max_iter", 
                                "integer, optional"
                            ], 
                            [
                                "eps", 
                                "float, optional"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "positive", 
                                "boolean (default=False)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, copy_X=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        15
    ], 
    "../scikit-learn-master\\sklearn\\utils\\random.py": [
        [
            [
                "def choice(a, size=None, replace=True, p=None, random_state=None):", 
                [
                    [
                        [
                            [
                                "a", 
                                "1-D array-like or int"
                            ], 
                            [
                                "size", 
                                "int or tuple of ints, optional"
                            ], 
                            [
                                "replace", 
                                "boolean, optional"
                            ], 
                            [
                                "p", 
                                "1-D array-like, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "samples", 
                                "1-D ndarray, shape (size,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def random_choice_csc(n_samples, classes, class_probability=None,\n                      random_state=None):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int,"
                            ], 
                            [
                                "classes", 
                                "list of size n_outputs of arrays of size (n_classes,)"
                            ], 
                            [
                                "class_probability", 
                                "list of size n_outputs of arrays of size (n_classes,)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "random_matrix", 
                                "sparse csc matrix of size (n_samples, n_outputs)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\grid_search.py": [
        [
            [
                "def __init__(self, param_grid):", 
                [
                    [
                        [
                            [
                                "param_grid", 
                                "dict of string to sequence, or sequence of such"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __iter__(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "params", 
                                "iterator over dict of string to any"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __len__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __getitem__(self, ind):", 
                [
                    [
                        [
                            [
                                "ind", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "params", 
                                "dict of string to any"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, param_distributions, n_iter, random_state=None):", 
                [
                    [
                        [
                            [
                                "param_distributions", 
                                "dict"
                            ], 
                            [
                                "n_iter", 
                                "integer"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "params", 
                                "dict of string to any"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __iter__(self):", 
                []
            ], 
            [
                "def __len__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit_grid_point(X, y, estimator, parameters, train, test, scorer,\n                   verbose, error_score='raise', **fit_params):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, sparse matrix or list"
                            ], 
                            [
                                "y", 
                                "array-like or None"
                            ], 
                            [
                                "estimator", 
                                "estimator object"
                            ], 
                            [
                                "parameters", 
                                "dict"
                            ], 
                            [
                                "train", 
                                "ndarray, dtype int or bool"
                            ], 
                            [
                                "test", 
                                "ndarray, dtype int or bool"
                            ], 
                            [
                                "scorer", 
                                "callable or None."
                            ], 
                            [
                                "verbose", 
                                "int"
                            ], 
                            [
                                "error_score", 
                                "'raise' (default) or numeric"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ], 
                            [
                                "parameters", 
                                "dict"
                            ], 
                            [
                                "n_samples_test", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _check_param_grid(param_grid):", 
                []
            ], 
            [
                "def __repr__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, estimator, scoring=None,\n                 fit_params=None, n_jobs=1, iid=True,\n                 refit=True, cv=None, verbose=0, pre_dispatch='2*n_jobs',\n                 error_score='raise'):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _estimator_type(self):", 
                []
            ], 
            [
                "def classes_(self):", 
                []
            ], 
            [
                "def score(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_output], optional"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_output], optional"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "indexable, length n_samples"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "indexable, length n_samples"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict_log_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "indexable, length n_samples"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "indexable, length n_samples"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "indexable, length n_samples"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, Xt):", 
                [
                    [
                        [
                            [
                                "Xt", 
                                "indexable, length n_samples"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _fit(self, X, y, parameter_iterable):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, estimator, param_grid, scoring=None, fit_params=None,\n                 n_jobs=1, iid=True, refit=True, cv=None, verbose=0,\n                 pre_dispatch='2*n_jobs', error_score='raise'):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object."
                            ], 
                            [
                                "param_grid", 
                                "dict or list of dictionaries"
                            ], 
                            [
                                "scoring", 
                                "string, callable or None, default=None"
                            ], 
                            [
                                "fit_params", 
                                "dict, optional"
                            ], 
                            [
                                "n_jobs", 
                                "int, default"
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "pre_dispatch", 
                                "int, or string, optional"
                            ], 
                            [
                                "be", 
                                ""
                            ], 
                            [
                                "iid", 
                                "boolean, default=True"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "refit", 
                                "boolean, default=True"
                            ], 
                            [
                                "verbose", 
                                "integer"
                            ], 
                            [
                                "verbosity", 
                                "the higher, the more messages."
                            ], 
                            [
                                "error_score", 
                                "'raise' (default) or numeric"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_output], optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, estimator, param_distributions, n_iter=10, scoring=None,\n                 fit_params=None, n_jobs=1, iid=True, refit=True, cv=None,\n                 verbose=0, pre_dispatch='2*n_jobs', random_state=None,\n                 error_score='raise'):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object."
                            ], 
                            [
                                "param_distributions", 
                                "dict"
                            ], 
                            [
                                "n_iter", 
                                "int, default=10"
                            ], 
                            [
                                "scoring", 
                                "string, callable or None, default=None"
                            ], 
                            [
                                "fit_params", 
                                "dict, optional"
                            ], 
                            [
                                "n_jobs", 
                                "int, default"
                            ], 
                            [
                                "pre_dispatch", 
                                "int, or string, optional"
                            ], 
                            [
                                "be", 
                                ""
                            ], 
                            [
                                "iid", 
                                "boolean, default=True"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "refit", 
                                "boolean, default=True"
                            ], 
                            [
                                "verbose", 
                                "integer"
                            ], 
                            [
                                "verbosity", 
                                "the higher, the more messages."
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default=None"
                            ], 
                            [
                                "error_score", 
                                "'raise' (default) or numeric"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_output], optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        25
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_ols_ridge_variance.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\mixture\\base.py": [
        [
            [
                "def _check_shape(param, param_shape, name):", 
                [
                    [
                        [
                            [
                                "param", 
                                "array"
                            ], 
                            [
                                "param_shape", 
                                "tuple"
                            ], 
                            [
                                "name", 
                                "string"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_X(X, n_components=None, n_features=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "n_components", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components, tol, reg_covar,\n                 max_iter, n_init, init_params, random_state, warm_start,\n                 verbose, verbose_interval):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _check_initial_parameters(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_parameters(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape  (n_samples, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _initialize_parameters(self, X, random_state):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape  (n_samples, n_features)"
                            ], 
                            [
                                "random_state", 
                                "RandomState"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _initialize(self, X, resp):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape  (n_samples, n_features)"
                            ], 
                            [
                                "resp", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def _e_step(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "log_prob_norm", 
                                "float"
                            ], 
                            [
                                "log_responsibility", 
                                "array, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _m_step(self, X, log_resp):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "log_resp", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_is_fitted(self):", 
                []
            ], 
            [
                "def _get_parameters(self):", 
                []
            ], 
            [
                "def _set_parameters(self, params):", 
                []
            ], 
            [
                "def score_samples(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "log_prob", 
                                "array, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def score(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_dimensions)"
                            ]
                        ], 
                        [
                            [
                                "log_likelihood", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "labels", 
                                "array, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "resp", 
                                "array, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def sample(self, n_samples=1):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int, optional"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array, shape (nsamples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _estimate_weighted_log_prob(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "weighted_log_prob", 
                                "array, shape (n_samples, n_component)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _estimate_log_weights(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "log_weight", 
                                "array, shape (n_components, )"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _estimate_log_prob(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "log_prob", 
                                "array, shape (n_samples, n_component)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _estimate_log_prob_resp(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "log_prob_norm", 
                                "array, shape (n_samples,)"
                            ], 
                            [
                                "log_responsibilities", 
                                "array, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _print_verbose_msg_init_beg(self, n_init):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _print_verbose_msg_iter_end(self, n_iter, diff_ll):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _print_verbose_msg_init_end(self, ll):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        25
    ], 
    "../scikit-learn-master\\sklearn\\neural_network\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\svm\\plot_svm_kernels.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_gradient_boosting_early_stopping.py": [
        [
            [
                "def autolabel(rects, n_estimators):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\mixture\\bayesian_mixture.py": [
        [
            [
                "def _log_dirichlet_norm(dirichlet_concentration):", 
                [
                    [
                        [
                            [
                                "dirichlet_concentration", 
                                "array-like, shape (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "log_dirichlet_norm", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _log_wishart_norm(degrees_of_freedom, log_det_precisions_chol, n_features):", 
                [
                    [
                        [
                            [
                                "degrees_of_freedom", 
                                "array-like, shape (n_components,)"
                            ], 
                            [
                                "log_det_precision_chol", 
                                "array-like, shape (n_components,)"
                            ], 
                            [
                                "n_features", 
                                "int"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=1, covariance_type='full', tol=1e-3,\n                 reg_covar=1e-6, max_iter=100, n_init=1, init_params='kmeans',\n                 weight_concentration_prior_type='dirichlet_process',\n                 weight_concentration_prior=None,\n                 mean_precision_prior=None, mean_prior=None,\n                 degrees_of_freedom_prior=None, covariance_prior=None,\n                 random_state=None, warm_start=False, verbose=0,\n                 verbose_interval=10):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int, defaults to 1."
                            ], 
                            [
                                "covariance_type", 
                                "{'full', 'tied', 'diag', 'spherical'}, defaults to 'full'"
                            ], 
                            [
                                "of", 
                                ""
                            ], 
                            [
                                "tol", 
                                "float, defaults to 1e-3."
                            ], 
                            [
                                "reg_covar", 
                                "float, defaults to 1e-6."
                            ], 
                            [
                                "max_iter", 
                                "int, defaults to 100."
                            ], 
                            [
                                "n_init", 
                                "int, defaults to 1."
                            ], 
                            [
                                "init_params", 
                                "{'kmeans', 'random'}, defaults to 'kmeans'."
                            ], 
                            [
                                "of", 
                                ""
                            ], 
                            [
                                "weight_concentration_prior_type", 
                                "str, defaults to 'dirichlet_process'."
                            ], 
                            [
                                "of", 
                                ""
                            ], 
                            [
                                "weight_concentration_prior", 
                                "float | None, optional."
                            ], 
                            [
                                "mean_precision_prior", 
                                "float | None, optional."
                            ], 
                            [
                                "mean_prior", 
                                "array-like, shape (n_features,), optional"
                            ], 
                            [
                                "degrees_of_freedom_prior", 
                                "float | None, optional."
                            ], 
                            [
                                "covariance_prior", 
                                "float or array-like, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "warm_start", 
                                "bool, default to False."
                            ], 
                            [
                                "verbose", 
                                "int, default to 0."
                            ], 
                            [
                                "verbose_interval", 
                                "int, default to 10."
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_parameters(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_weights_parameters(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _check_means_parameters(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_precision_parameters(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _checkcovariance_prior_parameter(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _initialize(self, X, resp):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "resp", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _estimate_weights(self, nk):", 
                [
                    [
                        [
                            [
                                "nk", 
                                "array-like, shape (n_components,)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _estimate_means(self, nk, xk):", 
                [
                    [
                        [
                            [
                                "nk", 
                                "array-like, shape (n_components,)"
                            ], 
                            [
                                "xk", 
                                "array-like, shape (n_components, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _estimate_precisions(self, nk, xk, sk):", 
                [
                    [
                        [
                            [
                                "nk", 
                                "array-like, shape (n_components,)"
                            ], 
                            [
                                "xk", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "sk", 
                                "array-like"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _estimate_wishart_full(self, nk, xk, sk):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "nk", 
                                "array-like, shape (n_components,)"
                            ], 
                            [
                                "xk", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "sk", 
                                "array-like, shape (n_components, n_features, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _estimate_wishart_tied(self, nk, xk, sk):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "nk", 
                                "array-like, shape (n_components,)"
                            ], 
                            [
                                "xk", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "sk", 
                                "array-like, shape (n_features, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _estimate_wishart_diag(self, nk, xk, sk):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "nk", 
                                "array-like, shape (n_components,)"
                            ], 
                            [
                                "xk", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "sk", 
                                "array-like, shape (n_components, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _estimate_wishart_spherical(self, nk, xk, sk):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "nk", 
                                "array-like, shape (n_components,)"
                            ], 
                            [
                                "xk", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "sk", 
                                "array-like, shape (n_components,)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_is_fitted(self):", 
                []
            ], 
            [
                "def _m_step(self, X, log_resp):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "log_resp", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _estimate_log_weights(self):", 
                []
            ], 
            [
                "def _estimate_log_prob(self, X):", 
                []
            ], 
            [
                "def _compute_lower_bound(self, log_resp, log_prob_norm):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "log_resp", 
                                "array, shape (n_samples, n_components)"
                            ], 
                            [
                                "log_prob_norm", 
                                "float"
                            ]
                        ], 
                        [
                            [
                                "lower_bound", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _get_parameters(self):", 
                []
            ], 
            [
                "def _set_parameters(self, params):", 
                []
            ]
        ], 
        23
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_check_build.py": [
        [
            [
                "def test_raise_build_error():", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\kddcup99.py": [
        [
            [
                "def fetch_kddcup99(subset=None, data_home=None, shuffle=False,\n                   random_state=None,\n                   percent10=True, download_if_missing=True):", 
                [
                    [
                        [
                            [
                                "subset", 
                                "None, 'SA', 'SF', 'http', 'smtp'"
                            ], 
                            [
                                "data_home", 
                                "string, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "shuffle", 
                                "bool, default=False"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "percent10", 
                                "bool, default=True"
                            ], 
                            [
                                "download_if_missing", 
                                "bool, default=True"
                            ]
                        ], 
                        [
                            [
                                "data", 
                                "Bunch"
                            ], 
                            [
                                "are", 
                                ""
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _fetch_brute_kddcup99(data_home=None,\n                          download_if_missing=True, random_state=None,\n                          percent10=True):", 
                [
                    [
                        [
                            [
                                "data_home", 
                                "string, optional"
                            ], 
                            [
                                "download_if_missing", 
                                "boolean, default=True"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "percent10", 
                                "bool, default=True"
                            ]
                        ], 
                        [
                            [
                                "dataset", 
                                "dict-like object with the following attributes"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _mkdirp(d):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\sklearn\\feature_selection\\tests\\test_from_model.py": [
        [
            [
                "def test_invalid_input():", 
                []
            ], 
            [
                "def test_input_estimator_unchanged():", 
                []
            ], 
            [
                "def test_feature_importances():", 
                []
            ], 
            [
                "def test_sample_weight():", 
                []
            ], 
            [
                "def test_coef_default_threshold():", 
                []
            ], 
            [
                "def test_2d_coef():", 
                []
            ], 
            [
                "def test_partial_fit():", 
                []
            ], 
            [
                "def test_calling_fit_reinitializes():", 
                []
            ], 
            [
                "def test_prefit():", 
                []
            ], 
            [
                "def test_threshold_string():", 
                []
            ], 
            [
                "def test_threshold_without_refitting():", 
                []
            ]
        ], 
        11
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\tests\\test_base.py": [
        [
            [
                "def test_linear_regression():", 
                []
            ], 
            [
                "def test_linear_regression_sample_weights():", 
                []
            ], 
            [
                "def test_raises_value_error_if_sample_weights_greater_than_1d():", 
                []
            ], 
            [
                "def test_fit_intercept():", 
                []
            ], 
            [
                "def test_linear_regression_sparse(random_state=0):", 
                []
            ], 
            [
                "def test_linear_regression_multiple_outcome(random_state=0):", 
                []
            ], 
            [
                "def test_linear_regression_sparse_multiple_outcome(random_state=0):", 
                []
            ], 
            [
                "def test_preprocess_data():", 
                []
            ], 
            [
                "def test_preprocess_data_multioutput():", 
                []
            ], 
            [
                "def test_preprocess_data_weighted():", 
                []
            ], 
            [
                "def test_sparse_preprocess_data_with_return_mean():", 
                []
            ], 
            [
                "def test_csr_preprocess_data():", 
                []
            ], 
            [
                "def test_dtype_preprocess_data():", 
                []
            ], 
            [
                "def test_rescale_data():", 
                []
            ], 
            [
                "def test_deprecation_center_data():", 
                []
            ]
        ], 
        15
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\tests\\test_spectral.py": [
        [
            [
                "def test_spectral_clustering():", 
                []
            ], 
            [
                "def test_spectral_amg_mode():", 
                []
            ], 
            [
                "def test_spectral_unknown_mode():", 
                []
            ], 
            [
                "def test_spectral_unknown_assign_labels():", 
                []
            ], 
            [
                "def test_spectral_clustering_sparse():", 
                []
            ], 
            [
                "def test_affinities():", 
                []
            ], 
            [
                "def histogram(x, y, **kwargs):", 
                []
            ], 
            [
                "def test_discretize(seed=8):", 
                []
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_agglomerative_clustering.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\covariance\\plot_sparse_cov.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\factor_analysis.py": [
        [
            [
                "def __init__(self, n_components=None, tol=1e-2, copy=True, max_iter=1000,\n                 noise_variance_init=None, svd_method='randomized',\n                 iterated_power=3, random_state=0):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int | None"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "copy", 
                                "bool"
                            ], 
                            [
                                "max_iter", 
                                "int"
                            ], 
                            [
                                "noise_variance_init", 
                                "None | array, shape=(n_features,)"
                            ], 
                            [
                                "svd_method", 
                                "{'lapack', 'randomized'}"
                            ], 
                            [
                                "iterated_power", 
                                "int, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=0)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def my_svd(X):", 
                []
            ], 
            [
                "def my_svd(X):", 
                []
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def get_covariance(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "cov", 
                                "array, shape (n_features, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def get_precision(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "precision", 
                                "array, shape (n_features, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def score_samples(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "ll", 
                                "array, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def score(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "ll", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        9
    ], 
    "../scikit-learn-master\\examples\\covariance\\plot_mahalanobis_distances.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\benchmarks\\bench_20newsgroups.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\gaussian_process\\plot_gpc.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\cross_decomposition\\plot_compare_cross_decomposition.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_digits_agglomeration.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\tests\\test_common.py": [
        [
            [
                "def test_symmetry():", 
                []
            ], 
            [
                "def test_sample_order_invariance():", 
                []
            ], 
            [
                "def test_sample_order_invariance_multilabel_and_multioutput():", 
                []
            ], 
            [
                "def test_format_invariance_with_1d_vectors():", 
                []
            ], 
            [
                "def test_invariance_string_vs_numbers_labels():", 
                []
            ], 
            [
                "def test_inf_nan_input():", 
                []
            ], 
            [
                "def check_single_sample(name):", 
                []
            ], 
            [
                "def check_single_sample_multioutput(name):", 
                []
            ], 
            [
                "def test_single_sample():", 
                []
            ], 
            [
                "def test_multioutput_number_of_output_differ():", 
                []
            ], 
            [
                "def test_multioutput_regression_invariance_to_dimension_shuffling():", 
                []
            ], 
            [
                "def test_multilabel_representation_invariance():", 
                []
            ], 
            [
                "def test_raise_value_error_multilabel_sequences():", 
                []
            ], 
            [
                "def test_normalize_option_binary_classification(n_samples=20):", 
                []
            ], 
            [
                "def test_normalize_option_multiclass_classification():", 
                []
            ], 
            [
                "def test_normalize_option_multilabel_classification():", 
                []
            ], 
            [
                "def _check_averaging(metric, y_true, y_pred, y_true_binarize, y_pred_binarize,\n                     is_multilabel):", 
                []
            ], 
            [
                "def check_averaging(name, y_true, y_true_binarize, y_pred, y_pred_binarize,\n                    y_score):", 
                []
            ], 
            [
                "def test_averaging_multiclass(n_samples=50, n_classes=3):", 
                []
            ], 
            [
                "def test_averaging_multilabel(n_classes=5, n_samples=40):", 
                []
            ], 
            [
                "def test_averaging_multilabel_all_zeroes():", 
                []
            ], 
            [
                "def test_averaging_multilabel_all_ones():", 
                []
            ], 
            [
                "def check_sample_weight_invariance(name, metric, y1, y2):", 
                []
            ], 
            [
                "def test_sample_weight_invariance(n_samples=50):", 
                []
            ], 
            [
                "def test_no_averaging_labels():", 
                []
            ]
        ], 
        25
    ], 
    "../scikit-learn-master\\examples\\feature_selection\\plot_feature_selection_pipeline.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\tests\\test_online_lda.py": [
        [
            [
                "def _build_sparse_mtx():", 
                []
            ], 
            [
                "def test_lda_default_prior_params():", 
                []
            ], 
            [
                "def test_lda_fit_batch():", 
                []
            ], 
            [
                "def test_lda_fit_online():", 
                []
            ], 
            [
                "def test_lda_partial_fit():", 
                []
            ], 
            [
                "def test_lda_dense_input():", 
                []
            ], 
            [
                "def test_lda_transform():", 
                []
            ], 
            [
                "def test_lda_fit_transform():", 
                []
            ], 
            [
                "def test_lda_partial_fit_dim_mismatch():", 
                []
            ], 
            [
                "def test_invalid_params():", 
                []
            ], 
            [
                "def test_lda_negative_input():", 
                []
            ], 
            [
                "def test_lda_no_component_error():", 
                []
            ], 
            [
                "def test_lda_transform_mismatch():", 
                []
            ], 
            [
                "def test_lda_multi_jobs():", 
                []
            ], 
            [
                "def test_lda_partial_fit_multi_jobs():", 
                []
            ], 
            [
                "def test_lda_preplexity_mismatch():", 
                []
            ], 
            [
                "def test_lda_perplexity():", 
                []
            ], 
            [
                "def test_lda_score():", 
                []
            ], 
            [
                "def test_perplexity_input_format():", 
                []
            ], 
            [
                "def test_lda_score_perplexity():", 
                []
            ], 
            [
                "def test_lda_fit_perplexity():", 
                []
            ], 
            [
                "def test_doc_topic_distr_deprecation():", 
                []
            ], 
            [
                "def test_lda_empty_docs():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_dirichlet_expectation():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def check_verbosity(verbose, evaluate_every, expected_lines,\n                    expected_perplexities):", 
                []
            ], 
            [
                "def test_verbosity():", 
                []
            ], 
            [
                "def test_lda_n_topics_deprecation():", 
                []
            ]
        ], 
        27
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\tests\\test_mldata.py": [
        [
            [
                "def setup_tmpdata():", 
                []
            ], 
            [
                "def teardown_tmpdata():", 
                []
            ], 
            [
                "def test_mldata_filename():", 
                []
            ], 
            [
                "def test_download():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_fetch_one_column():", 
                []
            ], 
            [
                "def test_fetch_multiple_column():", 
                []
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\sklearn\\utils\\multiclass.py": [
        [
            [
                "def _unique_multiclass(y):", 
                []
            ], 
            [
                "def _unique_indicator(y):", 
                []
            ], 
            [
                "def unique_labels(*ys):", 
                [
                    [
                        [
                            [
                                "*ys", 
                                "array-likes,"
                            ]
                        ], 
                        [
                            [
                                "out", 
                                "numpy array of shape [n_unique_labels]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _is_integral_float(y):", 
                []
            ], 
            [
                "def is_multilabel(y):", 
                [
                    [
                        [
                            [
                                "y", 
                                "numpy array of shape [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "out", 
                                "bool,"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def check_classification_targets(y):", 
                [
                    [
                        [
                            [
                                "y", 
                                "array-like"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def type_of_target(y):", 
                [
                    [
                        [
                            [
                                "y", 
                                "array-like"
                            ]
                        ], 
                        [
                            [
                                "target_type", 
                                "string"
                            ], 
                            [
                                "of", 
                                ""
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _check_partial_fit_first_call(clf, classes=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def class_distribution(y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y", 
                                "array like or sparse matrix of size (n_samples, n_outputs)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = (n_samples,), optional"
                            ]
                        ], 
                        [
                            [
                                "classes", 
                                "list of size n_outputs of arrays of size (n_classes,)"
                            ], 
                            [
                                "n_classes", 
                                "list of integers of size n_outputs"
                            ], 
                            [
                                "class_prior", 
                                "list of size n_outputs of arrays of size (n_classes,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _ovr_decision_function(predictions, confidences, n_classes):", 
                [
                    [
                        [
                            [
                                "predictions", 
                                "array-like, shape (n_samples, n_classifiers)"
                            ], 
                            [
                                "confidences", 
                                "array-like, shape (n_samples, n_classifiers)"
                            ], 
                            [
                                "n_classes", 
                                "int"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        10
    ], 
    "../scikit-learn-master\\sklearn\\calibration.py": [
        [
            [
                "def __init__(self, base_estimator=None, method='sigmoid', cv=3):", 
                [
                    [
                        [
                            [
                                "base_estimator", 
                                "instance BaseEstimator"
                            ], 
                            [
                                "method", 
                                "'sigmoid' or 'isotonic'"
                            ], 
                            [
                                "cv", 
                                "integer, cross-validation generator, iterable or \"prefit\", optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples] or None"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, base_estimator, method='sigmoid', classes=None):", 
                [
                    [
                        [
                            [
                                "base_estimator", 
                                "instance BaseEstimator"
                            ], 
                            [
                                "method", 
                                "'sigmoid' | 'isotonic'"
                            ], 
                            [
                                "classes", 
                                "array-like, shape (n_classes,), optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _preproc(self, X):", 
                []
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples] or None"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _sigmoid_calibration(df, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "df", 
                                "ndarray, shape (n_samples,)"
                            ], 
                            [
                                "y", 
                                "ndarray, shape (n_samples,)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples] or None"
                            ]
                        ], 
                        [
                            [
                                "a", 
                                "float"
                            ], 
                            [
                                "b", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def objective(AB):", 
                []
            ], 
            [
                "def grad(AB):", 
                []
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples] or None"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, T):", 
                [
                    [
                        [
                            [
                                "T", 
                                "array-like, shape (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "T_", 
                                "array, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def calibration_curve(y_true, y_prob, normalize=False, n_bins=5):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array, shape (n_samples,)"
                            ], 
                            [
                                "y_prob", 
                                "array, shape (n_samples,)"
                            ], 
                            [
                                "normalize", 
                                "bool, optional, default=False"
                            ], 
                            [
                                "n_bins", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "prob_true", 
                                "array, shape (n_bins,)"
                            ], 
                            [
                                "prob_pred", 
                                "array, shape (n_bins,)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        14
    ], 
    "../scikit-learn-master\\sklearn\\utils\\mocking.py": [
        [
            [
                "def __init__(self, array):", 
                []
            ], 
            [
                "def __getitem__(self, aslice):", 
                []
            ], 
            [
                "def __init__(self, array):", 
                []
            ], 
            [
                "def __len__(self):", 
                []
            ], 
            [
                "def __array__(self, dtype=None):", 
                []
            ], 
            [
                "def __eq__(self, other):", 
                []
            ], 
            [
                "def __ne__(self, other):", 
                []
            ], 
            [
                "def __init__(self, check_y=None, check_X=None, foo_param=0,\n                 expected_fit_params=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, **fit_params):", 
                []
            ], 
            [
                "def predict(self, T):", 
                []
            ], 
            [
                "def score(self, X=None, Y=None):", 
                []
            ]
        ], 
        11
    ], 
    "../scikit-learn-master\\examples\\decomposition\\plot_image_denoising.py": [
        [
            [
                "def show_with_diff(image, reference, title):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\utils\\linear_assignment_.py": [
        [
            [
                "def linear_assignment(X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array"
                            ]
                        ], 
                        [
                            [
                                "indices", 
                                "array,"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, cost_matrix):", 
                [
                    [
                        [
                            [
                                "cost_matrix", 
                                "2D matrix"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _find_prime_in_row(self, row):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def _clear_covers(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _hungarian(cost_matrix):", 
                [
                    [
                        [
                            [
                                "cost_matrix", 
                                "2D matrix"
                            ]
                        ], 
                        [
                            [
                                "indices", 
                                "2D array of indices"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _step1(state):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _step3(state):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _step4(state):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _step5(state):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _step6(state):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        10
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_stats.py": [
        [
            [
                "def test_cases():", 
                []
            ], 
            [
                "def check_case(values, method, expected):", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\regression.py": [
        [
            [
                "def _check_reg_targets(y_true, y_pred, multioutput):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array-like,"
                            ], 
                            [
                                "y_pred", 
                                "array-like,"
                            ], 
                            [
                                "multioutput", 
                                "array-like or string in ['raw_values', uniform_average',"
                            ]
                        ], 
                        [
                            [
                                "type_true", 
                                "one of {'continuous', continuous-multioutput'}"
                            ], 
                            [
                                "y_true", 
                                "array-like of shape = (n_samples, n_outputs)"
                            ], 
                            [
                                "y_pred", 
                                "array-like of shape = (n_samples, n_outputs)"
                            ], 
                            [
                                "multioutput", 
                                "array-like of shape = (n_outputs) or string in ['raw_values',"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def mean_absolute_error(y_true, y_pred,\n                        sample_weight=None,\n                        multioutput='uniform_average'):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ], 
                            [
                                "y_pred", 
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = (n_samples), optional"
                            ], 
                            [
                                "multioutput", 
                                "string in ['raw_values', 'uniform_average']"
                            ]
                        ], 
                        [
                            [
                                "loss", 
                                "float or ndarray of floats"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def mean_squared_error(y_true, y_pred,\n                       sample_weight=None,\n                       multioutput='uniform_average'):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ], 
                            [
                                "y_pred", 
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = (n_samples), optional"
                            ], 
                            [
                                "multioutput", 
                                "string in ['raw_values', 'uniform_average']"
                            ]
                        ], 
                        [
                            [
                                "loss", 
                                "float or ndarray of floats"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def mean_squared_log_error(y_true, y_pred,\n                           sample_weight=None,\n                           multioutput='uniform_average'):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ], 
                            [
                                "y_pred", 
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = (n_samples), optional"
                            ], 
                            [
                                "multioutput", 
                                "string in ['raw_values', 'uniform_average'] \\"
                            ]
                        ], 
                        [
                            [
                                "loss", 
                                "float or ndarray of floats"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def median_absolute_error(y_true, y_pred):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array-like of shape = (n_samples)"
                            ], 
                            [
                                "y_pred", 
                                "array-like of shape = (n_samples)"
                            ]
                        ], 
                        [
                            [
                                "loss", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def explained_variance_score(y_true, y_pred,\n                             sample_weight=None,\n                             multioutput='uniform_average'):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ], 
                            [
                                "y_pred", 
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = (n_samples), optional"
                            ], 
                            [
                                "multioutput", 
                                "string in ['raw_values', 'uniform_average', \\"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float or ndarray of floats"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def r2_score(y_true, y_pred, sample_weight=None,\n             multioutput=\"uniform_average\"):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ], 
                            [
                                "y_pred", 
                                "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = (n_samples), optional"
                            ], 
                            [
                                "multioutput", 
                                "string in ['raw_values', 'uniform_average', \\"
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "z", 
                                "float or ndarray of floats"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\sklearn\\__check_build\\__init__.py": [
        [
            [
                "def raise_build_error(e):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\tests\\test_gradient_boosting.py": [
        [
            [
                "def check_classification_toy(presort, loss):", 
                []
            ], 
            [
                "def test_classification_toy():", 
                []
            ], 
            [
                "def test_parameter_checks():", 
                []
            ], 
            [
                "def test_loss_function():", 
                []
            ], 
            [
                "def check_classification_synthetic(presort, loss):", 
                []
            ], 
            [
                "def test_classification_synthetic():", 
                []
            ], 
            [
                "def check_boston(presort, loss, subsample):", 
                []
            ], 
            [
                "def test_boston():", 
                []
            ], 
            [
                "def check_iris(presort, subsample, sample_weight):", 
                []
            ], 
            [
                "def test_iris():", 
                []
            ], 
            [
                "def test_regression_synthetic():", 
                []
            ], 
            [
                "def test_feature_importances():", 
                []
            ], 
            [
                "def test_probability_log():", 
                []
            ], 
            [
                "def test_check_inputs():", 
                []
            ], 
            [
                "def test_check_inputs_predict():", 
                []
            ], 
            [
                "def test_check_max_features():", 
                []
            ], 
            [
                "def test_max_feature_regression():", 
                []
            ], 
            [
                "def test_max_feature_auto():", 
                []
            ], 
            [
                "def test_staged_predict():", 
                []
            ], 
            [
                "def test_staged_predict_proba():", 
                []
            ], 
            [
                "def test_staged_functions_defensive():", 
                []
            ], 
            [
                "def test_serialization():", 
                []
            ], 
            [
                "def test_degenerate_targets():", 
                []
            ], 
            [
                "def test_quantile_loss():", 
                []
            ], 
            [
                "def test_symbol_labels():", 
                []
            ], 
            [
                "def test_float_class_labels():", 
                []
            ], 
            [
                "def test_shape_y():", 
                []
            ], 
            [
                "def test_mem_layout():", 
                []
            ], 
            [
                "def test_oob_improvement():", 
                []
            ], 
            [
                "def test_oob_improvement_raise():", 
                []
            ], 
            [
                "def test_oob_multilcass_iris():", 
                []
            ], 
            [
                "def test_verbose_output():", 
                []
            ], 
            [
                "def test_more_verbose_output():", 
                []
            ], 
            [
                "def test_warm_start():", 
                []
            ], 
            [
                "def test_warm_start_n_estimators():", 
                []
            ], 
            [
                "def test_warm_start_max_depth():", 
                []
            ], 
            [
                "def test_warm_start_clear():", 
                []
            ], 
            [
                "def test_warm_start_zero_n_estimators():", 
                []
            ], 
            [
                "def test_warm_start_smaller_n_estimators():", 
                []
            ], 
            [
                "def test_warm_start_equal_n_estimators():", 
                []
            ], 
            [
                "def test_warm_start_oob_switch():", 
                []
            ], 
            [
                "def test_warm_start_oob():", 
                []
            ], 
            [
                "def early_stopping_monitor(i, est, locals):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_monitor_early_stopping():", 
                []
            ], 
            [
                "def test_complete_classification():", 
                []
            ], 
            [
                "def test_complete_regression():", 
                []
            ], 
            [
                "def test_zero_estimator_reg():", 
                []
            ], 
            [
                "def test_zero_estimator_clf():", 
                []
            ], 
            [
                "def test_max_leaf_nodes_max_depth():", 
                []
            ], 
            [
                "def test_min_impurity_split():", 
                []
            ], 
            [
                "def test_min_impurity_decrease():", 
                []
            ], 
            [
                "def test_warm_start_wo_nestimators_change():", 
                []
            ], 
            [
                "def test_probability_exponential():", 
                []
            ], 
            [
                "def test_non_uniform_weights_toy_edge_case_reg():", 
                []
            ], 
            [
                "def test_non_uniform_weights_toy_edge_case_clf():", 
                []
            ], 
            [
                "def check_sparse_input(EstimatorClass, X, X_sparse, y):", 
                []
            ], 
            [
                "def test_sparse_input():", 
                []
            ], 
            [
                "def test_gradient_boosting_early_stopping():", 
                []
            ], 
            [
                "def test_gradient_boosting_validation_fraction():", 
                []
            ]
        ], 
        59
    ], 
    "../scikit-learn-master\\sklearn\\preprocessing\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\setup.py": [
        [
            [
                "def configuration(parent_package=\"\", top_path=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_base.py": [
        [
            [
                "def __init__(self, l1=0, empty=None):", 
                []
            ], 
            [
                "def __init__(self, c=None, d=None):", 
                []
            ], 
            [
                "def __init__(self, a=None, b=None):", 
                []
            ], 
            [
                "def __init__(self, a=np.array([0])):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, a=None):", 
                []
            ], 
            [
                "def __init__(self):", 
                []
            ], 
            [
                "def fit(self, X=None, y=None):", 
                []
            ], 
            [
                "def predict(self, X=None):", 
                []
            ], 
            [
                "def __init__(self, *vargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_clone():", 
                []
            ], 
            [
                "def test_clone_2():", 
                []
            ], 
            [
                "def test_clone_buggy():", 
                []
            ], 
            [
                "def test_clone_empty_array():", 
                []
            ], 
            [
                "def test_clone_nan():", 
                []
            ], 
            [
                "def test_clone_copy_init_params():", 
                []
            ], 
            [
                "def test_clone_sparse_matrices():", 
                []
            ], 
            [
                "def test_repr():", 
                []
            ], 
            [
                "def test_str():", 
                []
            ], 
            [
                "def test_get_params():", 
                []
            ], 
            [
                "def test_is_classifier():", 
                []
            ], 
            [
                "def test_set_params():", 
                []
            ], 
            [
                "def test_score_sample_weight():", 
                []
            ], 
            [
                "def test_clone_pandas_dataframe():", 
                []
            ], 
            [
                "def __init__(self, df=None, scalar_param=1):", 
                [
                    [
                        [
                            [
                                "df", 
                                "pandas data frame"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                []
            ], 
            [
                "def transform(self, X):", 
                []
            ], 
            [
                "def test_pickle_version_warning_is_not_raised_with_matching_version():", 
                []
            ], 
            [
                "def __getstate__(self):", 
                []
            ], 
            [
                "def test_pickle_version_warning_is_issued_upon_different_version():", 
                []
            ], 
            [
                "def __getstate__(self):", 
                []
            ], 
            [
                "def test_pickle_version_warning_is_issued_when_no_version_info_in_pickle():", 
                []
            ], 
            [
                "def test_pickle_version_no_warning_is_issued_with_non_sklearn_estimator():", 
                []
            ], 
            [
                "def __getstate__(self):", 
                []
            ], 
            [
                "def __setstate__(self, state):", 
                []
            ], 
            [
                "def __init__(self, attribute_pickled=5):", 
                []
            ], 
            [
                "def test_pickling_when_getstate_is_overwritten_by_mixin():", 
                []
            ], 
            [
                "def test_pickling_when_getstate_is_overwritten_by_mixin_outside_of_sklearn():", 
                []
            ], 
            [
                "def __init__(self, attribute_pickled=5):", 
                []
            ], 
            [
                "def __getstate__(self):", 
                []
            ], 
            [
                "def test_pickling_works_when_getstate_is_overwritten_in_the_child_class():", 
                []
            ]
        ], 
        40
    ], 
    "../scikit-learn-master\\doc\\tutorial\\text_analytics\\solutions\\exercise_02_sentiment.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\semi_supervised\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\multioutput.py": [
        [
            [
                "def _fit_estimator(estimator, X, y, sample_weight=None):", 
                []
            ], 
            [
                "def _partial_fit_estimator(estimator, X, y, classes=None, sample_weight=None,\n                           first_time=True):", 
                []
            ], 
            [
                "def __init__(self, estimator, n_jobs=1):", 
                []
            ], 
            [
                "def partial_fit(self, X, y, classes=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "(sparse) array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "(sparse) array-like, shape (n_samples, n_outputs)"
                            ], 
                            [
                                "classes", 
                                "list of numpy arrays, shape (n_outputs)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = (n_samples) or None"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "(sparse) array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "(sparse) array-like, shape (n_samples, n_outputs)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = (n_samples) or None"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "(sparse) array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "(sparse) array-like, shape (n_samples, n_outputs)"
                            ], 
                            [
                                "Note", 
                                "Separate models are generated for each predictor."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, estimator, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional, default=1"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "(sparse) array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "(sparse) array-like, shape (n_samples, n_outputs)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = (n_samples) or None"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def score(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples) or (n_samples, n_outputs)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape [n_samples], optional"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def __init__(self, estimator, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional, default=1"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def score(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape [n_samples, n_outputs]"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array-like, shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape [n_samples, n_outputs]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, base_estimator, order=None, cv=None, random_state=None):", 
                []
            ], 
            [
                "def fit(self, X, Y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "Y", 
                                "array-like, shape (n_samples, n_classes)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "Y_pred", 
                                "array-like, shape (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "Y_prob", 
                                "array-like, shape (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "Y_decision", 
                                "array-like, shape (n_samples, n_classes )"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        17
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\base.py": [
        [
            [
                "def _check_weights(weights):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _get_weights(dist, weights):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _init_params(self, n_neighbors=None, radius=None,\n                     algorithm='auto', leaf_size=30, metric='minkowski',\n                     p=2, metric_params=None, n_jobs=1):", 
                []
            ], 
            [
                "def _fit(self, X):", 
                []
            ], 
            [
                "def _pairwise(self):", 
                []
            ], 
            [
                "def kneighbors(self, X=None, n_neighbors=None, return_distance=True):", 
                []
            ], 
            [
                "def kneighbors_graph(self, X=None, n_neighbors=None,\n                         mode='connectivity'):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_query, n_features), \\"
                            ], 
                            [
                                "n_neighbors", 
                                "int"
                            ], 
                            [
                                "mode", 
                                "{'connectivity', 'distance'}, optional"
                            ], 
                            [
                                "matrix", 
                                "'connectivity' will return the"
                            ]
                        ], 
                        [
                            [
                                "A", 
                                "sparse matrix in CSR format, shape = [n_samples, n_samples_fit]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def radius_neighbors(self, X=None, radius=None, return_distance=True):", 
                []
            ], 
            [
                "def radius_neighbors_graph(self, X=None, radius=None, mode='connectivity'):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features], optional"
                            ], 
                            [
                                "radius", 
                                "float"
                            ], 
                            [
                                "mode", 
                                "{'connectivity', 'distance'}, optional"
                            ], 
                            [
                                "matrix", 
                                "'connectivity' will return the"
                            ]
                        ], 
                        [
                            [
                                "A", 
                                "sparse matrix in CSR format, shape = [n_samples, n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix, BallTree, KDTree}"
                            ], 
                            [
                                "y", 
                                "{array-like, sparse matrix}"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix, BallTree, KDTree}"
                            ], 
                            [
                                "y", 
                                "{array-like, sparse matrix}"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix, BallTree, KDTree}"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        13
    ], 
    "../scikit-learn-master\\sklearn\\learning_curve.py": [
        [
            [
                "def learning_curve(estimator, X, y, train_sizes=np.linspace(0.1, 1.0, 5),\n                   cv=None, scoring=None, exploit_incremental_learning=False,\n                   n_jobs=1, pre_dispatch=\"all\", verbose=0,\n                   error_score='raise'):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "object type that implements the \"fit\" and \"predict\" methods"
                            ], 
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples) or (n_samples, n_features), optional"
                            ], 
                            [
                                "train_sizes", 
                                "array-like, shape (n_ticks,), dtype float or int"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "scoring", 
                                "string, callable or None, optional, default"
                            ], 
                            [
                                "exploit_incremental_learning", 
                                "boolean, optional, default"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "pre_dispatch", 
                                "integer or string, optional"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ], 
                            [
                                "verbosity", 
                                "the higher, the more messages."
                            ], 
                            [
                                "error_score", 
                                "'raise' (default) or numeric"
                            ]
                        ], 
                        [
                            [
                                "train_sizes_abs", 
                                "array, shape = (n_unique_ticks,), dtype int"
                            ], 
                            [
                                "train_scores", 
                                "array, shape (n_ticks, n_cv_folds)"
                            ], 
                            [
                                "test_scores", 
                                "array, shape (n_ticks, n_cv_folds)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _translate_train_sizes(train_sizes, n_max_training_samples):", 
                [
                    [
                        [
                            [
                                "train_sizes", 
                                "array-like, shape (n_ticks,), dtype float or int"
                            ], 
                            [
                                "n_max_training_samples", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "train_sizes_abs", 
                                "array, shape (n_unique_ticks,), dtype int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _incremental_fit_estimator(estimator, X, y, classes, train, test,\n                               train_sizes, scorer, verbose):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def validation_curve(estimator, X, y, param_name, param_range, cv=None,\n                     scoring=None, n_jobs=1, pre_dispatch=\"all\", verbose=0):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "object type that implements the \"fit\" and \"predict\" methods"
                            ], 
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples) or (n_samples, n_features), optional"
                            ], 
                            [
                                "param_name", 
                                "string"
                            ], 
                            [
                                "param_range", 
                                "array-like, shape (n_values,)"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "scoring", 
                                "string, callable or None, optional, default"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "pre_dispatch", 
                                "integer or string, optional"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ], 
                            [
                                "verbosity", 
                                "the higher, the more messages."
                            ]
                        ], 
                        [
                            [
                                "train_scores", 
                                "array, shape (n_ticks, n_cv_folds)"
                            ], 
                            [
                                "test_scores", 
                                "array, shape (n_ticks, n_cv_folds)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\sklearn\\utils\\sparsetools\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_cross_validation.py": [
        [
            [
                "def __init__(self, a=0, allow_nd=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, Y=None, sample_weight=None, class_prior=None,\n            sparse_sample_weight=None, sparse_param=None, dummy_int=None,\n            dummy_str=None, dummy_obj=None, callback=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, T):", 
                []
            ], 
            [
                "def score(self, X=None, Y=None):", 
                []
            ], 
            [
                "def get_params(self, deep=False):", 
                []
            ], 
            [
                "def check_valid_split(train, test, n_samples=None):", 
                []
            ], 
            [
                "def check_cv_coverage(cv, expected_n_iter=None, n_samples=None):", 
                []
            ], 
            [
                "def test_kfold_valueerrors():", 
                []
            ], 
            [
                "def test_kfold_indices():", 
                []
            ], 
            [
                "def test_kfold_no_shuffle():", 
                []
            ], 
            [
                "def test_stratified_kfold_no_shuffle():", 
                []
            ], 
            [
                "def test_stratified_kfold_ratios():", 
                []
            ], 
            [
                "def test_kfold_balance():", 
                []
            ], 
            [
                "def test_stratifiedkfold_balance():", 
                []
            ], 
            [
                "def test_shuffle_kfold():", 
                []
            ], 
            [
                "def test_shuffle_stratifiedkfold():", 
                []
            ], 
            [
                "def test_kfold_can_detect_dependent_samples_on_digits():", 
                []
            ], 
            [
                "def test_label_kfold():", 
                []
            ], 
            [
                "def test_shuffle_split():", 
                []
            ], 
            [
                "def test_stratified_shuffle_split_init():", 
                []
            ], 
            [
                "def test_stratified_shuffle_split_iter():", 
                []
            ], 
            [
                "def test_stratified_shuffle_split_even():", 
                []
            ], 
            [
                "def assert_counts_are_ok(idx_counts, p):", 
                []
            ], 
            [
                "def test_stratified_shuffle_split_overlap_train_test_bug():", 
                []
            ], 
            [
                "def test_predefinedsplit_with_kfold_split():", 
                []
            ], 
            [
                "def test_label_shuffle_split():", 
                []
            ], 
            [
                "def test_leave_label_out_changing_labels():", 
                []
            ], 
            [
                "def test_cross_val_score():", 
                []
            ], 
            [
                "def test_cross_val_score_pandas():", 
                []
            ], 
            [
                "def test_cross_val_score_mask():", 
                []
            ], 
            [
                "def test_cross_val_score_precomputed():", 
                []
            ], 
            [
                "def test_cross_val_score_fit_params():", 
                []
            ], 
            [
                "def assert_fit_params(clf):", 
                []
            ], 
            [
                "def test_cross_val_score_score_func():", 
                []
            ], 
            [
                "def score_func(y_test, y_predict):", 
                []
            ], 
            [
                "def test_cross_val_score_errors():", 
                []
            ], 
            [
                "def test_train_test_split_errors():", 
                []
            ], 
            [
                "def test_train_test_split():", 
                []
            ], 
            [
                "def train_test_split_pandas():", 
                []
            ], 
            [
                "def train_test_split_mock_pandas():", 
                []
            ], 
            [
                "def test_cross_val_score_with_score_func_classification():", 
                []
            ], 
            [
                "def test_cross_val_score_with_score_func_regression():", 
                []
            ], 
            [
                "def test_permutation_score():", 
                []
            ], 
            [
                "def custom_score(y_true, y_pred):", 
                []
            ], 
            [
                "def test_cross_val_generator_with_indices():", 
                []
            ], 
            [
                "def test_cross_val_generator_with_default_indices():", 
                []
            ], 
            [
                "def test_shufflesplit_errors():", 
                []
            ], 
            [
                "def test_shufflesplit_reproducible():", 
                []
            ], 
            [
                "def test_safe_split_with_precomputed_kernel():", 
                []
            ], 
            [
                "def test_cross_val_score_allow_nans():", 
                []
            ], 
            [
                "def test_train_test_split_allow_nans():", 
                []
            ], 
            [
                "def test_permutation_test_score_allow_nans():", 
                []
            ], 
            [
                "def test_check_cv_return_types():", 
                []
            ], 
            [
                "def test_cross_val_score_multilabel():", 
                []
            ], 
            [
                "def test_cross_val_predict():", 
                []
            ], 
            [
                "def bad_cv():", 
                []
            ], 
            [
                "def test_cross_val_predict_input_types():", 
                []
            ], 
            [
                "def test_cross_val_predict_pandas():", 
                []
            ], 
            [
                "def test_sparse_fit_params():", 
                []
            ], 
            [
                "def test_check_is_partition():", 
                []
            ], 
            [
                "def test_cross_val_predict_sparse_prediction():", 
                []
            ]
        ], 
        61
    ], 
    "../scikit-learn-master\\sklearn\\gaussian_process\\tests\\test_gaussian_process.py": [
        [
            [
                "def test_1d(regr=regression.constant, corr=correlation.squared_exponential,\n            random_start=10, beta0=None):", 
                []
            ], 
            [
                "def test_2d(regr=regression.constant, corr=correlation.squared_exponential,\n            random_start=10, beta0=None):", 
                []
            ], 
            [
                "def test_2d_2d(regr=regression.constant, corr=correlation.squared_exponential,\n               random_start=10, beta0=None):", 
                []
            ], 
            [
                "def test_wrong_number_of_outputs():", 
                []
            ], 
            [
                "def test_more_builtin_correlation_models(random_start=1):", 
                []
            ], 
            [
                "def test_ordinary_kriging():", 
                []
            ], 
            [
                "def test_no_normalize():", 
                []
            ], 
            [
                "def test_batch_size():", 
                []
            ], 
            [
                "def test_random_starts():", 
                []
            ], 
            [
                "def test_mse_solving():", 
                []
            ]
        ], 
        10
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\tests\\test_base.py": [
        [
            [
                "def test_base():", 
                []
            ], 
            [
                "def test_base_zero_n_estimators():", 
                []
            ], 
            [
                "def test_base_not_int_n_estimators():", 
                []
            ], 
            [
                "def test_set_random_states():", 
                []
            ], 
            [
                "def make_steps():", 
                []
            ], 
            [
                "def get_params(self, *args, **kwargs):", 
                []
            ], 
            [
                "def get_params(self, *args, **kwargs):", 
                []
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\numpy_pickle.py": [
        [
            [
                "def __init__(self, subclass, shape, order, dtype, allow_mmap=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def write_array(self, array, pickler):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def read_array(self, unpickler):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def read_mmap(self, unpickler):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def read(self, unpickler):", 
                [
                    [
                        [
                            [
                                "unpickler", 
                                "NumpyUnpickler"
                            ]
                        ], 
                        [
                            [
                                "array", 
                                "numpy.ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, fp, protocol=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _create_array_wrapper(self, array):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def save(self, obj):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, filename, file_handle, mmap_mode=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def load_build(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def dump(value, filename, compress=0, protocol=None, cache_size=None):", 
                [
                    [
                        [
                            [
                                "value", 
                                "any Python object"
                            ], 
                            [
                                "filename", 
                                "str or pathlib.Path"
                            ], 
                            [
                                "compress", 
                                "int from 0 to 9 or bool or 2-tuple, optional"
                            ], 
                            [
                                "protocol", 
                                "positive int"
                            ], 
                            [
                                "cache_size", 
                                "positive int, optional"
                            ]
                        ], 
                        [
                            [
                                "filenames", 
                                "list of strings"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _unpickle(fobj, filename=\"\", mmap_mode=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def load(filename, mmap_mode=None):", 
                [
                    [
                        [
                            [
                                "filename", 
                                "str or pathlib.Path"
                            ], 
                            [
                                "mmap_mode", 
                                "{None, 'r+', 'r', 'w+', 'c'}, optional"
                            ]
                        ], 
                        [
                            [
                                "result", 
                                "any Python object"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        13
    ], 
    "../scikit-learn-master\\examples\\calibration\\plot_calibration_curve.py": [
        [
            [
                "def plot_calibration_curve(est, name, fig_index):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\feature_selection\\plot_rfe_digits.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_gradient_boosting_regression.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\mixture\\plot_gmm.py": [
        [
            [
                "def plot_results(X, Y_, means, covariances, index, title):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\isotonic.py": [
        [
            [
                "def check_increasing(x, y):", 
                [
                    [
                        [
                            [
                                "x", 
                                "array-like, shape=(n_samples,)"
                            ], 
                            [
                                "y", 
                                "array-like, shape=(n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "increasing_bool", 
                                "boolean"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def isotonic_regression(y, sample_weight=None, y_min=None, y_max=None,\n                        increasing=True):", 
                [
                    [
                        [
                            [
                                "y", 
                                "iterable of floating-point values"
                            ], 
                            [
                                "sample_weight", 
                                "iterable of floating-point values, optional, default"
                            ], 
                            [
                                "y_min", 
                                "optional, default"
                            ], 
                            [
                                "y_max", 
                                "optional, default"
                            ], 
                            [
                                "increasing", 
                                "boolean, optional, default"
                            ]
                        ], 
                        [
                            [
                                "y_", 
                                "list of floating-point values"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, y_min=None, y_max=None, increasing=True,\n                 out_of_bounds='nan'):", 
                [
                    [
                        [
                            [
                                "y_min", 
                                "optional, default"
                            ], 
                            [
                                "y_max", 
                                "optional, default"
                            ], 
                            [
                                "increasing", 
                                "boolean or string, optional, default"
                            ], 
                            [
                                "out_of_bounds", 
                                "string, optional, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def X_(self):", 
                []
            ], 
            [
                "def X_(self, value):", 
                []
            ], 
            [
                "def X_(self):", 
                []
            ], 
            [
                "def y_(self):", 
                []
            ], 
            [
                "def y_(self, value):", 
                []
            ], 
            [
                "def y_(self):", 
                []
            ], 
            [
                "def _check_fit_data(self, X, y, sample_weight=None):", 
                []
            ], 
            [
                "def _build_f(self, X, y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _build_y(self, X, y, sample_weight, trim_duplicates=True):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape=(n_samples,)"
                            ], 
                            [
                                "y", 
                                "array-like, shape=(n_samples,)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape=(n_samples,), optional, default"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, T):", 
                [
                    [
                        [
                            [
                                "T", 
                                "array-like, shape=(n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "T_", 
                                "array, shape=(n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, T):", 
                [
                    [
                        [
                            [
                                "T", 
                                "array-like, shape=(n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "T_", 
                                "array, shape=(n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __getstate__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __setstate__(self, state):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        17
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\cluster\\tests\\test_unsupervised.py": [
        [
            [
                "def test_silhouette():", 
                []
            ], 
            [
                "def test_cluster_size_1():", 
                []
            ], 
            [
                "def test_correct_labelsize():", 
                []
            ], 
            [
                "def test_non_encoded_labels():", 
                []
            ], 
            [
                "def test_non_numpy_labels():", 
                []
            ], 
            [
                "def test_calinski_harabaz_score():", 
                []
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\sklearn\\model_selection\\_validation.py": [
        [
            [
                "def cross_validate(estimator, X, y=None, groups=None, scoring=None, cv=None,\n                   n_jobs=1, verbose=0, fit_params=None,\n                   pre_dispatch='2*n_jobs', return_train_score=True):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object implementing 'fit'"
                            ], 
                            [
                                "X", 
                                "array-like"
                            ], 
                            [
                                "y", 
                                "array-like, optional, default"
                            ], 
                            [
                                "groups", 
                                "array-like, with shape (n_samples,), optional"
                            ], 
                            [
                                "scoring", 
                                "string, callable, list/tuple, dict or None, default"
                            ], 
                            [
                                "See", 
                                "ref"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ], 
                            [
                                "fit_params", 
                                "dict, optional"
                            ], 
                            [
                                "pre_dispatch", 
                                "int, or string, optional"
                            ], 
                            [
                                "be", 
                                ""
                            ], 
                            [
                                "return_train_score", 
                                "boolean, default True"
                            ]
                        ], 
                        [
                            [
                                "scores", 
                                "dict of float arrays of shape=(n_splits,)"
                            ], 
                            [
                                "are", 
                                ""
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def cross_val_score(estimator, X, y=None, groups=None, scoring=None, cv=None,\n                    n_jobs=1, verbose=0, fit_params=None,\n                    pre_dispatch='2*n_jobs'):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object implementing 'fit'"
                            ], 
                            [
                                "X", 
                                "array-like"
                            ], 
                            [
                                "y", 
                                "array-like, optional, default"
                            ], 
                            [
                                "groups", 
                                "array-like, with shape (n_samples,), optional"
                            ], 
                            [
                                "scoring", 
                                "string, callable or None, optional, default"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ], 
                            [
                                "fit_params", 
                                "dict, optional"
                            ], 
                            [
                                "pre_dispatch", 
                                "int, or string, optional"
                            ], 
                            [
                                "be", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "scores", 
                                "array of float, shape=(len(list(cv)),)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _fit_and_score(estimator, X, y, scorer, train, test, verbose,\n                   parameters, fit_params, return_train_score=False,\n                   return_parameters=False, return_n_test_samples=False,\n                   return_times=False, error_score='raise'):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object implementing 'fit'"
                            ], 
                            [
                                "X", 
                                "array-like of shape at least 2D"
                            ], 
                            [
                                "y", 
                                "array-like, optional, default"
                            ], 
                            [
                                "scorer", 
                                "A single callable or dict mapping scorer name to the callable"
                            ], 
                            [
                                "train", 
                                "array-like, shape (n_train_samples,)"
                            ], 
                            [
                                "test", 
                                "array-like, shape (n_test_samples,)"
                            ], 
                            [
                                "verbose", 
                                "integer"
                            ], 
                            [
                                "error_score", 
                                "'raise' (default) or numeric"
                            ], 
                            [
                                "parameters", 
                                "dict or None"
                            ], 
                            [
                                "fit_params", 
                                "dict or None"
                            ], 
                            [
                                "return_train_score", 
                                "boolean, optional, default"
                            ], 
                            [
                                "return_parameters", 
                                "boolean, optional, default"
                            ], 
                            [
                                "return_n_test_samples", 
                                "boolean, optional, default"
                            ], 
                            [
                                "return_times", 
                                "boolean, optional, default"
                            ]
                        ], 
                        [
                            [
                                "train_scores", 
                                "dict of scorer name -> float, optional"
                            ], 
                            [
                                "test_scores", 
                                "dict of scorer name -> float, optional"
                            ], 
                            [
                                "n_test_samples", 
                                "int"
                            ], 
                            [
                                "fit_time", 
                                "float"
                            ], 
                            [
                                "score_time", 
                                "float"
                            ], 
                            [
                                "parameters", 
                                "dict or None, optional"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _score(estimator, X_test, y_test, scorer, is_multimetric=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _multimetric_score(estimator, X_test, y_test, scorers):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def cross_val_predict(estimator, X, y=None, groups=None, cv=None, n_jobs=1,\n                      verbose=0, fit_params=None, pre_dispatch='2*n_jobs',\n                      method='predict'):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object implementing 'fit' and 'predict'"
                            ], 
                            [
                                "X", 
                                "array-like"
                            ], 
                            [
                                "y", 
                                "array-like, optional, default"
                            ], 
                            [
                                "groups", 
                                "array-like, with shape (n_samples,), optional"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ], 
                            [
                                "fit_params", 
                                "dict, optional"
                            ], 
                            [
                                "pre_dispatch", 
                                "int, or string, optional"
                            ], 
                            [
                                "be", 
                                ""
                            ], 
                            [
                                "method", 
                                "string, optional, default"
                            ]
                        ], 
                        [
                            [
                                "predictions", 
                                "ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _fit_and_predict(estimator, X, y, train, test, verbose, fit_params,\n                     method):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object implementing 'fit' and 'predict'"
                            ], 
                            [
                                "X", 
                                "array-like of shape at least 2D"
                            ], 
                            [
                                "y", 
                                "array-like, optional, default"
                            ], 
                            [
                                "train", 
                                "array-like, shape (n_train_samples,)"
                            ], 
                            [
                                "test", 
                                "array-like, shape (n_test_samples,)"
                            ], 
                            [
                                "verbose", 
                                "integer"
                            ], 
                            [
                                "fit_params", 
                                "dict or None"
                            ], 
                            [
                                "method", 
                                "string"
                            ]
                        ], 
                        [
                            [
                                "predictions", 
                                "sequence"
                            ], 
                            [
                                "test", 
                                "array-like"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _check_is_permutation(indices, n_samples):", 
                [
                    [
                        [
                            [
                                "indices", 
                                "ndarray"
                            ], 
                            [
                                "n_samples", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "is_partition", 
                                "bool"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _index_param_value(X, v, indices):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def permutation_test_score(estimator, X, y, groups=None, cv=None,\n                           n_permutations=100, n_jobs=1, random_state=0,\n                           verbose=0, scoring=None):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object implementing 'fit'"
                            ], 
                            [
                                "X", 
                                "array-like of shape at least 2D"
                            ], 
                            [
                                "y", 
                                "array-like"
                            ], 
                            [
                                "groups", 
                                "array-like, with shape (n_samples,), optional"
                            ], 
                            [
                                "scoring", 
                                "string, callable or None, optional, default"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "n_permutations", 
                                "integer, optional"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=0)"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ], 
                            [
                                "permutation_scores", 
                                "array, shape (n_permutations,)"
                            ], 
                            [
                                "pvalue", 
                                "float"
                            ], 
                            [
                                "as", 
                                ""
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _permutation_test_score(estimator, X, y, groups, cv, scorer):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _shuffle(y, groups, random_state):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def learning_curve(estimator, X, y, groups=None,\n                   train_sizes=np.linspace(0.1, 1.0, 5), cv=None, scoring=None,\n                   exploit_incremental_learning=False, n_jobs=1,\n                   pre_dispatch=\"all\", verbose=0, shuffle=False,\n                   random_state=None):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "object type that implements the \"fit\" and \"predict\" methods"
                            ], 
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples) or (n_samples, n_features), optional"
                            ], 
                            [
                                "groups", 
                                "array-like, with shape (n_samples,), optional"
                            ], 
                            [
                                "train_sizes", 
                                "array-like, shape (n_ticks,), dtype float or int"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "scoring", 
                                "string, callable or None, optional, default"
                            ], 
                            [
                                "exploit_incremental_learning", 
                                "boolean, optional, default"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "pre_dispatch", 
                                "integer or string, optional"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ], 
                            [
                                "verbosity", 
                                "the higher, the more messages."
                            ], 
                            [
                                "shuffle", 
                                "boolean, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "train_sizes_abs", 
                                "array, shape = (n_unique_ticks,), dtype int"
                            ], 
                            [
                                "train_scores", 
                                "array, shape (n_ticks, n_cv_folds)"
                            ], 
                            [
                                "test_scores", 
                                "array, shape (n_ticks, n_cv_folds)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _translate_train_sizes(train_sizes, n_max_training_samples):", 
                [
                    [
                        [
                            [
                                "train_sizes", 
                                "array-like, shape (n_ticks,), dtype float or int"
                            ], 
                            [
                                "n_max_training_samples", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "train_sizes_abs", 
                                "array, shape (n_unique_ticks,), dtype int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _incremental_fit_estimator(estimator, X, y, classes, train, test,\n                               train_sizes, scorer, verbose):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def validation_curve(estimator, X, y, param_name, param_range, groups=None,\n                     cv=None, scoring=None, n_jobs=1, pre_dispatch=\"all\",\n                     verbose=0):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "object type that implements the \"fit\" and \"predict\" methods"
                            ], 
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples) or (n_samples, n_features), optional"
                            ], 
                            [
                                "param_name", 
                                "string"
                            ], 
                            [
                                "param_range", 
                                "array-like, shape (n_values,)"
                            ], 
                            [
                                "groups", 
                                "array-like, with shape (n_samples,), optional"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "scoring", 
                                "string, callable or None, optional, default"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "pre_dispatch", 
                                "integer or string, optional"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ], 
                            [
                                "verbosity", 
                                "the higher, the more messages."
                            ]
                        ], 
                        [
                            [
                                "train_scores", 
                                "array, shape (n_ticks, n_cv_folds)"
                            ], 
                            [
                                "test_scores", 
                                "array, shape (n_ticks, n_cv_folds)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _aggregate_score_dicts(scores):", 
                [
                    [
                        [
                            [
                                "scores", 
                                "list of dict"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        17
    ], 
    "../scikit-learn-master\\sklearn\\feature_selection\\tests\\test_chi2.py": [
        [
            [
                "def mkchi2(k):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_chi2():", 
                []
            ], 
            [
                "def test_chi2_coo():", 
                []
            ], 
            [
                "def test_chi2_negative():", 
                []
            ], 
            [
                "def test_chi2_unused_feature():", 
                []
            ], 
            [
                "def test_chisquare():", 
                []
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\examples\\neighbors\\plot_kde_1d.py": [
        [
            [
                "def format_func(x, loc):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_adjusted_for_chance_measures.py": [
        [
            [
                "def uniform_labelings_scores(score_func, n_samples, n_clusters_range,\n                             fixed_n_classes=None, n_runs=5, seed=42):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\utils\\sparsetools\\__init__.py": [
        [
            [
                "def connected_components(*args, **kwargs):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\preprocessing\\imputation.py": [
        [
            [
                "def _get_mask(X, value_to_mask):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _most_frequent(array, extra_value, n_repeat):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, missing_values=\"NaN\", strategy=\"mean\",\n                 axis=0, verbose=0, copy=True):", 
                [
                    [
                        [
                            [
                                "missing_values", 
                                "integer or \"NaN\", optional (default=\"NaN\")"
                            ], 
                            [
                                "strategy", 
                                "string, optional (default=\"mean\")"
                            ], 
                            [
                                "axis", 
                                "integer, optional (default=0)"
                            ], 
                            [
                                "verbose", 
                                "integer, optional (default=0)"
                            ], 
                            [
                                "copy", 
                                "boolean, optional (default=True)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "Imputer"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _sparse_fit(self, X, strategy, missing_values, axis):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _dense_fit(self, X, strategy, missing_values, axis):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\examples\\gaussian_process\\plot_gpr_prior_posterior.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\birch.py": [
        [
            [
                "def _iterate_sparse_X(X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _split_node(node, threshold, branching_factor):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, threshold, branching_factor, is_leaf, n_features):", 
                [
                    [
                        [
                            [
                                "threshold", 
                                "float"
                            ], 
                            [
                                "branching_factor", 
                                "int"
                            ], 
                            [
                                "is_leaf", 
                                "bool"
                            ], 
                            [
                                "n_features", 
                                "int"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def append_subcluster(self, subcluster):", 
                []
            ], 
            [
                "def update_split_subclusters(self, subcluster,\n                                 new_subcluster1, new_subcluster2):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def insert_cf_subcluster(self, subcluster):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, linear_sum=None):", 
                [
                    [
                        [
                            [
                                "linear_sum", 
                                "ndarray, shape (n_features,), optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def update(self, subcluster):", 
                []
            ], 
            [
                "def merge_subcluster(self, nominee_cluster, threshold):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def radius(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, threshold=0.5, branching_factor=50, n_clusters=3,\n                 compute_labels=True, copy=True):", 
                [
                    [
                        [
                            [
                                "threshold", 
                                "float, default 0.5"
                            ], 
                            [
                                "branching_factor", 
                                "int, default 50"
                            ], 
                            [
                                "n_clusters", 
                                "int, instance of sklearn.cluster model, default 3"
                            ], 
                            [
                                "Estimator", 
                                "If a model is provided, the model is"
                            ], 
                            [
                                "is", 
                                "class"
                            ], 
                            [
                                "compute_labels", 
                                "bool, default True"
                            ], 
                            [
                                "copy", 
                                "bool, default True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _fit(self, X):", 
                []
            ], 
            [
                "def _get_leaves(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "leaves", 
                                "array-like"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X=None, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features), None"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _check_fit(self, X):", 
                []
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "labels", 
                                "ndarray, shape(n_samples)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_trans", 
                                "{array-like, sparse matrix}, shape (n_samples, n_clusters)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _global_clustering(self, X=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        19
    ], 
    "../scikit-learn-master\\sklearn\\kernel_approximation.py": [
        [
            [
                "def __init__(self, gamma=1., n_components=100, random_state=None):", 
                [
                    [
                        [
                            [
                                "gamma", 
                                "float"
                            ], 
                            [
                                "kernel", 
                                "exp(-gamma * x^2)"
                            ], 
                            [
                                "n_components", 
                                "int"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, skewedness=1., n_components=100, random_state=None):", 
                [
                    [
                        [
                            [
                                "skewedness", 
                                "float"
                            ], 
                            [
                                "n_components", 
                                "int"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, sample_steps=2, sample_interval=None):", 
                [
                    [
                        [
                            [
                                "sample_steps", 
                                "int, optional"
                            ], 
                            [
                                "sample_interval", 
                                "float, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "{array, sparse matrix}, \\"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _transform_dense(self, X):", 
                []
            ], 
            [
                "def _transform_sparse(self, X):", 
                []
            ], 
            [
                "def __init__(self, kernel=\"rbf\", gamma=None, coef0=None, degree=None,\n                 kernel_params=None, n_components=100, random_state=None):", 
                [
                    [
                        [
                            [
                                "kernel", 
                                "string or callable, default=\"rbf\""
                            ], 
                            [
                                "n_components", 
                                "int"
                            ], 
                            [
                                "gamma", 
                                "float, default=None"
                            ], 
                            [
                                "degree", 
                                "float, default=None"
                            ], 
                            [
                                "coef0", 
                                "float, default=None"
                            ], 
                            [
                                "kernel_params", 
                                "mapping of string to any, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape=(n_samples, n_feature)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape=(n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_transformed", 
                                "array, shape=(n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _get_kernel_params(self):", 
                []
            ]
        ], 
        15
    ], 
    "../scikit-learn-master\\sklearn\\feature_selection\\tests\\test_base.py": [
        [
            [
                "def __init__(self, step=2):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                []
            ], 
            [
                "def _get_support_mask(self):", 
                []
            ], 
            [
                "def test_transform_dense():", 
                []
            ], 
            [
                "def test_transform_sparse():", 
                []
            ], 
            [
                "def test_inverse_transform_dense():", 
                []
            ], 
            [
                "def test_inverse_transform_sparse():", 
                []
            ], 
            [
                "def test_get_support():", 
                []
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\setup.py": [
        [
            [
                "def configuration(parent_package='', top_path=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\bayes.py": [
        [
            [
                "def __init__(self, n_iter=300, tol=1.e-3, alpha_1=1.e-6, alpha_2=1.e-6,\n                 lambda_1=1.e-6, lambda_2=1.e-6, compute_score=False,\n                 fit_intercept=True, normalize=False, copy_X=True,\n                 verbose=False):", 
                [
                    [
                        [
                            [
                                "n_iter", 
                                "int, optional"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "alpha_1", 
                                "float, optional"
                            ], 
                            [
                                "alpha_2", 
                                "float, optional"
                            ], 
                            [
                                "lambda_1", 
                                "float, optional"
                            ], 
                            [
                                "lambda_2", 
                                "float, optional"
                            ], 
                            [
                                "compute_score", 
                                "boolean, optional"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean, optional"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "verbose", 
                                "boolean, optional, default False"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "numpy array of shape [n_samples,n_features]"
                            ], 
                            [
                                "y", 
                                "numpy array of shape [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X, return_std=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = (n_samples, n_features)"
                            ], 
                            [
                                "return_std", 
                                "boolean, optional"
                            ]
                        ], 
                        [
                            [
                                "y_mean", 
                                "array, shape = (n_samples,)"
                            ], 
                            [
                                "y_std", 
                                "array, shape = (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_iter=300, tol=1.e-3, alpha_1=1.e-6, alpha_2=1.e-6,\n                 lambda_1=1.e-6, lambda_2=1.e-6, compute_score=False,\n                 threshold_lambda=1.e+4, fit_intercept=True, normalize=False,\n                 copy_X=True, verbose=False):", 
                [
                    [
                        [
                            [
                                "n_iter", 
                                "int, optional"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "alpha_1", 
                                "float, optional"
                            ], 
                            [
                                "alpha_2", 
                                "float, optional"
                            ], 
                            [
                                "lambda_1", 
                                "float, optional"
                            ], 
                            [
                                "lambda_2", 
                                "float, optional"
                            ], 
                            [
                                "compute_score", 
                                "boolean, optional"
                            ], 
                            [
                                "threshold_lambda", 
                                "float, optional"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean, optional"
                            ], 
                            [
                                "normalize", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "copy_X", 
                                "boolean, optional, default True."
                            ], 
                            [
                                "verbose", 
                                "boolean, optional, default False"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array, shape = [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X, return_std=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = (n_samples, n_features)"
                            ], 
                            [
                                "return_std", 
                                "boolean, optional"
                            ]
                        ], 
                        [
                            [
                                "y_mean", 
                                "array, shape = (n_samples,)"
                            ], 
                            [
                                "y_std", 
                                "array, shape = (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\sklearn\\covariance\\tests\\test_covariance.py": [
        [
            [
                "def test_covariance():", 
                []
            ], 
            [
                "def test_shrunk_covariance():", 
                []
            ], 
            [
                "def test_ledoit_wolf():", 
                []
            ], 
            [
                "def _naive_ledoit_wolf_shrinkage(X):", 
                []
            ], 
            [
                "def test_ledoit_wolf_small():", 
                []
            ], 
            [
                "def test_ledoit_wolf_large():", 
                []
            ], 
            [
                "def test_oas():", 
                []
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\sklearn\\feature_selection\\mutual_info_.py": [
        [
            [
                "def _compute_mi_cc(x, y, n_neighbors):", 
                [
                    [
                        [
                            [
                                "y", 
                                "ndarray, shape (n_samples,)"
                            ], 
                            [
                                "n_neighbors", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "mi", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _compute_mi_cd(c, d, n_neighbors):", 
                [
                    [
                        [
                            [
                                "c", 
                                "ndarray, shape (n_samples,)"
                            ], 
                            [
                                "d", 
                                "ndarray, shape (n_samples,)"
                            ], 
                            [
                                "n_neighbors", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "mi", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _compute_mi(x, y, x_discrete, y_discrete, n_neighbors=3):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _iterate_columns(X, columns=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray or csc_matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "columns", 
                                "iterable or None, default None"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,\n                 n_neighbors=3, copy=True, random_state=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like or sparse matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array_like, shape (n_samples,)"
                            ], 
                            [
                                "discrete_features", 
                                "{'auto', bool, array_like}, default 'auto'"
                            ], 
                            [
                                "discrete_target", 
                                "bool, default False"
                            ], 
                            [
                                "n_neighbors", 
                                "int, default 3"
                            ], 
                            [
                                "copy", 
                                "bool, default True"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ]
                        ], 
                        [
                            [
                                "mi", 
                                "ndarray, shape (n_features,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def mutual_info_regression(X, y, discrete_features='auto', n_neighbors=3,\n                           copy=True, random_state=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like or sparse matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array_like, shape (n_samples,)"
                            ], 
                            [
                                "discrete_features", 
                                "{'auto', bool, array_like}, default 'auto'"
                            ], 
                            [
                                "n_neighbors", 
                                "int, default 3"
                            ], 
                            [
                                "copy", 
                                "bool, default True"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ]
                        ], 
                        [
                            [
                                "mi", 
                                "ndarray, shape (n_features,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def mutual_info_classif(X, y, discrete_features='auto', n_neighbors=3,\n                        copy=True, random_state=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like or sparse matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array_like, shape (n_samples,)"
                            ], 
                            [
                                "discrete_features", 
                                "{'auto', bool, array_like}, default 'auto'"
                            ], 
                            [
                                "n_neighbors", 
                                "int, default 3"
                            ], 
                            [
                                "copy", 
                                "bool, default True"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ]
                        ], 
                        [
                            [
                                "mi", 
                                "ndarray, shape (n_features,)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\covariance\\empirical_covariance_.py": [
        [
            [
                "def log_likelihood(emp_cov, precision):", 
                [
                    [
                        [
                            [
                                "emp_cov", 
                                "2D ndarray (n_features, n_features)"
                            ], 
                            [
                                "precision", 
                                "2D ndarray (n_features, n_features)"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def empirical_covariance(X, assume_centered=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray, shape (n_samples, n_features)"
                            ], 
                            [
                                "assume_centered", 
                                "Boolean"
                            ]
                        ], 
                        [
                            [
                                "covariance", 
                                "2D ndarray, shape (n_features, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, store_precision=True, assume_centered=False):", 
                [
                    [
                        [
                            [
                                "store_precision", 
                                "bool"
                            ], 
                            [
                                "assume_centered", 
                                "bool"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _set_covariance(self, covariance):", 
                [
                    [
                        [
                            [
                                "covariance", 
                                "2D ndarray, shape (n_features, n_features)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def get_precision(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "precision_", 
                                "array-like,"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "not used, present for API consistence purpose."
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def score(self, X_test, y=None):", 
                [
                    [
                        [
                            [
                                "X_test", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "not used, present for API consistence purpose."
                            ]
                        ], 
                        [
                            [
                                "res", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def error_norm(self, comp_cov, norm='frobenius', scaling=True,\n                   squared=True):", 
                [
                    [
                        [
                            [
                                "comp_cov", 
                                "array-like, shape = [n_features, n_features]"
                            ], 
                            [
                                "norm", 
                                "str"
                            ], 
                            [
                                "types", 
                                ""
                            ], 
                            [
                                "scaling", 
                                "bool"
                            ], 
                            [
                                "squared", 
                                "bool"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def mahalanobis(self, observations):", 
                [
                    [
                        [
                            [
                                "observations", 
                                "array-like, shape = [n_observations, n_features]"
                            ]
                        ], 
                        [
                            [
                                "mahalanobis_distance", 
                                "array, shape = [n_observations,]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        9
    ], 
    "../scikit-learn-master\\examples\\covariance\\plot_outlier_detection.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\model_selection\\plot_multi_metric_evaluation.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\externals\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\fastica_.py": [
        [
            [
                "def _gs_decorrelation(w, W, j):", 
                [
                    [
                        [
                            [
                                "w", 
                                "ndarray of shape(n)"
                            ], 
                            [
                                "W", 
                                "ndarray of shape(p, n)"
                            ], 
                            [
                                "j", 
                                "int < p"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _sym_decorrelation(W):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _ica_def(X, tol, g, fun_args, max_iter, w_init):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _ica_par(X, tol, g, fun_args, max_iter, w_init):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _logcosh(x, fun_args=None):", 
                []
            ], 
            [
                "def _exp(x, fun_args):", 
                []
            ], 
            [
                "def _cube(x, fun_args):", 
                []
            ], 
            [
                "def fastica(X, n_components=None, algorithm=\"parallel\", whiten=True,\n            fun=\"logcosh\", fun_args=None, max_iter=200, tol=1e-04, w_init=None,\n            random_state=None, return_X_mean=False, compute_sources=True,\n            return_n_iter=False):", 
                []
            ], 
            [
                "def my_g(x):", 
                []
            ], 
            [
                "def g(x, fun_args):", 
                []
            ], 
            [
                "def my_g(x):", 
                []
            ], 
            [
                "def __init__(self, n_components=None, algorithm='parallel', whiten=True,\n                 fun='logcosh', fun_args=None, max_iter=200, tol=1e-4,\n                 w_init=None, random_state=None):", 
                []
            ], 
            [
                "def _fit(self, X, compute_sources=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "compute_sources", 
                                "bool"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def transform(self, X, y='deprecated', copy=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "(ignored)"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "copy", 
                                "bool (optional)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, X, copy=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_components)"
                            ], 
                            [
                                "copy", 
                                "bool (optional)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        17
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\mlcomp.py": [
        [
            [
                "def _load_document_classification(dataset_path, metadata, set_=None, **kwargs):", 
                []
            ], 
            [
                "def load_mlcomp(name_or_id, set_=\"raw\", mlcomp_root=None, **kwargs):", 
                [
                    [
                        [
                            [
                                "name_or_id", 
                                "the integer id or the string name metadata of the MLComp"
                            ], 
                            [
                                "set_", 
                                "select the portion to load"
                            ], 
                            [
                                "mlcomp_root", 
                                "the filesystem path to the root folder where MLComp datasets"
                            ], 
                            [
                                "the", 
                                "ref"
                            ]
                        ], 
                        [
                            [
                                "data", 
                                "Bunch"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "process", 
                                "depending on the type of name_or_id,"
                            ], 
                            [
                                "TODO", 
                                "implement zip dataset loading too"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\feature_extraction\\tests\\test_image.py": [
        [
            [
                "def test_img_to_graph():", 
                []
            ], 
            [
                "def test_grid_to_graph():", 
                []
            ], 
            [
                "def test_connect_regions():", 
                []
            ], 
            [
                "def test_connect_regions_with_grid():", 
                []
            ], 
            [
                "def _downsampled_face():", 
                []
            ], 
            [
                "def _orange_face(face=None):", 
                []
            ], 
            [
                "def _make_images(face=None):", 
                []
            ], 
            [
                "def test_extract_patches_all():", 
                []
            ], 
            [
                "def test_extract_patches_all_color():", 
                []
            ], 
            [
                "def test_extract_patches_all_rect():", 
                []
            ], 
            [
                "def test_extract_patches_max_patches():", 
                []
            ], 
            [
                "def test_reconstruct_patches_perfect():", 
                []
            ], 
            [
                "def test_reconstruct_patches_perfect_color():", 
                []
            ], 
            [
                "def test_patch_extractor_fit():", 
                []
            ], 
            [
                "def test_patch_extractor_max_patches():", 
                []
            ], 
            [
                "def test_patch_extractor_max_patches_default():", 
                []
            ], 
            [
                "def test_patch_extractor_all_patches():", 
                []
            ], 
            [
                "def test_patch_extractor_color():", 
                []
            ], 
            [
                "def test_extract_patches_strided():", 
                []
            ], 
            [
                "def test_extract_patches_square():", 
                []
            ], 
            [
                "def test_width_patch():", 
                []
            ]
        ], 
        21
    ], 
    "../scikit-learn-master\\sklearn\\gaussian_process\\tests\\test_gpr.py": [
        [
            [
                "def f(x):", 
                []
            ], 
            [
                "def test_gpr_interpolation():", 
                []
            ], 
            [
                "def test_lml_improving():", 
                []
            ], 
            [
                "def test_lml_precomputed():", 
                []
            ], 
            [
                "def test_converged_to_local_maximum():", 
                []
            ], 
            [
                "def test_solution_inside_bounds():", 
                []
            ], 
            [
                "def test_lml_gradient():", 
                []
            ], 
            [
                "def test_prior():", 
                []
            ], 
            [
                "def test_sample_statistics():", 
                []
            ], 
            [
                "def test_no_optimizer():", 
                []
            ], 
            [
                "def test_predict_cov_vs_std():", 
                []
            ], 
            [
                "def test_anisotropic_kernel():", 
                []
            ], 
            [
                "def test_random_starts():", 
                []
            ], 
            [
                "def test_y_normalization():", 
                []
            ], 
            [
                "def test_y_multioutput():", 
                []
            ], 
            [
                "def test_custom_optimizer():", 
                []
            ], 
            [
                "def optimizer(obj_func, initial_theta, bounds):", 
                []
            ], 
            [
                "def test_gpr_correct_error_message():", 
                []
            ], 
            [
                "def test_duplicate_input():", 
                []
            ], 
            [
                "def test_no_fit_default_predict():", 
                []
            ], 
            [
                "def test_K_inv_reset():", 
                []
            ]
        ], 
        21
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_estimator_checks.py": [
        [
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def __init__(self):", 
                []
            ], 
            [
                "def fit(self, X, y=None):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def __init__(self):", 
                []
            ], 
            [
                "def fit(self, X, y=None):", 
                []
            ], 
            [
                "def __init__(self):", 
                []
            ], 
            [
                "def fit(self, X, y=None):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def test_check_estimator():", 
                []
            ], 
            [
                "def test_check_estimator_clones():", 
                []
            ], 
            [
                "def test_check_estimators_unfitted():", 
                []
            ], 
            [
                "def test_check_no_fit_attributes_set_in_init():", 
                []
            ], 
            [
                "def __init__(self):", 
                []
            ]
        ], 
        21
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_sgd_weighted_samples.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\tests\\test_svmlight_format.py": [
        [
            [
                "def test_load_svmlight_file():", 
                []
            ], 
            [
                "def test_load_svmlight_file_fd():", 
                []
            ], 
            [
                "def test_load_svmlight_file_multilabel():", 
                []
            ], 
            [
                "def test_load_svmlight_files():", 
                []
            ], 
            [
                "def test_load_svmlight_file_n_features():", 
                []
            ], 
            [
                "def test_load_compressed():", 
                []
            ], 
            [
                "def test_load_invalid_file():", 
                []
            ], 
            [
                "def test_load_invalid_order_file():", 
                []
            ], 
            [
                "def test_load_zero_based():", 
                []
            ], 
            [
                "def test_load_zero_based_auto():", 
                []
            ], 
            [
                "def test_load_with_qid():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_load_invalid_file2():", 
                []
            ], 
            [
                "def test_not_a_filename():", 
                []
            ], 
            [
                "def test_invalid_filename():", 
                []
            ], 
            [
                "def test_dump():", 
                []
            ], 
            [
                "def test_dump_multilabel():", 
                []
            ], 
            [
                "def test_dump_concise():", 
                []
            ], 
            [
                "def test_dump_comment():", 
                []
            ], 
            [
                "def test_dump_invalid():", 
                []
            ], 
            [
                "def test_dump_query_id():", 
                []
            ], 
            [
                "def test_load_with_long_qid():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_load_zeros():", 
                []
            ], 
            [
                "def test_load_with_offsets():", 
                []
            ], 
            [
                "def check_load_with_offsets(sparsity, n_samples, n_features):", 
                []
            ], 
            [
                "def test_load_offset_exhaustive_splits():", 
                []
            ], 
            [
                "def test_load_with_offsets_error():", 
                []
            ]
        ], 
        26
    ], 
    "../scikit-learn-master\\sklearn\\neural_network\\multilayer_perceptron.py": [
        [
            [
                "def _pack(coefs_, intercepts_):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, hidden_layer_sizes, activation, solver,\n                 alpha, batch_size, learning_rate, learning_rate_init, power_t,\n                 max_iter, loss, shuffle, random_state, tol, verbose,\n                 warm_start, momentum, nesterovs_momentum, early_stopping,\n                 validation_fraction, beta_1, beta_2, epsilon):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _unpack(self, packed_parameters):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _forward_pass(self, activations):", 
                [
                    [
                        [
                            [
                                "activations", 
                                "list, length = n_layers - 1"
                            ], 
                            [
                                "with_output_activation", 
                                "bool, default True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _compute_loss_grad(self, layer, n_samples, activations, deltas,\n                           coef_grads, intercept_grads):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _loss_grad_lbfgs(self, packed_coef_inter, X, y, activations, deltas,\n                         coef_grads, intercept_grads):", 
                [
                    [
                        [
                            [
                                "packed_parameters", 
                                "array-like"
                            ], 
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "activations", 
                                "list, length = n_layers - 1"
                            ], 
                            [
                                "deltas", 
                                "list, length = n_layers - 1"
                            ], 
                            [
                                "coef_grad", 
                                "list, length = n_layers - 1"
                            ], 
                            [
                                "intercept_grads", 
                                "list, length = n_layers - 1"
                            ]
                        ], 
                        [
                            [
                                "loss", 
                                "float"
                            ], 
                            [
                                "grad", 
                                "array-like, shape (number of nodes of all layers,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _backprop(self, X, y, activations, deltas, coef_grads,\n                  intercept_grads):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "activations", 
                                "list, length = n_layers - 1"
                            ], 
                            [
                                "deltas", 
                                "list, length = n_layers - 1"
                            ], 
                            [
                                "coef_grad", 
                                "list, length = n_layers - 1"
                            ], 
                            [
                                "intercept_grads", 
                                "list, length = n_layers - 1"
                            ]
                        ], 
                        [
                            [
                                "loss", 
                                "float"
                            ], 
                            [
                                "coef_grads", 
                                "list, length = n_layers - 1"
                            ], 
                            [
                                "intercept_grads", 
                                "list, length = n_layers - 1"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _initialize(self, y, layer_units):", 
                []
            ], 
            [
                "def _init_coef(self, fan_in, fan_out):", 
                []
            ], 
            [
                "def _fit(self, X, y, incremental=False):", 
                []
            ], 
            [
                "def _validate_hyperparameters(self):", 
                []
            ], 
            [
                "def _fit_lbfgs(self, X, y, activations, deltas, coef_grads,\n                   intercept_grads, layer_units):", 
                []
            ], 
            [
                "def _fit_stochastic(self, X, y, activations, deltas, coef_grads,\n                        intercept_grads, layer_units, incremental):", 
                []
            ], 
            [
                "def _update_no_improvement_count(self, early_stopping, X_val, y_val):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,) or (n_samples, n_outputs)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns a trained MLP model."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def partial_fit(self):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns a trained MLP model."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _partial_fit(self, X, y):", 
                []
            ], 
            [
                "def _predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "y_pred", 
                                "array-like, shape (n_samples,) or (n_samples, n_outputs)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, hidden_layer_sizes=(100,), activation=\"relu\",\n                 solver='adam', alpha=0.0001,\n                 batch_size='auto', learning_rate=\"constant\",\n                 learning_rate_init=0.001, power_t=0.5, max_iter=200,\n                 shuffle=True, random_state=None, tol=1e-4,\n                 verbose=False, warm_start=False, momentum=0.9,\n                 nesterovs_momentum=True, early_stopping=False,\n                 validation_fraction=0.1, beta_1=0.9, beta_2=0.999,\n                 epsilon=1e-8):", 
                [
                    [
                        [
                            [
                                "hidden_layer_sizes", 
                                "tuple, length = n_layers - 2, default (100,)"
                            ], 
                            [
                                "activation", 
                                "{'identity', 'logistic', 'tanh', 'relu'}, default 'relu'"
                            ], 
                            [
                                "solver", 
                                "{'lbfgs', 'sgd', 'adam'}, default 'adam'"
                            ], 
                            [
                                "Note", 
                                "The default solver 'adam' works pretty well on relatively"
                            ], 
                            [
                                "alpha", 
                                "float, optional, default 0.0001"
                            ], 
                            [
                                "batch_size", 
                                "int, optional, default 'auto'"
                            ], 
                            [
                                "learning_rate", 
                                "{'constant', 'invscaling', 'adaptive'}, default 'constant'"
                            ], 
                            [
                                "learning_rate_init", 
                                "double, optional, default 0.001"
                            ], 
                            [
                                "power_t", 
                                "double, optional, default 0.5"
                            ], 
                            [
                                "max_iter", 
                                "int, optional, default 200"
                            ], 
                            [
                                "shuffle", 
                                "bool, optional, default True"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ], 
                            [
                                "tol", 
                                "float, optional, default 1e-4"
                            ], 
                            [
                                "verbose", 
                                "bool, optional, default False"
                            ], 
                            [
                                "warm_start", 
                                "bool, optional, default False"
                            ], 
                            [
                                "momentum", 
                                "float, default 0.9"
                            ], 
                            [
                                "nesterovs_momentum", 
                                "boolean, default True"
                            ], 
                            [
                                "early_stopping", 
                                "bool, default False"
                            ], 
                            [
                                "validation_fraction", 
                                "float, optional, default 0.1"
                            ], 
                            [
                                "beta_1", 
                                "float, optional, default 0.9"
                            ], 
                            [
                                "beta_2", 
                                "float, optional, default 0.999"
                            ], 
                            [
                                "epsilon", 
                                "float, optional, default 1e-8"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _validate_input(self, X, y, incremental):", 
                []
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array-like, shape (n_samples,) or (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,) or (n_samples, n_outputs)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns a trained MLP model."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def partial_fit(self):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "classes", 
                                "array, shape (n_classes)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns a trained MLP model."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _partial_fit(self, X, y, classes=None):", 
                []
            ], 
            [
                "def predict_log_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "log_y_prob", 
                                "array-like, shape (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "y_prob", 
                                "array-like, shape (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, hidden_layer_sizes=(100,), activation=\"relu\",\n                 solver='adam', alpha=0.0001,\n                 batch_size='auto', learning_rate=\"constant\",\n                 learning_rate_init=0.001,\n                 power_t=0.5, max_iter=200, shuffle=True,\n                 random_state=None, tol=1e-4,\n                 verbose=False, warm_start=False, momentum=0.9,\n                 nesterovs_momentum=True, early_stopping=False,\n                 validation_fraction=0.1, beta_1=0.9, beta_2=0.999,\n                 epsilon=1e-8):", 
                [
                    [
                        [
                            [
                                "hidden_layer_sizes", 
                                "tuple, length = n_layers - 2, default (100,)"
                            ], 
                            [
                                "activation", 
                                "{'identity', 'logistic', 'tanh', 'relu'}, default 'relu'"
                            ], 
                            [
                                "solver", 
                                "{'lbfgs', 'sgd', 'adam'}, default 'adam'"
                            ], 
                            [
                                "Note", 
                                "The default solver 'adam' works pretty well on relatively"
                            ], 
                            [
                                "alpha", 
                                "float, optional, default 0.0001"
                            ], 
                            [
                                "batch_size", 
                                "int, optional, default 'auto'"
                            ], 
                            [
                                "learning_rate", 
                                "{'constant', 'invscaling', 'adaptive'}, default 'constant'"
                            ], 
                            [
                                "learning_rate_init", 
                                "double, optional, default 0.001"
                            ], 
                            [
                                "power_t", 
                                "double, optional, default 0.5"
                            ], 
                            [
                                "max_iter", 
                                "int, optional, default 200"
                            ], 
                            [
                                "shuffle", 
                                "bool, optional, default True"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ], 
                            [
                                "tol", 
                                "float, optional, default 1e-4"
                            ], 
                            [
                                "verbose", 
                                "bool, optional, default False"
                            ], 
                            [
                                "warm_start", 
                                "bool, optional, default False"
                            ], 
                            [
                                "momentum", 
                                "float, default 0.9"
                            ], 
                            [
                                "nesterovs_momentum", 
                                "boolean, default True"
                            ], 
                            [
                                "early_stopping", 
                                "bool, default False"
                            ], 
                            [
                                "validation_fraction", 
                                "float, optional, default 0.1"
                            ], 
                            [
                                "beta_1", 
                                "float, optional, default 0.9"
                            ], 
                            [
                                "beta_2", 
                                "float, optional, default 0.999"
                            ], 
                            [
                                "epsilon", 
                                "float, optional, default 1e-8"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array-like, shape (n_samples, n_outputs)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _validate_input(self, X, y, incremental):", 
                []
            ]
        ], 
        29
    ], 
    "../scikit-learn-master\\sklearn\\feature_extraction\\text.py": [
        [
            [
                "def strip_accents_unicode(s):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def strip_accents_ascii(s):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def strip_tags(s):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _check_stop_list(stop):", 
                []
            ], 
            [
                "def decode(self, doc):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _word_ngrams(self, tokens, stop_words=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _char_ngrams(self, text_document):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _char_wb_ngrams(self, text_document):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def build_preprocessor(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def build_tokenizer(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get_stop_words(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def build_analyzer(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _validate_vocabulary(self):", 
                []
            ], 
            [
                "def _check_vocabulary(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, input='content', encoding='utf-8',\n                 decode_error='strict', strip_accents=None,\n                 lowercase=True, preprocessor=None, tokenizer=None,\n                 stop_words=None, token_pattern=r\"(?u)\\b\\w\\w+\\b\",\n                 ngram_range=(1, 1), analyzer='word', n_features=(2 ** 20),\n                 binary=False, norm='l2', alternate_sign=True,\n                 non_negative=False, dtype=np.float64):", 
                [
                    [
                        [
                            [
                                "input", 
                                "string {'filename', 'file', 'content'}"
                            ], 
                            [
                                "encoding", 
                                "string, default='utf-8'"
                            ], 
                            [
                                "decode_error", 
                                "{'strict', 'ignore', 'replace'}"
                            ], 
                            [
                                "strip_accents", 
                                "{'ascii', 'unicode', None}"
                            ], 
                            [
                                "analyzer", 
                                "string, {'word', 'char', 'char_wb'} or callable"
                            ], 
                            [
                                "preprocessor", 
                                "callable or None (default)"
                            ], 
                            [
                                "tokenizer", 
                                "callable or None (default)"
                            ], 
                            [
                                "ngram_range", 
                                "tuple (min_n, max_n), default=(1, 1)"
                            ], 
                            [
                                "stop_words", 
                                "string {'english'}, list, or None (default)"
                            ], 
                            [
                                "lowercase", 
                                "boolean, default=True"
                            ], 
                            [
                                "token_pattern", 
                                "string"
                            ], 
                            [
                                "n_features", 
                                "integer, default=(2 ** 20)"
                            ], 
                            [
                                "norm", 
                                "'l1', 'l2' or None, optional"
                            ], 
                            [
                                "binary", 
                                "boolean, default=False."
                            ], 
                            [
                                "dtype", 
                                "type, optional"
                            ], 
                            [
                                "alternate_sign", 
                                "boolean, optional, default True"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "non_negative", 
                                "boolean, optional, default False"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X, y=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "iterable over raw text documents, length = n_samples"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "scipy.sparse matrix, shape = (n_samples, self.n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _get_hasher(self):", 
                []
            ], 
            [
                "def _document_frequency(X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, input='content', encoding='utf-8',\n                 decode_error='strict', strip_accents=None,\n                 lowercase=True, preprocessor=None, tokenizer=None,\n                 stop_words=None, token_pattern=r\"(?u)\\b\\w\\w+\\b\",\n                 ngram_range=(1, 1), analyzer='word',\n                 max_df=1.0, min_df=1, max_features=None,\n                 vocabulary=None, binary=False, dtype=np.int64):", 
                [
                    [
                        [
                            [
                                "input", 
                                "string {'filename', 'file', 'content'}"
                            ], 
                            [
                                "encoding", 
                                "string, 'utf-8' by default."
                            ], 
                            [
                                "decode_error", 
                                "{'strict', 'ignore', 'replace'}"
                            ], 
                            [
                                "strip_accents", 
                                "{'ascii', 'unicode', None}"
                            ], 
                            [
                                "analyzer", 
                                "string, {'word', 'char', 'char_wb'} or callable"
                            ], 
                            [
                                "preprocessor", 
                                "callable or None (default)"
                            ], 
                            [
                                "tokenizer", 
                                "callable or None (default)"
                            ], 
                            [
                                "ngram_range", 
                                "tuple (min_n, max_n)"
                            ], 
                            [
                                "stop_words", 
                                "string {'english'}, list, or None (default)"
                            ], 
                            [
                                "lowercase", 
                                "boolean, True by default"
                            ], 
                            [
                                "token_pattern", 
                                "string"
                            ], 
                            [
                                "max_df", 
                                "float in range [0.0, 1.0] or int, default=1.0"
                            ], 
                            [
                                "min_df", 
                                "float in range [0.0, 1.0] or int, default=1"
                            ], 
                            [
                                "max_features", 
                                "int or None, default=None"
                            ], 
                            [
                                "vocabulary", 
                                "Mapping or iterable, optional"
                            ], 
                            [
                                "binary", 
                                "boolean, default=False"
                            ], 
                            [
                                "dtype", 
                                "type, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _sort_features(self, X, vocabulary):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _limit_features(self, X, vocabulary, high=None, low=None,\n                        limit=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _count_vocab(self, raw_documents, fixed_vocab):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, raw_documents, y=None):", 
                [
                    [
                        [
                            [
                                "raw_documents", 
                                "iterable"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def fit_transform(self, raw_documents, y=None):", 
                [
                    [
                        [
                            [
                                "raw_documents", 
                                "iterable"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array, [n_samples, n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, raw_documents):", 
                [
                    [
                        [
                            [
                                "raw_documents", 
                                "iterable"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "sparse matrix, [n_samples, n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array, sparse matrix}, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "X_inv", 
                                "list of arrays, len = n_samples"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def get_feature_names(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _make_int_array():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, norm='l2', use_idf=True, smooth_idf=True,\n                 sublinear_tf=False):", 
                [
                    [
                        [
                            [
                                "norm", 
                                "'l1', 'l2' or None, optional"
                            ], 
                            [
                                "use_idf", 
                                "boolean, default=True"
                            ], 
                            [
                                "smooth_idf", 
                                "boolean, default=True"
                            ], 
                            [
                                "sublinear_tf", 
                                "boolean, default=False"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "sparse matrix, [n_samples, n_features]"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X, copy=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "sparse matrix, [n_samples, n_features]"
                            ], 
                            [
                                "copy", 
                                "boolean, default True"
                            ]
                        ], 
                        [
                            [
                                "vectors", 
                                "sparse matrix, [n_samples, n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def idf_(self):", 
                []
            ], 
            [
                "def __init__(self, input='content', encoding='utf-8',\n                 decode_error='strict', strip_accents=None, lowercase=True,\n                 preprocessor=None, tokenizer=None, analyzer='word',\n                 stop_words=None, token_pattern=r\"(?u)\\b\\w\\w+\\b\",\n                 ngram_range=(1, 1), max_df=1.0, min_df=1,\n                 max_features=None, vocabulary=None, binary=False,\n                 dtype=np.int64, norm='l2', use_idf=True, smooth_idf=True,\n                 sublinear_tf=False):", 
                [
                    [
                        [
                            [
                                "input", 
                                "string {'filename', 'file', 'content'}"
                            ], 
                            [
                                "encoding", 
                                "string, 'utf-8' by default."
                            ], 
                            [
                                "decode_error", 
                                "{'strict', 'ignore', 'replace'}"
                            ], 
                            [
                                "strip_accents", 
                                "{'ascii', 'unicode', None}"
                            ], 
                            [
                                "analyzer", 
                                "string, {'word', 'char'} or callable"
                            ], 
                            [
                                "preprocessor", 
                                "callable or None (default)"
                            ], 
                            [
                                "tokenizer", 
                                "callable or None (default)"
                            ], 
                            [
                                "ngram_range", 
                                "tuple (min_n, max_n)"
                            ], 
                            [
                                "stop_words", 
                                "string {'english'}, list, or None (default)"
                            ], 
                            [
                                "lowercase", 
                                "boolean, default True"
                            ], 
                            [
                                "token_pattern", 
                                "string"
                            ], 
                            [
                                "max_df", 
                                "float in range [0.0, 1.0] or int, default=1.0"
                            ], 
                            [
                                "min_df", 
                                "float in range [0.0, 1.0] or int, default=1"
                            ], 
                            [
                                "max_features", 
                                "int or None, default=None"
                            ], 
                            [
                                "vocabulary", 
                                "Mapping or iterable, optional"
                            ], 
                            [
                                "binary", 
                                "boolean, default=False"
                            ], 
                            [
                                "dtype", 
                                "type, optional"
                            ], 
                            [
                                "norm", 
                                "'l1', 'l2' or None, optional"
                            ], 
                            [
                                "use_idf", 
                                "boolean, default=True"
                            ], 
                            [
                                "smooth_idf", 
                                "boolean, default=True"
                            ], 
                            [
                                "sublinear_tf", 
                                "boolean, default=False"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def norm(self):", 
                []
            ], 
            [
                "def norm(self, value):", 
                []
            ], 
            [
                "def use_idf(self):", 
                []
            ], 
            [
                "def use_idf(self, value):", 
                []
            ], 
            [
                "def smooth_idf(self):", 
                []
            ], 
            [
                "def smooth_idf(self, value):", 
                []
            ], 
            [
                "def sublinear_tf(self):", 
                []
            ], 
            [
                "def sublinear_tf(self, value):", 
                []
            ], 
            [
                "def idf_(self):", 
                []
            ], 
            [
                "def fit(self, raw_documents, y=None):", 
                [
                    [
                        [
                            [
                                "raw_documents", 
                                "iterable"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "TfidfVectorizer"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_transform(self, raw_documents, y=None):", 
                [
                    [
                        [
                            [
                                "raw_documents", 
                                "iterable"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "sparse matrix, [n_samples, n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, raw_documents, copy=True):", 
                [
                    [
                        [
                            [
                                "raw_documents", 
                                "iterable"
                            ], 
                            [
                                "copy", 
                                "boolean, default True"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "sparse matrix, [n_samples, n_features]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        47
    ], 
    "../scikit-learn-master\\benchmarks\\bench_isotonic.py": [
        [
            [
                "def generate_perturbed_logarithm_dataset(size):", 
                []
            ], 
            [
                "def generate_logistic_dataset(size):", 
                []
            ], 
            [
                "def generate_pathological_dataset(size):", 
                []
            ], 
            [
                "def bench_isotonic_regression(Y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_dbscan.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\california_housing.py": [
        [
            [
                "def fetch_california_housing(data_home=None, download_if_missing=True):", 
                [
                    [
                        [
                            [
                                "data_home", 
                                "optional, default"
                            ], 
                            [
                                "download_if_missing", 
                                "optional, True by default"
                            ]
                        ], 
                        [
                            [
                                "dataset", 
                                "dict-like object with the following attributes"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_multiclass.py": [
        [
            [
                "def __init__(self, data):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __array__(self, dtype=None):", 
                []
            ], 
            [
                "def test_unique_labels():", 
                []
            ], 
            [
                "def test_unique_labels_non_specific():", 
                []
            ], 
            [
                "def test_unique_labels_mixed_types():", 
                []
            ], 
            [
                "def test_is_multilabel():", 
                []
            ], 
            [
                "def test_check_classification_targets():", 
                []
            ], 
            [
                "def test_type_of_target():", 
                []
            ], 
            [
                "def test_class_distribution():", 
                []
            ], 
            [
                "def test_safe_split_with_precomputed_kernel():", 
                []
            ]
        ], 
        10
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_lasso_model_selection.py": [
        [
            [
                "def plot_ic_criterion(model, name, color):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\rcv1.py": [
        [
            [
                "def fetch_rcv1(data_home=None, subset='all', download_if_missing=True,\n               random_state=None, shuffle=False):", 
                [
                    [
                        [
                            [
                                "data_home", 
                                "string, optional"
                            ], 
                            [
                                "subset", 
                                "string, 'train', 'test', or 'all', default='all'"
                            ], 
                            [
                                "load", 
                                "'train' for the training set"
                            ], 
                            [
                                "download_if_missing", 
                                "boolean, default=True"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "shuffle", 
                                "bool, default=False"
                            ]
                        ], 
                        [
                            [
                                "dataset", 
                                "dict-like object with the following attributes"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _inverse_permutation(p):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _find_permutation(a, b):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\examples\\neighbors\\plot_regression.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\func_inspect.py": [
        [
            [
                "def get_func_code(func):", 
                [
                    [
                        null, 
                        [
                            [
                                "func_code", 
                                "string"
                            ], 
                            [
                                "source_file", 
                                "string"
                            ], 
                            [
                                "first_line", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _clean_win_chars(string):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get_func_name(func, resolv_alias=True, win_characters=True):", 
                [
                    [
                        [
                            [
                                "func", 
                                "callable"
                            ], 
                            [
                                "resolv_alias", 
                                "boolean, optional"
                            ], 
                            [
                                "win_characters", 
                                "boolean, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def getfullargspec(func):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _signature_str(function_name, arg_spec):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _function_called_str(function_name, args, kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def filter_args(func, ignore_lst, args=(), kwargs=dict()):", 
                [
                    [
                        [
                            [
                                "func", 
                                "callable"
                            ], 
                            [
                                "ignore_lst", 
                                "list of strings"
                            ], 
                            [
                                "*args", 
                                "list"
                            ]
                        ], 
                        [
                            [
                                "filtered_args", 
                                "list"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _format_arg(arg):", 
                []
            ], 
            [
                "def format_signature(func, *args, **kwargs):", 
                []
            ], 
            [
                "def format_call(func, args, kwargs, object_name=\"Memory\"):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        10
    ], 
    "../scikit-learn-master\\examples\\datasets\\plot_random_dataset.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\covariance\\tests\\test_graph_lasso.py": [
        [
            [
                "def test_graph_lasso(random_state=0):", 
                []
            ], 
            [
                "def test_graph_lasso_iris():", 
                []
            ], 
            [
                "def test_graph_lasso_iris_singular():", 
                []
            ], 
            [
                "def test_graph_lasso_cv(random_state=1):", 
                []
            ], 
            [
                "def test_deprecated_grid_scores(random_state=1):", 
                []
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\sklearn\\svm\\setup.py": [
        [
            [
                "def configuration(parent_package='', top_path=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\feature_extraction\\stop_words.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\calibration\\plot_compare_calibration.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\decomposition\\plot_ica_vs_pca.py": [
        [
            [
                "def plot_samples(S, axis_list=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\benchmarks\\bench_plot_randomized_svd.py": [
        [
            [
                "def unpickle(file_name):", 
                []
            ], 
            [
                "def handle_missing_dataset(file_folder):", 
                []
            ], 
            [
                "def get_data(dataset_name):", 
                []
            ], 
            [
                "def plot_time_vs_s(time, norm, point_labels, title):", 
                []
            ], 
            [
                "def scatter_time_vs_s(time, norm, point_labels, title):", 
                []
            ], 
            [
                "def plot_power_iter_vs_s(power_iter, s, title):", 
                []
            ], 
            [
                "def svd_timing(X, n_comps, n_iter, n_oversamples,\n               power_iteration_normalizer='auto', method=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def norm_diff(A, norm=2, msg=True):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def scalable_frobenius_norm_discrepancy(X, U, s, V):", 
                []
            ], 
            [
                "def bench_a(X, dataset_name, power_iter, n_oversamples, n_comps):", 
                []
            ], 
            [
                "def bench_b(power_list):", 
                []
            ], 
            [
                "def bench_c(datasets, n_comps):", 
                []
            ]
        ], 
        12
    ], 
    "../scikit-learn-master\\sklearn\\tree\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\affinity_propagation_.py": [
        [
            [
                "def _equal_similarities_and_preferences(S, preference):", 
                []
            ], 
            [
                "def all_equal_preferences():", 
                []
            ], 
            [
                "def all_equal_similarities():", 
                []
            ], 
            [
                "def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n                         damping=0.5, copy=True, verbose=False,\n                         return_n_iter=False):", 
                [
                    [
                        [
                            [
                                "S", 
                                "array-like, shape (n_samples, n_samples)"
                            ], 
                            [
                                "preference", 
                                "array-like, shape (n_samples,) or float, optional"
                            ], 
                            [
                                "convergence_iter", 
                                "int, optional, default"
                            ], 
                            [
                                "max_iter", 
                                "int, optional, default"
                            ], 
                            [
                                "damping", 
                                "float, optional, default"
                            ], 
                            [
                                "copy", 
                                "boolean, optional, default"
                            ], 
                            [
                                "verbose", 
                                "boolean, optional, default"
                            ], 
                            [
                                "return_n_iter", 
                                "bool, default False"
                            ]
                        ], 
                        [
                            [
                                "cluster_centers_indices", 
                                "array, shape (n_clusters,)"
                            ], 
                            [
                                "labels", 
                                "array, shape (n_samples,)"
                            ], 
                            [
                                "n_iter", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, damping=.5, max_iter=200, convergence_iter=15,\n                 copy=True, preference=None, affinity='euclidean',\n                 verbose=False):", 
                [
                    [
                        [
                            [
                                "damping", 
                                "float, optional, default"
                            ], 
                            [
                                "max_iter", 
                                "int, optional, default"
                            ], 
                            [
                                "convergence_iter", 
                                "int, optional, default"
                            ], 
                            [
                                "copy", 
                                "boolean, optional, default"
                            ], 
                            [
                                "preference", 
                                "array-like, shape (n_samples,) or float, optional"
                            ], 
                            [
                                "affinity", 
                                "string, optional, default=``euclidean``"
                            ], 
                            [
                                "verbose", 
                                "boolean, optional, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _pairwise(self):", 
                []
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features) or (n_samples, n_samples)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "labels", 
                                "array, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\examples\\plot_missing_values.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\doc\\datasets\\labeled_faces_fixture.py": [
        [
            [
                "def setup_module(module):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\svm\\bounds.py": [
        [
            [
                "def l1_min_c(X, y, loss='squared_hinge', fit_intercept=True,\n             intercept_scaling=1.0):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "loss", 
                                "{'squared_hinge', 'log'}, default 'squared_hinge'"
                            ], 
                            [
                                "fit_intercept", 
                                "bool, default"
                            ], 
                            [
                                "intercept_scaling", 
                                "float, default"
                            ]
                        ], 
                        [
                            [
                                "l1_min_c", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\mixture\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\preprocessing\\_function_transformer.py": [
        [
            [
                "def _identity(X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, func=None, inverse_func=None, validate=True,\n                 accept_sparse=False, pass_y='deprecated',\n                 kw_args=None, inv_kw_args=None):", 
                [
                    [
                        [
                            [
                                "func", 
                                "callable, optional default=None"
                            ], 
                            [
                                "inverse_func", 
                                "callable, optional default=None"
                            ], 
                            [
                                "validate", 
                                "bool, optional default=True"
                            ], 
                            [
                                "accept_sparse", 
                                "boolean, optional"
                            ], 
                            [
                                "pass_y", 
                                "bool, optional default=False"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "kw_args", 
                                "dict, optional"
                            ], 
                            [
                                "inv_kw_args", 
                                "dict, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def transform(self, X, y='deprecated'):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "(ignored)"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "X_out", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, X, y='deprecated'):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "(ignored)"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "X_out", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _transform(self, X, y=None, func=None, kw_args=None):", 
                []
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\benchmarks\\bench_sparsify.py": [
        [
            [
                "def sparsity_ratio(X):", 
                []
            ], 
            [
                "def benchmark_dense_predict():", 
                []
            ], 
            [
                "def benchmark_sparse_predict():", 
                []
            ], 
            [
                "def score(y_test, y_pred, case):", 
                []
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\sparse_pca.py": [
        [
            [
                "def __init__(self, n_components=None, alpha=1, ridge_alpha=0.01,\n                 max_iter=1000, tol=1e-8, method='lars', n_jobs=1, U_init=None,\n                 V_init=None, verbose=False, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int,"
                            ], 
                            [
                                "alpha", 
                                "float,"
                            ], 
                            [
                                "ridge_alpha", 
                                "float,"
                            ], 
                            [
                                "max_iter", 
                                "int,"
                            ], 
                            [
                                "tol", 
                                "float,"
                            ], 
                            [
                                "method", 
                                "{'lars', 'cd'}"
                            ], 
                            [
                                "lars", 
                                "uses the least angle regression method to solve the lasso problem"
                            ], 
                            [
                                "cd", 
                                "uses the coordinate descent method to compute the"
                            ], 
                            [
                                "n_jobs", 
                                "int,"
                            ], 
                            [
                                "U_init", 
                                "array of shape (n_samples, n_components),"
                            ], 
                            [
                                "V_init", 
                                "array of shape (n_components, n_features),"
                            ], 
                            [
                                "verbose", 
                                "int"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X, ridge_alpha='deprecated'):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array of shape (n_samples, n_features)"
                            ], 
                            [
                                "ridge_alpha", 
                                "float, default"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=None, alpha=1, ridge_alpha=0.01,\n                 n_iter=100, callback=None, batch_size=3, verbose=False,\n                 shuffle=True, n_jobs=1, method='lars', random_state=None):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int,"
                            ], 
                            [
                                "alpha", 
                                "int,"
                            ], 
                            [
                                "ridge_alpha", 
                                "float,"
                            ], 
                            [
                                "n_iter", 
                                "int,"
                            ], 
                            [
                                "callback", 
                                "callable or None, optional (default"
                            ], 
                            [
                                "batch_size", 
                                "int,"
                            ], 
                            [
                                "verbose", 
                                "int"
                            ], 
                            [
                                "shuffle", 
                                "boolean,"
                            ], 
                            [
                                "n_jobs", 
                                "int,"
                            ], 
                            [
                                "method", 
                                "{'lars', 'cd'}"
                            ], 
                            [
                                "lars", 
                                "uses the least angle regression method to solve the lasso problem"
                            ], 
                            [
                                "cd", 
                                "uses the coordinate descent method to compute the"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\weight_boosting.py": [
        [
            [
                "def __init__(self,\n                 base_estimator=None,\n                 n_estimators=50,\n                 estimator_params=tuple(),\n                 learning_rate=1.,\n                 random_state=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like of shape = [n_samples]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _boost(self, iboost, X, y, sample_weight, random_state):", 
                [
                    [
                        [
                            [
                                "iboost", 
                                "int"
                            ], 
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like of shape = [n_samples]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples]"
                            ], 
                            [
                                "random_state", 
                                "numpy.RandomState"
                            ]
                        ], 
                        [
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples] or None"
                            ], 
                            [
                                "estimator_weight", 
                                "float"
                            ], 
                            [
                                "error", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def staged_score(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "z", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def feature_importances_(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "feature_importances_", 
                                "array, shape = [n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _validate_X_predict(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _samme_proba(estimator, n_classes, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self,\n                 base_estimator=None,\n                 n_estimators=50,\n                 learning_rate=1.,\n                 algorithm='SAMME.R',\n                 random_state=None):", 
                [
                    [
                        [
                            [
                                "base_estimator", 
                                "object, optional (default=DecisionTreeClassifier)"
                            ], 
                            [
                                "n_estimators", 
                                "integer, optional (default=50)"
                            ], 
                            [
                                "learning_rate", 
                                "float, optional (default=1.)"
                            ], 
                            [
                                "algorithm", 
                                "{'SAMME', 'SAMME.R'}, optional (default='SAMME.R')"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like of shape = [n_samples]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _validate_estimator(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _boost(self, iboost, X, y, sample_weight, random_state):", 
                [
                    [
                        [
                            [
                                "iboost", 
                                "int"
                            ], 
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like of shape = [n_samples]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples]"
                            ], 
                            [
                                "random_state", 
                                "numpy.RandomState"
                            ]
                        ], 
                        [
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples] or None"
                            ], 
                            [
                                "estimator_weight", 
                                "float"
                            ], 
                            [
                                "estimator_error", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _boost_real(self, iboost, X, y, sample_weight, random_state):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _boost_discrete(self, iboost, X, y, sample_weight, random_state):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array of shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def staged_predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like of shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "generator of array, shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def decision_function(self, X):", 
                []
            ], 
            [
                "def staged_decision_function(self, X):", 
                []
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "p", 
                                "array of shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def staged_predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "p", 
                                "generator of array, shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_log_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "p", 
                                "array of shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self,\n                 base_estimator=None,\n                 n_estimators=50,\n                 learning_rate=1.,\n                 loss='linear',\n                 random_state=None):", 
                [
                    [
                        [
                            [
                                "base_estimator", 
                                "object, optional (default=DecisionTreeRegressor)"
                            ], 
                            [
                                "n_estimators", 
                                "integer, optional (default=50)"
                            ], 
                            [
                                "learning_rate", 
                                "float, optional (default=1.)"
                            ], 
                            [
                                "loss", 
                                "{'linear', 'square', 'exponential'}, optional (default='linear')"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like of shape = [n_samples]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _validate_estimator(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _boost(self, iboost, X, y, sample_weight, random_state):", 
                [
                    [
                        [
                            [
                                "iboost", 
                                "int"
                            ], 
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like of shape = [n_samples]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples]"
                            ], 
                            [
                                "random_state", 
                                "numpy.RandomState"
                            ]
                        ], 
                        [
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples] or None"
                            ], 
                            [
                                "estimator_weight", 
                                "float"
                            ], 
                            [
                                "estimator_error", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _get_median_predict(self, X, limit):", 
                []
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array of shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def staged_predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} of shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "generator of array, shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        27
    ], 
    "../scikit-learn-master\\sklearn\\feature_selection\\rfe.py": [
        [
            [
                "def _rfe_single_fit(rfe, estimator, X, y, train, test, scorer):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, estimator, n_features_to_select=None, step=1,\n                 verbose=0):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "object"
                            ], 
                            [
                                "n_features_to_select", 
                                "int or None (default=None)"
                            ], 
                            [
                                "step", 
                                "int or float, optional (default=1)"
                            ], 
                            [
                                "verbose", 
                                "int, default=0"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _estimator_type(self):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples]"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _fit(self, X, y, step_score=None):", 
                []
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array of shape [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array of shape [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def score(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array of shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array of shape [n_samples]"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _get_support_mask(self):", 
                []
            ], 
            [
                "def decision_function(self, X):", 
                []
            ], 
            [
                "def predict_proba(self, X):", 
                []
            ], 
            [
                "def predict_log_proba(self, X):", 
                []
            ], 
            [
                "def __init__(self, estimator, step=1, cv=None, scoring=None, verbose=0,\n                 n_jobs=1):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "object"
                            ], 
                            [
                                "step", 
                                "int or float, optional (default=1)"
                            ], 
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "scoring", 
                                "string, callable or None, optional, default"
                            ], 
                            [
                                "verbose", 
                                "int, default=0"
                            ], 
                            [
                                "n_jobs", 
                                "int, default 1"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples]"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        13
    ], 
    "../scikit-learn-master\\sklearn\\svm\\tests\\test_svm.py": [
        [
            [
                "def test_libsvm_parameters():", 
                []
            ], 
            [
                "def test_libsvm_iris():", 
                []
            ], 
            [
                "def test_precomputed():", 
                []
            ], 
            [
                "def test_svr():", 
                []
            ], 
            [
                "def test_linearsvr():", 
                []
            ], 
            [
                "def test_linearsvr_fit_sampleweight():", 
                []
            ], 
            [
                "def test_svr_errors():", 
                []
            ], 
            [
                "def test_oneclass():", 
                []
            ], 
            [
                "def test_oneclass_decision_function():", 
                []
            ], 
            [
                "def test_tweak_params():", 
                []
            ], 
            [
                "def test_probability():", 
                []
            ], 
            [
                "def test_decision_function():", 
                []
            ], 
            [
                "def test_decision_function_shape():", 
                []
            ], 
            [
                "def test_svr_predict():", 
                []
            ], 
            [
                "def test_weight():", 
                []
            ], 
            [
                "def test_sample_weights():", 
                []
            ], 
            [
                "def test_auto_weight():", 
                []
            ], 
            [
                "def test_bad_input():", 
                []
            ], 
            [
                "def test_unicode_kernel():", 
                []
            ], 
            [
                "def test_sparse_precomputed():", 
                []
            ], 
            [
                "def test_linearsvc_parameters():", 
                []
            ], 
            [
                "def test_linearsvx_loss_penalty_deprecations():", 
                []
            ], 
            [
                "def test_linear_svx_uppercase_loss_penality_raises_error():", 
                []
            ], 
            [
                "def test_linearsvc():", 
                []
            ], 
            [
                "def test_linearsvc_crammer_singer():", 
                []
            ], 
            [
                "def test_linearsvc_fit_sampleweight():", 
                []
            ], 
            [
                "def test_crammer_singer_binary():", 
                []
            ], 
            [
                "def test_linearsvc_iris():", 
                []
            ], 
            [
                "def test_dense_liblinear_intercept_handling(classifier=svm.LinearSVC):", 
                []
            ], 
            [
                "def test_liblinear_set_coef():", 
                []
            ], 
            [
                "def test_immutable_coef_property():", 
                []
            ], 
            [
                "def test_linearsvc_verbose():", 
                []
            ], 
            [
                "def test_svc_clone_with_callable_kernel():", 
                []
            ], 
            [
                "def test_svc_bad_kernel():", 
                []
            ], 
            [
                "def test_timeout():", 
                []
            ], 
            [
                "def test_unfitted():", 
                []
            ], 
            [
                "def test_consistent_proba():", 
                []
            ], 
            [
                "def test_linear_svc_convergence_warnings():", 
                []
            ], 
            [
                "def test_svr_coef_sign():", 
                []
            ], 
            [
                "def test_linear_svc_intercept_scaling():", 
                []
            ], 
            [
                "def test_lsvc_intercept_scaling_zero():", 
                []
            ], 
            [
                "def test_hasattr_predict_proba():", 
                []
            ], 
            [
                "def test_decision_function_shape_two_class():", 
                []
            ], 
            [
                "def test_ovr_decision_function():", 
                []
            ]
        ], 
        44
    ], 
    "../scikit-learn-master\\sklearn\\preprocessing\\tests\\test_imputation.py": [
        [
            [
                "def _check_statistics(X, X_true,\n                      strategy, statistics, missing_values):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_imputation_shape():", 
                []
            ], 
            [
                "def test_imputation_mean_median_only_zero():", 
                []
            ], 
            [
                "def safe_median(arr, *args, **kwargs):", 
                []
            ], 
            [
                "def safe_mean(arr, *args, **kwargs):", 
                []
            ], 
            [
                "def test_imputation_mean_median():", 
                []
            ], 
            [
                "def test_imputation_median_special_cases():", 
                []
            ], 
            [
                "def test_imputation_most_frequent():", 
                []
            ], 
            [
                "def test_imputation_pipeline_grid_search():", 
                []
            ], 
            [
                "def test_imputation_pickle():", 
                []
            ], 
            [
                "def test_imputation_copy():", 
                []
            ]
        ], 
        11
    ], 
    "../scikit-learn-master\\examples\\plot_feature_stacker.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\gaussian_process\\correlation_models.py": [
        [
            [
                "def absolute_exponential(theta, d):", 
                [
                    [
                        [
                            [
                                "theta", 
                                "array_like"
                            ], 
                            [
                                "d", 
                                "array_like"
                            ]
                        ], 
                        [
                            [
                                "r", 
                                "array_like"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def squared_exponential(theta, d):", 
                [
                    [
                        [
                            [
                                "theta", 
                                "array_like"
                            ], 
                            [
                                "d", 
                                "array_like"
                            ]
                        ], 
                        [
                            [
                                "r", 
                                "array_like"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def generalized_exponential(theta, d):", 
                [
                    [
                        [
                            [
                                "theta", 
                                "array_like"
                            ], 
                            [
                                "d", 
                                "array_like"
                            ]
                        ], 
                        [
                            [
                                "r", 
                                "array_like"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def pure_nugget(theta, d):", 
                [
                    [
                        [
                            [
                                "theta", 
                                "array_like"
                            ], 
                            [
                                "d", 
                                "array_like"
                            ]
                        ], 
                        [
                            [
                                "r", 
                                "array_like"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def cubic(theta, d):", 
                [
                    [
                        [
                            [
                                "theta", 
                                "array_like"
                            ], 
                            [
                                "d", 
                                "array_like"
                            ]
                        ], 
                        [
                            [
                                "r", 
                                "array_like"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def linear(theta, d):", 
                [
                    [
                        [
                            [
                                "theta", 
                                "array_like"
                            ], 
                            [
                                "d", 
                                "array_like"
                            ]
                        ], 
                        [
                            [
                                "r", 
                                "array_like"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\_memory_helpers.py": [
        [
            [
                "def _get_normal_name(orig_enc):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _detect_encoding(readline):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def read_or_stop():", 
                []
            ], 
            [
                "def find_cookie(line):", 
                []
            ], 
            [
                "def open_py_source(filename):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_omp.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\svm\\plot_svm_scale_c.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\hetero_feature_union.py": [
        [
            [
                "def __init__(self, key):", 
                [
                    [
                        [
                            [
                                "key", 
                                "hashable, required"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, x, y=None):", 
                []
            ], 
            [
                "def transform(self, data_dict):", 
                []
            ], 
            [
                "def fit(self, x, y=None):", 
                []
            ], 
            [
                "def transform(self, posts):", 
                []
            ], 
            [
                "def fit(self, x, y=None):", 
                []
            ], 
            [
                "def transform(self, posts):", 
                []
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\sklearn\\dummy.py": [
        [
            [
                "def __init__(self, strategy=\"stratified\", random_state=None,\n                 constant=None):", 
                [
                    [
                        [
                            [
                                "strategy", 
                                "str, default=\"stratified\""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default=None"
                            ], 
                            [
                                "constant", 
                                "int or str or array of shape = [n_outputs]"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_outputs]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array, shape = [n_samples] or [n_samples, n_outputs]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "P", 
                                "array-like or list of array-lke of shape = [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_log_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "P", 
                                "array-like or list of array-like of shape = [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, strategy=\"mean\", constant=None, quantile=None):", 
                [
                    [
                        [
                            [
                                "strategy", 
                                "str"
                            ], 
                            [
                                "constant", 
                                "int or float or array of shape = [n_outputs]"
                            ], 
                            [
                                "quantile", 
                                "float in [0.0, 1.0]"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples] or [n_samples, n_outputs]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array, shape = [n_samples]  or [n_samples, n_outputs]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\sklearn\\base.py": [
        [
            [
                "def _first_and_last_element(arr):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def clone(estimator, safe=True):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator object, or list, tuple or set of objects"
                            ], 
                            [
                                "safe", 
                                "boolean, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _pprint(params, offset=0, printer=repr):", 
                [
                    [
                        [
                            [
                                "params", 
                                "dict"
                            ], 
                            [
                                "offset", 
                                "int"
                            ], 
                            [
                                "printer", 
                                "callable"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _get_param_names(cls):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get_params(self, deep=True):", 
                [
                    [
                        [
                            [
                                "deep", 
                                "boolean, optional"
                            ]
                        ], 
                        [
                            [
                                "params", 
                                "mapping of string to any"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def set_params(self, **params):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __getstate__(self):", 
                []
            ], 
            [
                "def __setstate__(self, state):", 
                []
            ], 
            [
                "def score(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape = (n_samples) or (n_samples, n_outputs)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples], optional"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def score(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape = (n_samples) or (n_samples, n_outputs)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples], optional"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def fit_predict(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "ndarray, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def biclusters_(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get_indices(self, i):", 
                [
                    [
                        [
                            [
                                "i", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "row_ind", 
                                "np.array, dtype=np.intp"
                            ], 
                            [
                                "col_ind", 
                                "np.array, dtype=np.intp"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def get_shape(self, i):", 
                [
                    [
                        [
                            [
                                "i", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "shape", 
                                "(int, int)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def get_submatrix(self, i, data):", 
                [
                    [
                        [
                            [
                                "i", 
                                "int"
                            ], 
                            [
                                "data", 
                                "array"
                            ]
                        ], 
                        [
                            [
                                "i", 
                                "int"
                            ], 
                            [
                                "data", 
                                "array"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None, **fit_params):", 
                [
                    [
                        [
                            [
                                "X", 
                                "numpy array of shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "numpy array of shape [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "numpy array of shape [n_samples, n_features_new]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def score(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array-like, shape = (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def is_classifier(estimator):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "object"
                            ]
                        ], 
                        [
                            [
                                "estimator", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def is_regressor(estimator):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "object"
                            ]
                        ], 
                        [
                            [
                                "estimator", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        20
    ], 
    "../scikit-learn-master\\benchmarks\\bench_saga.py": [
        [
            [
                "def fit_single(solver, X, y, penalty='l2', single_target=True, C=1,\n               max_iter=10, skip_slow=False):", 
                []
            ], 
            [
                "def _predict_proba(lr, X):", 
                []
            ], 
            [
                "def exp(solvers, penalties, single_target, n_samples=30000, max_iter=20,\n        dataset='rcv1', n_jobs=1, skip_slow=False):", 
                []
            ], 
            [
                "def plot():", 
                []
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\twenty_newsgroups.py": [
        [
            [
                "def download_20newsgroups(target_dir, cache_path):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def strip_newsgroup_header(text):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def strip_newsgroup_quoting(text):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def strip_newsgroup_footer(text):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fetch_20newsgroups(data_home=None, subset='train', categories=None,\n                       shuffle=True, random_state=42,\n                       remove=(),\n                       download_if_missing=True):", 
                [
                    [
                        [
                            [
                                "data_home", 
                                "optional, default"
                            ], 
                            [
                                "subset", 
                                "'train' or 'test', 'all', optional"
                            ], 
                            [
                                "load", 
                                "'train' for the training set, 'test'"
                            ], 
                            [
                                "categories", 
                                "None or collection of string or unicode"
                            ], 
                            [
                                "shuffle", 
                                "bool, optional"
                            ], 
                            [
                                "data", 
                                "might be important for models that"
                            ], 
                            [
                                "random_state", 
                                "numpy random number generator or seed integer"
                            ], 
                            [
                                "remove", 
                                "tuple"
                            ], 
                            [
                                "download_if_missing", 
                                "optional, True by default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fetch_20newsgroups_vectorized(subset=\"train\", remove=(), data_home=None,\n                                  download_if_missing=True):", 
                [
                    [
                        [
                            [
                                "subset", 
                                "'train' or 'test', 'all', optional"
                            ], 
                            [
                                "load", 
                                "'train' for the training set, 'test'"
                            ], 
                            [
                                "remove", 
                                "tuple"
                            ], 
                            [
                                "data_home", 
                                "optional, default"
                            ], 
                            [
                                "download_if_missing", 
                                "optional, True by default"
                            ]
                        ], 
                        [
                            [
                                "bunch", 
                                "Bunch object"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_kmeans_assumptions.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\covariance\\outlier_detection.py": [
        [
            [
                "def __init__(self, store_precision=True, assume_centered=False,\n                 support_fraction=None, contamination=0.1,\n                 random_state=None):", 
                [
                    [
                        [
                            [
                                "store_precision", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "assume_centered", 
                                "boolean, optional (default=False)"
                            ], 
                            [
                                "support_fraction", 
                                "float in (0., 1.), optional (default=None)"
                            ], 
                            [
                                "algorithm", 
                                "`[n_sample + n_features + 1] / 2`."
                            ], 
                            [
                                "contamination", 
                                "float in (0., 0.5), optional (default=0.1)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "numpy array or sparse matrix of shape [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "(ignored)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def decision_function(self, X, raw_values=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "raw_values", 
                                "bool"
                            ]
                        ], 
                        [
                            [
                                "decision", 
                                "array-like, shape (n_samples, )"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "is_outliers", 
                                "array, shape = (n_samples, ), dtype = bool"
                            ], 
                            [
                                "threshold", 
                                "float,"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def score(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape = (n_samples,) or (n_samples, n_outputs)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = (n_samples,), optional"
                            ]
                        ], 
                        []
                    ]
                ]
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\sklearn\\feature_extraction\\dict_vectorizer.py": [
        [
            [
                "def _tosequence(X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, dtype=np.float64, separator=\"=\", sparse=True,\n                 sort=True):", 
                [
                    [
                        [
                            [
                                "dtype", 
                                "callable, optional"
                            ], 
                            [
                                "separator", 
                                "string, optional"
                            ], 
                            [
                                "sparse", 
                                "boolean, optional."
                            ], 
                            [
                                "sort", 
                                "boolean, optional."
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "Mapping or iterable over Mappings"
                            ], 
                            [
                                "y", 
                                "(ignored)"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def _transform(self, X, fitting):", 
                []
            ], 
            [
                "def fit_transform(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "Mapping or iterable over Mappings"
                            ], 
                            [
                                "y", 
                                "(ignored)"
                            ]
                        ], 
                        [
                            [
                                "Xa", 
                                "{array, sparse matrix}"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, X, dict_type=dict):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "dict_type", 
                                "callable, optional"
                            ]
                        ], 
                        [
                            [
                                "D", 
                                "list of dict_type objects, length = n_samples"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "Mapping or iterable over Mappings, length = n_samples"
                            ]
                        ], 
                        [
                            [
                                "Xa", 
                                "{array, sparse matrix}"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def get_feature_names(self):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def restrict(self, support, indices=False):", 
                [
                    [
                        [
                            [
                                "support", 
                                "array-like"
                            ], 
                            [
                                "indices", 
                                "boolean, optional"
                            ]
                        ], 
                        []
                    ]
                ]
            ]
        ], 
        9
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_discriminant_analysis.py": [
        [
            [
                "def test_lda_predict():", 
                []
            ], 
            [
                "def test_lda_priors():", 
                []
            ], 
            [
                "def test_lda_coefs():", 
                []
            ], 
            [
                "def test_lda_transform():", 
                []
            ], 
            [
                "def test_lda_explained_variance_ratio():", 
                []
            ], 
            [
                "def test_lda_orthogonality():", 
                []
            ], 
            [
                "def test_lda_scaling():", 
                []
            ], 
            [
                "def test_lda_store_covariance():", 
                []
            ], 
            [
                "def test_qda():", 
                []
            ], 
            [
                "def test_qda_priors():", 
                []
            ], 
            [
                "def test_qda_store_covariance():", 
                []
            ], 
            [
                "def test_qda_deprecation():", 
                []
            ], 
            [
                "def test_qda_regularization():", 
                []
            ], 
            [
                "def test_covariance():", 
                []
            ]
        ], 
        14
    ], 
    "../scikit-learn-master\\sklearn\\mixture\\gmm.py": [
        [
            [
                "def log_multivariate_normal_density(X, means, covars, covariance_type='diag'):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like, shape (n_samples, n_features)"
                            ], 
                            [
                                "means", 
                                "array_like, shape (n_components, n_features)"
                            ], 
                            [
                                "covars", 
                                "array_like"
                            ], 
                            [
                                "covariance_type", 
                                "string"
                            ]
                        ], 
                        [
                            [
                                "lpr", 
                                "array_like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def sample_gaussian(mean, covar, covariance_type='diag', n_samples=1,\n                    random_state=None):", 
                [
                    [
                        [
                            [
                                "mean", 
                                "array_like, shape (n_features,)"
                            ], 
                            [
                                "covar", 
                                "array_like"
                            ], 
                            [
                                "covariance_type", 
                                "string, optional"
                            ], 
                            [
                                "n_samples", 
                                "int, optional"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _sample_gaussian(mean, covar, covariance_type='diag', n_samples=1,\n                     random_state=None):", 
                []
            ], 
            [
                "def __init__(self, n_components=1, covariance_type='diag',\n                 random_state=None, tol=1e-3, min_covar=1e-3,\n                 n_iter=100, n_init=1, params='wmc', init_params='wmc',\n                 verbose=0):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int, optional"
                            ], 
                            [
                                "covariance_type", 
                                "string, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "min_covar", 
                                "float, optional"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "n_iter", 
                                "int, optional"
                            ], 
                            [
                                "n_init", 
                                "int, optional"
                            ], 
                            [
                                "params", 
                                "string, optional"
                            ], 
                            [
                                "init_params", 
                                "string, optional"
                            ], 
                            [
                                "verbose", 
                                "int, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _get_covars(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _set_covars(self, covars):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def score_samples(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "logprob", 
                                "array_like, shape (n_samples,)"
                            ], 
                            [
                                "responsibilities", 
                                "array_like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def score(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "logprob", 
                                "array_like, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape = (n_samples,) component memberships"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "responsibilities", 
                                "array-like, shape = (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def sample(self, n_samples=1, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_samples", 
                                "int, optional"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array_like, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_predict(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape = (n_samples,) component memberships"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _fit(self, X, y=None, do_prediction=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like, shape (n, n_features)"
                            ]
                        ], 
                        [
                            [
                                "responsibilities", 
                                "array, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like, shape (n, n_features)"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def _do_mstep(self, X, responsibilities, params, min_covar=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _n_parameters(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def bic(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array of shape(n_samples, n_dimensions)"
                            ]
                        ], 
                        [
                            [
                                "bic", 
                                "float (the lower the better)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def aic(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array of shape(n_samples, n_dimensions)"
                            ]
                        ], 
                        [
                            [
                                "aic", 
                                "float (the lower the better)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=1, covariance_type='diag',\n                 random_state=None, tol=1e-3, min_covar=1e-3,\n                 n_iter=100, n_init=1, params='wmc', init_params='wmc',\n                 verbose=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _log_multivariate_normal_density_diag(X, means, covars):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _log_multivariate_normal_density_spherical(X, means, covars):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _log_multivariate_normal_density_tied(X, means, covars):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _log_multivariate_normal_density_full(X, means, covars, min_covar=1.e-7):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _validate_covars(covars, covariance_type, n_components):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def distribute_covar_matrix_to_match_covariance_type(\n        tied_cv, covariance_type, n_components):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _covar_mstep_diag(gmm, X, responsibilities, weighted_X_sum, norm,\n                      min_covar):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _covar_mstep_spherical(*args):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _covar_mstep_full(gmm, X, responsibilities, weighted_X_sum, norm,\n                      min_covar):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _covar_mstep_tied(gmm, X, responsibilities, weighted_X_sum, norm,\n                      min_covar):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        29
    ], 
    "../scikit-learn-master\\examples\\tree\\plot_tree_regression.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_random_forest_embedding.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\__init__.py": [
        [
            [
                "def get_config():", 
                [
                    [
                        null, 
                        [
                            [
                                "config", 
                                "dict"
                            ], 
                            [
                                "to", 
                                "func"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def set_config(assume_finite=None):", 
                [
                    [
                        [
                            [
                                "assume_finite", 
                                "bool, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def config_context(**new_config):", 
                [
                    [
                        [
                            [
                                "assume_finite", 
                                "bool, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def setup_module(module):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_dummy.py": [
        [
            [
                "def _check_predict_proba(clf, X, y):", 
                []
            ], 
            [
                "def _check_behavior_2d(clf):", 
                []
            ], 
            [
                "def _check_behavior_2d_for_constant(clf):", 
                []
            ], 
            [
                "def _check_equality_regressor(statistic, y_learn, y_pred_learn,\n                              y_test, y_pred_test):", 
                []
            ], 
            [
                "def test_most_frequent_and_prior_strategy():", 
                []
            ], 
            [
                "def test_most_frequent_and_prior_strategy_multioutput():", 
                []
            ], 
            [
                "def test_stratified_strategy():", 
                []
            ], 
            [
                "def test_stratified_strategy_multioutput():", 
                []
            ], 
            [
                "def test_uniform_strategy():", 
                []
            ], 
            [
                "def test_uniform_strategy_multioutput():", 
                []
            ], 
            [
                "def test_string_labels():", 
                []
            ], 
            [
                "def test_classifier_exceptions():", 
                []
            ], 
            [
                "def test_mean_strategy_regressor():", 
                []
            ], 
            [
                "def test_mean_strategy_multioutput_regressor():", 
                []
            ], 
            [
                "def test_regressor_exceptions():", 
                []
            ], 
            [
                "def test_median_strategy_regressor():", 
                []
            ], 
            [
                "def test_median_strategy_multioutput_regressor():", 
                []
            ], 
            [
                "def test_quantile_strategy_regressor():", 
                []
            ], 
            [
                "def test_quantile_strategy_multioutput_regressor():", 
                []
            ], 
            [
                "def test_quantile_invalid():", 
                []
            ], 
            [
                "def test_quantile_strategy_empty_train():", 
                []
            ], 
            [
                "def test_constant_strategy_regressor():", 
                []
            ], 
            [
                "def test_constant_strategy_multioutput_regressor():", 
                []
            ], 
            [
                "def test_y_mean_attribute_regressor():", 
                []
            ], 
            [
                "def test_unknown_strategey_regressor():", 
                []
            ], 
            [
                "def test_constants_not_specified_regressor():", 
                []
            ], 
            [
                "def test_constant_size_multioutput_regressor():", 
                []
            ], 
            [
                "def test_constant_strategy():", 
                []
            ], 
            [
                "def test_constant_strategy_multioutput():", 
                []
            ], 
            [
                "def test_constant_strategy_exceptions():", 
                []
            ], 
            [
                "def test_classification_sample_weight():", 
                []
            ], 
            [
                "def test_constant_strategy_sparse_target():", 
                []
            ], 
            [
                "def test_uniform_strategy_sparse_target_warning():", 
                []
            ], 
            [
                "def test_stratified_strategy_sparse_target():", 
                []
            ], 
            [
                "def test_most_frequent_and_prior_strategy_sparse_target():", 
                []
            ], 
            [
                "def test_dummy_regressor_sample_weight(n_samples=10):", 
                []
            ], 
            [
                "def test_dummy_classifier_on_nan_value():", 
                []
            ], 
            [
                "def test_dummy_regressor_on_nan_value():", 
                []
            ]
        ], 
        38
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\kernel_pca.py": [
        [
            [
                "def __init__(self, n_components=None, kernel=\"linear\",\n                 gamma=None, degree=3, coef0=1, kernel_params=None,\n                 alpha=1.0, fit_inverse_transform=False, eigen_solver='auto',\n                 tol=0, max_iter=None, remove_zero_eig=False,\n                 random_state=None, copy_X=True, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int, default=None"
                            ], 
                            [
                                "kernel", 
                                "\"linear\" | \"poly\" | \"rbf\" | \"sigmoid\" | \"cosine\" | \"precomputed\""
                            ], 
                            [
                                "gamma", 
                                "float, default=1/n_features"
                            ], 
                            [
                                "degree", 
                                "int, default=3"
                            ], 
                            [
                                "coef0", 
                                "float, default=1"
                            ], 
                            [
                                "kernel_params", 
                                "mapping of string to any, default=None"
                            ], 
                            [
                                "alpha", 
                                "int, default=1.0"
                            ], 
                            [
                                "fit_inverse_transform", 
                                "bool, default=False"
                            ], 
                            [
                                "eigen_solver", 
                                "string ['auto'|'dense'|'arpack'], default='auto'"
                            ], 
                            [
                                "tol", 
                                "float, default=0"
                            ], 
                            [
                                "max_iter", 
                                "int, default=None"
                            ], 
                            [
                                "remove_zero_eig", 
                                "boolean, default=False"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "copy_X", 
                                "boolean, default=True"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "n_jobs", 
                                "int, default=1"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _pairwise(self):", 
                []
            ], 
            [
                "def _get_kernel(self, X, Y=None):", 
                []
            ], 
            [
                "def _fit_transform(self, K):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _fit_inverse_transform(self, X_transformed, X):", 
                []
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None, **params):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def inverse_transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        9
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_adaboost_hastie_10_2.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\mean_shift_.py": [
        [
            [
                "def estimate_bandwidth(X, quantile=0.3, n_samples=None, random_state=0,\n                       n_jobs=1):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape=[n_samples, n_features]"
                            ], 
                            [
                                "quantile", 
                                "float, default 0.3"
                            ], 
                            [
                                "n_samples", 
                                "int, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default = 1)"
                            ]
                        ], 
                        [
                            [
                                "bandwidth", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _mean_shift_single_seed(my_mean, X, nbrs, max_iter):", 
                []
            ], 
            [
                "def mean_shift(X, bandwidth=None, seeds=None, bin_seeding=False,\n               min_bin_freq=1, cluster_all=True, max_iter=300,\n               n_jobs=1):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape=[n_samples, n_features]"
                            ], 
                            [
                                "bandwidth", 
                                "float, optional"
                            ], 
                            [
                                "seeds", 
                                "array-like, shape=[n_seeds, n_features] or None"
                            ], 
                            [
                                "bin_seeding", 
                                "boolean, default=False"
                            ], 
                            [
                                "min_bin_freq", 
                                "int, default=1"
                            ], 
                            [
                                "cluster_all", 
                                "boolean, default True"
                            ], 
                            [
                                "max_iter", 
                                "int, default 300"
                            ], 
                            [
                                "n_jobs", 
                                "int"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "cluster_centers", 
                                "array, shape=[n_clusters, n_features]"
                            ], 
                            [
                                "labels", 
                                "array, shape=[n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def get_bin_seeds(X, bin_size, min_bin_freq=1):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape=[n_samples, n_features]"
                            ], 
                            [
                                "bin_size", 
                                "float"
                            ], 
                            [
                                "min_bin_freq", 
                                "integer, optional"
                            ]
                        ], 
                        [
                            [
                                "bin_seeds", 
                                "array-like, shape=[n_samples, n_features]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, bandwidth=None, seeds=None, bin_seeding=False,\n                 min_bin_freq=1, cluster_all=True, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "bandwidth", 
                                "float, optional"
                            ], 
                            [
                                "seeds", 
                                "array, shape=[n_samples, n_features], optional"
                            ], 
                            [
                                "bin_seeding", 
                                "boolean, optional"
                            ], 
                            [
                                "value", 
                                "False"
                            ], 
                            [
                                "min_bin_freq", 
                                "int, optional"
                            ], 
                            [
                                "cluster_all", 
                                "boolean, default True"
                            ], 
                            [
                                "n_jobs", 
                                "int"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape=[n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape=[n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "labels", 
                                "array, shape [n_samples,]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\sklearn\\discriminant_analysis.py": [
        [
            [
                "def _cov(X, shrinkage=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "shrinkage", 
                                "string or float, optional"
                            ], 
                            [
                                "values", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "s", 
                                "array, shape (n_features, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _class_means(X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,) or (n_samples, n_targets)"
                            ]
                        ], 
                        [
                            [
                                "means", 
                                "array-like, shape (n_features,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _class_cov(X, y, priors=None, shrinkage=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,) or (n_samples, n_targets)"
                            ], 
                            [
                                "priors", 
                                "array-like, shape (n_classes,)"
                            ], 
                            [
                                "shrinkage", 
                                "string or float, optional"
                            ], 
                            [
                                "values", 
                                ""
                            ], 
                            [
                                "None", 
                                "no shrinkage (default)."
                            ]
                        ], 
                        [
                            [
                                "cov", 
                                "array-like, shape (n_features, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, solver='svd', shrinkage=None, priors=None,\n                 n_components=None, store_covariance=False, tol=1e-4):", 
                [
                    [
                        [
                            [
                                "solver", 
                                "string, optional"
                            ], 
                            [
                                "values", 
                                ""
                            ], 
                            [
                                "shrinkage", 
                                "string or float, optional"
                            ], 
                            [
                                "values", 
                                ""
                            ], 
                            [
                                "None", 
                                "no shrinkage (default)."
                            ], 
                            [
                                "priors", 
                                "array, optional, shape (n_classes,)"
                            ], 
                            [
                                "n_components", 
                                "int, optional"
                            ], 
                            [
                                "store_covariance", 
                                "bool, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "tol", 
                                "float, optional, (default 1.0e-4)"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _solve_lsqr(self, X, y, shrinkage):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,) or (n_samples, n_classes)"
                            ], 
                            [
                                "shrinkage", 
                                "string or float, optional"
                            ], 
                            [
                                "values", 
                                ""
                            ], 
                            [
                                "None", 
                                "no shrinkage (default)."
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _solve_eigen(self, X, y, shrinkage):", 
                []
            ], 
            [
                "def _solve_svd(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,) or (n_samples, n_targets)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array, shape (n_samples,)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_log_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape (n_samples, n_classes)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, priors=None, reg_param=0., store_covariance=False,\n                 tol=1.0e-4, store_covariances=None):", 
                [
                    [
                        [
                            [
                                "priors", 
                                "array, optional, shape = [n_classes]"
                            ], 
                            [
                                "reg_param", 
                                "float, optional"
                            ], 
                            [
                                "store_covariance", 
                                "boolean"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "tol", 
                                "float, optional, default 1.0e-4"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def covariances_(self):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array, shape = [n_samples]"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _decision_function(self, X):", 
                []
            ], 
            [
                "def decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape = [n_samples, n_classes] or [n_samples,]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape = [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_log_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape = [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        19
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\tests\\test_birch.py": [
        [
            [
                "def test_n_samples_leaves_roots():", 
                []
            ], 
            [
                "def test_partial_fit():", 
                []
            ], 
            [
                "def test_birch_predict():", 
                []
            ], 
            [
                "def test_n_clusters():", 
                []
            ], 
            [
                "def test_sparse_X():", 
                []
            ], 
            [
                "def check_branching_factor(node, branching_factor):", 
                []
            ], 
            [
                "def test_branching_factor():", 
                []
            ], 
            [
                "def check_threshold(birch_instance, threshold):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_threshold():", 
                []
            ]
        ], 
        9
    ], 
    "../scikit-learn-master\\doc\\datasets\\mldata_fixture.py": [
        [
            [
                "def setup_module():", 
                []
            ], 
            [
                "def teardown_module():", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_face_ward_segmentation.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\tests\\test_truncated_svd.py": [
        [
            [
                "def test_algorithms():", 
                []
            ], 
            [
                "def test_attributes():", 
                []
            ], 
            [
                "def test_too_many_components():", 
                []
            ], 
            [
                "def test_sparse_formats():", 
                []
            ], 
            [
                "def test_inverse_transform():", 
                []
            ], 
            [
                "def test_integers():", 
                []
            ], 
            [
                "def test_explained_variance():", 
                []
            ], 
            [
                "def test_singular_values():", 
                []
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\tests\\test_kddcup99.py": [
        [
            [
                "def test_percent10():", 
                []
            ], 
            [
                "def test_shuffle():", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\feature_selection\\tests\\test_rfe.py": [
        [
            [
                "def __init__(self, foo_param=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, Y):", 
                []
            ], 
            [
                "def predict(self, T):", 
                []
            ], 
            [
                "def score(self, X=None, Y=None):", 
                []
            ], 
            [
                "def get_params(self, deep=True):", 
                []
            ], 
            [
                "def set_params(self, **params):", 
                []
            ], 
            [
                "def test_rfe_features_importance():", 
                []
            ], 
            [
                "def test_rfe():", 
                []
            ], 
            [
                "def test_rfe_mockclassifier():", 
                []
            ], 
            [
                "def test_rfecv():", 
                []
            ], 
            [
                "def test_scorer(estimator, X, y):", 
                []
            ], 
            [
                "def test_rfecv_mockclassifier():", 
                []
            ], 
            [
                "def test_rfecv_verbose_output():", 
                []
            ], 
            [
                "def test_rfe_estimator_tags():", 
                []
            ], 
            [
                "def test_rfe_min_step():", 
                []
            ], 
            [
                "def test_number_of_subsets_of_features():", 
                []
            ], 
            [
                "def formula1(n_features, n_features_to_select, step):", 
                []
            ], 
            [
                "def formula2(n_features, n_features_to_select, step):", 
                []
            ], 
            [
                "def test_rfe_cv_n_jobs():", 
                []
            ]
        ], 
        19
    ], 
    "../scikit-learn-master\\examples\\model_selection\\plot_confusion_matrix.py": [
        [
            [
                "def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_ridge_path.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\applications\\plot_stock_market.py": [
        [
            [
                "def retry(f, n_attempts=3):", 
                []
            ], 
            [
                "def wrapper(*args, **kwargs):", 
                []
            ], 
            [
                "def quotes_historical_google(symbol, start_date, end_date):", 
                [
                    [
                        [
                            [
                                "symbol", 
                                "str"
                            ], 
                            [
                                "start_date", 
                                "datetime.datetime"
                            ], 
                            [
                                "end_date", 
                                "datetime.datetime"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_adaboost_regression.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\feature_selection\\plot_f_test_vs_mi.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\benchmarks\\bench_plot_incremental_pca.py": [
        [
            [
                "def plot_results(X, y, label):", 
                []
            ], 
            [
                "def benchmark(estimator, data):", 
                []
            ], 
            [
                "def plot_feature_times(all_times, batch_size, all_components, data):", 
                []
            ], 
            [
                "def plot_feature_errors(all_errors, batch_size, all_components, data):", 
                []
            ], 
            [
                "def plot_batch_times(all_times, n_features, all_batch_sizes, data):", 
                []
            ], 
            [
                "def plot_batch_errors(all_errors, n_features, all_batch_sizes, data):", 
                []
            ], 
            [
                "def fixed_batch_size_comparison(data):", 
                []
            ], 
            [
                "def variable_batch_size_comparison(data):", 
                []
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\sklearn\\manifold\\t_sne.py": [
        [
            [
                "def _joint_probabilities(distances, desired_perplexity, verbose):", 
                [
                    [
                        [
                            [
                                "distances", 
                                "array, shape (n_samples * (n_samples-1) / 2,)"
                            ], 
                            [
                                "desired_perplexity", 
                                "float"
                            ], 
                            [
                                "verbose", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "P", 
                                "array, shape (n_samples * (n_samples-1) / 2,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _joint_probabilities_nn(distances, neighbors, desired_perplexity, verbose):", 
                [
                    [
                        [
                            [
                                "distances", 
                                "array, shape (n_samples, k)"
                            ], 
                            [
                                "neighbors", 
                                "array, shape (n_samples, k)"
                            ], 
                            [
                                "desired_perplexity", 
                                "float"
                            ], 
                            [
                                "verbose", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "P", 
                                "csr sparse matrix, shape (n_samples, n_samples)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _kl_divergence(params, P, degrees_of_freedom, n_samples, n_components,\n                   skip_num_points=0):", 
                [
                    [
                        [
                            [
                                "params", 
                                "array, shape (n_params,)"
                            ], 
                            [
                                "P", 
                                "array, shape (n_samples * (n_samples-1) / 2,)"
                            ], 
                            [
                                "degrees_of_freedom", 
                                "float"
                            ], 
                            [
                                "n_samples", 
                                "int"
                            ], 
                            [
                                "n_components", 
                                "int"
                            ], 
                            [
                                "skip_num_points", 
                                "int (optional, default"
                            ]
                        ], 
                        [
                            [
                                "kl_divergence", 
                                "float"
                            ], 
                            [
                                "grad", 
                                "array, shape (n_params,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _kl_divergence_bh(params, P, degrees_of_freedom, n_samples, n_components,\n                      angle=0.5, skip_num_points=0, verbose=False):", 
                [
                    [
                        [
                            [
                                "params", 
                                "array, shape (n_params,)"
                            ], 
                            [
                                "P", 
                                "csr sparse matrix, shape (n_samples, n_sample)"
                            ], 
                            [
                                "degrees_of_freedom", 
                                "float"
                            ], 
                            [
                                "n_samples", 
                                "int"
                            ], 
                            [
                                "n_components", 
                                "int"
                            ], 
                            [
                                "angle", 
                                "float (default"
                            ], 
                            [
                                "skip_num_points", 
                                "int (optional, default"
                            ], 
                            [
                                "verbose", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "kl_divergence", 
                                "float"
                            ], 
                            [
                                "grad", 
                                "array, shape (n_params,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _gradient_descent(objective, p0, it, n_iter,\n                      n_iter_check=1, n_iter_without_progress=300,\n                      momentum=0.8, learning_rate=200.0, min_gain=0.01,\n                      min_grad_norm=1e-7, verbose=0, args=None, kwargs=None):", 
                [
                    [
                        [
                            [
                                "objective", 
                                "function or callable"
                            ], 
                            [
                                "p0", 
                                "array-like, shape (n_params,)"
                            ], 
                            [
                                "it", 
                                "int"
                            ], 
                            [
                                "n_iter", 
                                "int"
                            ], 
                            [
                                "n_iter_check", 
                                "int"
                            ], 
                            [
                                "n_iter_without_progress", 
                                "int, optional (default"
                            ], 
                            [
                                "momentum", 
                                "float, within (0.0, 1.0), optional (default"
                            ], 
                            [
                                "learning_rate", 
                                "float, optional (default"
                            ], 
                            [
                                "min_gain", 
                                "float, optional (default"
                            ], 
                            [
                                "min_grad_norm", 
                                "float, optional (default"
                            ], 
                            [
                                "verbose", 
                                "int, optional (default"
                            ], 
                            [
                                "args", 
                                "sequence"
                            ], 
                            [
                                "kwargs", 
                                "dict"
                            ]
                        ], 
                        [
                            [
                                "p", 
                                "array, shape (n_params,)"
                            ], 
                            [
                                "error", 
                                "float"
                            ], 
                            [
                                "i", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def trustworthiness(X, X_embedded, n_neighbors=5, precomputed=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples, n_features) or (n_samples, n_samples)"
                            ], 
                            [
                                "X_embedded", 
                                "array, shape (n_samples, n_components)"
                            ], 
                            [
                                "n_neighbors", 
                                "int, optional (default"
                            ], 
                            [
                                "precomputed", 
                                "bool, optional (default"
                            ]
                        ], 
                        [
                            [
                                "trustworthiness", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=2, perplexity=30.0,\n                 early_exaggeration=12.0, learning_rate=200.0, n_iter=1000,\n                 n_iter_without_progress=300, min_grad_norm=1e-7,\n                 metric=\"euclidean\", init=\"random\", verbose=0,\n                 random_state=None, method='barnes_hut', angle=0.5):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int, optional (default"
                            ], 
                            [
                                "perplexity", 
                                "float, optional (default"
                            ], 
                            [
                                "early_exaggeration", 
                                "float, optional (default"
                            ], 
                            [
                                "learning_rate", 
                                "float, optional (default"
                            ], 
                            [
                                "n_iter", 
                                "int, optional (default"
                            ], 
                            [
                                "n_iter_without_progress", 
                                "int, optional (default"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "min_grad_norm", 
                                "float, optional (default"
                            ], 
                            [
                                "metric", 
                                "string or callable, optional"
                            ], 
                            [
                                "init", 
                                "string or numpy array, optional (default"
                            ], 
                            [
                                "verbose", 
                                "int, optional (default"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default"
                            ], 
                            [
                                "method", 
                                "string (default"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "angle", 
                                "float (default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _fit(self, X, skip_num_points=0):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples, n_features) or (n_samples, n_samples)"
                            ], 
                            [
                                "skip_num_points", 
                                "int (optional, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def n_iter_final(self):", 
                []
            ], 
            [
                "def _tsne(self, P, degrees_of_freedom, n_samples, random_state, X_embedded,\n              neighbors=None, skip_num_points=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples, n_features) or (n_samples, n_samples)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples, n_features) or (n_samples, n_samples)"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        12
    ], 
    "../scikit-learn-master\\doc\\sphinxext\\sphinx_issues.py": [
        [
            [
                "def user_role(name, rawtext, text, lineno,\n              inliner, options=None, content=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _make_issue_node(issue_no, config, options=None):", 
                []
            ], 
            [
                "def issue_role(name, rawtext, text, lineno,\n               inliner, options=None, content=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def setup(app):", 
                []
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\sklearn\\model_selection\\_split.py": [
        [
            [
                "def __init__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def split(self, X, y=None, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, of length n_samples"
                            ], 
                            [
                                "groups", 
                                "array-like, with shape (n_samples,), optional"
                            ]
                        ], 
                        [
                            [
                                "train", 
                                "ndarray"
                            ], 
                            [
                                "test", 
                                "ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _iter_test_masks(self, X=None, y=None, groups=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _iter_test_indices(self, X=None, y=None, groups=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get_n_splits(self, X=None, y=None, groups=None):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def _iter_test_indices(self, X, y=None, groups=None):", 
                []
            ], 
            [
                "def get_n_splits(self, X, y=None, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "object"
                            ], 
                            [
                                "groups", 
                                "object"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def __init__(self, p):", 
                [
                    [
                        [
                            [
                                "p", 
                                "int"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _iter_test_indices(self, X, y=None, groups=None):", 
                []
            ], 
            [
                "def get_n_splits(self, X, y=None, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "object"
                            ], 
                            [
                                "groups", 
                                "object"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def __init__(self, n_splits, shuffle, random_state):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def split(self, X, y=None, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "groups", 
                                "array-like, with shape (n_samples,), optional"
                            ]
                        ], 
                        [
                            [
                                "train", 
                                "ndarray"
                            ], 
                            [
                                "test", 
                                "ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def get_n_splits(self, X=None, y=None, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "object"
                            ], 
                            [
                                "y", 
                                "object"
                            ], 
                            [
                                "groups", 
                                "object"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def __init__(self, n_splits=3, shuffle=False,\n                 random_state=None):", 
                [
                    [
                        [
                            [
                                "n_splits", 
                                "int, default=3"
                            ], 
                            [
                                "shuffle", 
                                "boolean, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default=None"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _iter_test_indices(self, X, y=None, groups=None):", 
                []
            ], 
            [
                "def __init__(self, n_splits=3):", 
                [
                    [
                        [
                            [
                                "n_splits", 
                                "int, default=3"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _iter_test_indices(self, X, y, groups):", 
                []
            ], 
            [
                "def __init__(self, n_splits=3, shuffle=False, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_splits", 
                                "int, default=3"
                            ], 
                            [
                                "shuffle", 
                                "boolean, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default=None"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _make_test_folds(self, X, y=None):", 
                []
            ], 
            [
                "def _iter_test_masks(self, X, y=None, groups=None):", 
                []
            ], 
            [
                "def split(self, X, y, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "groups", 
                                "object"
                            ]
                        ], 
                        [
                            [
                                "train", 
                                "ndarray"
                            ], 
                            [
                                "test", 
                                "ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_splits=3, max_train_size=None):", 
                [
                    [
                        [
                            [
                                "n_splits", 
                                "int, default=3"
                            ], 
                            [
                                "max_train_size", 
                                "int, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def split(self, X, y=None, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "groups", 
                                "array-like, with shape (n_samples,), optional"
                            ]
                        ], 
                        [
                            [
                                "train", 
                                "ndarray"
                            ], 
                            [
                                "test", 
                                "ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _iter_test_masks(self, X, y, groups):", 
                []
            ], 
            [
                "def get_n_splits(self, X=None, y=None, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "object, optional"
                            ], 
                            [
                                "y", 
                                "object, optional"
                            ], 
                            [
                                "groups", 
                                "array-like, with shape (n_samples,), optional"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def __init__(self, n_groups):", 
                [
                    [
                        [
                            [
                                "n_groups", 
                                "int"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _iter_test_masks(self, X, y, groups):", 
                []
            ], 
            [
                "def get_n_splits(self, X=None, y=None, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "object, optional"
                            ], 
                            [
                                "y", 
                                "object, optional"
                            ], 
                            [
                                "groups", 
                                "array-like, with shape (n_samples,), optional"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def __init__(self, cv, n_repeats=10, random_state=None, **cvargs):", 
                [
                    [
                        [
                            [
                                "cv", 
                                "callable"
                            ], 
                            [
                                "n_repeats", 
                                "int, default=10"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default=None"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def split(self, X, y=None, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, of length n_samples"
                            ], 
                            [
                                "groups", 
                                "array-like, with shape (n_samples,), optional"
                            ]
                        ], 
                        [
                            [
                                "train", 
                                "ndarray"
                            ], 
                            [
                                "test", 
                                "ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def get_n_splits(self, X=None, y=None, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "object"
                            ], 
                            [
                                "y", 
                                "object"
                            ], 
                            [
                                "groups", 
                                "array-like, with shape (n_samples,), optional"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def __init__(self, n_splits=5, n_repeats=10, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_splits", 
                                "int, default=5"
                            ], 
                            [
                                "n_repeats", 
                                "int, default=10"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default=None"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, n_splits=5, n_repeats=10, random_state=None):", 
                [
                    [
                        [
                            [
                                "n_splits", 
                                "int, default=5"
                            ], 
                            [
                                "n_repeats", 
                                "int, default=10"
                            ], 
                            [
                                "random_state", 
                                "None, int or RandomState, default=None"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, n_splits=10, test_size=\"default\", train_size=None,\n                 random_state=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def split(self, X, y=None, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "groups", 
                                "array-like, with shape (n_samples,), optional"
                            ]
                        ], 
                        [
                            [
                                "train", 
                                "ndarray"
                            ], 
                            [
                                "test", 
                                "ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _iter_indices(self, X, y=None, groups=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get_n_splits(self, X=None, y=None, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "object"
                            ], 
                            [
                                "y", 
                                "object"
                            ], 
                            [
                                "groups", 
                                "object"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def _iter_indices(self, X, y=None, groups=None):", 
                []
            ], 
            [
                "def __init__(self, n_splits=5, test_size=\"default\", train_size=None,\n                 random_state=None):", 
                [
                    [
                        [
                            [
                                "n_splits", 
                                "int (default 5)"
                            ], 
                            [
                                "test_size", 
                                "float, int, None, optional"
                            ], 
                            [
                                "train_size", 
                                "float, int, or None, default is None"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _iter_indices(self, X, y, groups):", 
                []
            ], 
            [
                "def _approximate_mode(class_counts, n_draws, rng):", 
                [
                    [
                        [
                            [
                                "class_counts", 
                                "ndarray of int"
                            ], 
                            [
                                "n_draws", 
                                "int"
                            ], 
                            [
                                "rng", 
                                "random state"
                            ]
                        ], 
                        [
                            [
                                "sampled_classes", 
                                "ndarray of int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_splits=10, test_size=\"default\", train_size=None,\n                 random_state=None):", 
                [
                    [
                        [
                            [
                                "n_splits", 
                                "int, default 10"
                            ], 
                            [
                                "test_size", 
                                "float, int, None, optional"
                            ], 
                            [
                                "train_size", 
                                "float, int, or None, default is None"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _iter_indices(self, X, y, groups=None):", 
                []
            ], 
            [
                "def split(self, X, y, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "groups", 
                                "object"
                            ]
                        ], 
                        [
                            [
                                "train", 
                                "ndarray"
                            ], 
                            [
                                "test", 
                                "ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _validate_shuffle_split_init(test_size, train_size):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _validate_shuffle_split(n_samples, test_size, train_size):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, test_fold):", 
                [
                    [
                        [
                            [
                                "test_fold", 
                                "array-like, shape (n_samples,)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def split(self, X=None, y=None, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "object"
                            ], 
                            [
                                "y", 
                                "object"
                            ], 
                            [
                                "groups", 
                                "object"
                            ]
                        ], 
                        [
                            [
                                "train", 
                                "ndarray"
                            ], 
                            [
                                "test", 
                                "ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _iter_test_masks(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get_n_splits(self, X=None, y=None, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "object"
                            ], 
                            [
                                "y", 
                                "object"
                            ], 
                            [
                                "groups", 
                                "object"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def __init__(self, cv):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get_n_splits(self, X=None, y=None, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "object"
                            ], 
                            [
                                "y", 
                                "object"
                            ], 
                            [
                                "groups", 
                                "object"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def split(self, X=None, y=None, groups=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "object"
                            ], 
                            [
                                "y", 
                                "object"
                            ], 
                            [
                                "groups", 
                                "object"
                            ]
                        ], 
                        [
                            [
                                "train", 
                                "ndarray"
                            ], 
                            [
                                "test", 
                                "ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def check_cv(cv=3, y=None, classifier=False):", 
                [
                    [
                        [
                            [
                                "cv", 
                                "int, cross-validation generator or an iterable, optional"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "Refer", 
                                "ref"
                            ], 
                            [
                                "y", 
                                "array-like, optional"
                            ], 
                            [
                                "classifier", 
                                "boolean, optional, default False"
                            ]
                        ], 
                        [
                            [
                                "checked_cv", 
                                "a cross-validator instance."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def train_test_split(*arrays, **options):", 
                [
                    [
                        [
                            [
                                "*arrays", 
                                "sequence of indexables with same length / shape[0]"
                            ], 
                            [
                                "test_size", 
                                "float, int, None, optional"
                            ], 
                            [
                                "train_size", 
                                "float, int, or None, default None"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "shuffle", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "stratify", 
                                "array-like or None (default is None)"
                            ]
                        ], 
                        [
                            [
                                "splitting", 
                                "list, length=2 * len(arrays)"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _build_repr(self):", 
                []
            ]
        ], 
        58
    ], 
    "../scikit-learn-master\\examples\\manifold\\plot_compare_methods.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\applications\\plot_topics_extraction_with_nmf_lda.py": [
        [
            [
                "def print_top_words(model, feature_names, n_top_words):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\neural_network\\tests\\test_mlp.py": [
        [
            [
                "def test_alpha():", 
                []
            ], 
            [
                "def test_fit():", 
                []
            ], 
            [
                "def test_gradient():", 
                []
            ], 
            [
                "def loss_grad_fun(t):", 
                []
            ], 
            [
                "def test_lbfgs_classification():", 
                []
            ], 
            [
                "def test_lbfgs_regression():", 
                []
            ], 
            [
                "def test_learning_rate_warmstart():", 
                []
            ], 
            [
                "def test_multilabel_classification():", 
                []
            ], 
            [
                "def test_multioutput_regression():", 
                []
            ], 
            [
                "def test_partial_fit_classes_error():", 
                []
            ], 
            [
                "def test_partial_fit_classification():", 
                []
            ], 
            [
                "def test_partial_fit_unseen_classes():", 
                []
            ], 
            [
                "def test_partial_fit_regression():", 
                []
            ], 
            [
                "def test_partial_fit_errors():", 
                []
            ], 
            [
                "def test_params_errors():", 
                []
            ], 
            [
                "def test_predict_proba_binary():", 
                []
            ], 
            [
                "def test_predict_proba_multiclass():", 
                []
            ], 
            [
                "def test_predict_proba_multilabel():", 
                []
            ], 
            [
                "def test_sparse_matrices():", 
                []
            ], 
            [
                "def test_tolerance():", 
                []
            ], 
            [
                "def test_verbose_sgd():", 
                []
            ], 
            [
                "def test_early_stopping():", 
                []
            ], 
            [
                "def test_adaptive_learning_rate():", 
                []
            ], 
            [
                "def test_warm_start():", 
                []
            ]
        ], 
        24
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_calibration.py": [
        [
            [
                "def test_calibration():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_sample_weight():", 
                []
            ], 
            [
                "def test_calibration_multiclass():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def softmax(y_pred):", 
                []
            ], 
            [
                "def test_calibration_prefit():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_sigmoid_calibration():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_calibration_curve():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_calibration_nan_imputer():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_calibration_prob_sum():", 
                []
            ], 
            [
                "def test_calibration_less_classes():", 
                []
            ]
        ], 
        10
    ], 
    "../scikit-learn-master\\sklearn\\neural_network\\rbm.py": [
        [
            [
                "def __init__(self, n_components=256, learning_rate=0.1, batch_size=10,\n                 n_iter=10, verbose=0, random_state=None):", 
                [
                    [
                        [
                            [
                                "the", 
                                "ref"
                            ], 
                            [
                                "n_components", 
                                "int, optional"
                            ], 
                            [
                                "learning_rate", 
                                "float, optional"
                            ], 
                            [
                                "batch_size", 
                                "int, optional"
                            ], 
                            [
                                "n_iter", 
                                "int, optional"
                            ], 
                            [
                                "verbose", 
                                "int, optional"
                            ], 
                            [
                                "random_state", 
                                "integer or numpy.RandomState, optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "h", 
                                "array, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _mean_hiddens(self, v):", 
                [
                    [
                        [
                            [
                                "v", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "h", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _sample_hiddens(self, v, rng):", 
                [
                    [
                        [
                            [
                                "v", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "rng", 
                                "RandomState"
                            ]
                        ], 
                        [
                            [
                                "h", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _sample_visibles(self, h, rng):", 
                [
                    [
                        [
                            [
                                "h", 
                                "array-like, shape (n_samples, n_components)"
                            ], 
                            [
                                "rng", 
                                "RandomState"
                            ]
                        ], 
                        [
                            [
                                "v", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _free_energy(self, v):", 
                [
                    [
                        [
                            [
                                "v", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "free_energy", 
                                "array-like, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def gibbs(self, v):", 
                [
                    [
                        [
                            [
                                "v", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "v_new", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "BernoulliRBM"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _fit(self, v_pos, rng):", 
                [
                    [
                        [
                            [
                                "v_pos", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "rng", 
                                "RandomState"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def score_samples(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "pseudo_likelihood", 
                                "array-like, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix} shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "BernoulliRBM"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        11
    ], 
    "../scikit-learn-master\\sklearn\\__check_build\\setup.py": [
        [
            [
                "def configuration(parent_package='', top_path=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_murmurhash.py": [
        [
            [
                "def test_mmhash3_int():", 
                []
            ], 
            [
                "def test_mmhash3_int_array():", 
                []
            ], 
            [
                "def test_mmhash3_bytes():", 
                []
            ], 
            [
                "def test_mmhash3_unicode():", 
                []
            ], 
            [
                "def test_no_collision_on_byte_range():", 
                []
            ], 
            [
                "def test_uniform_distribution():", 
                []
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\doc\\sphinxext\\github_link.py": [
        [
            [
                "def _get_git_revision():", 
                []
            ], 
            [
                "def _linkcode_resolve(domain, info, package, url_fmt, revision):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def make_linkcode_resolve(package, url_fmt):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_linear_assignment.py": [
        [
            [
                "def test_hungarian():", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\manifold\\isomap.py": [
        [
            [
                "def __init__(self, n_neighbors=5, n_components=2, eigen_solver='auto',\n                 tol=0, max_iter=None, path_method='auto',\n                 neighbors_algorithm='auto', n_jobs=1):", 
                [
                    [
                        [
                            [
                                "n_neighbors", 
                                "integer"
                            ], 
                            [
                                "n_components", 
                                "integer"
                            ], 
                            [
                                "eigen_solver", 
                                "['auto'|'arpack'|'dense']"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "max_iter", 
                                "integer"
                            ], 
                            [
                                "path_method", 
                                "string ['auto'|'FW'|'D']"
                            ], 
                            [
                                "neighbors_algorithm", 
                                "string ['auto'|'brute'|'kd_tree'|'ball_tree']"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default = 1)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _fit_transform(self, X):", 
                []
            ], 
            [
                "def reconstruction_error(self):", 
                [
                    [
                        null, 
                        [
                            [
                                "reconstruction_error", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix, BallTree, KDTree, NearestNeighbors}"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix, BallTree, KDTree}"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def transform(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X_new", 
                                "array-like, shape (n_samples, n_components)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_forest_iris.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\perceptron.py": [
        [
            [
                "def __init__(self, penalty=None, alpha=0.0001, fit_intercept=True,\n                 max_iter=None, tol=None, shuffle=True, verbose=0, eta0=1.0,\n                 n_jobs=1, random_state=0, class_weight=None,\n                 warm_start=False, n_iter=None):", 
                [
                    [
                        [
                            [
                                "penalty", 
                                "None, 'l2' or 'l1' or 'elasticnet'"
                            ], 
                            [
                                "alpha", 
                                "float"
                            ], 
                            [
                                "fit_intercept", 
                                "bool"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "tol", 
                                "float or None, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "shuffle", 
                                "bool, optional, default True"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ], 
                            [
                                "eta0", 
                                "double"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default None"
                            ], 
                            [
                                "class_weight", 
                                "dict, {class_label"
                            ], 
                            [
                                "warm_start", 
                                "bool, optional"
                            ], 
                            [
                                "n_iter", 
                                "int, optional"
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\feature_selection\\plot_rfe_with_cross_validation.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\tests\\test_perceptron.py": [
        [
            [
                "def __init__(self, n_iter=1):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def project(self, X):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def test_perceptron_accuracy():", 
                []
            ], 
            [
                "def test_perceptron_correctness():", 
                []
            ], 
            [
                "def test_undefined_methods():", 
                []
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\examples\\bicluster\\plot_spectral_coclustering.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\decomposition\\plot_faces_decomposition.py": [
        [
            [
                "def plot_gallery(title, images, n_col=n_col, n_row=n_row):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_gradient_boosting_regularization.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\tests\\test_bicluster.py": [
        [
            [
                "def __init__(self):", 
                []
            ], 
            [
                "def get_indices(self, i):", 
                []
            ], 
            [
                "def test_get_submatrix():", 
                []
            ], 
            [
                "def _test_shape_indices(model):", 
                []
            ], 
            [
                "def test_spectral_coclustering():", 
                []
            ], 
            [
                "def test_spectral_biclustering():", 
                []
            ], 
            [
                "def _do_scale_test(scaled):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _do_bistochastic_test(scaled):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_scale_normalize():", 
                []
            ], 
            [
                "def test_bistochastic_normalize():", 
                []
            ], 
            [
                "def test_log_normalize():", 
                []
            ], 
            [
                "def test_fit_best_piecewise():", 
                []
            ], 
            [
                "def test_project_and_cluster():", 
                []
            ], 
            [
                "def test_perfect_checkerboard():", 
                []
            ], 
            [
                "def test_errors():", 
                []
            ]
        ], 
        15
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\setup.py": [
        [
            [
                "def configuration(parent_package='', top_path=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\mixture\\tests\\test_dpgmm.py": [
        [
            [
                "def test_class_weights():", 
                []
            ], 
            [
                "def test_verbose_boolean():", 
                []
            ], 
            [
                "def test_verbose_first_level():", 
                []
            ], 
            [
                "def test_verbose_second_level():", 
                []
            ], 
            [
                "def test_digamma():", 
                []
            ], 
            [
                "def test_gammaln():", 
                []
            ], 
            [
                "def test_log_normalize():", 
                []
            ], 
            [
                "def test_wishart_log_det():", 
                []
            ], 
            [
                "def test_wishart_logz():", 
                []
            ], 
            [
                "def test_DPGMM_deprecation():", 
                []
            ], 
            [
                "def do_model(self, **kwds):", 
                []
            ], 
            [
                "def score(self, g, train_obs):", 
                []
            ], 
            [
                "def test_VBGMM_deprecation():", 
                []
            ], 
            [
                "def score(self, g, train_obs):", 
                []
            ], 
            [
                "def test_vbgmm_no_modify_alpha():", 
                []
            ]
        ], 
        15
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\iforest.py": [
        [
            [
                "def __init__(self,\n                 n_estimators=100,\n                 max_samples=\"auto\",\n                 contamination=0.1,\n                 max_features=1.,\n                 bootstrap=False,\n                 n_jobs=1,\n                 random_state=None,\n                 verbose=0):", 
                [
                    [
                        [
                            [
                                "n_estimators", 
                                "int, optional (default=100)"
                            ], 
                            [
                                "max_samples", 
                                "int or float, optional (default=\"auto\")"
                            ], 
                            [
                                "contamination", 
                                "float in (0., 0.5), optional (default=0.1)"
                            ], 
                            [
                                "max_features", 
                                "int or float, optional (default=1.0)"
                            ], 
                            [
                                "bootstrap", 
                                "boolean, optional (default=False)"
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional (default=1)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "verbose", 
                                "int, optional (default=0)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _set_oob_score(self, X, y):", 
                []
            ], 
            [
                "def fit(self, X, y=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples] or None"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like or sparse matrix, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "is_inlier", 
                                "array, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "scores", 
                                "array of shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _average_path_length(n_samples_leaf):", 
                [
                    [
                        [
                            [
                                "n_samples_leaf", 
                                "array-like of shape (n_samples, n_estimators), or int."
                            ]
                        ], 
                        [
                            [
                                "average_path_length", 
                                "array, same shape as n_samples_leaf"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\examples\\model_selection\\plot_train_error_vs_test_error.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\cluster\\bicluster.py": [
        [
            [
                "def _check_rows_and_columns(a, b):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _jaccard(a_rows, a_cols, b_rows, b_cols):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _pairwise_similarity(a, b, similarity):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def consensus_score(a, b, similarity=\"jaccard\"):", 
                [
                    [
                        [
                            [
                                "a", 
                                "(rows, columns)"
                            ], 
                            [
                                "b", 
                                "(rows, columns)"
                            ], 
                            [
                                "similarity", 
                                "string or function, optional, default"
                            ], 
                            [
                                "vector", 
                                "(a_rows, a_columns, b_rows, b_columns)."
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\tests\\test_omp.py": [
        [
            [
                "def test_correct_shapes():", 
                []
            ], 
            [
                "def test_correct_shapes_gram():", 
                []
            ], 
            [
                "def test_n_nonzero_coefs():", 
                []
            ], 
            [
                "def test_tol():", 
                []
            ], 
            [
                "def test_with_without_gram():", 
                []
            ], 
            [
                "def test_with_without_gram_tol():", 
                []
            ], 
            [
                "def test_unreachable_accuracy():", 
                []
            ], 
            [
                "def test_bad_input():", 
                []
            ], 
            [
                "def test_perfect_signal_recovery():", 
                []
            ], 
            [
                "def test_estimator():", 
                []
            ], 
            [
                "def test_identical_regressors():", 
                []
            ], 
            [
                "def test_swapped_regressors():", 
                []
            ], 
            [
                "def test_no_atoms():", 
                []
            ], 
            [
                "def test_omp_path():", 
                []
            ], 
            [
                "def test_omp_return_path_prop_with_gram():", 
                []
            ], 
            [
                "def test_omp_cv():", 
                []
            ], 
            [
                "def test_omp_reaches_least_squares():", 
                []
            ]
        ], 
        17
    ], 
    "../scikit-learn-master\\sklearn\\utils\\sparsefuncs.py": [
        [
            [
                "def _raise_typeerror(X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _raise_error_wrong_axis(axis):", 
                []
            ], 
            [
                "def inplace_csr_column_scale(X, scale):", 
                [
                    [
                        [
                            [
                                "X", 
                                "CSR matrix with shape (n_samples, n_features)"
                            ], 
                            [
                                "scale", 
                                "float array with shape (n_features,)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def inplace_csr_row_scale(X, scale):", 
                [
                    [
                        [
                            [
                                "X", 
                                "CSR sparse matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "scale", 
                                "float array with shape (n_samples,)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def mean_variance_axis(X, axis):", 
                [
                    [
                        [
                            [
                                "X", 
                                "CSR or CSC sparse matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "axis", 
                                "int (either 0 or 1)"
                            ]
                        ], 
                        [
                            [
                                "means", 
                                "float array with shape (n_features,)"
                            ], 
                            [
                                "variances", 
                                "float array with shape (n_features,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def incr_mean_variance_axis(X, axis, last_mean, last_var, last_n):", 
                [
                    [
                        [
                            [
                                "X", 
                                "CSR or CSC sparse matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "axis", 
                                "int (either 0 or 1)"
                            ], 
                            [
                                "last_mean", 
                                "float array with shape (n_features,)"
                            ], 
                            [
                                "last_var", 
                                "float array with shape (n_features,)"
                            ], 
                            [
                                "last_n", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "means", 
                                "float array with shape (n_features,)"
                            ], 
                            [
                                "variances", 
                                "float array with shape (n_features,)"
                            ], 
                            [
                                "n", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def inplace_column_scale(X, scale):", 
                [
                    [
                        [
                            [
                                "X", 
                                "CSC or CSR matrix with shape (n_samples, n_features)"
                            ], 
                            [
                                "scale", 
                                "float array with shape (n_features,)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def inplace_row_scale(X, scale):", 
                [
                    [
                        [
                            [
                                "X", 
                                "CSR or CSC sparse matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "scale", 
                                "float array with shape (n_features,)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def inplace_swap_row_csc(X, m, n):", 
                [
                    [
                        [
                            [
                                "X", 
                                "scipy.sparse.csc_matrix, shape=(n_samples, n_features)"
                            ], 
                            [
                                "m", 
                                "int"
                            ], 
                            [
                                "n", 
                                "int"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def inplace_swap_row_csr(X, m, n):", 
                [
                    [
                        [
                            [
                                "X", 
                                "scipy.sparse.csr_matrix, shape=(n_samples, n_features)"
                            ], 
                            [
                                "m", 
                                "int"
                            ], 
                            [
                                "n", 
                                "int"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def inplace_swap_row(X, m, n):", 
                [
                    [
                        [
                            [
                                "X", 
                                "CSR or CSC sparse matrix, shape=(n_samples, n_features)"
                            ], 
                            [
                                "m", 
                                "int"
                            ], 
                            [
                                "n", 
                                "int"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def inplace_swap_column(X, m, n):", 
                [
                    [
                        [
                            [
                                "X", 
                                "CSR or CSC sparse matrix, shape=(n_samples, n_features)"
                            ], 
                            [
                                "m", 
                                "int"
                            ], 
                            [
                                "n", 
                                "int"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def min_max_axis(X, axis):", 
                [
                    [
                        [
                            [
                                "X", 
                                "CSR or CSC sparse matrix, shape (n_samples, n_features)"
                            ], 
                            [
                                "axis", 
                                "int (either 0 or 1)"
                            ]
                        ], 
                        [
                            [
                                "mins", 
                                "float array with shape (n_features,)"
                            ], 
                            [
                                "maxs", 
                                "float array with shape (n_features,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def count_nonzero(X, axis=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "CSR sparse matrix, shape = (n_samples, n_labels)"
                            ], 
                            [
                                "axis", 
                                "None, 0 or 1"
                            ], 
                            [
                                "sample_weight", 
                                "array, shape = (n_samples,), optional"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _get_median(data, n_zeros):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _get_elem_at_rank(rank, data, n_negative, n_zeros):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def csc_median_axis_0(X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "CSC sparse matrix, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "median", 
                                "ndarray, shape (n_features,)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        17
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\hierarchical.py": [
        [
            [
                "def _fix_connectivity(X, connectivity, affinity):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def ward_tree(X, connectivity=None, n_clusters=None, return_distance=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples, n_features)"
                            ], 
                            [
                                "connectivity", 
                                "sparse matrix (optional)."
                            ], 
                            [
                                "n_clusters", 
                                "int (optional)"
                            ], 
                            [
                                "return_distance", 
                                "bool (optional)"
                            ]
                        ], 
                        [
                            [
                                "children", 
                                "2D array, shape (n_nodes-1, 2)"
                            ], 
                            [
                                "n_components", 
                                "int"
                            ], 
                            [
                                "n_leaves", 
                                "int"
                            ], 
                            [
                                "parents", 
                                "1D array, shape (n_nodes, ) or None"
                            ], 
                            [
                                "distances", 
                                "1D array, shape (n_nodes-1, )"
                            ], 
                            [
                                "entry", 
                                "math"
                            ], 
                            [
                                "math", 
                                ""
                            ], 
                            [
                                "where", 
                                "math"
                            ], 
                            [
                                "clusters", 
                                "math"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def linkage_tree(X, connectivity=None, n_components='deprecated',\n                 n_clusters=None, linkage='complete', affinity=\"euclidean\",\n                 return_distance=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples, n_features)"
                            ], 
                            [
                                "connectivity", 
                                "sparse matrix (optional)."
                            ], 
                            [
                                "n_components", 
                                "int (optional)"
                            ], 
                            [
                                "n_clusters", 
                                "int (optional)"
                            ], 
                            [
                                "linkage", 
                                "{\"average\", \"complete\"}, optional, default"
                            ], 
                            [
                                "affinity", 
                                "string or callable, optional, default"
                            ], 
                            [
                                "return_distance", 
                                "bool, default False"
                            ]
                        ], 
                        [
                            [
                                "children", 
                                "2D array, shape (n_nodes-1, 2)"
                            ], 
                            [
                                "n_components", 
                                "int"
                            ], 
                            [
                                "n_leaves", 
                                "int"
                            ], 
                            [
                                "parents", 
                                "1D array, shape (n_nodes, ) or None"
                            ], 
                            [
                                "distances", 
                                "ndarray, shape (n_nodes-1,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _complete_linkage(*args, **kwargs):", 
                []
            ], 
            [
                "def _average_linkage(*args, **kwargs):", 
                []
            ], 
            [
                "def _hc_cut(n_clusters, children, n_leaves):", 
                [
                    [
                        [
                            [
                                "n_clusters", 
                                "int or ndarray"
                            ], 
                            [
                                "children", 
                                "2D array, shape (n_nodes-1, 2)"
                            ], 
                            [
                                "n_leaves", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "labels", 
                                "array [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, n_clusters=2, affinity=\"euclidean\",\n                 memory=None,\n                 connectivity=None, compute_full_tree='auto',\n                 linkage='ward', pooling_func=np.mean):", 
                [
                    [
                        [
                            [
                                "n_clusters", 
                                "int, default=2"
                            ], 
                            [
                                "affinity", 
                                "string or callable, default"
                            ], 
                            [
                                "memory", 
                                "None, str or object with the joblib.Memory interface, optional"
                            ], 
                            [
                                "connectivity", 
                                "array-like or callable, optional"
                            ], 
                            [
                                "compute_full_tree", 
                                "bool or 'auto' (optional)"
                            ], 
                            [
                                "linkage", 
                                "{\"ward\", \"complete\", \"average\"}, optional, default"
                            ], 
                            [
                                "pooling_func", 
                                "callable, default=np.mean"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None, **params):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "Ignored"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def fit_predict(self):", 
                []
            ]
        ], 
        10
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_grid_search.py": [
        [
            [
                "def __init__(self, foo_param=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, Y):", 
                []
            ], 
            [
                "def predict(self, T):", 
                []
            ], 
            [
                "def transform(self, X):", 
                []
            ], 
            [
                "def inverse_transform(self, X):", 
                []
            ], 
            [
                "def score(self, X=None, Y=None):", 
                []
            ], 
            [
                "def get_params(self, deep=False):", 
                []
            ], 
            [
                "def set_params(self, **params):", 
                []
            ], 
            [
                "def score(self):", 
                []
            ], 
            [
                "def assert_grid_iter_equals_getitem(grid):", 
                []
            ], 
            [
                "def test_parameter_grid():", 
                []
            ], 
            [
                "def test_grid_search():", 
                []
            ], 
            [
                "def test_transform_inverse_transform_round_trip():", 
                []
            ], 
            [
                "def test_grid_search_no_score():", 
                []
            ], 
            [
                "def test_grid_search_score_method():", 
                []
            ], 
            [
                "def test_trivial_grid_scores():", 
                []
            ], 
            [
                "def test_no_refit():", 
                []
            ], 
            [
                "def test_grid_search_error():", 
                []
            ], 
            [
                "def test_grid_search_iid():", 
                []
            ], 
            [
                "def test_grid_search_one_grid_point():", 
                []
            ], 
            [
                "def test_grid_search_bad_param_grid():", 
                []
            ], 
            [
                "def test_grid_search_sparse():", 
                []
            ], 
            [
                "def test_grid_search_sparse_scoring():", 
                []
            ], 
            [
                "def f1_loss(y_true_, y_pred_):", 
                []
            ], 
            [
                "def test_grid_search_precomputed_kernel():", 
                []
            ], 
            [
                "def test_grid_search_precomputed_kernel_error_nonsquare():", 
                []
            ], 
            [
                "def test_grid_search_precomputed_kernel_error_kernel_function():", 
                []
            ], 
            [
                "def __init__(self, parameter=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def test_refit():", 
                []
            ], 
            [
                "def test_gridsearch_nd():", 
                []
            ], 
            [
                "def test_X_as_list():", 
                []
            ], 
            [
                "def test_y_as_list():", 
                []
            ], 
            [
                "def test_pandas_input():", 
                []
            ], 
            [
                "def test_unsupervised_grid_search():", 
                []
            ], 
            [
                "def test_gridsearch_no_predict():", 
                []
            ], 
            [
                "def custom_scoring(estimator, X):", 
                []
            ], 
            [
                "def test_param_sampler():", 
                []
            ], 
            [
                "def test_randomized_search_grid_scores():", 
                []
            ], 
            [
                "def test_grid_search_score_consistency():", 
                []
            ], 
            [
                "def test_pickle():", 
                []
            ], 
            [
                "def test_grid_search_with_multioutput_data():", 
                []
            ], 
            [
                "def test_predict_proba_disabled():", 
                []
            ], 
            [
                "def test_grid_search_allows_nans():", 
                []
            ], 
            [
                "def __init__(self, parameter=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def test_grid_search_failing_classifier():", 
                []
            ], 
            [
                "def test_grid_search_failing_classifier_raise():", 
                []
            ], 
            [
                "def test_parameters_sampler_replacement():", 
                []
            ], 
            [
                "def test_classes__property():", 
                []
            ]
        ], 
        52
    ], 
    "../scikit-learn-master\\benchmarks\\bench_plot_nmf.py": [
        [
            [
                "def _norm(x):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _nls_subproblem(X, W, H, tol, max_iter, alpha=0., l1_ratio=0.,\n                    sigma=0.01, beta=0.1):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "W", 
                                "array-like, shape (n_samples, n_components)"
                            ], 
                            [
                                "H", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "max_iter", 
                                "int"
                            ], 
                            [
                                "alpha", 
                                "double, default"
                            ], 
                            [
                                "l1_ratio", 
                                "double, default"
                            ], 
                            [
                                "sigma", 
                                "float"
                            ], 
                            [
                                "beta", 
                                "float"
                            ]
                        ], 
                        [
                            [
                                "H", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "grad", 
                                "array-like, shape (n_components, n_features)"
                            ], 
                            [
                                "n_iter", 
                                "int"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _fit_projected_gradient(X, W, H, tol, max_iter, nls_max_iter, alpha,\n                            l1_ratio):", 
                []
            ], 
            [
                "def __init__(self, n_components=None, solver='pg', init=None,\n                 tol=1e-4, max_iter=200, random_state=None,\n                 alpha=0., l1_ratio=0., nls_max_iter=10):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None, **params):", 
                []
            ], 
            [
                "def transform(self, X):", 
                []
            ], 
            [
                "def inverse_transform(self, W):", 
                []
            ], 
            [
                "def fit_transform(self, X, y=None, W=None, H=None):", 
                []
            ], 
            [
                "def _fit_transform(self, X, y=None, W=None, H=None, update_H=True):", 
                []
            ], 
            [
                "def plot_results(results_df, plot_name):", 
                []
            ], 
            [
                "def bench_one(name, X, W0, H0, X_shape, clf_type, clf_params, init,\n              n_components, random_state):", 
                []
            ], 
            [
                "def run_bench(X, clfs, plot_name, n_components, tol, alpha, l1_ratio):", 
                []
            ], 
            [
                "def load_20news():", 
                []
            ], 
            [
                "def load_faces():", 
                []
            ], 
            [
                "def build_clfs(cd_iters, pg_iters, mu_iters):", 
                []
            ]
        ], 
        15
    ], 
    "../scikit-learn-master\\sklearn\\naive_bayes.py": [
        [
            [
                "def _joint_log_likelihood(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array, shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_log_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array-like, shape = [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "C", 
                                "array-like, shape = [n_samples, n_classes]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, priors=None, var_smoothing=1e-9):", 
                [
                    [
                        [
                            [
                                "priors", 
                                "array-like, shape (n_classes,)"
                            ], 
                            [
                                "var_smoothing", 
                                "float, optional (default=1e-9)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,), optional (default=None)"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _update_mean_variance(n_past, mu, var, X, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "n_past", 
                                "int"
                            ], 
                            [
                                "mu", 
                                "array-like, shape (number of Gaussians,)"
                            ], 
                            [
                                "var", 
                                "array-like, shape (number of Gaussians,)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,), optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "total_mu", 
                                "array-like, shape (number of Gaussians,)"
                            ], 
                            [
                                "total_var", 
                                "array-like, shape (number of Gaussians,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X, y, classes=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "classes", 
                                "array-like, shape (n_classes,), optional (default=None)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,), optional (default=None)"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _partial_fit(self, X, y, classes=None, _refit=False,\n                     sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ], 
                            [
                                "classes", 
                                "array-like, shape (n_classes,), optional (default=None)"
                            ], 
                            [
                                "_refit", 
                                "bool, optional (default=False)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,), optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _joint_log_likelihood(self, X):", 
                []
            ], 
            [
                "def _update_class_log_prior(self, class_prior=None):", 
                []
            ], 
            [
                "def _check_alpha(self):", 
                []
            ], 
            [
                "def partial_fit(self, X, y, classes=None, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples]"
                            ], 
                            [
                                "classes", 
                                "array-like, shape = [n_classes] (default=None)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples] (default=None)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples], (default=None)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def _get_coef(self):", 
                []
            ], 
            [
                "def _get_intercept(self):", 
                []
            ], 
            [
                "def __init__(self, alpha=1.0, fit_prior=True, class_prior=None):", 
                [
                    [
                        [
                            [
                                "alpha", 
                                "float, optional (default=1.0)"
                            ], 
                            [
                                "fit_prior", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "class_prior", 
                                "array-like, size (n_classes,), optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _count(self, X, Y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _update_feature_log_prob(self, alpha):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _joint_log_likelihood(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, alpha=1.0, fit_prior=True, class_prior=None):", 
                [
                    [
                        [
                            [
                                "alpha", 
                                "float, optional (default=1.0)"
                            ], 
                            [
                                "fit_prior", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "class_prior", 
                                "array-like, size (n_classes,), optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _count(self, X, Y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _update_feature_log_prob(self, alpha):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _joint_log_likelihood(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, alpha=1.0, binarize=.0, fit_prior=True,\n                 class_prior=None):", 
                [
                    [
                        [
                            [
                                "alpha", 
                                "float, optional (default=1.0)"
                            ], 
                            [
                                "binarize", 
                                "float or None, optional (default=0.0)"
                            ], 
                            [
                                "fit_prior", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "class_prior", 
                                "array-like, size=[n_classes,], optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _count(self, X, Y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _update_feature_log_prob(self, alpha):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _joint_log_likelihood(self, X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        28
    ], 
    "../scikit-learn-master\\sklearn\\preprocessing\\tests\\test_function_transformer.py": [
        [
            [
                "def _make_func(args_store, kwargs_store, func=lambda X, *a, **k: X):", 
                []
            ], 
            [
                "def _func(X, *args, **kwargs):", 
                []
            ], 
            [
                "def test_delegate_to_func():", 
                []
            ], 
            [
                "def test_np_log():", 
                []
            ], 
            [
                "def test_kw_arg():", 
                []
            ], 
            [
                "def test_kw_arg_update():", 
                []
            ], 
            [
                "def test_kw_arg_reset():", 
                []
            ], 
            [
                "def test_inverse_transform():", 
                []
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\examples\\plot_multilabel.py": [
        [
            [
                "def plot_hyperplane(clf, min_x, max_x, linestyle, label):", 
                []
            ], 
            [
                "def plot_subfigure(X, Y, subplot, title, transform):", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\tree\\tests\\test_tree.py": [
        [
            [
                "def assert_tree_equal(d, s, message):", 
                []
            ], 
            [
                "def test_classification_toy():", 
                []
            ], 
            [
                "def test_weighted_classification_toy():", 
                []
            ], 
            [
                "def test_regression_toy():", 
                []
            ], 
            [
                "def test_xor():", 
                []
            ], 
            [
                "def test_iris():", 
                []
            ], 
            [
                "def test_boston():", 
                []
            ], 
            [
                "def test_probability():", 
                []
            ], 
            [
                "def test_arrayrepr():", 
                []
            ], 
            [
                "def test_pure_set():", 
                []
            ], 
            [
                "def test_numerical_stability():", 
                []
            ], 
            [
                "def test_importances():", 
                []
            ], 
            [
                "def test_importances_raises():", 
                []
            ], 
            [
                "def test_importances_gini_equal_mse():", 
                []
            ], 
            [
                "def test_max_features():", 
                []
            ], 
            [
                "def test_error():", 
                []
            ], 
            [
                "def test_min_samples_split():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_min_samples_leaf():", 
                []
            ], 
            [
                "def check_min_weight_fraction_leaf(name, datasets, sparse=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_min_weight_fraction_leaf():", 
                []
            ], 
            [
                "def check_min_weight_fraction_leaf_with_min_samples_leaf(name, datasets,\n                                                         sparse=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_min_weight_fraction_leaf_with_min_samples_leaf():", 
                []
            ], 
            [
                "def test_min_impurity_split():", 
                []
            ], 
            [
                "def test_min_impurity_decrease():", 
                []
            ], 
            [
                "def test_multioutput():", 
                []
            ], 
            [
                "def test_classes_shape():", 
                []
            ], 
            [
                "def test_unbalanced_iris():", 
                []
            ], 
            [
                "def test_memory_layout():", 
                []
            ], 
            [
                "def test_sample_weight():", 
                []
            ], 
            [
                "def test_sample_weight_invalid():", 
                []
            ], 
            [
                "def check_class_weights(name):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_class_weights():", 
                []
            ], 
            [
                "def check_class_weight_errors(name):", 
                []
            ], 
            [
                "def test_class_weight_errors():", 
                []
            ], 
            [
                "def test_max_leaf_nodes():", 
                []
            ], 
            [
                "def test_max_leaf_nodes_max_depth():", 
                []
            ], 
            [
                "def test_arrays_persist():", 
                []
            ], 
            [
                "def test_only_constant_features():", 
                []
            ], 
            [
                "def test_behaviour_constant_feature_after_splits():", 
                []
            ], 
            [
                "def test_with_only_one_non_constant_features():", 
                []
            ], 
            [
                "def test_big_input():", 
                []
            ], 
            [
                "def test_realloc():", 
                []
            ], 
            [
                "def test_huge_allocations():", 
                []
            ], 
            [
                "def check_sparse_input(tree, dataset, max_depth=None):", 
                []
            ], 
            [
                "def test_sparse_input():", 
                []
            ], 
            [
                "def check_sparse_parameters(tree, dataset):", 
                []
            ], 
            [
                "def test_sparse_parameters():", 
                []
            ], 
            [
                "def check_sparse_criterion(tree, dataset):", 
                []
            ], 
            [
                "def test_sparse_criterion():", 
                []
            ], 
            [
                "def check_explicit_sparse_zeros(tree, max_depth=3,\n                                n_features=10):", 
                []
            ], 
            [
                "def test_explicit_sparse_zeros():", 
                []
            ], 
            [
                "def check_raise_error_on_1d_input(name):", 
                []
            ], 
            [
                "def test_1d_input():", 
                []
            ], 
            [
                "def _check_min_weight_leaf_split_level(TreeEstimator, X, y, sample_weight):", 
                []
            ], 
            [
                "def check_min_weight_leaf_split_level(name):", 
                []
            ], 
            [
                "def test_min_weight_leaf_split_level():", 
                []
            ], 
            [
                "def check_public_apply(name):", 
                []
            ], 
            [
                "def check_public_apply_sparse(name):", 
                []
            ], 
            [
                "def test_public_apply():", 
                []
            ], 
            [
                "def check_presort_sparse(est, X, y):", 
                []
            ], 
            [
                "def test_presort_sparse():", 
                []
            ], 
            [
                "def test_decision_path_hardcoded():", 
                []
            ], 
            [
                "def check_decision_path(name):", 
                []
            ], 
            [
                "def test_decision_path():", 
                []
            ], 
            [
                "def check_no_sparse_y_support(name):", 
                []
            ], 
            [
                "def test_no_sparse_y_support():", 
                []
            ], 
            [
                "def test_mae():", 
                []
            ], 
            [
                "def test_criterion_copy():", 
                []
            ], 
            [
                "def _pickle_copy(obj):", 
                []
            ]
        ], 
        69
    ], 
    "../scikit-learn-master\\examples\\svm\\plot_weighted_samples.py": [
        [
            [
                "def plot_decision_function(classifier, sample_weight, axis, title):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_adaboost_multiclass.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\manifold\\tests\\test_mds.py": [
        [
            [
                "def test_smacof():", 
                []
            ], 
            [
                "def test_smacof_error():", 
                []
            ], 
            [
                "def test_MDS():", 
                []
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_deprecation.py": [
        [
            [
                "def method(self):", 
                []
            ], 
            [
                "def __init__(self):", 
                []
            ], 
            [
                "def mock_function():", 
                []
            ], 
            [
                "def test_deprecated():", 
                []
            ], 
            [
                "def test_is_deprecated():", 
                []
            ], 
            [
                "def test_pickle():", 
                []
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\doc\\tutorial\\text_analytics\\solutions\\generate_skeletons.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\cluster\\setup.py": [
        [
            [
                "def configuration(parent_package=\"\", top_path=None):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\cluster\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\semi_supervised\\plot_label_propagation_structure.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\base.py": [
        [
            [
                "def _set_random_states(estimator, random_state=None):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "estimator supporting get/set_params"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, base_estimator, n_estimators=10,\n                 estimator_params=tuple()):", 
                [
                    [
                        [
                            [
                                "base_estimator", 
                                "object, optional (default=None)"
                            ], 
                            [
                                "n_estimators", 
                                "integer"
                            ], 
                            [
                                "estimator_params", 
                                "list of strings"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _validate_estimator(self, default=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _make_estimator(self, append=True, random_state=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __len__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __getitem__(self, index):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __iter__(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _partition_estimators(n_estimators, n_jobs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\sklearn\\externals\\funcsigs.py": [
        [
            [
                "def formatannotation(annotation, base_module=None):", 
                []
            ], 
            [
                "def _get_user_defined_method(cls, method_name, *nested):", 
                []
            ], 
            [
                "def signature(obj):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __new__(self, *args, **kwargs):", 
                []
            ], 
            [
                "def __str__(self):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __init__(self, name, kind, default=_empty, annotation=_empty,\n                 _partial_kwarg=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def name(self):", 
                []
            ], 
            [
                "def default(self):", 
                []
            ], 
            [
                "def annotation(self):", 
                []
            ], 
            [
                "def kind(self):", 
                []
            ], 
            [
                "def replace(self, name=_void, kind=_void, annotation=_void,\n                default=_void, _partial_kwarg=_void):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __str__(self):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __hash__(self):", 
                []
            ], 
            [
                "def __eq__(self, other):", 
                []
            ], 
            [
                "def __ne__(self, other):", 
                []
            ], 
            [
                "def __init__(self, signature, arguments):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def signature(self):", 
                []
            ], 
            [
                "def args(self):", 
                []
            ], 
            [
                "def kwargs(self):", 
                []
            ], 
            [
                "def __hash__(self):", 
                []
            ], 
            [
                "def __eq__(self, other):", 
                []
            ], 
            [
                "def __ne__(self, other):", 
                []
            ], 
            [
                "def __init__(self, parameters=None, return_annotation=_empty,\n                 __validate_parameters__=True):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def from_function(cls, func):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def parameters(self):", 
                []
            ], 
            [
                "def return_annotation(self):", 
                []
            ], 
            [
                "def replace(self, parameters=_void, return_annotation=_void):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __hash__(self):", 
                []
            ], 
            [
                "def __eq__(self, other):", 
                []
            ], 
            [
                "def __ne__(self, other):", 
                []
            ], 
            [
                "def _bind(self, args, kwargs, partial=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def bind(self, *args, **kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def bind_partial(self, *args, **kwargs):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __str__(self):", 
                []
            ]
        ], 
        36
    ], 
    "../scikit-learn-master\\sklearn\\feature_selection\\from_model.py": [
        [
            [
                "def _get_feature_importances(estimator, norm_order=1):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _calculate_threshold(estimator, importances, threshold):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, estimator, threshold=None, prefit=False, norm_order=1):", 
                [
                    [
                        [
                            [
                                "estimator", 
                                "object"
                            ], 
                            [
                                "threshold", 
                                "string, float, optional default None"
                            ], 
                            [
                                "prefit", 
                                "bool, default False"
                            ], 
                            [
                                "norm_order", 
                                "non-zero int, inf, -inf, default 1"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _get_support_mask(self):", 
                []
            ], 
            [
                "def fit(self, X, y=None, **fit_params):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like of shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def threshold_(self):", 
                []
            ], 
            [
                "def partial_fit(self, X, y=None, **fit_params):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like of shape (n_samples, n_features)"
                            ], 
                            [
                                "y", 
                                "array-like, shape (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\sklearn\\model_selection\\tests\\common.py": [
        [
            [
                "def __init__(self, n_splits=4, n_samples=99):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def split(self, X=None, y=None, groups=None):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get_n_splits(self, X=None, y=None, groups=None):", 
                []
            ]
        ], 
        3
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\base.py": [
        [
            [
                "def _average_binary_score(binary_metric, y_true, y_score, average,\n                          sample_weight=None):", 
                [
                    [
                        [
                            [
                                "y_true", 
                                "array, shape = [n_samples] or [n_samples, n_classes]"
                            ], 
                            [
                                "y_score", 
                                "array, shape = [n_samples] or [n_samples, n_classes]"
                            ], 
                            [
                                "average", 
                                "string, [None, 'micro', 'macro' (default), 'samples', 'weighted']"
                            ], 
                            [
                                "data", 
                                ""
                            ], 
                            [
                                "sample_weight", 
                                "array-like of shape = [n_samples], optional"
                            ], 
                            [
                                "binary_metric", 
                                "callable, returns shape [n_classes]"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float or array of shape [n_classes]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\benchmarks\\bench_glmnet.py": [
        [
            [
                "def rmse(a, b):", 
                []
            ], 
            [
                "def bench(factory, X, Y, X_test, Y_test, ref_coef):", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\feature_selection\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\svm\\classes.py": [
        [
            [
                "def __init__(self, penalty='l2', loss='squared_hinge', dual=True, tol=1e-4,\n                 C=1.0, multi_class='ovr', fit_intercept=True,\n                 intercept_scaling=1, class_weight=None, verbose=0,\n                 random_state=None, max_iter=1000):", 
                [
                    [
                        [
                            [
                                "penalty", 
                                "string, 'l1' or 'l2' (default='l2')"
                            ], 
                            [
                                "loss", 
                                "string, 'hinge' or 'squared_hinge' (default='squared_hinge')"
                            ], 
                            [
                                "dual", 
                                "bool, (default=True)"
                            ], 
                            [
                                "tol", 
                                "float, optional (default=1e-4)"
                            ], 
                            [
                                "C", 
                                "float, optional (default=1.0)"
                            ], 
                            [
                                "multi_class", 
                                "string, 'ovr' or 'crammer_singer' (default='ovr')"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "intercept_scaling", 
                                "float, optional (default=1)"
                            ], 
                            [
                                "class_weight", 
                                "{dict, 'balanced'}, optional"
                            ], 
                            [
                                "verbose", 
                                "int, (default=0)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "of", 
                                "class"
                            ], 
                            [
                                "max_iter", 
                                "int, (default=1000)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, epsilon=0.0, tol=1e-4, C=1.0,\n                 loss='epsilon_insensitive', fit_intercept=True,\n                 intercept_scaling=1., dual=True, verbose=0,\n                 random_state=None, max_iter=1000):", 
                [
                    [
                        [
                            [
                                "C", 
                                "float, optional (default=1.0)"
                            ], 
                            [
                                "loss", 
                                "string, 'epsilon_insensitive' or 'squared_epsilon_insensitive' (default='epsilon_insensitive')"
                            ], 
                            [
                                "epsilon", 
                                "float, optional (default=0.1)"
                            ], 
                            [
                                "dual", 
                                "bool, (default=True)"
                            ], 
                            [
                                "tol", 
                                "float, optional (default=1e-4)"
                            ], 
                            [
                                "fit_intercept", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "intercept_scaling", 
                                "float, optional (default=1)"
                            ], 
                            [
                                "verbose", 
                                "int, (default=0)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "max_iter", 
                                "int, (default=1000)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, sample_weight=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples]"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape = [n_samples], optional"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, C=1.0, kernel='rbf', degree=3, gamma='auto',\n                 coef0=0.0, shrinking=True, probability=False,\n                 tol=1e-3, cache_size=200, class_weight=None,\n                 verbose=False, max_iter=-1, decision_function_shape='ovr',\n                 random_state=None):", 
                [
                    [
                        [
                            [
                                "C", 
                                "float, optional (default=1.0)"
                            ], 
                            [
                                "kernel", 
                                "string, optional (default='rbf')"
                            ], 
                            [
                                "degree", 
                                "int, optional (default=3)"
                            ], 
                            [
                                "gamma", 
                                "float, optional (default='auto')"
                            ], 
                            [
                                "coef0", 
                                "float, optional (default=0.0)"
                            ], 
                            [
                                "probability", 
                                "boolean, optional (default=False)"
                            ], 
                            [
                                "shrinking", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "tol", 
                                "float, optional (default=1e-3)"
                            ], 
                            [
                                "cache_size", 
                                "float, optional"
                            ], 
                            [
                                "class_weight", 
                                "{dict, 'balanced'}, optional"
                            ], 
                            [
                                "verbose", 
                                "bool, default"
                            ], 
                            [
                                "max_iter", 
                                "int, optional (default=-1)"
                            ], 
                            [
                                "decision_function_shape", 
                                "'ovo', 'ovr', default='ovr'"
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, nu=0.5, kernel='rbf', degree=3, gamma='auto', coef0=0.0,\n                 shrinking=True, probability=False, tol=1e-3, cache_size=200,\n                 class_weight=None, verbose=False, max_iter=-1,\n                 decision_function_shape='ovr', random_state=None):", 
                [
                    [
                        [
                            [
                                "nu", 
                                "float, optional (default=0.5)"
                            ], 
                            [
                                "kernel", 
                                "string, optional (default='rbf')"
                            ], 
                            [
                                "degree", 
                                "int, optional (default=3)"
                            ], 
                            [
                                "gamma", 
                                "float, optional (default='auto')"
                            ], 
                            [
                                "coef0", 
                                "float, optional (default=0.0)"
                            ], 
                            [
                                "probability", 
                                "boolean, optional (default=False)"
                            ], 
                            [
                                "shrinking", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "tol", 
                                "float, optional (default=1e-3)"
                            ], 
                            [
                                "cache_size", 
                                "float, optional"
                            ], 
                            [
                                "class_weight", 
                                "{dict, 'balanced'}, optional"
                            ], 
                            [
                                "verbose", 
                                "bool, default"
                            ], 
                            [
                                "max_iter", 
                                "int, optional (default=-1)"
                            ], 
                            [
                                "decision_function_shape", 
                                "'ovo', 'ovr', default='ovr'"
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, kernel='rbf', degree=3, gamma='auto', coef0=0.0,\n                 tol=1e-3, C=1.0, epsilon=0.1, shrinking=True,\n                 cache_size=200, verbose=False, max_iter=-1):", 
                [
                    [
                        [
                            [
                                "C", 
                                "float, optional (default=1.0)"
                            ], 
                            [
                                "epsilon", 
                                "float, optional (default=0.1)"
                            ], 
                            [
                                "kernel", 
                                "string, optional (default='rbf')"
                            ], 
                            [
                                "degree", 
                                "int, optional (default=3)"
                            ], 
                            [
                                "gamma", 
                                "float, optional (default='auto')"
                            ], 
                            [
                                "coef0", 
                                "float, optional (default=0.0)"
                            ], 
                            [
                                "shrinking", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "tol", 
                                "float, optional (default=1e-3)"
                            ], 
                            [
                                "cache_size", 
                                "float, optional"
                            ], 
                            [
                                "verbose", 
                                "bool, default"
                            ], 
                            [
                                "max_iter", 
                                "int, optional (default=-1)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, nu=0.5, C=1.0, kernel='rbf', degree=3,\n                 gamma='auto', coef0=0.0, shrinking=True, tol=1e-3,\n                 cache_size=200, verbose=False, max_iter=-1):", 
                [
                    [
                        [
                            [
                                "C", 
                                "float, optional (default=1.0)"
                            ], 
                            [
                                "nu", 
                                "float, optional"
                            ], 
                            [
                                "kernel", 
                                "string, optional (default='rbf')"
                            ], 
                            [
                                "degree", 
                                "int, optional (default=3)"
                            ], 
                            [
                                "gamma", 
                                "float, optional (default='auto')"
                            ], 
                            [
                                "coef0", 
                                "float, optional (default=0.0)"
                            ], 
                            [
                                "shrinking", 
                                "boolean, optional (default=True)"
                            ], 
                            [
                                "tol", 
                                "float, optional (default=1e-3)"
                            ], 
                            [
                                "cache_size", 
                                "float, optional"
                            ], 
                            [
                                "verbose", 
                                "bool, default"
                            ], 
                            [
                                "max_iter", 
                                "int, optional (default=-1)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, kernel='rbf', degree=3, gamma='auto', coef0=0.0,\n                 tol=1e-3, nu=0.5, shrinking=True, cache_size=200,\n                 verbose=False, max_iter=-1, random_state=None):", 
                [
                    [
                        [
                            [
                                "kernel", 
                                "string, optional (default='rbf')"
                            ], 
                            [
                                "nu", 
                                "float, optional"
                            ], 
                            [
                                "degree", 
                                "int, optional (default=3)"
                            ], 
                            [
                                "gamma", 
                                "float, optional (default='auto')"
                            ], 
                            [
                                "coef0", 
                                "float, optional (default=0.0)"
                            ], 
                            [
                                "tol", 
                                "float, optional"
                            ], 
                            [
                                "shrinking", 
                                "boolean, optional"
                            ], 
                            [
                                "cache_size", 
                                "float, optional"
                            ], 
                            [
                                "verbose", 
                                "bool, default"
                            ], 
                            [
                                "max_iter", 
                                "int, optional (default=-1)"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, y=None, sample_weight=None, **params):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ], 
                            [
                                "sample_weight", 
                                "array-like, shape (n_samples,)"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "object"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def decision_function(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "y_pred", 
                                "array, shape (n_samples,)"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        12
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\numpy_pickle_utils.py": [
        [
            [
                "def _is_raw_file(fileobj):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _detect_compressor(fileobj):", 
                [
                    [
                        [
                            [
                                "fileobj", 
                                "file object"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def _buffered_read_file(fobj):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _buffered_write_file(fobj):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _read_fileobject(fileobj, filename, mmap_mode=None):", 
                [
                    [
                        [
                            [
                                "fileobj", 
                                "file object"
                            ], 
                            [
                                "compressor", 
                                "str in {'zlib', 'gzip', 'bz2', 'lzma', 'xz', 'compat',"
                            ], 
                            [
                                "filename", 
                                "str"
                            ], 
                            [
                                "mmap_mode", 
                                "str"
                            ], 
                            [
                                "Default", 
                                "None."
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def _write_fileobject(filename, compress=(\"zlib\", 3)):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, filename, mode=\"rb\", compresslevel=9):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def close(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def closed(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fileno(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def seekable(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def readable(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def writable(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _check_not_closed(self):", 
                []
            ], 
            [
                "def _check_can_read(self):", 
                []
            ], 
            [
                "def _check_can_write(self):", 
                []
            ], 
            [
                "def _check_can_seek(self):", 
                []
            ], 
            [
                "def _fill_buffer(self):", 
                []
            ], 
            [
                "def _read_all(self, return_data=True):", 
                []
            ], 
            [
                "def _read_block(self, n_bytes, return_data=True):", 
                []
            ], 
            [
                "def read(self, size=-1):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def readinto(self, b):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def write(self, data):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _rewind(self):", 
                []
            ], 
            [
                "def seek(self, offset, whence=0):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def tell(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _read_bytes(fp, size, error_template=\"ran out of data\"):", 
                [
                    [
                        [
                            [
                                "fp", 
                                "file-like object"
                            ], 
                            [
                                "size", 
                                "int"
                            ], 
                            [
                                "error_template", 
                                "str"
                            ]
                        ], 
                        []
                    ]
                ]
            ]
        ], 
        27
    ], 
    "../scikit-learn-master\\sklearn\\externals\\joblib\\_compat.py": [
        [
            [
                "def with_metaclass(meta, *bases):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\decomposition\\tests\\test_kernel_pca.py": [
        [
            [
                "def test_kernel_pca():", 
                []
            ], 
            [
                "def histogram(x, y, **kwargs):", 
                []
            ], 
            [
                "def test_kernel_pca_invalid_parameters():", 
                []
            ], 
            [
                "def test_kernel_pca_consistent_transform():", 
                []
            ], 
            [
                "def test_kernel_pca_sparse():", 
                []
            ], 
            [
                "def test_kernel_pca_linear_kernel():", 
                []
            ], 
            [
                "def test_kernel_pca_n_components():", 
                []
            ], 
            [
                "def test_remove_zero_eig():", 
                []
            ], 
            [
                "def test_kernel_pca_precomputed():", 
                []
            ], 
            [
                "def test_kernel_pca_invalid_kernel():", 
                []
            ], 
            [
                "def test_gridsearch_pipeline():", 
                []
            ], 
            [
                "def test_gridsearch_pipeline_precomputed():", 
                []
            ], 
            [
                "def test_nested_circles():", 
                []
            ]
        ], 
        13
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\passive_aggressive.py": [
        [
            [
                "def __init__(self, C=1.0, fit_intercept=True, max_iter=None, tol=None,\n                 shuffle=True, verbose=0, loss=\"hinge\", n_jobs=1,\n                 random_state=None, warm_start=False, class_weight=None,\n                 average=False, n_iter=None):", 
                [
                    [
                        [
                            [
                                "C", 
                                "float"
                            ], 
                            [
                                "fit_intercept", 
                                "bool, default=False"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "tol", 
                                "float or None, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "shuffle", 
                                "bool, default=True"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ], 
                            [
                                "loss", 
                                "string, optional"
                            ], 
                            [
                                "used", 
                                ""
                            ], 
                            [
                                "hinge", 
                                "equivalent to PA-I in the reference paper."
                            ], 
                            [
                                "squared_hinge", 
                                "equivalent to PA-II in the reference paper."
                            ], 
                            [
                                "n_jobs", 
                                "integer, optional"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default=None"
                            ], 
                            [
                                "warm_start", 
                                "bool, optional"
                            ], 
                            [
                                "class_weight", 
                                "dict, {class_label"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "average", 
                                "bool or int, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "n_iter", 
                                "int, optional"
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X, y, classes=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "numpy array of shape [n_samples]"
                            ], 
                            [
                                "classes", 
                                "array, shape = [n_classes]"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, coef_init=None, intercept_init=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "numpy array of shape [n_samples]"
                            ], 
                            [
                                "coef_init", 
                                "array, shape = [n_classes,n_features]"
                            ], 
                            [
                                "intercept_init", 
                                "array, shape = [n_classes]"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, C=1.0, fit_intercept=True, max_iter=None, tol=None,\n                 shuffle=True, verbose=0, loss=\"epsilon_insensitive\",\n                 epsilon=DEFAULT_EPSILON, random_state=None, warm_start=False,\n                 average=False, n_iter=None):", 
                [
                    [
                        [
                            [
                                "C", 
                                "float"
                            ], 
                            [
                                "fit_intercept", 
                                "bool"
                            ], 
                            [
                                "max_iter", 
                                "int, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "tol", 
                                "float or None, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "shuffle", 
                                "bool, default=True"
                            ], 
                            [
                                "verbose", 
                                "integer, optional"
                            ], 
                            [
                                "loss", 
                                "string, optional"
                            ], 
                            [
                                "used", 
                                ""
                            ], 
                            [
                                "epsilon_insensitive", 
                                "equivalent to PA-I in the reference paper."
                            ], 
                            [
                                "squared_epsilon_insensitive", 
                                "equivalent to PA-II in the reference"
                            ], 
                            [
                                "epsilon", 
                                "float"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional, default=None"
                            ], 
                            [
                                "warm_start", 
                                "bool, optional"
                            ], 
                            [
                                "average", 
                                "bool or int, optional"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ], 
                            [
                                "n_iter", 
                                "int, optional"
                            ], 
                            [
                                "versionchanged", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def partial_fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "numpy array of shape [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def fit(self, X, y, coef_init=None, intercept_init=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "numpy array of shape [n_samples]"
                            ], 
                            [
                                "coef_init", 
                                "array, shape = [n_features]"
                            ], 
                            [
                                "intercept_init", 
                                "array, shape = [1]"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        6
    ], 
    "../scikit-learn-master\\sklearn\\gaussian_process\\kernels.py": [
        [
            [
                "def _check_length_scale(X, length_scale):", 
                []
            ], 
            [
                "def __new__(cls, name, value_type, bounds, n_elements=1, fixed=None):", 
                []
            ], 
            [
                "def __eq__(self, other):", 
                []
            ], 
            [
                "def get_params(self, deep=True):", 
                [
                    [
                        [
                            [
                                "deep", 
                                "boolean, optional"
                            ]
                        ], 
                        [
                            [
                                "params", 
                                "mapping of string to any"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def set_params(self, **params):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def clone_with_theta(self, theta):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def n_dims(self):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def hyperparameters(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def theta(self):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def theta(self, theta):", 
                [
                    [
                        [
                            [
                                "theta", 
                                "array, shape (n_dims,)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def bounds(self):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def __add__(self, b):", 
                []
            ], 
            [
                "def __radd__(self, b):", 
                []
            ], 
            [
                "def __mul__(self, b):", 
                []
            ], 
            [
                "def __rmul__(self, b):", 
                []
            ], 
            [
                "def __pow__(self, b):", 
                []
            ], 
            [
                "def __eq__(self, b):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __call__(self, X, Y=None, eval_gradient=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def diag(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def is_stationary(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def diag(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def is_stationary(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, kernels):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get_params(self, deep=True):", 
                [
                    [
                        [
                            [
                                "deep", 
                                "boolean, optional"
                            ]
                        ], 
                        [
                            [
                                "params", 
                                "mapping of string to any"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def theta(self):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def theta(self, theta):", 
                [
                    [
                        [
                            [
                                "theta", 
                                "array, shape (n_dims,)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def bounds(self):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def __call__(self, X, Y=None, eval_gradient=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ], 
                            [
                                "Y", 
                                "array, shape (n_samples_Y, n_features), (optional, default=None)"
                            ], 
                            [
                                "eval_gradient", 
                                "bool (optional, default=False)"
                            ]
                        ], 
                        [
                            [
                                "K", 
                                "array, shape (n_samples_X, n_samples_Y, n_kernels)"
                            ], 
                            [
                                "K_gradient", 
                                "array, shape (n_samples_X, n_samples_X, n_dims, n_kernels)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __eq__(self, b):", 
                []
            ], 
            [
                "def is_stationary(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def diag(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, k1, k2):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def get_params(self, deep=True):", 
                [
                    [
                        [
                            [
                                "deep", 
                                "boolean, optional"
                            ]
                        ], 
                        [
                            [
                                "params", 
                                "mapping of string to any"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def hyperparameters(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def theta(self):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def theta(self, theta):", 
                [
                    [
                        [
                            [
                                "theta", 
                                "array, shape (n_dims,)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def bounds(self):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def __eq__(self, b):", 
                []
            ], 
            [
                "def is_stationary(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __call__(self, X, Y=None, eval_gradient=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ], 
                            [
                                "Y", 
                                "array, shape (n_samples_Y, n_features), (optional, default=None)"
                            ], 
                            [
                                "eval_gradient", 
                                "bool (optional, default=False)"
                            ]
                        ], 
                        [
                            [
                                "K", 
                                "array, shape (n_samples_X, n_samples_Y)"
                            ], 
                            [
                                "K_gradient", 
                                "array (opt.), shape (n_samples_X, n_samples_X, n_dims)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def diag(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __call__(self, X, Y=None, eval_gradient=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ], 
                            [
                                "Y", 
                                "array, shape (n_samples_Y, n_features), (optional, default=None)"
                            ], 
                            [
                                "eval_gradient", 
                                "bool (optional, default=False)"
                            ]
                        ], 
                        [
                            [
                                "K", 
                                "array, shape (n_samples_X, n_samples_Y)"
                            ], 
                            [
                                "K_gradient", 
                                "array (opt.), shape (n_samples_X, n_samples_X, n_dims)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def diag(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __init__(self, kernel, exponent):", 
                [
                    [
                        [
                            [
                                "kernel", 
                                "Kernel object"
                            ], 
                            [
                                "exponent", 
                                "float"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def get_params(self, deep=True):", 
                [
                    [
                        [
                            [
                                "deep", 
                                "boolean, optional"
                            ]
                        ], 
                        [
                            [
                                "params", 
                                "mapping of string to any"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def hyperparameters(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def theta(self):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def theta(self, theta):", 
                [
                    [
                        [
                            [
                                "theta", 
                                "array, shape (n_dims,)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def bounds(self):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def __eq__(self, b):", 
                []
            ], 
            [
                "def __call__(self, X, Y=None, eval_gradient=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ], 
                            [
                                "Y", 
                                "array, shape (n_samples_Y, n_features), (optional, default=None)"
                            ], 
                            [
                                "eval_gradient", 
                                "bool (optional, default=False)"
                            ]
                        ], 
                        [
                            [
                                "K", 
                                "array, shape (n_samples_X, n_samples_Y)"
                            ], 
                            [
                                "K_gradient", 
                                "array (opt.), shape (n_samples_X, n_samples_X, n_dims)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def diag(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def is_stationary(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, constant_value=1.0, constant_value_bounds=(1e-5, 1e5)):", 
                [
                    [
                        [
                            [
                                "constant_value", 
                                "float, default"
                            ], 
                            [
                                "covariance", 
                                ""
                            ], 
                            [
                                "constant_value_bounds", 
                                "pair of floats >= 0, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def hyperparameter_constant_value(self):", 
                []
            ], 
            [
                "def __call__(self, X, Y=None, eval_gradient=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ], 
                            [
                                "Y", 
                                "array, shape (n_samples_Y, n_features), (optional, default=None)"
                            ], 
                            [
                                "eval_gradient", 
                                "bool (optional, default=False)"
                            ]
                        ], 
                        [
                            [
                                "K", 
                                "array, shape (n_samples_X, n_samples_Y)"
                            ], 
                            [
                                "K_gradient", 
                                "array (opt.), shape (n_samples_X, n_samples_X, n_dims)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def diag(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __init__(self, noise_level=1.0, noise_level_bounds=(1e-5, 1e5)):", 
                [
                    [
                        [
                            [
                                "noise_level", 
                                "float, default"
                            ], 
                            [
                                "noise_level_bounds", 
                                "pair of floats >= 0, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def hyperparameter_noise_level(self):", 
                []
            ], 
            [
                "def __call__(self, X, Y=None, eval_gradient=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ], 
                            [
                                "Y", 
                                "array, shape (n_samples_Y, n_features), (optional, default=None)"
                            ], 
                            [
                                "eval_gradient", 
                                "bool (optional, default=False)"
                            ]
                        ], 
                        [
                            [
                                "K", 
                                "array, shape (n_samples_X, n_samples_Y)"
                            ], 
                            [
                                "K_gradient", 
                                "array (opt.), shape (n_samples_X, n_samples_X, n_dims)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def diag(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __init__(self, length_scale=1.0, length_scale_bounds=(1e-5, 1e5)):", 
                [
                    [
                        [
                            [
                                "length_scale", 
                                "float or array with shape (n_features,), default"
                            ], 
                            [
                                "length_scale_bounds", 
                                "pair of floats >= 0, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def anisotropic(self):", 
                []
            ], 
            [
                "def hyperparameter_length_scale(self):", 
                []
            ], 
            [
                "def __call__(self, X, Y=None, eval_gradient=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ], 
                            [
                                "Y", 
                                "array, shape (n_samples_Y, n_features), (optional, default=None)"
                            ], 
                            [
                                "eval_gradient", 
                                "bool (optional, default=False)"
                            ]
                        ], 
                        [
                            [
                                "K", 
                                "array, shape (n_samples_X, n_samples_Y)"
                            ], 
                            [
                                "K_gradient", 
                                "array (opt.), shape (n_samples_X, n_samples_X, n_dims)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __init__(self, length_scale=1.0, length_scale_bounds=(1e-5, 1e5),\n                 nu=1.5):", 
                [
                    [
                        [
                            [
                                "length_scale", 
                                "float or array with shape (n_features,), default"
                            ], 
                            [
                                "length_scale_bounds", 
                                "pair of floats >= 0, default"
                            ], 
                            [
                                "nu", 
                                "float, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __call__(self, X, Y=None, eval_gradient=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ], 
                            [
                                "Y", 
                                "array, shape (n_samples_Y, n_features), (optional, default=None)"
                            ], 
                            [
                                "eval_gradient", 
                                "bool (optional, default=False)"
                            ]
                        ], 
                        [
                            [
                                "K", 
                                "array, shape (n_samples_X, n_samples_Y)"
                            ], 
                            [
                                "K_gradient", 
                                "array (opt.), shape (n_samples_X, n_samples_X, n_dims)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def f(theta):", 
                []
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __init__(self, length_scale=1.0, alpha=1.0,\n                 length_scale_bounds=(1e-5, 1e5), alpha_bounds=(1e-5, 1e5)):", 
                [
                    [
                        [
                            [
                                "length_scale", 
                                "float > 0, default"
                            ], 
                            [
                                "alpha", 
                                "float > 0, default"
                            ], 
                            [
                                "length_scale_bounds", 
                                "pair of floats >= 0, default"
                            ], 
                            [
                                "alpha_bounds", 
                                "pair of floats >= 0, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def hyperparameter_length_scale(self):", 
                []
            ], 
            [
                "def hyperparameter_alpha(self):", 
                []
            ], 
            [
                "def __call__(self, X, Y=None, eval_gradient=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ], 
                            [
                                "Y", 
                                "array, shape (n_samples_Y, n_features), (optional, default=None)"
                            ], 
                            [
                                "eval_gradient", 
                                "bool (optional, default=False)"
                            ]
                        ], 
                        [
                            [
                                "K", 
                                "array, shape (n_samples_X, n_samples_Y)"
                            ], 
                            [
                                "K_gradient", 
                                "array (opt.), shape (n_samples_X, n_samples_X, n_dims)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __init__(self, length_scale=1.0, periodicity=1.0,\n                 length_scale_bounds=(1e-5, 1e5),\n                 periodicity_bounds=(1e-5, 1e5)):", 
                [
                    [
                        [
                            [
                                "length_scale", 
                                "float > 0, default"
                            ], 
                            [
                                "periodicity", 
                                "float > 0, default"
                            ], 
                            [
                                "length_scale_bounds", 
                                "pair of floats >= 0, default"
                            ], 
                            [
                                "periodicity_bounds", 
                                "pair of floats >= 0, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def hyperparameter_length_scale(self):", 
                []
            ], 
            [
                "def hyperparameter_periodicity(self):", 
                []
            ], 
            [
                "def __call__(self, X, Y=None, eval_gradient=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ], 
                            [
                                "Y", 
                                "array, shape (n_samples_Y, n_features), (optional, default=None)"
                            ], 
                            [
                                "eval_gradient", 
                                "bool (optional, default=False)"
                            ]
                        ], 
                        [
                            [
                                "K", 
                                "array, shape (n_samples_X, n_samples_Y)"
                            ], 
                            [
                                "K_gradient", 
                                "array (opt.), shape (n_samples_X, n_samples_X, n_dims)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def __init__(self, sigma_0=1.0, sigma_0_bounds=(1e-5, 1e5)):", 
                [
                    [
                        [
                            [
                                "sigma_0", 
                                "float >= 0, default"
                            ], 
                            [
                                "sigma_0_bounds", 
                                "pair of floats >= 0, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def hyperparameter_sigma_0(self):", 
                []
            ], 
            [
                "def __call__(self, X, Y=None, eval_gradient=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ], 
                            [
                                "Y", 
                                "array, shape (n_samples_Y, n_features), (optional, default=None)"
                            ], 
                            [
                                "eval_gradient", 
                                "bool (optional, default=False)"
                            ]
                        ], 
                        [
                            [
                                "K", 
                                "array, shape (n_samples_X, n_samples_Y)"
                            ], 
                            [
                                "K_gradient", 
                                "array (opt.), shape (n_samples_X, n_samples_X, n_dims)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def diag(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def is_stationary(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ], 
            [
                "def _approx_fprime(xk, f, epsilon, args=()):", 
                []
            ], 
            [
                "def __init__(self, gamma=1.0, gamma_bounds=(1e-5, 1e5), metric=\"linear\",\n                 pairwise_kernels_kwargs=None):", 
                [
                    [
                        [
                            [
                                "gamma", 
                                "float >= 0, default"
                            ], 
                            [
                                "gamma_bounds", 
                                "pair of floats >= 0, default"
                            ], 
                            [
                                "metric", 
                                "string, or callable, default"
                            ], 
                            [
                                "pairwise_kernels_kwargs", 
                                "dict, default"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def hyperparameter_gamma(self):", 
                []
            ], 
            [
                "def __call__(self, X, Y=None, eval_gradient=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ], 
                            [
                                "Y", 
                                "array, shape (n_samples_Y, n_features), (optional, default=None)"
                            ], 
                            [
                                "eval_gradient", 
                                "bool (optional, default=False)"
                            ]
                        ], 
                        [
                            [
                                "K", 
                                "array, shape (n_samples_X, n_samples_Y)"
                            ], 
                            [
                                "K_gradient", 
                                "array (opt.), shape (n_samples_X, n_samples_X, n_dims)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def f(gamma):", 
                []
            ], 
            [
                "def diag(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ], 
                        [
                            [
                                "X", 
                                "array, shape (n_samples_X, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def is_stationary(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def __repr__(self):", 
                []
            ]
        ], 
        100
    ], 
    "../scikit-learn-master\\examples\\applications\\plot_outlier_detection_housing.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\benchmarks\\bench_rcv1_logreg_convergence.py": [
        [
            [
                "def get_loss(w, intercept, myX, myy, C):", 
                []
            ], 
            [
                "def bench_one(name, clf_type, clf_params, n_iter):", 
                []
            ], 
            [
                "def bench(clfs):", 
                []
            ], 
            [
                "def plot_train_losses(clfs):", 
                []
            ], 
            [
                "def plot_train_scores(clfs):", 
                []
            ], 
            [
                "def plot_test_scores(clfs):", 
                []
            ], 
            [
                "def plot_dloss(clfs):", 
                []
            ], 
            [
                "def get_max_squared_sum(X):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        8
    ], 
    "../scikit-learn-master\\sklearn\\gaussian_process\\tests\\test_gpc.py": [
        [
            [
                "def f(x):", 
                []
            ], 
            [
                "def test_predict_consistent():", 
                []
            ], 
            [
                "def test_lml_improving():", 
                []
            ], 
            [
                "def test_lml_precomputed():", 
                []
            ], 
            [
                "def test_converged_to_local_maximum():", 
                []
            ], 
            [
                "def test_lml_gradient():", 
                []
            ], 
            [
                "def test_random_starts():", 
                []
            ], 
            [
                "def test_custom_optimizer():", 
                []
            ], 
            [
                "def optimizer(obj_func, initial_theta, bounds):", 
                []
            ], 
            [
                "def test_multi_class():", 
                []
            ], 
            [
                "def test_multi_class_n_jobs():", 
                []
            ]
        ], 
        11
    ], 
    "../scikit-learn-master\\examples\\applications\\plot_model_complexity_influence.py": [
        [
            [
                "def generate_data(case, sparse=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def benchmark_influence(conf):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def plot_influence(conf, mse_values, prediction_times, complexities):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _count_nonzero_coefficients(estimator):", 
                []
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\sklearn\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\utils\\tests\\test_sparsefuncs.py": [
        [
            [
                "def test_mean_variance_axis0():", 
                []
            ], 
            [
                "def test_mean_variance_axis1():", 
                []
            ], 
            [
                "def test_incr_mean_variance_axis():", 
                []
            ], 
            [
                "def test_mean_variance_illegal_axis():", 
                []
            ], 
            [
                "def test_densify_rows():", 
                []
            ], 
            [
                "def test_inplace_column_scale():", 
                []
            ], 
            [
                "def test_inplace_row_scale():", 
                []
            ], 
            [
                "def test_inplace_swap_row():", 
                []
            ], 
            [
                "def test_inplace_swap_column():", 
                []
            ], 
            [
                "def test_min_max_axis0():", 
                []
            ], 
            [
                "def test_min_max_axis1():", 
                []
            ], 
            [
                "def test_min_max_axis_errors():", 
                []
            ], 
            [
                "def test_count_nonzero():", 
                []
            ], 
            [
                "def test_csc_row_median():", 
                []
            ], 
            [
                "def test_inplace_normalize():", 
                []
            ]
        ], 
        15
    ], 
    "../scikit-learn-master\\examples\\gaussian_process\\plot_gpc_xor.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\linear_model\\tests\\test_least_angle.py": [
        [
            [
                "def test_simple():", 
                []
            ], 
            [
                "def test_simple_precomputed():", 
                []
            ], 
            [
                "def test_all_precomputed():", 
                []
            ], 
            [
                "def test_lars_lstsq():", 
                []
            ], 
            [
                "def test_lasso_gives_lstsq_solution():", 
                []
            ], 
            [
                "def test_collinearity():", 
                []
            ], 
            [
                "def test_no_path():", 
                []
            ], 
            [
                "def test_no_path_precomputed():", 
                []
            ], 
            [
                "def test_no_path_all_precomputed():", 
                []
            ], 
            [
                "def test_lars_precompute():", 
                []
            ], 
            [
                "def test_singular_matrix():", 
                []
            ], 
            [
                "def test_rank_deficient_design():", 
                []
            ], 
            [
                "def test_lasso_lars_vs_lasso_cd(verbose=False):", 
                []
            ], 
            [
                "def test_lasso_lars_vs_lasso_cd_early_stopping(verbose=False):", 
                []
            ], 
            [
                "def test_lasso_lars_path_length():", 
                []
            ], 
            [
                "def test_lasso_lars_vs_lasso_cd_ill_conditioned():", 
                []
            ], 
            [
                "def test_lasso_lars_vs_lasso_cd_ill_conditioned2():", 
                []
            ], 
            [
                "def objective_function(coef):", 
                []
            ], 
            [
                "def test_lars_add_features():", 
                []
            ], 
            [
                "def test_lars_n_nonzero_coefs(verbose=False):", 
                []
            ], 
            [
                "def test_multitarget():", 
                []
            ], 
            [
                "def test_lars_cv():", 
                []
            ], 
            [
                "def test_lars_cv_max_iter():", 
                []
            ], 
            [
                "def test_lasso_lars_ic():", 
                []
            ], 
            [
                "def test_lars_path_readonly_data():", 
                []
            ], 
            [
                "def test_lars_path_positive_constraint():", 
                []
            ], 
            [
                "def test_estimatorclasses_positive_constraint():", 
                []
            ], 
            [
                "def test_lasso_lars_vs_lasso_cd_positive(verbose=False):", 
                []
            ], 
            [
                "def test_lasso_lars_vs_R_implementation():", 
                []
            ]
        ], 
        29
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_voting_decision_regions.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\plot_digits_pipe.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_sgd_separating_hyperplane.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\plot_multioutput_face_completion.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\manifold\\plot_manifold_sphere.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\linear_model\\plot_ols.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\pairwise.py": [
        [
            [
                "def _return_float_dtype(X, Y):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def check_pairwise_arrays(X, Y, precomputed=False, dtype=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples_a, n_features)"
                            ], 
                            [
                                "Y", 
                                "{array-like, sparse matrix}, shape (n_samples_b, n_features)"
                            ], 
                            [
                                "precomputed", 
                                "bool"
                            ], 
                            [
                                "dtype", 
                                "string, type, list of types or None (default=None)"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "safe_X", 
                                "{array-like, sparse matrix}, shape (n_samples_a, n_features)"
                            ], 
                            [
                                "safe_Y", 
                                "{array-like, sparse matrix}, shape (n_samples_b, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def check_paired_arrays(X, Y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples_a, n_features)"
                            ], 
                            [
                                "Y", 
                                "{array-like, sparse matrix}, shape (n_samples_b, n_features)"
                            ]
                        ], 
                        [
                            [
                                "safe_X", 
                                "{array-like, sparse matrix}, shape (n_samples_a, n_features)"
                            ], 
                            [
                                "safe_Y", 
                                "{array-like, sparse matrix}, shape (n_samples_b, n_features)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def euclidean_distances(X, Y=None, Y_norm_squared=None, squared=False,\n                        X_norm_squared=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples_1, n_features)"
                            ], 
                            [
                                "Y", 
                                "{array-like, sparse matrix}, shape (n_samples_2, n_features)"
                            ], 
                            [
                                "Y_norm_squared", 
                                "array-like, shape (n_samples_2, ), optional"
                            ], 
                            [
                                "squared", 
                                "boolean, optional"
                            ], 
                            [
                                "X_norm_squared", 
                                "array-like, shape = [n_samples_1], optional"
                            ]
                        ], 
                        [
                            [
                                "distances", 
                                "{array, sparse matrix}, shape (n_samples_1, n_samples_2)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def pairwise_distances_argmin_min(X, Y, axis=1, metric=\"euclidean\",\n                                  batch_size=500, metric_kwargs=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape (n_samples1, n_features)"
                            ], 
                            [
                                "Y", 
                                "{array-like, sparse matrix}, shape (n_samples2, n_features)"
                            ], 
                            [
                                "axis", 
                                "int, optional, default 1"
                            ], 
                            [
                                "metric", 
                                "string or callable, default 'euclidean'"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "batch_size", 
                                "integer"
                            ], 
                            [
                                "metric_kwargs", 
                                "dict, optional"
                            ]
                        ], 
                        [
                            [
                                "argmin", 
                                "numpy.ndarray"
                            ], 
                            [
                                "distances", 
                                "numpy.ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def pairwise_distances_argmin(X, Y, axis=1, metric=\"euclidean\",\n                              batch_size=500, metric_kwargs=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like"
                            ], 
                            [
                                "Y", 
                                "array-like"
                            ], 
                            [
                                "axis", 
                                "int, optional, default 1"
                            ], 
                            [
                                "metric", 
                                "string or callable"
                            ], 
                            [
                                "are", 
                                ""
                            ], 
                            [
                                "batch_size", 
                                "integer"
                            ], 
                            [
                                "metric_kwargs", 
                                "dict"
                            ]
                        ], 
                        [
                            [
                                "argmin", 
                                "numpy.ndarray"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def manhattan_distances(X, Y=None, sum_over_features=True,\n                        size_threshold=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like"
                            ], 
                            [
                                "Y", 
                                "array_like, optional"
                            ], 
                            [
                                "sum_over_features", 
                                "bool, default=True"
                            ], 
                            [
                                "size_threshold", 
                                "int, default=5e8"
                            ]
                        ], 
                        [
                            [
                                "D", 
                                "array"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def cosine_distances(X, Y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like, sparse matrix"
                            ], 
                            [
                                "Y", 
                                "array_like, sparse matrix (optional)"
                            ]
                        ], 
                        [
                            [
                                "matrix", 
                                "array"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def paired_euclidean_distances(X, Y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "Y", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "distances", 
                                "ndarray (n_samples, )"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def paired_manhattan_distances(X, Y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "Y", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "distances", 
                                "ndarray (n_samples, )"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def paired_cosine_distances(X, Y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_samples, n_features)"
                            ], 
                            [
                                "Y", 
                                "array-like, shape (n_samples, n_features)"
                            ]
                        ], 
                        [
                            [
                                "distances", 
                                "ndarray, shape (n_samples, )"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def paired_distances(X, Y, metric=\"euclidean\", **kwds):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray (n_samples, n_features)"
                            ], 
                            [
                                "Y", 
                                "ndarray (n_samples, n_features)"
                            ], 
                            [
                                "metric", 
                                "string or callable"
                            ]
                        ], 
                        [
                            [
                                "distances", 
                                "ndarray (n_samples, )"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def linear_kernel(X, Y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array of shape (n_samples_1, n_features)"
                            ], 
                            [
                                "Y", 
                                "array of shape (n_samples_2, n_features)"
                            ]
                        ], 
                        [
                            [
                                "matrix", 
                                "array of shape (n_samples_1, n_samples_2)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def polynomial_kernel(X, Y=None, degree=3, gamma=None, coef0=1):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray of shape (n_samples_1, n_features)"
                            ], 
                            [
                                "Y", 
                                "ndarray of shape (n_samples_2, n_features)"
                            ], 
                            [
                                "degree", 
                                "int, default 3"
                            ], 
                            [
                                "gamma", 
                                "float, default None"
                            ], 
                            [
                                "coef0", 
                                "int, default 1"
                            ]
                        ], 
                        [
                            [
                                "matrix", 
                                "array of shape (n_samples_1, n_samples_2)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def sigmoid_kernel(X, Y=None, gamma=None, coef0=1):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray of shape (n_samples_1, n_features)"
                            ], 
                            [
                                "Y", 
                                "ndarray of shape (n_samples_2, n_features)"
                            ], 
                            [
                                "gamma", 
                                "float, default None"
                            ], 
                            [
                                "coef0", 
                                "int, default 1"
                            ]
                        ], 
                        [
                            [
                                "matrix", 
                                "array of shape (n_samples_1, n_samples_2)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def rbf_kernel(X, Y=None, gamma=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array of shape (n_samples_X, n_features)"
                            ], 
                            [
                                "Y", 
                                "array of shape (n_samples_Y, n_features)"
                            ], 
                            [
                                "gamma", 
                                "float, default None"
                            ]
                        ], 
                        [
                            [
                                "kernel_matrix", 
                                "array of shape (n_samples_X, n_samples_Y)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def laplacian_kernel(X, Y=None, gamma=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array of shape (n_samples_X, n_features)"
                            ], 
                            [
                                "Y", 
                                "array of shape (n_samples_Y, n_features)"
                            ], 
                            [
                                "gamma", 
                                "float, default None"
                            ]
                        ], 
                        [
                            [
                                "kernel_matrix", 
                                "array of shape (n_samples_X, n_samples_Y)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def cosine_similarity(X, Y=None, dense_output=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "ndarray or sparse array, shape"
                            ], 
                            [
                                "Y", 
                                "ndarray or sparse array, shape"
                            ], 
                            [
                                "dense_output", 
                                "boolean (optional), default True"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        [
                            [
                                "matrix", 
                                "array"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def additive_chi2_kernel(X, Y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like of shape (n_samples_X, n_features)"
                            ], 
                            [
                                "Y", 
                                "array of shape (n_samples_Y, n_features)"
                            ]
                        ], 
                        [
                            [
                                "kernel_matrix", 
                                "array of shape (n_samples_X, n_samples_Y)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def chi2_kernel(X, Y=None, gamma=1.):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like of shape (n_samples_X, n_features)"
                            ], 
                            [
                                "Y", 
                                "array of shape (n_samples_Y, n_features)"
                            ], 
                            [
                                "gamma", 
                                "float, default=1."
                            ]
                        ], 
                        [
                            [
                                "kernel_matrix", 
                                "array of shape (n_samples_X, n_samples_Y)"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def distance_metrics():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _parallel_pairwise(X, Y, func, n_jobs, **kwds):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _pairwise_callable(X, Y, metric, **kwds):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def pairwise_distances(X, Y=None, metric=\"euclidean\", n_jobs=1, **kwds):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array [n_samples_a, n_samples_a] if metric == \"precomputed\", or, \\"
                            ], 
                            [
                                "Y", 
                                "array [n_samples_b, n_features], optional"
                            ], 
                            [
                                "metric", 
                                "string, or callable"
                            ], 
                            [
                                "n_jobs", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "D", 
                                "array [n_samples_a, n_samples_a] or [n_samples_a, n_samples_b]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def kernel_metrics():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def pairwise_kernels(X, Y=None, metric=\"linear\", filter_params=False,\n                     n_jobs=1, **kwds):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array [n_samples_a, n_samples_a] if metric == \"precomputed\", or, \\"
                            ], 
                            [
                                "Y", 
                                "array [n_samples_b, n_features]"
                            ], 
                            [
                                "metric", 
                                "string, or callable"
                            ], 
                            [
                                "filter_params", 
                                "boolean"
                            ], 
                            [
                                "n_jobs", 
                                "int"
                            ]
                        ], 
                        [
                            [
                                "K", 
                                "array [n_samples_a, n_samples_a] or [n_samples_a, n_samples_b]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        26
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\tests\\test_score_objects.py": [
        [
            [
                "def _make_estimators(X_train, y_train, y_ml_train):", 
                []
            ], 
            [
                "def setup_module():", 
                []
            ], 
            [
                "def teardown_module():", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def score(self, X, y):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def predict(self, X):", 
                []
            ], 
            [
                "def __call__(self, est, X, y):", 
                []
            ], 
            [
                "def test_all_scorers_repr():", 
                []
            ], 
            [
                "def check_scoring_validator_for_single_metric_usecases(scoring_validator):", 
                []
            ], 
            [
                "def check_multimetric_scoring_single_metric_wrapper(*args, **kwargs):", 
                []
            ], 
            [
                "def test_check_scoring_and_check_multimetric_scoring():", 
                []
            ], 
            [
                "def test_check_scoring_gridsearchcv():", 
                []
            ], 
            [
                "def test_make_scorer():", 
                []
            ], 
            [
                "def test_classification_scores():", 
                []
            ], 
            [
                "def test_regression_scorers():", 
                []
            ], 
            [
                "def test_thresholded_scorers():", 
                []
            ], 
            [
                "def test_thresholded_scorers_multilabel_indicator_data():", 
                []
            ], 
            [
                "def test_supervised_cluster_scorers():", 
                []
            ], 
            [
                "def test_raises_on_score_list():", 
                []
            ], 
            [
                "def test_scorer_sample_weight():", 
                []
            ], 
            [
                "def check_scorer_memmap(scorer_name):", 
                []
            ], 
            [
                "def test_scorer_memmap_input():", 
                []
            ], 
            [
                "def test_deprecated_names():", 
                []
            ], 
            [
                "def test_scoring_is_not_metric():", 
                []
            ]
        ], 
        26
    ], 
    "../scikit-learn-master\\benchmarks\\bench_plot_svd.py": [
        [
            [
                "def compute_bench(samples_range, features_range, n_iter=3, rank=50):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_bias_variance.py": [
        [
            [
                "def f(x):", 
                []
            ], 
            [
                "def generate(n_samples, noise, n_repeat=1):", 
                []
            ]
        ], 
        2
    ], 
    "../scikit-learn-master\\sklearn\\metrics\\cluster\\unsupervised.py": [
        [
            [
                "def check_number_of_labels(n_labels, n_samples):", 
                []
            ], 
            [
                "def silhouette_score(X, labels, metric='euclidean', sample_size=None,\n                     random_state=None, **kwds):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array [n_samples_a, n_samples_a] if metric == \"precomputed\", or, \\"
                            ], 
                            [
                                "labels", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "metric", 
                                "string, or callable"
                            ], 
                            [
                                "by", 
                                "func"
                            ], 
                            [
                                "sample_size", 
                                "int or None"
                            ], 
                            [
                                "random_state", 
                                "int, RandomState instance or None, optional (default=None)"
                            ]
                        ], 
                        [
                            [
                                "silhouette", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def silhouette_samples(X, labels, metric='euclidean', **kwds):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array [n_samples_a, n_samples_a] if metric == \"precomputed\", or, \\"
                            ], 
                            [
                                "labels", 
                                "array, shape = [n_samples]"
                            ], 
                            [
                                "metric", 
                                "string, or callable"
                            ], 
                            [
                                "by", 
                                "func"
                            ]
                        ], 
                        [
                            [
                                "silhouette", 
                                "array, shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def calinski_harabaz_score(X, labels):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (``n_samples``, ``n_features``)"
                            ], 
                            [
                                "labels", 
                                "array-like, shape (``n_samples``,)"
                            ]
                        ], 
                        [
                            [
                                "score", 
                                "float"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        4
    ], 
    "../scikit-learn-master\\examples\\cluster\\plot_color_quantization.py": [
        [
            [
                "def recreate_image(codebook, labels, w, h):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\sklearn\\datasets\\svmlight_format.py": [
        [
            [
                "def load_svmlight_file(f, n_features=None, dtype=np.float64,\n                       multilabel=False, zero_based=\"auto\", query_id=False,\n                       offset=0, length=-1):", 
                []
            ], 
            [
                "def get_data():", 
                []
            ], 
            [
                "def _gen_open(f):", 
                []
            ], 
            [
                "def _open_and_load(f, dtype, multilabel, zero_based, query_id,\n                   offset=0, length=-1):", 
                []
            ], 
            [
                "def load_svmlight_files(files, n_features=None, dtype=np.float64,\n                        multilabel=False, zero_based=\"auto\", query_id=False,\n                        offset=0, length=-1):", 
                [
                    [
                        [
                            [
                                "files", 
                                "iterable over {str, file-like, int}"
                            ], 
                            [
                                "n_features", 
                                "int or None"
                            ], 
                            [
                                "dtype", 
                                "numpy data type, default np.float64"
                            ], 
                            [
                                "multilabel", 
                                "boolean, optional"
                            ], 
                            [
                                "http", 
                                "//www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel.html)"
                            ], 
                            [
                                "zero_based", 
                                "boolean or \"auto\", optional"
                            ], 
                            [
                                "query_id", 
                                "boolean, defaults to False"
                            ], 
                            [
                                "offset", 
                                "integer, optional, default 0"
                            ], 
                            [
                                "length", 
                                "integer, optional, default -1"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def _dump_svmlight(X, y, f, multilabel, one_based, comment, query_id):", 
                []
            ], 
            [
                "def dump_svmlight_file(X, y, f,  zero_based=True, comment=None, query_id=None,\n                       multilabel=False):", 
                [
                    [
                        [
                            [
                                "X", 
                                "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "{array-like, sparse matrix}, shape = [n_samples (, n_labels)]"
                            ], 
                            [
                                "f", 
                                "string or file-like in binary mode"
                            ], 
                            [
                                "zero_based", 
                                "boolean, optional"
                            ], 
                            [
                                "comment", 
                                "string, optional"
                            ], 
                            [
                                "query_id", 
                                "array-like, shape = [n_samples]"
                            ], 
                            [
                                "multilabel", 
                                "boolean, optional"
                            ], 
                            [
                                "http", 
                                "//www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel.html)"
                            ], 
                            [
                                "versionadded", 
                                ""
                            ]
                        ], 
                        null
                    ]
                ]
            ]
        ], 
        7
    ], 
    "../scikit-learn-master\\examples\\plot_johnson_lindenstrauss_bound.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_kernel_approximation.py": [
        [
            [
                "def test_additive_chi2_sampler():", 
                []
            ], 
            [
                "def test_skewed_chi2_sampler():", 
                []
            ], 
            [
                "def test_rbf_sampler():", 
                []
            ], 
            [
                "def test_input_validation():", 
                []
            ], 
            [
                "def test_nystroem_approximation():", 
                []
            ], 
            [
                "def linear_kernel(X, Y):", 
                []
            ], 
            [
                "def test_nystroem_default_parameters():", 
                []
            ], 
            [
                "def test_nystroem_singular_kernel():", 
                []
            ], 
            [
                "def test_nystroem_poly_kernel_params():", 
                []
            ], 
            [
                "def test_nystroem_callable():", 
                []
            ], 
            [
                "def logging_histogram_kernel(x, y, log):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def linear_kernel(X, Y):", 
                []
            ]
        ], 
        12
    ], 
    "../scikit-learn-master\\sklearn\\manifold\\tests\\__init__.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\examples\\tree\\plot_unveil_tree_structure.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\semi_supervised\\label_propagation.py": [
        [
            [
                "def __init__(self, kernel='rbf', gamma=20, n_neighbors=7,\n                 alpha=1, max_iter=30, tol=1e-3, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "kernel", 
                                "{'knn', 'rbf', callable}"
                            ], 
                            [
                                "gamma", 
                                "float"
                            ], 
                            [
                                "n_neighbors", 
                                "integer > 0"
                            ], 
                            [
                                "alpha", 
                                "float"
                            ], 
                            [
                                "max_iter", 
                                "integer"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "tolerance", 
                                "threshold to consider the system at steady"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default = 1)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _get_kernel(self, X, y=None):", 
                []
            ], 
            [
                "def _build_graph(self):", 
                []
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array_like, shape = [n_samples, n_features]"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array_like, shape = [n_samples]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array_like, shape = [n_samples]"
                            ]
                        ], 
                        [
                            [
                                "self", 
                                "returns an instance of self."
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, kernel='rbf', gamma=20, n_neighbors=7,\n                 alpha=None, max_iter=1000, tol=1e-3, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "kernel", 
                                "{'knn', 'rbf', callable}"
                            ], 
                            [
                                "gamma", 
                                "float"
                            ], 
                            [
                                "n_neighbors", 
                                "integer > 0"
                            ], 
                            [
                                "alpha", 
                                "float"
                            ], 
                            [
                                "deprecated", 
                                ""
                            ], 
                            [
                                "max_iter", 
                                "integer"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "tolerance", 
                                "threshold to consider the system at steady"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default = 1)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _build_graph(self):", 
                []
            ], 
            [
                "def fit(self, X, y):", 
                []
            ], 
            [
                "def __init__(self, kernel='rbf', gamma=20, n_neighbors=7, alpha=0.2,\n                 max_iter=30, tol=1e-3, n_jobs=1):", 
                [
                    [
                        [
                            [
                                "kernel", 
                                "{'knn', 'rbf', callable}"
                            ], 
                            [
                                "gamma", 
                                "float"
                            ], 
                            [
                                "n_neighbors", 
                                "integer > 0"
                            ], 
                            [
                                "alpha", 
                                "float"
                            ], 
                            [
                                "max_iter", 
                                "integer"
                            ], 
                            [
                                "tol", 
                                "float"
                            ], 
                            [
                                "tolerance", 
                                "threshold to consider the system at steady"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default = 1)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def _build_graph(self):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        11
    ], 
    "../scikit-learn-master\\sklearn\\neighbors\\classification.py": [
        [
            [
                "def __init__(self, n_neighbors=5,\n                 weights='uniform', algorithm='auto', leaf_size=30,\n                 p=2, metric='minkowski', metric_params=None, n_jobs=1,\n                 **kwargs):", 
                [
                    [
                        [
                            [
                                "n_neighbors", 
                                "int, optional (default = 5)"
                            ], 
                            [
                                "for", 
                                "meth"
                            ], 
                            [
                                "weights", 
                                "str or callable, optional (default = 'uniform')"
                            ], 
                            [
                                "values", 
                                ""
                            ], 
                            [
                                "algorithm", 
                                "{'auto', 'ball_tree', 'kd_tree', 'brute'}, optional"
                            ], 
                            [
                                "neighbors", 
                                ""
                            ], 
                            [
                                "use", 
                                "class"
                            ], 
                            [
                                "use", 
                                "class"
                            ], 
                            [
                                "to", 
                                "meth"
                            ], 
                            [
                                "Note", 
                                "fitting on sparse input will override the setting of"
                            ], 
                            [
                                "leaf_size", 
                                "int, optional (default = 30)"
                            ], 
                            [
                                "p", 
                                "integer, optional (default = 2)"
                            ], 
                            [
                                "metric", 
                                "string or callable, default 'minkowski'"
                            ], 
                            [
                                "metric_params", 
                                "dict, optional (default = None)"
                            ], 
                            [
                                "n_jobs", 
                                "int, optional (default = 1)"
                            ], 
                            [
                                "affect", 
                                "meth"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_query, n_features), \\"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array of shape [n_samples] or [n_samples, n_outputs]"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def predict_proba(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_query, n_features), \\"
                            ]
                        ], 
                        [
                            [
                                "p", 
                                "array of shape = [n_samples, n_classes], or a list of n_outputs"
                            ]
                        ]
                    ]
                ]
            ], 
            [
                "def __init__(self, radius=1.0, weights='uniform',\n                 algorithm='auto', leaf_size=30, p=2, metric='minkowski',\n                 outlier_label=None, metric_params=None, **kwargs):", 
                [
                    [
                        [
                            [
                                "radius", 
                                "float, optional (default = 1.0)"
                            ], 
                            [
                                "for", 
                                "meth"
                            ], 
                            [
                                "weights", 
                                "str or callable"
                            ], 
                            [
                                "values", 
                                ""
                            ], 
                            [
                                "algorithm", 
                                "{'auto', 'ball_tree', 'kd_tree', 'brute'}, optional"
                            ], 
                            [
                                "neighbors", 
                                ""
                            ], 
                            [
                                "use", 
                                "class"
                            ], 
                            [
                                "use", 
                                "class"
                            ], 
                            [
                                "to", 
                                "meth"
                            ], 
                            [
                                "Note", 
                                "fitting on sparse input will override the setting of"
                            ], 
                            [
                                "leaf_size", 
                                "int, optional (default = 30)"
                            ], 
                            [
                                "p", 
                                "integer, optional (default = 2)"
                            ], 
                            [
                                "metric", 
                                "string or callable, default 'minkowski'"
                            ], 
                            [
                                "outlier_label", 
                                "int, optional (default = None)"
                            ], 
                            [
                                "metric_params", 
                                "dict, optional (default = None)"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def predict(self, X):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape (n_query, n_features), \\"
                            ]
                        ], 
                        [
                            [
                                "y", 
                                "array of shape [n_samples] or [n_samples, n_outputs]"
                            ]
                        ]
                    ]
                ]
            ]
        ], 
        5
    ], 
    "../scikit-learn-master\\sklearn\\tests\\test_metaestimators.py": [
        [
            [
                "def __init__(self, name, construct, skip_methods=(),\n                 fit_args=make_classification()):", 
                []
            ], 
            [
                "def test_metaestimator_delegation():", 
                []
            ], 
            [
                "def hides(method):", 
                []
            ], 
            [
                "def wrapper(obj):", 
                []
            ], 
            [
                "def __init__(self, param=1, hidden_method=None):", 
                []
            ], 
            [
                "def fit(self, X, y=None, *args, **kwargs):", 
                []
            ], 
            [
                "def _check_fit(self):", 
                []
            ], 
            [
                "def inverse_transform(self, X, *args, **kwargs):", 
                []
            ], 
            [
                "def transform(self, X, *args, **kwargs):", 
                []
            ], 
            [
                "def predict(self, X, *args, **kwargs):", 
                []
            ], 
            [
                "def predict_proba(self, X, *args, **kwargs):", 
                []
            ], 
            [
                "def predict_log_proba(self, X, *args, **kwargs):", 
                []
            ], 
            [
                "def decision_function(self, X, *args, **kwargs):", 
                []
            ], 
            [
                "def score(self, X, *args, **kwargs):", 
                []
            ]
        ], 
        14
    ], 
    "../scikit-learn-master\\sklearn\\mixture\\tests\\test_gmm.py": [
        [
            [
                "def test_sample_gaussian():", 
                []
            ], 
            [
                "def _naive_lmvnpdf_diag(X, mu, cv):", 
                []
            ], 
            [
                "def test_lmvnpdf_diag():", 
                []
            ], 
            [
                "def test_lmvnpdf_spherical():", 
                []
            ], 
            [
                "def test_lmvnpdf_full():", 
                []
            ], 
            [
                "def test_lvmpdf_full_cv_non_positive_definite():", 
                []
            ], 
            [
                "def test_GMM_attributes():", 
                []
            ], 
            [
                "def _setUp(self):", 
                []
            ], 
            [
                "def test_eval(self):", 
                []
            ], 
            [
                "def test_sample(self, n=100):", 
                []
            ], 
            [
                "def test_train(self, params='wmc'):", 
                []
            ], 
            [
                "def test_train_degenerate(self, params='wmc'):", 
                []
            ], 
            [
                "def test_train_1d(self, params='wmc'):", 
                []
            ], 
            [
                "def score(self, g, X):", 
                []
            ], 
            [
                "def test_multiple_init():", 
                []
            ], 
            [
                "def test_n_parameters():", 
                []
            ], 
            [
                "def test_1d_1component():", 
                []
            ], 
            [
                "def assert_fit_predict_correct(model, X):", 
                []
            ], 
            [
                "def test_fit_predict():", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_aic():", 
                []
            ], 
            [
                "def check_positive_definite_covars(covariance_type):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def test_positive_definite_covars():", 
                []
            ], 
            [
                "def test_verbose_first_level():", 
                []
            ], 
            [
                "def test_verbose_second_level():", 
                []
            ]
        ], 
        24
    ], 
    "../scikit-learn-master\\examples\\model_selection\\plot_randomized_search.py": [
        [
            [
                "def report(results, n_top=3):", 
                []
            ]
        ], 
        1
    ], 
    "../scikit-learn-master\\examples\\covariance\\plot_covariance_estimation.py": [
        [], 
        0
    ], 
    "../scikit-learn-master\\sklearn\\cross_decomposition\\pls_.py": [
        [
            [
                "def _nipals_twoblocks_inner_loop(X, Y, mode=\"A\", max_iter=500, tol=1e-06,\n                                 norm_y_weights=False):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def _svd_cross_product(X, Y):", 
                []
            ], 
            [
                "def _center_scale_xy(X, Y, scale=True):", 
                [
                    [
                        null, 
                        []
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=2, scale=True, deflation_mode=\"regression\",\n                 mode=\"A\", algorithm=\"nipals\", norm_y_weights=False,\n                 max_iter=500, tol=1e-06, copy=True):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, Y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "Y", 
                                "array-like, shape = [n_samples, n_targets]"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X, Y=None, copy=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "Y", 
                                "array-like, shape = [n_samples, n_targets]"
                            ], 
                            [
                                "copy", 
                                "boolean, default True"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def predict(self, X, copy=True):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "copy", 
                                "boolean, default True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples, n_targets]"
                            ]
                        ], 
                        []
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=2, scale=True,\n                 max_iter=500, tol=1e-06, copy=True):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int, (default 2)"
                            ], 
                            [
                                "scale", 
                                "boolean, (default True)"
                            ], 
                            [
                                "max_iter", 
                                "an integer, (default 500)"
                            ], 
                            [
                                "tol", 
                                "non-negative real"
                            ], 
                            [
                                "copy", 
                                "boolean, default True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=2, scale=True, algorithm=\"nipals\",\n                 max_iter=500, tol=1e-06, copy=True):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int, (default 2)."
                            ], 
                            [
                                "scale", 
                                "boolean, (default True)"
                            ], 
                            [
                                "algorithm", 
                                "string, \"nipals\" or \"svd\""
                            ], 
                            [
                                "max_iter", 
                                "an integer, (default 500)"
                            ], 
                            [
                                "tol", 
                                "non-negative real, default 1e-06"
                            ], 
                            [
                                "copy", 
                                "boolean, default True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def __init__(self, n_components=2, scale=True, copy=True):", 
                [
                    [
                        [
                            [
                                "n_components", 
                                "int, default 2"
                            ], 
                            [
                                "scale", 
                                "boolean, default True"
                            ], 
                            [
                                "copy", 
                                "boolean, default True"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit(self, X, Y):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "Y", 
                                "array-like, shape = [n_samples, n_targets]"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def transform(self, X, Y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "Y", 
                                "array-like, shape = [n_samples, n_targets]"
                            ]
                        ], 
                        null
                    ]
                ]
            ], 
            [
                "def fit_transform(self, X, y=None):", 
                [
                    [
                        [
                            [
                                "X", 
                                "array-like, shape = [n_samples, n_features]"
                            ], 
                            [
                                "y", 
                                "array-like, shape = [n_samples, n_targets]"
                            ]
                        ], 
                        []
                    ]
                ]
            ]
        ], 
        14
    ], 
    "../scikit-learn-master\\sklearn\\ensemble\\tests\\test_gradient_boosting_loss_functions.py": [
        [
            [
                "def test_binomial_deviance():", 
                []
            ], 
            [
                "def test_log_odds_estimator():", 
                []
            ], 
            [
                "def test_sample_weight_smoke():", 
                []
            ], 
            [
                "def test_sample_weight_init_estimators():", 
                []
            ], 
            [
                "def test_weighted_percentile():", 
                []
            ], 
            [
                "def test_weighted_percentile_equal():", 
                []
            ], 
            [
                "def test_weighted_percentile_zero_weight():", 
                []
            ], 
            [
                "def test_quantile_loss_function():", 
                []
            ], 
            [
                "def test_sample_weight_deviance():", 
                []
            ]
        ], 
        9
    ], 
    "../scikit-learn-master\\examples\\ensemble\\plot_gradient_boosting_quantile.py": [
        [
            [
                "def f(x):", 
                [
                    [
                        null, 
                        null
                    ]
                ]
            ]
        ], 
        1
    ]
}