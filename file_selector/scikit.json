{
    "../scikit-learn-master/sklearn\\base.py": [
        {
            "name": "clone",
            "line": 29,
            "params": [
                [
                    "estimator",
                    "estimator object, or list, tuple or set of objects"
                ],
                [
                    "safe",
                    "boolean, optional"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "is_classifier",
            "line": 535,
            "params": [
                [
                    "estimator",
                    "object"
                ]
            ],
            "returns": [
                [
                    "out",
                    "bool"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "is_regressor",
            "line": 551,
            "params": [
                [
                    "estimator",
                    "object"
                ]
            ],
            "returns": [
                [
                    "out",
                    "bool"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\calibration.py": [
        {
            "name": "calibration_curve",
            "line": 513,
            "params": [
                [
                    "y_true",
                    "array, shape (n_samples,)"
                ],
                [
                    "y_prob",
                    "array, shape (n_samples,)"
                ],
                [
                    "normalize",
                    "bool, optional, default=False"
                ],
                [
                    "n_bins",
                    "int"
                ]
            ],
            "returns": [
                [
                    "prob_true",
                    "array, shape (n_bins,)"
                ],
                [
                    "prob_pred",
                    "array, shape (n_bins,)"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cross_validation.py": [
        {
            "name": "cross_val_predict",
            "line": 1295,
            "params": [
                [
                    "estimator",
                    "estimator object implementing 'fit' and 'predict'"
                ],
                [
                    "X",
                    "array-like"
                ],
                [
                    "y",
                    "array-like, optional, default: None"
                ],
                [
                    "cv",
                    "int, cross-validation generator or an iterable, optional"
                ],
                [
                    "n_jobs",
                    "integer, optional"
                ],
                [
                    "verbose",
                    "integer, optional"
                ],
                [
                    "fit_params",
                    "dict, optional"
                ],
                [
                    "pre_dispatch",
                    "int, or string, optional"
                ]
            ],
            "returns": [
                [
                    "preds",
                    "ndarray"
                ]
            ],
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "cross_val_score",
            "line": 1479,
            "params": [
                [
                    "estimator",
                    "estimator object implementing 'fit'"
                ],
                [
                    "X",
                    "array-like"
                ],
                [
                    "y",
                    "array-like, optional, default: None"
                ],
                [
                    "scoring",
                    "string, callable or None, optional, default: None"
                ],
                [
                    "cv",
                    "int, cross-validation generator or an iterable, optional"
                ],
                [
                    "n_jobs",
                    "integer, optional"
                ],
                [
                    "verbose",
                    "integer, optional"
                ],
                [
                    "fit_params",
                    "dict, optional"
                ],
                [
                    "pre_dispatch",
                    "int, or string, optional"
                ]
            ],
            "returns": [
                [
                    "scores",
                    "array of float, shape=(len(list(cv)),)"
                ]
            ],
            "count": {
                "total_params": 9,
                "missed_params": 0
            }
        },
        {
            "name": "check_cv",
            "line": 1788,
            "params": [
                [
                    "cv",
                    "int, cross-validation generator or an iterable, optional"
                ],
                [
                    "X",
                    "array-like"
                ],
                [
                    "y",
                    "array-like"
                ],
                [
                    "classifier",
                    "boolean optional"
                ]
            ],
            "returns": [
                [
                    "checked_cv",
                    "a cross-validation generator instance."
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "permutation_test_score",
            "line": 1849,
            "params": [
                [
                    "estimator",
                    "estimator object implementing 'fit'"
                ],
                [
                    "X",
                    "array-like of shape at least 2D"
                ],
                [
                    "y",
                    "array-like"
                ],
                [
                    "cv",
                    "int, cross-validation generator or an iterable, optional"
                ],
                [
                    "n_permutations",
                    "integer, optional"
                ],
                [
                    "n_jobs",
                    "integer, optional"
                ],
                [
                    "labels",
                    "array-like of shape [n_samples] (optional)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=0)"
                ],
                [
                    "verbose",
                    "integer, optional"
                ],
                [
                    "scoring",
                    "string, callable or None, optional, default: None"
                ]
            ],
            "returns": [
                [
                    "score",
                    "float"
                ],
                [
                    "permutation_scores",
                    "array, shape (n_permutations,)"
                ],
                [
                    "pvalue",
                    "float"
                ]
            ],
            "count": {
                "total_params": 10,
                "missed_params": 0
            }
        },
        {
            "name": "train_test_split",
            "line": 1959,
            "params": [],
            "returns": [
                [
                    "splitting",
                    "list, length = 2 * len(arrays),"
                ]
            ],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\discriminant_analysis.py": [],
    "../scikit-learn-master/sklearn\\dummy.py": [],
    "../scikit-learn-master/sklearn\\exceptions.py": [],
    "../scikit-learn-master/sklearn\\grid_search.py": [
        {
            "name": "fit_grid_point",
            "line": 276,
            "params": [
                [
                    "X",
                    "array-like, sparse matrix or list"
                ],
                [
                    "y",
                    "array-like or None"
                ],
                [
                    "estimator",
                    "estimator object"
                ],
                [
                    "parameters",
                    "dict"
                ],
                [
                    "train",
                    "ndarray, dtype int or bool"
                ],
                [
                    "test",
                    "ndarray, dtype int or bool"
                ],
                [
                    "scorer",
                    "callable or None."
                ],
                [
                    "verbose",
                    "int"
                ],
                [
                    "error_score",
                    "'raise' (default) or numeric"
                ]
            ],
            "returns": [
                [
                    "score",
                    "float"
                ],
                [
                    "parameters",
                    "dict"
                ],
                [
                    "n_samples_test",
                    "int"
                ]
            ],
            "count": {
                "total_params": 9,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\isotonic.py": [
        {
            "name": "check_increasing",
            "line": 21,
            "params": [
                [
                    "x",
                    "array-like, shape=(n_samples,)"
                ],
                [
                    "y",
                    "array-like, shape=(n_samples,)"
                ]
            ],
            "returns": [
                [
                    "increasing_bool",
                    "boolean"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "isotonic_regression",
            "line": 79,
            "params": [
                [
                    "y",
                    "iterable of floating-point values"
                ],
                [
                    "sample_weight",
                    "iterable of floating-point values, optional, default: None"
                ],
                [
                    "y_min",
                    "optional, default: None"
                ],
                [
                    "y_max",
                    "optional, default: None"
                ],
                [
                    "increasing",
                    "boolean, optional, default: True"
                ]
            ],
            "returns": [
                [
                    "y_",
                    "list of floating-point values"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\kernel_approximation.py": [],
    "../scikit-learn-master/sklearn\\kernel_ridge.py": [],
    "../scikit-learn-master/sklearn\\learning_curve.py": [
        {
            "name": "learning_curve",
            "line": 31,
            "params": [
                [
                    "estimator",
                    "object type that implements the \"fit\" and \"predict\" methods"
                ],
                [
                    "X",
                    "array-like, shape (n_samples, n_features)"
                ],
                [
                    "y",
                    "array-like, shape (n_samples) or (n_samples, n_features), optional"
                ],
                [
                    "train_sizes",
                    "array-like, shape (n_ticks,), dtype float or int"
                ],
                [
                    "cv",
                    "int, cross-validation generator or an iterable, optional"
                ],
                [
                    "scoring",
                    "string, callable or None, optional, default: None"
                ],
                [
                    "exploit_incremental_learning",
                    "boolean, optional, default: False"
                ],
                [
                    "n_jobs",
                    "integer, optional"
                ],
                [
                    "pre_dispatch",
                    "integer or string, optional"
                ],
                [
                    "verbose",
                    "integer, optional"
                ],
                [
                    "error_score",
                    "'raise' (default) or numeric"
                ]
            ],
            "returns": [
                [
                    "train_sizes_abs",
                    "array, shape = (n_unique_ticks,), dtype int"
                ],
                [
                    "train_scores",
                    "array, shape (n_ticks, n_cv_folds)"
                ],
                [
                    "test_scores",
                    "array, shape (n_ticks, n_cv_folds)"
                ]
            ],
            "count": {
                "total_params": 11,
                "missed_params": 0
            }
        },
        {
            "name": "validation_curve",
            "line": 262,
            "params": [
                [
                    "estimator",
                    "object type that implements the \"fit\" and \"predict\" methods"
                ],
                [
                    "X",
                    "array-like, shape (n_samples, n_features)"
                ],
                [
                    "y",
                    "array-like, shape (n_samples) or (n_samples, n_features), optional"
                ],
                [
                    "param_name",
                    "string"
                ],
                [
                    "param_range",
                    "array-like, shape (n_values,)"
                ],
                [
                    "cv",
                    "int, cross-validation generator or an iterable, optional"
                ],
                [
                    "scoring",
                    "string, callable or None, optional, default: None"
                ],
                [
                    "n_jobs",
                    "integer, optional"
                ],
                [
                    "pre_dispatch",
                    "integer or string, optional"
                ],
                [
                    "verbose",
                    "integer, optional"
                ]
            ],
            "returns": [
                [
                    "train_scores",
                    "array, shape (n_ticks, n_cv_folds)"
                ],
                [
                    "test_scores",
                    "array, shape (n_ticks, n_cv_folds)"
                ]
            ],
            "count": {
                "total_params": 10,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\multiclass.py": [],
    "../scikit-learn-master/sklearn\\multioutput.py": [],
    "../scikit-learn-master/sklearn\\naive_bayes.py": [],
    "../scikit-learn-master/sklearn\\pipeline.py": [
        {
            "name": "make_pipeline",
            "line": 523,
            "params": [],
            "returns": [
                [
                    "p",
                    "Pipeline"
                ]
            ],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "make_union",
            "line": 787,
            "params": [],
            "returns": [
                [
                    "f",
                    "FeatureUnion"
                ]
            ],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\random_projection.py": [
        {
            "name": "johnson_lindenstrauss_min_dim",
            "line": 53,
            "params": [
                [
                    "n_samples",
                    "int or numpy array of int greater than 0,"
                ],
                [
                    "eps",
                    "float or numpy array of float in ]0,1[, optional (default=0.1)"
                ]
            ],
            "returns": [
                [
                    "n_components",
                    "int or numpy array of int,"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "gaussian_random_matrix",
            "line": 156,
            "params": [
                [
                    "n_components",
                    "int,"
                ],
                [
                    "n_features",
                    "int,"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "components",
                    "numpy array of shape [n_components, n_features]"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "sparse_random_matrix",
            "line": 199,
            "params": [
                [
                    "n_components",
                    "int,"
                ],
                [
                    "n_features",
                    "int,"
                ],
                [
                    "density",
                    "float in range ]0, 1] or 'auto', optional (default='auto')"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "components",
                    "array or CSR matrix with shape [n_components, n_features]"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\setup.py": [],
    "../scikit-learn-master/sklearn\\cluster\\affinity_propagation_.py": [
        {
            "name": "affinity_propagation",
            "line": 35,
            "params": [
                [
                    "S",
                    "array-like, shape (n_samples, n_samples)"
                ],
                [
                    "preference",
                    "array-like, shape (n_samples,) or float, optional"
                ],
                [
                    "convergence_iter",
                    "int, optional, default: 15"
                ],
                [
                    "max_iter",
                    "int, optional, default: 200"
                ],
                [
                    "damping",
                    "float, optional, default: 0.5"
                ],
                [
                    "copy",
                    "boolean, optional, default: True"
                ],
                [
                    "verbose",
                    "boolean, optional, default: False"
                ],
                [
                    "return_n_iter",
                    "bool, default False"
                ]
            ],
            "returns": [
                [
                    "cluster_centers_indices",
                    "array, shape (n_clusters,)"
                ],
                [
                    "labels",
                    "array, shape (n_samples,)"
                ],
                [
                    "n_iter",
                    "int"
                ]
            ],
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\bicluster.py": [],
    "../scikit-learn-master/sklearn\\cluster\\birch.py": [],
    "../scikit-learn-master/sklearn\\cluster\\dbscan_.py": [
        {
            "name": "dbscan",
            "line": 23,
            "params": [
                [
                    "X",
                    "array or sparse (CSR) matrix of shape (n_samples, n_features), or             array of shape (n_samples, n_samples)"
                ],
                [
                    "eps",
                    "float, optional"
                ],
                [
                    "min_samples",
                    "int, optional"
                ],
                [
                    "metric",
                    "string, or callable"
                ],
                [
                    "metric_params",
                    "dict, optional"
                ],
                [
                    "algorithm",
                    "{'auto', 'ball_tree', 'kd_tree', 'brute'}, optional"
                ],
                [
                    "leaf_size",
                    "int, optional (default = 30)"
                ],
                [
                    "p",
                    "float, optional"
                ],
                [
                    "sample_weight",
                    "array, shape (n_samples,), optional"
                ],
                [
                    "n_jobs",
                    "int, optional (default = 1)"
                ]
            ],
            "returns": [
                [
                    "core_samples",
                    "array [n_core_samples]"
                ],
                [
                    "labels",
                    "array [n_samples]"
                ]
            ],
            "count": {
                "total_params": 10,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\hierarchical.py": [
        {
            "name": "ward_tree",
            "line": 86,
            "params": [
                [
                    "X",
                    "array, shape (n_samples, n_features)"
                ],
                [
                    "connectivity",
                    "sparse matrix (optional)."
                ],
                [
                    "n_clusters",
                    "int (optional)"
                ],
                [
                    "return_distance",
                    "bool (optional)"
                ]
            ],
            "returns": [
                [
                    "children",
                    "2D array, shape (n_nodes-1, 2)"
                ],
                [
                    "n_components",
                    "int"
                ],
                [
                    "n_leaves",
                    "int"
                ],
                [
                    "parents",
                    "1D array, shape (n_nodes, ) or None"
                ],
                [
                    "distances",
                    "1D array, shape (n_nodes-1, )"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "linkage_tree",
            "line": 294,
            "params": [
                [
                    "X",
                    "array, shape (n_samples, n_features)"
                ],
                [
                    "connectivity",
                    "sparse matrix (optional)."
                ],
                [
                    "n_components",
                    "int (optional)"
                ],
                [
                    "n_clusters",
                    "int (optional)"
                ],
                [
                    "linkage",
                    "{\"average\", \"complete\"}, optional, default: \"complete\""
                ],
                [
                    "affinity",
                    "string or callable, optional, default: \"euclidean\"."
                ],
                [
                    "return_distance",
                    "bool, default False"
                ]
            ],
            "returns": [
                [
                    "children",
                    "2D array, shape (n_nodes-1, 2)"
                ],
                [
                    "n_components",
                    "int"
                ],
                [
                    "n_leaves",
                    "int"
                ],
                [
                    "parents",
                    "1D array, shape (n_nodes, ) or None"
                ],
                [
                    "distances",
                    "ndarray, shape (n_nodes-1,)"
                ]
            ],
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\k_means_.py": [
        {
            "name": "k_means",
            "line": 170,
            "params": [
                [
                    "X",
                    "array-like or sparse matrix, shape (n_samples, n_features)"
                ],
                [
                    "n_clusters",
                    "int"
                ],
                [
                    "init",
                    "{'k-means++', 'random', or ndarray, or a callable}, optional"
                ],
                [
                    "precompute_distances",
                    "{'auto', True, False}"
                ],
                [
                    "n_init",
                    "int, optional, default: 10"
                ],
                [
                    "max_iter",
                    "int, optional, default 300"
                ],
                [
                    "verbose",
                    "boolean, optional"
                ],
                [
                    "tol",
                    "float, optional"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional, default: None"
                ],
                [
                    "copy_x",
                    "boolean, optional"
                ],
                [
                    "n_jobs",
                    "int"
                ],
                [
                    "algorithm",
                    "\"auto\", \"full\" or \"elkan\", default=\"auto\""
                ],
                [
                    "return_n_iter",
                    "bool, optional"
                ]
            ],
            "returns": [
                [
                    "centroid",
                    "float ndarray with shape (k, n_features)"
                ],
                [
                    "label",
                    "integer ndarray with shape (n_samples,)"
                ],
                [
                    "inertia",
                    "float"
                ],
                [
                    "best_n_iter",
                    "int"
                ]
            ],
            "count": {
                "total_params": 13,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\mean_shift_.py": [
        {
            "name": "estimate_bandwidth",
            "line": 32,
            "params": [
                [
                    "X",
                    "array-like, shape=[n_samples, n_features]"
                ],
                [
                    "quantile",
                    "float, default 0.3"
                ],
                [
                    "n_samples",
                    "int, optional"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ],
                [
                    "n_jobs",
                    "int, optional (default = 1)"
                ]
            ],
            "returns": [
                [
                    "bandwidth",
                    "float"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "mean_shift",
            "line": 107,
            "params": [
                [
                    "X",
                    "array-like, shape=[n_samples, n_features]"
                ],
                [
                    "bandwidth",
                    "float, optional"
                ],
                [
                    "seeds",
                    "array-like, shape=[n_seeds, n_features] or None"
                ],
                [
                    "bin_seeding",
                    "boolean, default=False"
                ],
                [
                    "min_bin_freq",
                    "int, default=1"
                ],
                [
                    "cluster_all",
                    "boolean, default True"
                ],
                [
                    "max_iter",
                    "int, default 300"
                ],
                [
                    "n_jobs",
                    "int"
                ]
            ],
            "returns": [
                [
                    "cluster_centers",
                    "array, shape=[n_clusters, n_features]"
                ],
                [
                    "labels",
                    "array, shape=[n_samples]"
                ]
            ],
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "get_bin_seeds",
            "line": 241,
            "params": [
                [
                    "X",
                    "array-like, shape=[n_samples, n_features]"
                ],
                [
                    "bin_size",
                    "float"
                ],
                [
                    "min_bin_freq",
                    "integer, optional"
                ]
            ],
            "returns": [
                [
                    "bin_seeds",
                    "array-like, shape=[n_samples, n_features]"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\setup.py": [],
    "../scikit-learn-master/sklearn\\cluster\\spectral.py": [
        {
            "name": "discretize",
            "line": 22,
            "params": [
                [
                    "vectors",
                    "array-like, shape: (n_samples, n_clusters)"
                ],
                [
                    "copy",
                    "boolean, optional, default: True"
                ],
                [
                    "max_svd_restarts",
                    "int, optional, default: 30"
                ],
                [
                    "n_iter_max",
                    "int, optional, default: 30"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional, default: None"
                ]
            ],
            "returns": [
                [
                    "labels",
                    "array of integers, shape: n_samples"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "spectral_clustering",
            "line": 162,
            "params": [
                [
                    "affinity",
                    "array-like or sparse matrix, shape: (n_samples, n_samples)"
                ],
                [
                    "n_clusters",
                    "integer, optional"
                ],
                [
                    "n_components",
                    "integer, optional, default is n_clusters"
                ],
                [
                    "eigen_solver",
                    "{None, 'arpack', 'lobpcg', or 'amg'}"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional, default: None"
                ],
                [
                    "n_init",
                    "int, optional, default: 10"
                ],
                [
                    "eigen_tol",
                    "float, optional, default: 0.0"
                ],
                [
                    "assign_labels",
                    "{'kmeans', 'discretize'}, default: 'kmeans'"
                ]
            ],
            "returns": [
                [
                    "labels",
                    "array of integers, shape: n_samples"
                ]
            ],
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\common.py": [],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_affinity_propagation.py": [],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_bicluster.py": [],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_birch.py": [
        {
            "name": "check_threshold",
            "line": 142,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_dbscan.py": [],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_hierarchical.py": [
        {
            "name": "assess_same_labelling",
            "line": 251,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_k_means.py": [
        {
            "name": "test_x_squared_norms_init_centroids",
            "line": 753,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_mean_shift.py": [],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_spectral.py": [],
    "../scikit-learn-master/sklearn\\covariance\\empirical_covariance_.py": [
        {
            "name": "log_likelihood",
            "line": 23,
            "params": [
                [
                    "emp_cov",
                    "2D ndarray (n_features, n_features)"
                ],
                [
                    "precision",
                    "2D ndarray (n_features, n_features)"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "empirical_covariance",
            "line": 49,
            "params": [
                [
                    "X",
                    "ndarray, shape (n_samples, n_features)"
                ],
                [
                    "assume_centered",
                    "Boolean"
                ]
            ],
            "returns": [
                [
                    "covariance",
                    "2D ndarray, shape (n_features, n_features)"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\covariance\\graph_lasso_.py": [
        {
            "name": "alpha_max",
            "line": 58,
            "params": [
                [
                    "emp_cov",
                    "2D array, (n_features, n_features)"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "graph_lasso",
            "line": 84,
            "params": [
                [
                    "emp_cov",
                    "2D ndarray, shape (n_features, n_features)"
                ],
                [
                    "alpha",
                    "positive float"
                ],
                [
                    "cov_init",
                    "2D array (n_features, n_features), optional"
                ],
                [
                    "mode",
                    "{'cd', 'lars'}"
                ],
                [
                    "tol",
                    "positive float, optional"
                ],
                [
                    "enet_tol",
                    "positive float, optional"
                ],
                [
                    "max_iter",
                    "integer, optional"
                ],
                [
                    "verbose",
                    "boolean, optional"
                ],
                [
                    "return_costs",
                    "boolean, optional"
                ],
                [
                    "eps",
                    "float, optional"
                ],
                [
                    "return_n_iter",
                    "bool, optional"
                ]
            ],
            "returns": [
                [
                    "covariance",
                    "2D ndarray, shape (n_features, n_features)"
                ],
                [
                    "precision",
                    "2D ndarray, shape (n_features, n_features)"
                ],
                [
                    "costs",
                    "list of (objective, dual_gap) pairs"
                ],
                [
                    "n_iter",
                    "int"
                ]
            ],
            "count": {
                "total_params": 11,
                "missed_params": 0
            }
        },
        {
            "name": "graph_lasso_path",
            "line": 363,
            "params": [
                [
                    "X",
                    "2D ndarray, shape (n_samples, n_features)"
                ],
                [
                    "alphas",
                    "list of positive floats"
                ],
                [
                    "X_test",
                    "2D array, shape (n_test_samples, n_features), optional"
                ],
                [
                    "mode",
                    "{'cd', 'lars'}"
                ],
                [
                    "tol",
                    "positive float, optional"
                ],
                [
                    "enet_tol",
                    "positive float, optional"
                ],
                [
                    "max_iter",
                    "integer, optional"
                ],
                [
                    "verbose",
                    "integer, optional"
                ]
            ],
            "returns": [
                [
                    "covariances_",
                    "List of 2D ndarray, shape (n_features, n_features)"
                ],
                [
                    "precisions_",
                    "List of 2D ndarray, shape (n_features, n_features)"
                ],
                [
                    "scores_",
                    "List of float"
                ]
            ],
            "count": {
                "total_params": 9,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\covariance\\outlier_detection.py": [],
    "../scikit-learn-master/sklearn\\covariance\\robust_covariance.py": [
        {
            "name": "c_step",
            "line": 30,
            "params": [
                [
                    "X",
                    "array-like, shape (n_samples, n_features)"
                ],
                [
                    "n_support",
                    "int, > n_samples / 2"
                ],
                [
                    "remaining_iterations",
                    "int, optional"
                ],
                [
                    "initial_estimates",
                    "2-tuple, optional"
                ],
                [
                    "verbose",
                    "boolean, optional"
                ],
                [
                    "cov_computation_method",
                    "callable, default empirical_covariance"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "location",
                    "array-like, shape (n_features,)"
                ],
                [
                    "covariance",
                    "array-like, shape (n_features, n_features)"
                ],
                [
                    "support",
                    "array-like, shape (n_samples,)"
                ]
            ],
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "select_candidates",
            "line": 181,
            "params": [
                [
                    "X",
                    "array-like, shape (n_samples, n_features)"
                ],
                [
                    "n_support",
                    "int, [(n + p + 1)/2] < n_support < n"
                ],
                [
                    "n_trials",
                    "int, nb_trials > 0 or 2-tuple"
                ],
                [
                    "select",
                    "int, int > 0"
                ],
                [
                    "n_iter",
                    "int, nb_iter > 0"
                ],
                [
                    "verbose",
                    "boolean, default False"
                ],
                [
                    "cov_computation_method",
                    "callable, default empirical_covariance"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "best_locations",
                    "array-like, shape (select, n_features)"
                ],
                [
                    "best_covariances",
                    "array-like, shape (select, n_features, n_features)"
                ],
                [
                    "best_supports",
                    "array-like, shape (select, n_samples)"
                ]
            ],
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "fast_mcd",
            "line": 304,
            "params": [
                [
                    "X",
                    "array-like, shape (n_samples, n_features)"
                ],
                [
                    "support_fraction",
                    "float, 0 < support_fraction < 1"
                ],
                [
                    "cov_computation_method",
                    "callable, default empirical_covariance"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "location",
                    "array-like, shape (n_features,)"
                ],
                [
                    "covariance",
                    "array-like, shape (n_features, n_features)"
                ],
                [
                    "support",
                    "array-like, type boolean, shape (n_samples,)"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\covariance\\shrunk_covariance_.py": [
        {
            "name": "shrunk_covariance",
            "line": 27,
            "params": [
                [
                    "emp_cov",
                    "array-like, shape (n_features, n_features)"
                ],
                [
                    "shrinkage",
                    "float, 0 <= shrinkage <= 1"
                ]
            ],
            "returns": [
                [
                    "shrunk_cov",
                    "array-like"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "ledoit_wolf_shrinkage",
            "line": 150,
            "params": [
                [
                    "X",
                    "array-like, shape (n_samples, n_features)"
                ],
                [
                    "assume_centered",
                    "Boolean"
                ],
                [
                    "block_size",
                    "int"
                ]
            ],
            "returns": [
                [
                    "shrinkage",
                    "float"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "ledoit_wolf",
            "line": 246,
            "params": [
                [
                    "X",
                    "array-like, shape (n_samples, n_features)"
                ],
                [
                    "assume_centered",
                    "boolean, default=False"
                ],
                [
                    "block_size",
                    "int, default=1000"
                ]
            ],
            "returns": [
                [
                    "shrunk_cov",
                    "array-like, shape (n_features, n_features)"
                ],
                [
                    "shrinkage",
                    "float"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "oas",
            "line": 409,
            "params": [
                [
                    "X",
                    "array-like, shape (n_samples, n_features)"
                ],
                [
                    "assume_centered",
                    "boolean"
                ]
            ],
            "returns": [
                [
                    "shrunk_cov",
                    "array-like, shape (n_features, n_features)"
                ],
                [
                    "shrinkage",
                    "float"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\covariance\\tests\\test_covariance.py": [],
    "../scikit-learn-master/sklearn\\covariance\\tests\\test_graph_lasso.py": [],
    "../scikit-learn-master/sklearn\\covariance\\tests\\test_robust_covariance.py": [],
    "../scikit-learn-master/sklearn\\cross_decomposition\\cca_.py": [],
    "../scikit-learn-master/sklearn\\cross_decomposition\\pls_.py": [],
    "../scikit-learn-master/sklearn\\cross_decomposition\\tests\\test_pls.py": [],
    "../scikit-learn-master/sklearn\\datasets\\base.py": [
        {
            "name": "get_data_home",
            "line": 31,
            "params": [
                [
                    "data_home",
                    "str | None"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "clear_data_home",
            "line": 60,
            "params": [
                [
                    "data_home",
                    "str | None"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "load_files",
            "line": 74,
            "params": [
                [
                    "container_path",
                    "string or unicode"
                ],
                [
                    "description",
                    "string or unicode, optional (default=None)"
                ],
                [
                    "categories",
                    "A collection of strings or None, optional (default=None)"
                ],
                [
                    "load_content",
                    "boolean, optional (default=True)"
                ],
                [
                    "shuffle",
                    "bool, optional (default=True)"
                ],
                [
                    "encoding",
                    "string or None (default is None)"
                ],
                [
                    "decode_error",
                    "{'strict', 'ignore', 'replace'}, optional"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=0)"
                ]
            ],
            "returns": [
                [
                    "data",
                    "Bunch"
                ]
            ],
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "load_data",
            "line": 210,
            "params": [
                [
                    "data_file_name",
                    "String. Name of csv file to be loaded from"
                ]
            ],
            "returns": [
                [
                    "data",
                    "Numpy Array"
                ],
                [
                    "target",
                    "Numpy Array"
                ],
                [
                    "target_names",
                    "Numpy Array"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 1
            }
        },
        {
            "name": "load_wine",
            "line": 248,
            "params": [
                [
                    "return_X_y",
                    "boolean, default=False."
                ]
            ],
            "returns": [
                [
                    "data",
                    "Bunch"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "load_iris",
            "line": 325,
            "params": [
                [
                    "return_X_y",
                    "boolean, default=False."
                ]
            ],
            "returns": [
                [
                    "data",
                    "Bunch"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "load_breast_cancer",
            "line": 390,
            "params": [
                [
                    "return_X_y",
                    "boolean, default=False"
                ]
            ],
            "returns": [
                [
                    "data",
                    "Bunch"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "load_digits",
            "line": 472,
            "params": [
                [
                    "n_class",
                    "integer, between 0 and 10, optional (default=10)"
                ],
                [
                    "return_X_y",
                    "boolean, default=False."
                ]
            ],
            "returns": [
                [
                    "data",
                    "Bunch"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "load_diabetes",
            "line": 552,
            "params": [
                [
                    "return_X_y",
                    "boolean, default=False."
                ]
            ],
            "returns": [
                [
                    "data",
                    "Bunch"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "load_linnerud",
            "line": 600,
            "params": [
                [
                    "return_X_y",
                    "boolean, default=False."
                ]
            ],
            "returns": [
                [
                    "data",
                    "Bunch"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "load_boston",
            "line": 652,
            "params": [
                [
                    "return_X_y",
                    "boolean, default=False."
                ]
            ],
            "returns": [
                [
                    "data",
                    "Bunch"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "load_sample_images",
            "line": 719,
            "params": [],
            "returns": [
                [
                    "data",
                    "Bunch"
                ]
            ],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "load_sample_image",
            "line": 769,
            "params": [
                [
                    "image_name",
                    "{`china.jpg`, `flower.jpg`}"
                ]
            ],
            "returns": [
                [
                    "img",
                    "3D array"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\california_housing.py": [
        {
            "name": "fetch_california_housing",
            "line": 52,
            "params": [
                [
                    "data_home",
                    "optional, default: None"
                ],
                [
                    "download_if_missing",
                    "optional, True by default"
                ]
            ],
            "returns": [
                [
                    "dataset",
                    "dict-like object with the following attributes:"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\covtype.py": [
        {
            "name": "fetch_covtype",
            "line": 45,
            "params": [
                [
                    "data_home",
                    "string, optional"
                ],
                [
                    "download_if_missing",
                    "boolean, default=True"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ],
                [
                    "shuffle",
                    "bool, default=False"
                ]
            ],
            "returns": [
                [
                    "dataset",
                    "dict-like object with the following attributes:"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\kddcup99.py": [
        {
            "name": "fetch_kddcup99",
            "line": 50,
            "params": [
                [
                    "subset",
                    "None, 'SA', 'SF', 'http', 'smtp'"
                ],
                [
                    "data_home",
                    "string, optional"
                ],
                [
                    "shuffle",
                    "bool, default=False"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ],
                [
                    "percent10",
                    "bool, default=True"
                ],
                [
                    "download_if_missing",
                    "bool, default=True"
                ]
            ],
            "returns": [
                [
                    "data",
                    "Bunch"
                ]
            ],
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\lfw.py": [
        {
            "name": "scale_face",
            "line": 81,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "check_fetch_lfw",
            "line": 94,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "fetch_lfw_people",
            "line": 252,
            "params": [
                [
                    "data_home",
                    "optional, default: None"
                ],
                [
                    "funneled",
                    "boolean, optional, default: True"
                ],
                [
                    "resize",
                    "float, optional, default 0.5"
                ],
                [
                    "min_faces_per_person",
                    "int, optional, default None"
                ],
                [
                    "color",
                    "boolean, optional, default False"
                ],
                [
                    "slice_",
                    "optional"
                ],
                [
                    "download_if_missing",
                    "optional, True by default"
                ]
            ],
            "returns": [
                [
                    "dataset",
                    "dict-like object with the following attributes:"
                ]
            ],
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "fetch_lfw_pairs",
            "line": 401,
            "params": [
                [
                    "subset",
                    "optional, default: 'train'"
                ],
                [
                    "data_home",
                    "optional, default: None"
                ],
                [
                    "funneled",
                    "boolean, optional, default: True"
                ],
                [
                    "resize",
                    "float, optional, default 0.5"
                ],
                [
                    "color",
                    "boolean, optional, default False"
                ],
                [
                    "slice_",
                    "optional"
                ],
                [
                    "download_if_missing",
                    "optional, True by default"
                ]
            ],
            "returns": [
                [
                    "The data is returned as a Bunch object with the following attributes",
                    ""
                ]
            ],
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\mlcomp.py": [
        {
            "name": "load_mlcomp",
            "line": 26,
            "params": [
                [
                    "name_or_id",
                    "the integer id or the string name metadata of the MLComp"
                ],
                [
                    "set_",
                    "select the portion to load"
                ],
                [
                    "mlcomp_root",
                    "the filesystem path to the root folder where MLComp datasets"
                ]
            ],
            "returns": [
                [
                    "data",
                    "Bunch"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\mldata.py": [
        {
            "name": "mldata_filename",
            "line": 32,
            "params": [
                [
                    "dataname",
                    "str"
                ]
            ],
            "returns": [
                [
                    "fname",
                    "str"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "fetch_mldata",
            "line": 50,
            "params": [
                [
                    "dataname",
                    "str"
                ],
                [
                    "target_name",
                    "optional, default: 'label'"
                ],
                [
                    "data_name",
                    "optional, default: 'data'"
                ],
                [
                    "transpose_data",
                    "optional, default: True"
                ],
                [
                    "data_home",
                    "optional, default: None"
                ]
            ],
            "returns": [
                [
                    "data",
                    "Bunch"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\olivetti_faces.py": [
        {
            "name": "fetch_olivetti_faces",
            "line": 52,
            "params": [
                [
                    "data_home",
                    "optional, default: None"
                ],
                [
                    "shuffle",
                    "boolean, optional"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=0)"
                ],
                [
                    "download_if_missing",
                    "optional, True by default"
                ]
            ],
            "returns": [
                [
                    "An object with the following attributes",
                    ""
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\rcv1.py": [
        {
            "name": "fetch_rcv1",
            "line": 73,
            "params": [
                [
                    "data_home",
                    "string, optional"
                ],
                [
                    "subset",
                    "string, 'train', 'test', or 'all', default='all'"
                ],
                [
                    "download_if_missing",
                    "boolean, default=True"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ],
                [
                    "shuffle",
                    "bool, default=False"
                ]
            ],
            "returns": [
                [
                    "dataset",
                    "dict-like object with the following attributes:"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\samples_generator.py": [
        {
            "name": "make_classification",
            "line": 41,
            "params": [
                [
                    "n_samples",
                    "int, optional (default=100)"
                ],
                [
                    "n_features",
                    "int, optional (default=20)"
                ],
                [
                    "n_informative",
                    "int, optional (default=2)"
                ],
                [
                    "n_redundant",
                    "int, optional (default=2)"
                ],
                [
                    "n_repeated",
                    "int, optional (default=0)"
                ],
                [
                    "n_classes",
                    "int, optional (default=2)"
                ],
                [
                    "n_clusters_per_class",
                    "int, optional (default=2)"
                ],
                [
                    "weights",
                    "list of floats or None (default=None)"
                ],
                [
                    "flip_y",
                    "float, optional (default=0.01)"
                ],
                [
                    "class_sep",
                    "float, optional (default=1.0)"
                ],
                [
                    "hypercube",
                    "boolean, optional (default=True)"
                ],
                [
                    "shift",
                    "float, array of shape [n_features] or None, optional (default=0.0)"
                ],
                [
                    "scale",
                    "float, array of shape [n_features] or None, optional (default=1.0)"
                ],
                [
                    "shuffle",
                    "boolean, optional (default=True)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape [n_samples, n_features]"
                ],
                [
                    "y",
                    "array of shape [n_samples]"
                ]
            ],
            "count": {
                "total_params": 15,
                "missed_params": 0
            }
        },
        {
            "name": "make_multilabel_classification",
            "line": 253,
            "params": [
                [
                    "n_samples",
                    "int, optional (default=100)"
                ],
                [
                    "n_features",
                    "int, optional (default=20)"
                ],
                [
                    "n_classes",
                    "int, optional (default=5)"
                ],
                [
                    "n_labels",
                    "int, optional (default=2)"
                ],
                [
                    "length",
                    "int, optional (default=50)"
                ],
                [
                    "allow_unlabeled",
                    "bool, optional (default=True)"
                ],
                [
                    "sparse",
                    "bool, optional (default=False)"
                ],
                [
                    "return_indicator",
                    "'dense' (default) | 'sparse' | False"
                ],
                [
                    "return_distributions",
                    "bool, optional (default=False)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape [n_samples, n_features]"
                ],
                [
                    "Y",
                    "array or sparse CSR matrix of shape [n_samples, n_classes]"
                ],
                [
                    "p_c",
                    "array, shape [n_classes]"
                ],
                [
                    "p_w_c",
                    "array, shape [n_features, n_classes]"
                ]
            ],
            "count": {
                "total_params": 10,
                "missed_params": 0
            }
        },
        {
            "name": "make_hastie_10_2",
            "line": 400,
            "params": [
                [
                    "n_samples",
                    "int, optional (default=12000)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape [n_samples, 10]"
                ],
                [
                    "y",
                    "array of shape [n_samples]"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "make_regression",
            "line": 452,
            "params": [
                [
                    "n_samples",
                    "int, optional (default=100)"
                ],
                [
                    "n_features",
                    "int, optional (default=100)"
                ],
                [
                    "n_informative",
                    "int, optional (default=10)"
                ],
                [
                    "n_targets",
                    "int, optional (default=1)"
                ],
                [
                    "bias",
                    "float, optional (default=0.0)"
                ],
                [
                    "effective_rank",
                    "int or None, optional (default=None)"
                ],
                [
                    "tail_strength",
                    "float between 0.0 and 1.0, optional (default=0.5)"
                ],
                [
                    "noise",
                    "float, optional (default=0.0)"
                ],
                [
                    "shuffle",
                    "boolean, optional (default=True)"
                ],
                [
                    "coef",
                    "boolean, optional (default=False)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape [n_samples, n_features]"
                ],
                [
                    "y",
                    "array of shape [n_samples] or [n_samples, n_targets]"
                ],
                [
                    "coef",
                    "array of shape [n_features] or [n_features, n_targets], optional"
                ]
            ],
            "count": {
                "total_params": 11,
                "missed_params": 0
            }
        },
        {
            "name": "make_circles",
            "line": 573,
            "params": [
                [
                    "n_samples",
                    "int, optional (default=100)"
                ],
                [
                    "shuffle",
                    "bool, optional (default=True)"
                ],
                [
                    "noise",
                    "double or None (default=None)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ],
                [
                    "factor",
                    "double < 1 (default=.8)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape [n_samples, 2]"
                ],
                [
                    "y",
                    "array of shape [n_samples]"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "make_moons",
            "line": 635,
            "params": [
                [
                    "n_samples",
                    "int, optional (default=100)"
                ],
                [
                    "shuffle",
                    "bool, optional (default=True)"
                ],
                [
                    "noise",
                    "double or None (default=None)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape [n_samples, 2]"
                ],
                [
                    "y",
                    "array of shape [n_samples]"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "make_blobs",
            "line": 692,
            "params": [
                [
                    "n_samples",
                    "int, optional (default=100)"
                ],
                [
                    "n_features",
                    "int, optional (default=2)"
                ],
                [
                    "centers",
                    "int or array of shape [n_centers, n_features], optional"
                ],
                [
                    "cluster_std",
                    "float or sequence of floats, optional (default=1.0)"
                ],
                [
                    "center_box",
                    "pair of floats (min, max), optional (default=(-10.0, 10.0))"
                ],
                [
                    "shuffle",
                    "boolean, optional (default=True)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape [n_samples, n_features]"
                ],
                [
                    "y",
                    "array of shape [n_samples]"
                ]
            ],
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "make_friedman1",
            "line": 785,
            "params": [
                [
                    "n_samples",
                    "int, optional (default=100)"
                ],
                [
                    "n_features",
                    "int, optional (default=10)"
                ],
                [
                    "noise",
                    "float, optional (default=0.0)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape [n_samples, n_features]"
                ],
                [
                    "y",
                    "array of shape [n_samples]"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "make_friedman2",
            "line": 848,
            "params": [
                [
                    "n_samples",
                    "int, optional (default=100)"
                ],
                [
                    "noise",
                    "float, optional (default=0.0)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape [n_samples, 4]"
                ],
                [
                    "y",
                    "array of shape [n_samples]"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "make_friedman3",
            "line": 914,
            "params": [
                [
                    "n_samples",
                    "int, optional (default=100)"
                ],
                [
                    "noise",
                    "float, optional (default=0.0)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape [n_samples, 4]"
                ],
                [
                    "y",
                    "array of shape [n_samples]"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "make_low_rank_matrix",
            "line": 980,
            "params": [
                [
                    "n_samples",
                    "int, optional (default=100)"
                ],
                [
                    "n_features",
                    "int, optional (default=100)"
                ],
                [
                    "effective_rank",
                    "int, optional (default=10)"
                ],
                [
                    "tail_strength",
                    "float between 0.0 and 1.0, optional (default=0.5)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape [n_samples, n_features]"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "make_sparse_coded_signal",
            "line": 1050,
            "params": [
                [
                    "n_samples",
                    "int"
                ],
                [
                    "n_components",
                    "int,"
                ],
                [
                    "n_features",
                    "int"
                ],
                [
                    "n_nonzero_coefs",
                    "int"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "data",
                    "array of shape [n_features, n_samples]"
                ],
                [
                    "dictionary",
                    "array of shape [n_features, n_components]"
                ],
                [
                    "code",
                    "array of shape [n_components, n_samples]"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "make_sparse_uncorrelated",
            "line": 1112,
            "params": [
                [
                    "n_samples",
                    "int, optional (default=100)"
                ],
                [
                    "n_features",
                    "int, optional (default=10)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape [n_samples, n_features]"
                ],
                [
                    "y",
                    "array of shape [n_samples]"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "make_spd_matrix",
            "line": 1164,
            "params": [
                [
                    "n_dim",
                    "int"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape [n_dim, n_dim]"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "make_sparse_spd_matrix",
            "line": 1200,
            "params": [
                [
                    "dim",
                    "integer, optional (default=1)"
                ],
                [
                    "alpha",
                    "float between 0 and 1, optional (default=0.95)"
                ],
                [
                    "norm_diag",
                    "boolean, optional (default=False)"
                ],
                [
                    "smallest_coef",
                    "float between 0 and 1, optional (default=0.1)"
                ],
                [
                    "largest_coef",
                    "float between 0 and 1, optional (default=0.9)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "prec",
                    "sparse matrix of shape (dim, dim)"
                ]
            ],
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "make_swiss_roll",
            "line": 1273,
            "params": [
                [
                    "n_samples",
                    "int, optional (default=100)"
                ],
                [
                    "noise",
                    "float, optional (default=0.0)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape [n_samples, 3]"
                ],
                [
                    "t",
                    "array of shape [n_samples]"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "make_s_curve",
            "line": 1326,
            "params": [
                [
                    "n_samples",
                    "int, optional (default=100)"
                ],
                [
                    "noise",
                    "float, optional (default=0.0)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape [n_samples, 3]"
                ],
                [
                    "t",
                    "array of shape [n_samples]"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "make_gaussian_quantiles",
            "line": 1371,
            "params": [
                [
                    "mean",
                    "array of shape [n_features], optional (default=None)"
                ],
                [
                    "cov",
                    "float, optional (default=1.)"
                ],
                [
                    "n_samples",
                    "int, optional (default=100)"
                ],
                [
                    "n_features",
                    "int, optional (default=2)"
                ],
                [
                    "n_classes",
                    "int, optional (default=3)"
                ],
                [
                    "shuffle",
                    "boolean, optional (default=True)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape [n_samples, n_features]"
                ],
                [
                    "y",
                    "array of shape [n_samples]"
                ]
            ],
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "make_biclusters",
            "line": 1466,
            "params": [
                [
                    "shape",
                    "iterable (n_rows, n_cols)"
                ],
                [
                    "n_clusters",
                    "integer"
                ],
                [
                    "noise",
                    "float, optional (default=0.0)"
                ],
                [
                    "minval",
                    "int, optional (default=10)"
                ],
                [
                    "maxval",
                    "int, optional (default=100)"
                ],
                [
                    "shuffle",
                    "boolean, optional (default=True)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape `shape`"
                ],
                [
                    "rows",
                    "array of shape (n_clusters, X.shape[0],)"
                ],
                [
                    "cols",
                    "array of shape (n_clusters, X.shape[1],)"
                ]
            ],
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "make_checkerboard",
            "line": 1558,
            "params": [
                [
                    "shape",
                    "iterable (n_rows, n_cols)"
                ],
                [
                    "n_clusters",
                    "integer or iterable (n_row_clusters, n_column_clusters)"
                ],
                [
                    "noise",
                    "float, optional (default=0.0)"
                ],
                [
                    "minval",
                    "int, optional (default=10)"
                ],
                [
                    "maxval",
                    "int, optional (default=100)"
                ],
                [
                    "shuffle",
                    "boolean, optional (default=True)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array of shape `shape`"
                ],
                [
                    "rows",
                    "array of shape (n_clusters, X.shape[0],)"
                ],
                [
                    "cols",
                    "array of shape (n_clusters, X.shape[1],)"
                ]
            ],
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\setup.py": [],
    "../scikit-learn-master/sklearn\\datasets\\species_distributions.py": [
        {
            "name": "construct_grids",
            "line": 121,
            "params": [
                [
                    "batch",
                    "Batch object"
                ]
            ],
            "returns": [
                [
                    "(xgrid",
                    "1-D arrays"
                ],
                [
                    "ygrid)",
                    "1-D arrays"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "fetch_species_distributions",
            "line": 149,
            "params": [
                [
                    "data_home",
                    "optional, default: None"
                ],
                [
                    "download_if_missing",
                    "optional, True by default"
                ]
            ],
            "returns": [
                [
                    "The data is returned as a Bunch object with the following attributes",
                    ""
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\svmlight_format.py": [
        {
            "name": "load_svmlight_file",
            "line": 35,
            "params": [
                [
                    "f",
                    "{str, file-like, int}"
                ],
                [
                    "n_features",
                    "int or None"
                ],
                [
                    "dtype",
                    "numpy data type, default np.float64"
                ],
                [
                    "multilabel",
                    "boolean, optional, default False"
                ],
                [
                    "zero_based",
                    "boolean or \"auto\", optional, default \"auto\""
                ],
                [
                    "query_id",
                    "boolean, default False"
                ],
                [
                    "offset",
                    "integer, optional, default 0"
                ],
                [
                    "length",
                    "integer, optional, default -1"
                ]
            ],
            "returns": [
                [
                    "X",
                    "scipy.sparse matrix of shape (n_samples, n_features)"
                ]
            ],
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "load_svmlight_files",
            "line": 194,
            "params": [
                [
                    "files",
                    "iterable over {str, file-like, int}"
                ],
                [
                    "n_features",
                    "int or None"
                ],
                [
                    "dtype",
                    "numpy data type, default np.float64"
                ],
                [
                    "multilabel",
                    "boolean, optional"
                ],
                [
                    "zero_based",
                    "boolean or \"auto\", optional"
                ],
                [
                    "query_id",
                    "boolean, defaults to False"
                ],
                [
                    "offset",
                    "integer, optional, default 0"
                ],
                [
                    "length",
                    "integer, optional, default -1"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "dump_svmlight_file",
            "line": 377,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix}, shape = [n_samples, n_features]"
                ],
                [
                    "y",
                    "{array-like, sparse matrix}, shape = [n_samples (, n_labels)]"
                ],
                [
                    "f",
                    "string or file-like in binary mode"
                ],
                [
                    "zero_based",
                    "boolean, optional"
                ],
                [
                    "comment",
                    "string, optional"
                ],
                [
                    "query_id",
                    "array-like, shape = [n_samples]"
                ],
                [
                    "multilabel",
                    "boolean, optional"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\twenty_newsgroups.py": [
        {
            "name": "download_20newsgroups",
            "line": 74,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "strip_newsgroup_header",
            "line": 100,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "strip_newsgroup_quoting",
            "line": 113,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "strip_newsgroup_footer",
            "line": 124,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "fetch_20newsgroups",
            "line": 147,
            "params": [
                [
                    "data_home",
                    "optional, default: None"
                ],
                [
                    "subset",
                    "'train' or 'test', 'all', optional"
                ],
                [
                    "categories",
                    "None or collection of string or unicode"
                ],
                [
                    "shuffle",
                    "bool, optional"
                ],
                [
                    "random_state",
                    "numpy random number generator or seed integer"
                ],
                [
                    "remove",
                    "tuple"
                ],
                [
                    "download_if_missing",
                    "optional, True by default"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "fetch_20newsgroups_vectorized",
            "line": 278,
            "params": [
                [
                    "subset",
                    "'train' or 'test', 'all', optional"
                ],
                [
                    "remove",
                    "tuple"
                ],
                [
                    "data_home",
                    "optional, default: None"
                ],
                [
                    "download_if_missing",
                    "optional, True by default"
                ]
            ],
            "returns": [
                [
                    "bunch",
                    "Bunch object"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_20news.py": [
        {
            "name": "test_20news_length_consistency",
            "line": 42,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_base.py": [
        {
            "name": "teardown_module",
            "line": 43,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_covtype.py": [],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_kddcup99.py": [],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_lfw.py": [
        {
            "name": "setup_module",
            "line": 49,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "teardown_module",
            "line": 105,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_mldata.py": [
        {
            "name": "test_download",
            "line": 45,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_rcv1.py": [],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_samples_generator.py": [
        {
            "name": "test_make_classification_informative_features",
            "line": 65,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_svmlight_format.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\base.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\dict_learning.py": [
        {
            "name": "sparse_encode",
            "line": 173,
            "params": [
                [
                    "X",
                    "array of shape (n_samples, n_features)"
                ],
                [
                    "dictionary",
                    "array of shape (n_components, n_features)"
                ],
                [
                    "gram",
                    "array, shape=(n_components, n_components)"
                ],
                [
                    "cov",
                    "array, shape=(n_components, n_samples)"
                ],
                [
                    "algorithm",
                    "{'lasso_lars', 'lasso_cd', 'lars', 'omp', 'threshold'}"
                ],
                [
                    "n_nonzero_coefs",
                    "int, 0.1 * n_features by default"
                ],
                [
                    "alpha",
                    "float, 1. by default"
                ],
                [
                    "copy_cov",
                    "boolean, optional"
                ],
                [
                    "init",
                    "array of shape (n_samples, n_components)"
                ],
                [
                    "max_iter",
                    "int, 1000 by default"
                ],
                [
                    "n_jobs",
                    "int, optional"
                ],
                [
                    "check_input",
                    "boolean, optional"
                ],
                [
                    "verbose",
                    "int, optional"
                ]
            ],
            "returns": [
                [
                    "code",
                    "array of shape (n_samples, n_components)"
                ]
            ],
            "count": {
                "total_params": 13,
                "missed_params": 0
            }
        },
        {
            "name": "dict_learning",
            "line": 390,
            "params": [
                [
                    "X",
                    "array of shape (n_samples, n_features)"
                ],
                [
                    "n_components",
                    "int,"
                ],
                [
                    "alpha",
                    "int,"
                ],
                [
                    "max_iter",
                    "int,"
                ],
                [
                    "tol",
                    "float,"
                ],
                [
                    "method",
                    "{'lars', 'cd'}"
                ],
                [
                    "n_jobs",
                    "int,"
                ],
                [
                    "dict_init",
                    "array of shape (n_components, n_features),"
                ],
                [
                    "code_init",
                    "array of shape (n_samples, n_components),"
                ],
                [
                    "callback",
                    "callable or None, optional (default: None)"
                ],
                [
                    "verbose",
                    "bool, optional (default: False)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ],
                [
                    "return_n_iter",
                    "bool"
                ]
            ],
            "returns": [
                [
                    "code",
                    "array of shape (n_samples, n_components)"
                ],
                [
                    "dictionary",
                    "array of shape (n_components, n_features),"
                ],
                [
                    "errors",
                    "array"
                ],
                [
                    "n_iter",
                    "int"
                ]
            ],
            "count": {
                "total_params": 13,
                "missed_params": 0
            }
        },
        {
            "name": "dict_learning_online",
            "line": 566,
            "params": [
                [
                    "X",
                    "array of shape (n_samples, n_features)"
                ],
                [
                    "n_components",
                    "int,"
                ],
                [
                    "alpha",
                    "float,"
                ],
                [
                    "n_iter",
                    "int,"
                ],
                [
                    "return_code",
                    "boolean,"
                ],
                [
                    "dict_init",
                    "array of shape (n_components, n_features),"
                ],
                [
                    "callback",
                    "callable or None, optional (default: None)"
                ],
                [
                    "batch_size",
                    "int,"
                ],
                [
                    "verbose",
                    "bool, optional (default: False)"
                ],
                [
                    "shuffle",
                    "boolean,"
                ],
                [
                    "n_jobs",
                    "int,"
                ],
                [
                    "method",
                    "{'lars', 'cd'}"
                ],
                [
                    "iter_offset",
                    "int, default 0"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ],
                [
                    "return_inner_stats",
                    "boolean, optional"
                ],
                [
                    "inner_stats",
                    "tuple of (A, B) ndarrays"
                ],
                [
                    "return_n_iter",
                    "bool"
                ]
            ],
            "returns": [
                [
                    "code",
                    "array of shape (n_samples, n_components),"
                ],
                [
                    "dictionary",
                    "array of shape (n_components, n_features),"
                ],
                [
                    "n_iter",
                    "int"
                ]
            ],
            "count": {
                "total_params": 17,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\decomposition\\factor_analysis.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\fastica_.py": [
        {
            "name": "fastica",
            "line": 152,
            "params": [
                [
                    "X",
                    "array-like, shape (n_samples, n_features)"
                ],
                [
                    "n_components",
                    "int, optional"
                ],
                [
                    "algorithm",
                    "{'parallel', 'deflation'}, optional"
                ],
                [
                    "whiten",
                    "boolean, optional"
                ],
                [
                    "fun",
                    "string or function, optional. Default: 'logcosh'"
                ],
                [
                    "fun_args",
                    "dictionary, optional"
                ],
                [
                    "max_iter",
                    "int, optional"
                ],
                [
                    "tol",
                    "float, optional"
                ],
                [
                    "w_init",
                    "(n_components, n_components) array, optional"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ],
                [
                    "return_X_mean",
                    "bool, optional"
                ],
                [
                    "compute_sources",
                    "bool, optional"
                ],
                [
                    "return_n_iter",
                    "bool, optional"
                ]
            ],
            "returns": [
                [
                    "K",
                    "array, shape (n_components, n_features) | None."
                ],
                [
                    "W",
                    "array, shape (n_components, n_components)"
                ],
                [
                    "S",
                    "array, shape (n_samples, n_components) | None"
                ],
                [
                    "X_mean",
                    "array, shape (n_features, )"
                ],
                [
                    "n_iter",
                    "int"
                ]
            ],
            "count": {
                "total_params": 13,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\decomposition\\incremental_pca.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\kernel_pca.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\nmf.py": [
        {
            "name": "norm",
            "line": 33,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "trace_dot",
            "line": 41,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "non_negative_factorization",
            "line": 824,
            "params": [
                [
                    "X",
                    "array-like, shape (n_samples, n_features)"
                ],
                [
                    "W",
                    "array-like, shape (n_samples, n_components)"
                ],
                [
                    "H",
                    "array-like, shape (n_components, n_features)"
                ],
                [
                    "n_components",
                    "integer"
                ],
                [
                    "init",
                    "None | 'random' | 'nndsvd' | 'nndsvda' | 'nndsvdar' | 'custom'"
                ],
                [
                    "update_H",
                    "boolean, default: True"
                ],
                [
                    "solver",
                    "'cd' | 'mu'"
                ],
                [
                    "beta_loss",
                    "float or string, default 'frobenius'"
                ],
                [
                    "tol",
                    "float, default: 1e-4"
                ],
                [
                    "max_iter",
                    "integer, default: 200"
                ],
                [
                    "alpha",
                    "double, default: 0."
                ],
                [
                    "l1_ratio",
                    "double, default: 0."
                ],
                [
                    "regularization",
                    "'both' | 'components' | 'transformation' | None"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional, default: None"
                ],
                [
                    "verbose",
                    "integer, default: 0"
                ],
                [
                    "shuffle",
                    "boolean, default: False"
                ]
            ],
            "returns": [
                [
                    "W",
                    "array-like, shape (n_samples, n_components)"
                ],
                [
                    "H",
                    "array-like, shape (n_components, n_features)"
                ],
                [
                    "n_iter",
                    "int"
                ]
            ],
            "count": {
                "total_params": 16,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\decomposition\\online_lda.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\pca.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\setup.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\sparse_pca.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\truncated_svd.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_dict_learning.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_factor_analysis.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_fastica.py": [
        {
            "name": "center_and_norm",
            "line": 23,
            "params": [
                [
                    "x",
                    "ndarray"
                ],
                [
                    "axis",
                    "int, optional"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_incremental_pca.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_kernel_pca.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_nmf.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_online_lda.py": [
        {
            "name": "test_lda_empty_docs",
            "line": 361,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_dirichlet_expectation",
            "line": 370,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_pca.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_sparse_pca.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_truncated_svd.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\bagging.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\base.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\forest.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\gradient_boosting.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\iforest.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\partial_dependence.py": [
        {
            "name": "partial_dependence",
            "line": 73,
            "params": [
                [
                    "gbrt",
                    "BaseGradientBoosting"
                ],
                [
                    "target_variables",
                    "array-like, dtype=int"
                ],
                [
                    "grid",
                    "array-like, shape=(n_points, len(target_variables))"
                ],
                [
                    "X",
                    "array-like, shape=(n_samples, n_features)"
                ],
                [
                    "percentiles",
                    "(low, high), default=(0.05, 0.95)"
                ],
                [
                    "grid_resolution",
                    "int, default=100"
                ]
            ],
            "returns": [
                [
                    "pdp",
                    "array, shape=(n_classes, n_points)"
                ],
                [
                    "axes",
                    "seq of ndarray or None"
                ]
            ],
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "plot_partial_dependence",
            "line": 170,
            "params": [
                [
                    "gbrt",
                    "BaseGradientBoosting"
                ],
                [
                    "X",
                    "array-like, shape=(n_samples, n_features)"
                ],
                [
                    "features",
                    "seq of ints, strings, or tuples of ints or strings"
                ],
                [
                    "feature_names",
                    "seq of str"
                ],
                [
                    "label",
                    "object"
                ],
                [
                    "n_cols",
                    "int"
                ],
                [
                    "grid_resolution",
                    "int, default=100"
                ],
                [
                    "percentiles",
                    "(low, high), default=(0.05, 0.95)"
                ],
                [
                    "n_jobs",
                    "int"
                ],
                [
                    "verbose",
                    "int"
                ],
                [
                    "ax",
                    "Matplotlib axis object, default None"
                ],
                [
                    "line_kw",
                    "dict"
                ],
                [
                    "contour_kw",
                    "dict"
                ]
            ],
            "returns": [
                [
                    "fig",
                    "figure"
                ],
                [
                    "axs",
                    "seq of Axis objects"
                ]
            ],
            "count": {
                "total_params": 13,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\ensemble\\setup.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\voting_classifier.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\weight_boosting.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_bagging.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_base.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_forest.py": [
        {
            "name": "check_classification_toy",
            "line": 98,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "check_parallel",
            "line": 441,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_gradient_boosting.py": [
        {
            "name": "early_stopping_monitor",
            "line": 832,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_gradient_boosting_loss_functions.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_iforest.py": [
        {
            "name": "test_iforest",
            "line": 49,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_iforest_sparse",
            "line": 64,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_iforest_error",
            "line": 91,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_recalculate_max_depth",
            "line": 114,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_iforest_parallel_regression",
            "line": 137,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_iforest_performance",
            "line": 161,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_partial_dependence.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_voting_classifier.py": [
        {
            "name": "test_majority_label_iris",
            "line": 77,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_tie_situation",
            "line": 89,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_weights_iris",
            "line": 100,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_predict_on_toy_problem",
            "line": 113,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_predict_proba_on_toy_problem",
            "line": 145,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_multilabel",
            "line": 197,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_gridsearch",
            "line": 212,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_parallel_fit",
            "line": 229,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sample_weight",
            "line": 250,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sample_weight_kwargs",
            "line": 279,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_set_params",
            "line": 293,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_set_estimator_none",
            "line": 327,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_transform",
            "line": 396,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_weight_boosting.py": [
        {
            "name": "test_sample_weight_adaboost_regressor",
            "line": 468,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\funcsigs.py": [
        {
            "name": "signature",
            "line": 52,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\setup.py": [],
    "../scikit-learn-master/sklearn\\externals\\six.py": [
        {
            "name": "add_move",
            "line": 338,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "remove_move",
            "line": 343,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "iterkeys",
            "line": 429,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "itervalues",
            "line": 433,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "iteritems",
            "line": 437,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "iterlists",
            "line": 441,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "with_metaclass",
            "line": 564,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "add_metaclass",
            "line": 568,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\test_externals_setup.py": [],
    "../scikit-learn-master/sklearn\\externals\\joblib\\backports.py": [],
    "../scikit-learn-master/sklearn\\externals\\joblib\\disk.py": [
        {
            "name": "disk_used",
            "line": 18,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "memstr_to_bytes",
            "line": 34,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "mkdirp",
            "line": 48,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "rm_subdirs",
            "line": 64,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\format_stack.py": [
        {
            "name": "safe_repr",
            "line": 42,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "uniq_stable",
            "line": 76,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "fix_frame_records_filenames",
            "line": 98,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "format_exc",
            "line": 326,
            "params": [
                [
                    "etype",
                    "as returned by sys.exc_info"
                ],
                [
                    "evalue",
                    "as returned by sys.exc_info"
                ],
                [
                    "etb",
                    "as returned by sys.exc_info"
                ],
                [
                    "context",
                    "number of lines of the source file to plot"
                ],
                [
                    "tb_offset",
                    "the number of stack frame not to use (0 = use all)"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\func_inspect.py": [
        {
            "name": "get_func_code",
            "line": 21,
            "params": [],
            "returns": [
                [
                    "func_code",
                    "string"
                ],
                [
                    "source_file",
                    "string"
                ],
                [
                    "first_line",
                    "int"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "get_func_name",
            "line": 91,
            "params": [
                [
                    "func",
                    "callable"
                ],
                [
                    "resolv_alias",
                    "boolean, optional"
                ],
                [
                    "win_characters",
                    "boolean, optional"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "getfullargspec",
            "line": 160,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "filter_args",
            "line": 207,
            "params": [
                [
                    "func",
                    "callable"
                ],
                [
                    "ignore_lst",
                    "list of strings"
                ]
            ],
            "returns": [
                [
                    "filtered_args",
                    "list"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 2
            }
        },
        {
            "name": "format_call",
            "line": 350,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\hashing.py": [
        {
            "name": "hash",
            "line": 246,
            "params": [
                [
                    "hash_name",
                    "'md5' or 'sha1'"
                ],
                [
                    "coerce_mmap",
                    "boolean"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\logger.py": [],
    "../scikit-learn-master/sklearn\\externals\\joblib\\memory.py": [
        {
            "name": "extract_first_line",
            "line": 60,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "concurrency_safe_write",
            "line": 206,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\my_exceptions.py": [],
    "../scikit-learn-master/sklearn\\externals\\joblib\\numpy_pickle.py": [
        {
            "name": "dump",
            "line": 353,
            "params": [
                [
                    "value",
                    "any Python object"
                ],
                [
                    "filename",
                    "str or pathlib.Path"
                ],
                [
                    "compress",
                    "int from 0 to 9 or bool or 2-tuple, optional"
                ],
                [
                    "protocol",
                    "positive int"
                ],
                [
                    "cache_size",
                    "positive int, optional"
                ]
            ],
            "returns": [
                [
                    "filenames",
                    "list of strings"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "load",
            "line": 530,
            "params": [
                [
                    "filename",
                    "str or pathlib.Path"
                ],
                [
                    "mmap_mode",
                    "{None, 'r+', 'r', 'w+', 'c'}, optional"
                ]
            ],
            "returns": [
                [
                    "result",
                    "any Python object"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\numpy_pickle_compat.py": [
        {
            "name": "hex_str",
            "line": 13,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "read_zfile",
            "line": 29,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "write_zfile",
            "line": 62,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "load_compatibility",
            "line": 193,
            "params": [
                [
                    "filename",
                    "string"
                ]
            ],
            "returns": [
                [
                    "result",
                    "any Python object"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\numpy_pickle_utils.py": [],
    "../scikit-learn-master/sklearn\\externals\\joblib\\parallel.py": [
        {
            "name": "get_active_backend",
            "line": 56,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "parallel_backend",
            "line": 68,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "cpu_count",
            "line": 140,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "delayed",
            "line": 169,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "register_parallel_backend",
            "line": 223,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "effective_n_jobs",
            "line": 245,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\pool.py": [
        {
            "name": "has_shareable_memory",
            "line": 96,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "reduce_memmap",
            "line": 156,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "delete_folder",
            "line": 432,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\dict_vectorizer.py": [],
    "../scikit-learn-master/sklearn\\feature_extraction\\hashing.py": [],
    "../scikit-learn-master/sklearn\\feature_extraction\\image.py": [
        {
            "name": "img_to_graph",
            "line": 132,
            "params": [
                [
                    "img",
                    "ndarray, 2D or 3D"
                ],
                [
                    "mask",
                    "ndarray of booleans, optional"
                ],
                [
                    "return_as",
                    "np.ndarray or a sparse matrix class, optional"
                ],
                [
                    "dtype",
                    "None or dtype, optional"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "grid_to_graph",
            "line": 167,
            "params": [
                [
                    "n_x",
                    "int"
                ],
                [
                    "n_y",
                    "int"
                ],
                [
                    "n_z",
                    "int, optional, default 1"
                ],
                [
                    "mask",
                    "ndarray of booleans, optional"
                ],
                [
                    "return_as",
                    "np.ndarray or a sparse matrix class, optional"
                ],
                [
                    "dtype",
                    "dtype, optional, default int"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "extract_patches",
            "line": 241,
            "params": [
                [
                    "arr",
                    "ndarray"
                ],
                [
                    "patch_shape",
                    "integer or tuple of length arr.ndim"
                ],
                [
                    "extraction_step",
                    "integer or tuple of length arr.ndim"
                ]
            ],
            "returns": [
                [
                    "patches",
                    "strided ndarray"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "extract_patches_2d",
            "line": 299,
            "params": [
                [
                    "image",
                    "array, shape = (image_height, image_width) or"
                ],
                [
                    "patch_size",
                    "tuple of ints (patch_height, patch_width)"
                ],
                [
                    "max_patches",
                    "integer or float, optional default is None"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "patches",
                    "array, shape = (n_patches, patch_height, patch_width) or"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "reconstruct_from_patches_2d",
            "line": 395,
            "params": [
                [
                    "patches",
                    "array, shape = (n_patches, patch_height, patch_width) or"
                ],
                [
                    "image_size",
                    "tuple of ints (image_height, image_width) or"
                ]
            ],
            "returns": [
                [
                    "image",
                    "array, shape = image_size"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\setup.py": [],
    "../scikit-learn-master/sklearn\\feature_extraction\\stop_words.py": [],
    "../scikit-learn-master/sklearn\\feature_extraction\\text.py": [
        {
            "name": "strip_accents_unicode",
            "line": 43,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "strip_accents_ascii",
            "line": 63,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "strip_tags",
            "line": 78,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\tests\\test_dict_vectorizer.py": [],
    "../scikit-learn-master/sklearn\\feature_extraction\\tests\\test_feature_hasher.py": [],
    "../scikit-learn-master/sklearn\\feature_extraction\\tests\\test_image.py": [],
    "../scikit-learn-master/sklearn\\feature_extraction\\tests\\test_text.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\base.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\from_model.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\mutual_info_.py": [
        {
            "name": "mutual_info_regression",
            "line": 295,
            "params": [
                [
                    "X",
                    "array_like or sparse matrix, shape (n_samples, n_features)"
                ],
                [
                    "y",
                    "array_like, shape (n_samples,)"
                ],
                [
                    "discrete_features",
                    "{'auto', bool, array_like}, default 'auto'"
                ],
                [
                    "n_neighbors",
                    "int, default 3"
                ],
                [
                    "copy",
                    "bool, default True"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional, default None"
                ]
            ],
            "returns": [
                [
                    "mi",
                    "ndarray, shape (n_features,)"
                ]
            ],
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "mutual_info_classif",
            "line": 374,
            "params": [
                [
                    "X",
                    "array_like or sparse matrix, shape (n_samples, n_features)"
                ],
                [
                    "y",
                    "array_like, shape (n_samples,)"
                ],
                [
                    "discrete_features",
                    "{'auto', bool, array_like}, default 'auto'"
                ],
                [
                    "n_neighbors",
                    "int, default 3"
                ],
                [
                    "copy",
                    "bool, default True"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional, default None"
                ]
            ],
            "returns": [
                [
                    "mi",
                    "ndarray, shape (n_features,)"
                ]
            ],
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\rfe.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\univariate_selection.py": [
        {
            "name": "f_oneway",
            "line": 42,
            "params": [],
            "returns": [
                [
                    "F-value",
                    "float"
                ],
                [
                    "p-value",
                    "float"
                ]
            ],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "f_classif",
            "line": 121,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix} shape = [n_samples, n_features]"
                ],
                [
                    "y",
                    "array of shape(n_samples)"
                ]
            ],
            "returns": [
                [
                    "F",
                    "array, shape = [n_features,]"
                ],
                [
                    "pval",
                    "array, shape = [n_features,]"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "chi2",
            "line": 171,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix}, shape = (n_samples, n_features_in)"
                ],
                [
                    "y",
                    "array-like, shape = (n_samples,)"
                ]
            ],
            "returns": [
                [
                    "chi2",
                    "array, shape = (n_features,)"
                ],
                [
                    "pval",
                    "array, shape = (n_features,)"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "f_regression",
            "line": 230,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix}  shape = (n_samples, n_features)"
                ],
                [
                    "y",
                    "array of shape(n_samples)."
                ],
                [
                    "center",
                    "True, bool,"
                ]
            ],
            "returns": [
                [
                    "F",
                    "array, shape=(n_features,)"
                ],
                [
                    "pval",
                    "array, shape=(n_features,)"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\variance_threshold.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_base.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_chi2.py": [
        {
            "name": "mkchi2",
            "line": 29,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_feature_select.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_from_model.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_mutual_info.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_rfe.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_variance_threshold.py": [],
    "../scikit-learn-master/sklearn\\gaussian_process\\correlation_models.py": [
        {
            "name": "absolute_exponential",
            "line": 15,
            "params": [
                [
                    "theta",
                    "array_like"
                ],
                [
                    "d",
                    "array_like"
                ]
            ],
            "returns": [
                [
                    "r",
                    "array_like"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "squared_exponential",
            "line": 57,
            "params": [
                [
                    "theta",
                    "array_like"
                ],
                [
                    "d",
                    "array_like"
                ]
            ],
            "returns": [
                [
                    "r",
                    "array_like"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "generalized_exponential",
            "line": 100,
            "params": [
                [
                    "theta",
                    "array_like"
                ],
                [
                    "d",
                    "array_like"
                ]
            ],
            "returns": [
                [
                    "r",
                    "array_like"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "pure_nugget",
            "line": 150,
            "params": [
                [
                    "theta",
                    "array_like"
                ],
                [
                    "d",
                    "array_like"
                ]
            ],
            "returns": [
                [
                    "r",
                    "array_like"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "cubic",
            "line": 187,
            "params": [
                [
                    "theta",
                    "array_like"
                ],
                [
                    "d",
                    "array_like"
                ]
            ],
            "returns": [
                [
                    "r",
                    "array_like"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "linear",
            "line": 237,
            "params": [
                [
                    "theta",
                    "array_like"
                ],
                [
                    "d",
                    "array_like"
                ]
            ],
            "returns": [
                [
                    "r",
                    "array_like"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\gaussian_process.py": [
        {
            "name": "l1_cross_distances",
            "line": 25,
            "params": [
                [
                    "X",
                    "array_like"
                ]
            ],
            "returns": [
                [
                    "D",
                    "array with shape (n_samples * (n_samples - 1) / 2, n_features)"
                ],
                [
                    "ij",
                    "arrays with shape (n_samples * (n_samples - 1) / 2, 2)"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\gpc.py": [],
    "../scikit-learn-master/sklearn\\gaussian_process\\gpr.py": [],
    "../scikit-learn-master/sklearn\\gaussian_process\\kernels.py": [],
    "../scikit-learn-master/sklearn\\gaussian_process\\regression_models.py": [
        {
            "name": "constant",
            "line": 15,
            "params": [
                [
                    "x",
                    "array_like"
                ]
            ],
            "returns": [
                [
                    "f",
                    "array_like"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "linear",
            "line": 39,
            "params": [
                [
                    "x",
                    "array_like"
                ]
            ],
            "returns": [
                [
                    "f",
                    "array_like"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "quadratic",
            "line": 63,
            "params": [
                [
                    "x",
                    "array_like"
                ]
            ],
            "returns": [
                [
                    "f",
                    "array_like"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\tests\\test_gaussian_process.py": [],
    "../scikit-learn-master/sklearn\\gaussian_process\\tests\\test_gpc.py": [],
    "../scikit-learn-master/sklearn\\gaussian_process\\tests\\test_gpr.py": [],
    "../scikit-learn-master/sklearn\\gaussian_process\\tests\\test_kernels.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\base.py": [
        {
            "name": "make_dataset",
            "line": 48,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "sparse_center_data",
            "line": 72,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "center_data",
            "line": 111,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 6,
                "missed_params": 6
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\bayes.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\coordinate_descent.py": [
        {
            "name": "lasso_path",
            "line": 128,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix}, shape (n_samples, n_features)"
                ],
                [
                    "y",
                    "ndarray, shape (n_samples,), or (n_samples, n_outputs)"
                ],
                [
                    "eps",
                    "float, optional"
                ],
                [
                    "n_alphas",
                    "int, optional"
                ],
                [
                    "alphas",
                    "ndarray, optional"
                ],
                [
                    "precompute",
                    "True | False | 'auto' | array-like"
                ],
                [
                    "Xy",
                    "array-like, optional"
                ],
                [
                    "copy_X",
                    "boolean, optional, default True"
                ],
                [
                    "coef_init",
                    "array, shape (n_features, ) | None"
                ],
                [
                    "verbose",
                    "bool or integer"
                ],
                [
                    "return_n_iter",
                    "bool"
                ],
                [
                    "positive",
                    "bool, default False"
                ]
            ],
            "returns": [
                [
                    "alphas",
                    "array, shape (n_alphas,)"
                ],
                [
                    "coefs",
                    "array, shape (n_features, n_alphas) or             (n_outputs, n_features, n_alphas)"
                ],
                [
                    "dual_gaps",
                    "array, shape (n_alphas,)"
                ],
                [
                    "n_iters",
                    "array-like, shape (n_alphas,)"
                ]
            ],
            "count": {
                "total_params": 12,
                "missed_params": 0
            }
        },
        {
            "name": "enet_path",
            "line": 271,
            "params": [
                [
                    "X",
                    "{array-like}, shape (n_samples, n_features)"
                ],
                [
                    "y",
                    "ndarray, shape (n_samples,) or (n_samples, n_outputs)"
                ],
                [
                    "l1_ratio",
                    "float, optional"
                ],
                [
                    "eps",
                    "float"
                ],
                [
                    "n_alphas",
                    "int, optional"
                ],
                [
                    "alphas",
                    "ndarray, optional"
                ],
                [
                    "precompute",
                    "True | False | 'auto' | array-like"
                ],
                [
                    "Xy",
                    "array-like, optional"
                ],
                [
                    "copy_X",
                    "boolean, optional, default True"
                ],
                [
                    "coef_init",
                    "array, shape (n_features, ) | None"
                ],
                [
                    "verbose",
                    "bool or integer"
                ],
                [
                    "return_n_iter",
                    "bool"
                ],
                [
                    "positive",
                    "bool, default False"
                ],
                [
                    "check_input",
                    "bool, default True"
                ]
            ],
            "returns": [
                [
                    "alphas",
                    "array, shape (n_alphas,)"
                ],
                [
                    "coefs",
                    "array, shape (n_features, n_alphas) or             (n_outputs, n_features, n_alphas)"
                ],
                [
                    "dual_gaps",
                    "array, shape (n_alphas,)"
                ],
                [
                    "n_iters",
                    "array-like, shape (n_alphas,)"
                ]
            ],
            "count": {
                "total_params": 14,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\huber.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\least_angle.py": [
        {
            "name": "lars_path",
            "line": 37,
            "params": [
                [
                    "X",
                    "array, shape: (n_samples, n_features)"
                ],
                [
                    "y",
                    "array, shape: (n_samples)"
                ],
                [
                    "Xy",
                    "array-like, shape (n_samples,) or (n_samples, n_targets),             optional"
                ],
                [
                    "Gram",
                    "None, 'auto', array, shape: (n_features, n_features), optional"
                ],
                [
                    "max_iter",
                    "integer, optional (default=500)"
                ],
                [
                    "alpha_min",
                    "float, optional (default=0)"
                ],
                [
                    "method",
                    "{'lar', 'lasso'}, optional (default='lar')"
                ],
                [
                    "copy_X",
                    "bool, optional (default=True)"
                ],
                [
                    "eps",
                    "float, optional (default=``np.finfo(np.float).eps``)"
                ],
                [
                    "copy_Gram",
                    "bool, optional (default=True)"
                ],
                [
                    "verbose",
                    "int (default=0)"
                ],
                [
                    "return_path",
                    "bool, optional (default=True)"
                ],
                [
                    "return_n_iter",
                    "bool, optional (default=False)"
                ],
                [
                    "positive",
                    "boolean (default=False)"
                ]
            ],
            "returns": [
                [
                    "alphas",
                    "array, shape: [n_alphas + 1]"
                ],
                [
                    "active",
                    "array, shape [n_alphas]"
                ],
                [
                    "coefs",
                    "array, shape (n_features, n_alphas + 1)"
                ],
                [
                    "n_iter",
                    "int"
                ]
            ],
            "count": {
                "total_params": 14,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\logistic.py": [
        {
            "name": "logistic_regression_path",
            "line": 456,
            "params": [
                [
                    "X",
                    "array-like or sparse matrix, shape (n_samples, n_features)"
                ],
                [
                    "y",
                    "array-like, shape (n_samples,)"
                ],
                [
                    "pos_class",
                    "int, None"
                ],
                [
                    "Cs",
                    "int | array-like, shape (n_cs,)"
                ],
                [
                    "fit_intercept",
                    "bool"
                ],
                [
                    "max_iter",
                    "int"
                ],
                [
                    "tol",
                    "float"
                ],
                [
                    "verbose",
                    "int"
                ],
                [
                    "solver",
                    "{'lbfgs', 'newton-cg', 'liblinear', 'sag', 'saga'}"
                ],
                [
                    "coef",
                    "array-like, shape (n_features,), default None"
                ],
                [
                    "class_weight",
                    "dict or 'balanced', optional"
                ],
                [
                    "dual",
                    "bool"
                ],
                [
                    "penalty",
                    "str, 'l1' or 'l2'"
                ],
                [
                    "intercept_scaling",
                    "float, default 1."
                ],
                [
                    "multi_class",
                    "str, {'ovr', 'multinomial'}"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional, default None"
                ],
                [
                    "check_input",
                    "bool, default True"
                ],
                [
                    "max_squared_sum",
                    "float, default None"
                ],
                [
                    "sample_weight",
                    "array-like, shape(n_samples,) optional"
                ]
            ],
            "returns": [
                [
                    "coefs",
                    "ndarray, shape (n_cs, n_features) or (n_cs, n_features + 1)"
                ],
                [
                    "Cs",
                    "ndarray"
                ],
                [
                    "n_iter",
                    "array, shape (n_cs,)"
                ]
            ],
            "count": {
                "total_params": 19,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\omp.py": [
        {
            "name": "orthogonal_mp",
            "line": 265,
            "params": [
                [
                    "X",
                    "array, shape (n_samples, n_features)"
                ],
                [
                    "y",
                    "array, shape (n_samples,) or (n_samples, n_targets)"
                ],
                [
                    "n_nonzero_coefs",
                    "int"
                ],
                [
                    "tol",
                    "float"
                ],
                [
                    "precompute",
                    "{True, False, 'auto'},"
                ],
                [
                    "copy_X",
                    "bool, optional"
                ],
                [
                    "return_path",
                    "bool, optional. Default: False"
                ],
                [
                    "return_n_iter",
                    "bool, optional default False"
                ]
            ],
            "returns": [
                [
                    "coef",
                    "array, shape (n_features,) or (n_features, n_targets)"
                ],
                [
                    "n_iters",
                    "array-like or int"
                ]
            ],
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "orthogonal_mp_gram",
            "line": 408,
            "params": [
                [
                    "Gram",
                    "array, shape (n_features, n_features)"
                ],
                [
                    "Xy",
                    "array, shape (n_features,) or (n_features, n_targets)"
                ],
                [
                    "n_nonzero_coefs",
                    "int"
                ],
                [
                    "tol",
                    "float"
                ],
                [
                    "norms_squared",
                    "array-like, shape (n_targets,)"
                ],
                [
                    "copy_Gram",
                    "bool, optional"
                ],
                [
                    "copy_Xy",
                    "bool, optional"
                ],
                [
                    "return_path",
                    "bool, optional. Default: False"
                ],
                [
                    "return_n_iter",
                    "bool, optional default False"
                ]
            ],
            "returns": [
                [
                    "coef",
                    "array, shape (n_features,) or (n_features, n_targets)"
                ],
                [
                    "n_iters",
                    "array-like or int"
                ]
            ],
            "count": {
                "total_params": 9,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\passive_aggressive.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\perceptron.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\randomized_l1.py": [
        {
            "name": "lasso_stability_path",
            "line": 576,
            "params": [
                [
                    "X",
                    "array-like, shape = [n_samples, n_features]"
                ],
                [
                    "y",
                    "array-like, shape = [n_samples]"
                ],
                [
                    "scaling",
                    "float, optional, default=0.5"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional, default=None"
                ],
                [
                    "n_resampling",
                    "int, optional, default=200"
                ],
                [
                    "n_grid",
                    "int, optional, default=100"
                ],
                [
                    "sample_fraction",
                    "float, optional, default=0.75"
                ],
                [
                    "eps",
                    "float, optional"
                ],
                [
                    "n_jobs",
                    "integer, optional"
                ],
                [
                    "verbose",
                    "boolean or integer, optional"
                ]
            ],
            "returns": [
                [
                    "alphas_grid",
                    "array, shape ~ [n_grid]"
                ],
                [
                    "scores_path",
                    "array, shape = [n_features, n_grid]"
                ]
            ],
            "count": {
                "total_params": 10,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\ransac.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\ridge.py": [
        {
            "name": "ridge_regression",
            "line": 197,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix, LinearOperator},"
                ],
                [
                    "y",
                    "array-like, shape = [n_samples] or [n_samples, n_targets]"
                ],
                [
                    "alpha",
                    "{float, array-like},"
                ],
                [
                    "sample_weight",
                    "float or numpy array of shape [n_samples]"
                ],
                [
                    "solver",
                    "{'auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga'}"
                ],
                [
                    "max_iter",
                    "int, optional"
                ],
                [
                    "tol",
                    "float"
                ],
                [
                    "verbose",
                    "int"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional, default None"
                ],
                [
                    "return_n_iter",
                    "boolean, default False"
                ],
                [
                    "return_intercept",
                    "boolean, default False"
                ]
            ],
            "returns": [
                [
                    "coef",
                    "array, shape = [n_features] or [n_targets, n_features]"
                ],
                [
                    "n_iter",
                    "int, optional"
                ],
                [
                    "intercept",
                    "float or array, shape = [n_targets]"
                ]
            ],
            "count": {
                "total_params": 11,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\sag.py": [
        {
            "name": "get_auto_step_size",
            "line": 20,
            "params": [
                [
                    "max_squared_sum",
                    "float"
                ],
                [
                    "alpha_scaled",
                    "float"
                ],
                [
                    "loss",
                    "string, in {\"log\", \"squared\"}"
                ],
                [
                    "fit_intercept",
                    "bool"
                ],
                [
                    "n_samples",
                    "int, optional"
                ],
                [
                    "is_saga",
                    "boolean, optional"
                ]
            ],
            "returns": [
                [
                    "step_size",
                    "float"
                ]
            ],
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "sag_solver",
            "line": 90,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix}, shape (n_samples, n_features)"
                ],
                [
                    "y",
                    "numpy array, shape (n_samples,)"
                ],
                [
                    "sample_weight",
                    "array-like, shape (n_samples,), optional"
                ],
                [
                    "loss",
                    "'log' | 'squared' | 'multinomial'"
                ],
                [
                    "alpha",
                    "float, optional"
                ],
                [
                    "max_iter",
                    "int, optional"
                ],
                [
                    "tol",
                    "double, optional"
                ],
                [
                    "verbose",
                    "integer, optional"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional, default None"
                ],
                [
                    "check_input",
                    "bool, default True"
                ],
                [
                    "max_squared_sum",
                    "float, default None"
                ],
                [
                    "warm_start_mem",
                    "dict, optional"
                ],
                [
                    "is_saga",
                    "boolean, optional"
                ]
            ],
            "returns": [
                [
                    "coef_",
                    "array, shape (n_features)"
                ],
                [
                    "n_iter_",
                    "int"
                ],
                [
                    "warm_start_mem",
                    "dict"
                ]
            ],
            "count": {
                "total_params": 14,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\setup.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\stochastic_gradient.py": [
        {
            "name": "fit_binary",
            "line": 269,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 11,
                "missed_params": 11
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\theil_sen.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_base.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_bayes.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_coordinate_descent.py": [
        {
            "name": "build_dataset",
            "line": 130,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_huber.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_least_angle.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_logistic.py": [
        {
            "name": "check_predictions",
            "line": 36,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_omp.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_passive_aggressive.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_perceptron.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_randomized_l1.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_ransac.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_ridge.py": [
        {
            "name": "test_class_weight_vs_sample_weight",
            "line": 532,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_sag.py": [
        {
            "name": "test_sag_pobj_matches_logistic_regression",
            "line": 305,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sag_pobj_matches_ridge_regression",
            "line": 335,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sag_regressor_computed_correctly",
            "line": 367,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sag_regressor",
            "line": 456,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sag_classifier_computed_correctly",
            "line": 495,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sag_multiclass_computed_correctly",
            "line": 538,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_classifier_results",
            "line": 597,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_binary_classifier_class_weight",
            "line": 622,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_multiclass_classifier_class_weight",
            "line": 672,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_classifier_single_class",
            "line": 734,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_sgd.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_sparse_coordinate_descent.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_theil_sen.py": [],
    "../scikit-learn-master/sklearn\\manifold\\isomap.py": [],
    "../scikit-learn-master/sklearn\\manifold\\locally_linear.py": [
        {
            "name": "barycenter_weights",
            "line": 20,
            "params": [
                [
                    "X",
                    "array-like, shape (n_samples, n_dim)"
                ],
                [
                    "Z",
                    "array-like, shape (n_samples, n_neighbors, n_dim)"
                ],
                [
                    "reg",
                    "float, optional"
                ]
            ],
            "returns": [
                [
                    "B",
                    "array-like, shape (n_samples, n_neighbors)"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "barycenter_kneighbors_graph",
            "line": 67,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix, BallTree, KDTree, NearestNeighbors}"
                ],
                [
                    "n_neighbors",
                    "int"
                ],
                [
                    "reg",
                    "float, optional"
                ],
                [
                    "n_jobs",
                    "int, optional (default = 1)"
                ]
            ],
            "returns": [
                [
                    "A",
                    "sparse matrix in CSR format, shape = [n_samples, n_samples]"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "null_space",
            "line": 110,
            "params": [
                [
                    "M",
                    "{array, matrix, sparse matrix, LinearOperator}"
                ],
                [
                    "k",
                    "integer"
                ],
                [
                    "k_skip",
                    "integer, optional"
                ],
                [
                    "eigen_solver",
                    "string, {'auto', 'arpack', 'dense'}"
                ],
                [
                    "tol",
                    "float, optional"
                ],
                [
                    "max_iter",
                    "maximum number of iterations for 'arpack' method"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "locally_linear_embedding",
            "line": 189,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix, BallTree, KDTree, NearestNeighbors}"
                ],
                [
                    "n_neighbors",
                    "integer"
                ],
                [
                    "n_components",
                    "integer"
                ],
                [
                    "reg",
                    "float"
                ],
                [
                    "eigen_solver",
                    "string, {'auto', 'arpack', 'dense'}"
                ],
                [
                    "tol",
                    "float, optional"
                ],
                [
                    "max_iter",
                    "integer"
                ],
                [
                    "method",
                    "{'standard', 'hessian', 'modified', 'ltsa'}"
                ],
                [
                    "hessian_tol",
                    "float, optional"
                ],
                [
                    "modified_tol",
                    "float, optional"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ],
                [
                    "n_jobs",
                    "int, optional (default = 1)"
                ]
            ],
            "returns": [
                [
                    "Y",
                    "array-like, shape [n_samples, n_components]"
                ],
                [
                    "squared_error",
                    "float"
                ]
            ],
            "count": {
                "total_params": 12,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\manifold\\mds.py": [
        {
            "name": "smacof",
            "line": 136,
            "params": [
                [
                    "dissimilarities",
                    "ndarray, shape (n_samples, n_samples)"
                ],
                [
                    "metric",
                    "boolean, optional, default: True"
                ],
                [
                    "n_components",
                    "int, optional, default: 2"
                ],
                [
                    "init",
                    "ndarray, shape (n_samples, n_components), optional, default: None"
                ],
                [
                    "n_init",
                    "int, optional, default: 8"
                ],
                [
                    "n_jobs",
                    "int, optional, default: 1"
                ],
                [
                    "max_iter",
                    "int, optional, default: 300"
                ],
                [
                    "verbose",
                    "int, optional, default: 0"
                ],
                [
                    "eps",
                    "float, optional, default: 1e-3"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional, default: None"
                ],
                [
                    "return_n_iter",
                    "bool, optional, default: False"
                ]
            ],
            "returns": [
                [
                    "X",
                    "ndarray, shape (n_samples, n_components)"
                ],
                [
                    "stress",
                    "float"
                ],
                [
                    "n_iter",
                    "int"
                ]
            ],
            "count": {
                "total_params": 11,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\manifold\\setup.py": [],
    "../scikit-learn-master/sklearn\\manifold\\spectral_embedding_.py": [
        {
            "name": "spectral_embedding",
            "line": 135,
            "params": [
                [
                    "adjacency",
                    "array-like or sparse matrix, shape: (n_samples, n_samples)"
                ],
                [
                    "n_components",
                    "integer, optional, default 8"
                ],
                [
                    "eigen_solver",
                    "{None, 'arpack', 'lobpcg', or 'amg'}, default None"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional, default: None"
                ],
                [
                    "eigen_tol",
                    "float, optional, default=0.0"
                ],
                [
                    "norm_laplacian",
                    "bool, optional, default=True"
                ],
                [
                    "drop_first",
                    "bool, optional, default=True"
                ]
            ],
            "returns": [
                [
                    "embedding",
                    "array, shape=(n_samples, n_components)"
                ]
            ],
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\manifold\\t_sne.py": [
        {
            "name": "trustworthiness",
            "line": 380,
            "params": [
                [
                    "X",
                    "array, shape (n_samples, n_features) or (n_samples, n_samples)"
                ],
                [
                    "X_embedded",
                    "array, shape (n_samples, n_components)"
                ],
                [
                    "n_neighbors",
                    "int, optional (default: 5)"
                ],
                [
                    "precomputed",
                    "bool, optional (default: False)"
                ]
            ],
            "returns": [
                [
                    "trustworthiness",
                    "float"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\manifold\\tests\\test_isomap.py": [],
    "../scikit-learn-master/sklearn\\manifold\\tests\\test_locally_linear.py": [],
    "../scikit-learn-master/sklearn\\manifold\\tests\\test_mds.py": [],
    "../scikit-learn-master/sklearn\\manifold\\tests\\test_spectral_embedding.py": [],
    "../scikit-learn-master/sklearn\\manifold\\tests\\test_t_sne.py": [
        {
            "name": "test_optimization_minimizes_kl_divergence",
            "line": 252,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "check_uniform_grid",
            "line": 719,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\base.py": [],
    "../scikit-learn-master/sklearn\\metrics\\classification.py": [
        {
            "name": "accuracy_score",
            "line": 115,
            "params": [
                [
                    "y_true",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "y_pred",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "normalize",
                    "bool, optional (default=True)"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ]
            ],
            "returns": [
                [
                    "score",
                    "float"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "confusion_matrix",
            "line": 186,
            "params": [
                [
                    "y_true",
                    "array, shape = [n_samples]"
                ],
                [
                    "y_pred",
                    "array, shape = [n_samples]"
                ],
                [
                    "labels",
                    "array, shape = [n_classes], optional"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ]
            ],
            "returns": [
                [
                    "C",
                    "array, shape = [n_classes, n_classes]"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "cohen_kappa_score",
            "line": 294,
            "params": [
                [
                    "y1",
                    "array, shape = [n_samples]"
                ],
                [
                    "y2",
                    "array, shape = [n_samples]"
                ],
                [
                    "labels",
                    "array, shape = [n_classes], optional"
                ],
                [
                    "weights",
                    "str, optional"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ]
            ],
            "returns": [
                [
                    "kappa",
                    "float"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "jaccard_similarity_score",
            "line": 375,
            "params": [
                [
                    "y_true",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "y_pred",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "normalize",
                    "bool, optional (default=True)"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ]
            ],
            "returns": [
                [
                    "score",
                    "float"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "matthews_corrcoef",
            "line": 460,
            "params": [
                [
                    "y_true",
                    "array, shape = [n_samples]"
                ],
                [
                    "y_pred",
                    "array, shape = [n_samples]"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], default None"
                ]
            ],
            "returns": [
                [
                    "mcc",
                    "float"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "zero_one_loss",
            "line": 546,
            "params": [
                [
                    "y_true",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "y_pred",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "normalize",
                    "bool, optional (default=True)"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ]
            ],
            "returns": [
                [
                    "loss",
                    "float or int,"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "f1_score",
            "line": 616,
            "params": [
                [
                    "y_true",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "y_pred",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "labels",
                    "list, optional"
                ],
                [
                    "pos_label",
                    "str or int, 1 by default"
                ],
                [
                    "average",
                    "string, [None, 'binary' (default), 'micro', 'macro', 'samples',                        'weighted']"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ]
            ],
            "returns": [
                [
                    "f1_score",
                    "float or array of float, shape = [n_unique_labels]"
                ]
            ],
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "fbeta_score",
            "line": 718,
            "params": [
                [
                    "y_true",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "y_pred",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "beta",
                    "float"
                ],
                [
                    "labels",
                    "list, optional"
                ],
                [
                    "pos_label",
                    "str or int, 1 by default"
                ],
                [
                    "average",
                    "string, [None, 'binary' (default), 'micro', 'macro', 'samples',                        'weighted']"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ]
            ],
            "returns": [
                [
                    "fbeta_score",
                    "float (if average is not None) or array of float, shape =        [n_unique_labels]"
                ]
            ],
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "precision_recall_fscore_support",
            "line": 880,
            "params": [
                [
                    "y_true",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "y_pred",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "beta",
                    "float, 1.0 by default"
                ],
                [
                    "labels",
                    "list, optional"
                ],
                [
                    "pos_label",
                    "str or int, 1 by default"
                ],
                [
                    "average",
                    "string, [None (default), 'binary', 'micro', 'macro', 'samples',                        'weighted']"
                ],
                [
                    "warn_for",
                    "tuple or set, for internal use"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ]
            ],
            "returns": [
                [
                    "precision",
                    "float (if average is not None) or array of float, shape =        [n_unique_labels]"
                ]
            ],
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "precision_score",
            "line": 1166,
            "params": [
                [
                    "y_true",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "y_pred",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "labels",
                    "list, optional"
                ],
                [
                    "pos_label",
                    "str or int, 1 by default"
                ],
                [
                    "average",
                    "string, [None, 'binary' (default), 'micro', 'macro', 'samples',                        'weighted']"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ]
            ],
            "returns": [
                [
                    "precision",
                    "float (if average is not None) or array of float, shape =        [n_unique_labels]"
                ]
            ],
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "recall_score",
            "line": 1266,
            "params": [
                [
                    "y_true",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "y_pred",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "labels",
                    "list, optional"
                ],
                [
                    "pos_label",
                    "str or int, 1 by default"
                ],
                [
                    "average",
                    "string, [None, 'binary' (default), 'micro', 'macro', 'samples',                        'weighted']"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ]
            ],
            "returns": [
                [
                    "recall",
                    "float (if average is not None) or array of float, shape =        [n_unique_labels]"
                ]
            ],
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "classification_report",
            "line": 1364,
            "params": [
                [
                    "y_true",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "y_pred",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "labels",
                    "array, shape = [n_labels]"
                ],
                [
                    "target_names",
                    "list of strings"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ],
                [
                    "digits",
                    "int"
                ]
            ],
            "returns": [
                [
                    "report",
                    "string"
                ]
            ],
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "hamming_loss",
            "line": 1467,
            "params": [
                [
                    "y_true",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "y_pred",
                    "1d array-like, or label indicator array / sparse matrix"
                ],
                [
                    "labels",
                    "array, shape = [n_labels], optional (default=None)"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ],
                [
                    "classes",
                    "array, shape = [n_labels], optional"
                ]
            ],
            "returns": [
                [
                    "loss",
                    "float or int,"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "log_loss",
            "line": 1577,
            "params": [
                [
                    "y_true",
                    "array-like or label indicator matrix"
                ],
                [
                    "y_pred",
                    "array-like of float, shape = (n_samples, n_classes) or (n_samples,)"
                ],
                [
                    "eps",
                    "float"
                ],
                [
                    "normalize",
                    "bool, optional (default=True)"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ],
                [
                    "labels",
                    "array-like, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "loss",
                    "float"
                ]
            ],
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "hinge_loss",
            "line": 1699,
            "params": [
                [
                    "y_true",
                    "array, shape = [n_samples]"
                ],
                [
                    "pred_decision",
                    "array, shape = [n_samples] or [n_samples, n_classes]"
                ],
                [
                    "labels",
                    "array, optional, default None"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ]
            ],
            "returns": [
                [
                    "loss",
                    "float"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "brier_score_loss",
            "line": 1844,
            "params": [
                [
                    "y_true",
                    "array, shape (n_samples,)"
                ],
                [
                    "y_prob",
                    "array, shape (n_samples,)"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ],
                [
                    "pos_label",
                    "int or str, default=None"
                ]
            ],
            "returns": [
                [
                    "score",
                    "float"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\pairwise.py": [
        {
            "name": "check_pairwise_arrays",
            "line": 58,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix}, shape (n_samples_a, n_features)"
                ],
                [
                    "Y",
                    "{array-like, sparse matrix}, shape (n_samples_b, n_features)"
                ],
                [
                    "precomputed",
                    "bool"
                ],
                [
                    "dtype",
                    "string, type, list of types or None (default=None)"
                ]
            ],
            "returns": [
                [
                    "safe_X",
                    "{array-like, sparse matrix}, shape (n_samples_a, n_features)"
                ],
                [
                    "safe_Y",
                    "{array-like, sparse matrix}, shape (n_samples_b, n_features)"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "check_paired_arrays",
            "line": 128,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix}, shape (n_samples_a, n_features)"
                ],
                [
                    "Y",
                    "{array-like, sparse matrix}, shape (n_samples_b, n_features)"
                ]
            ],
            "returns": [
                [
                    "safe_X",
                    "{array-like, sparse matrix}, shape (n_samples_a, n_features)"
                ],
                [
                    "safe_Y",
                    "{array-like, sparse matrix}, shape (n_samples_b, n_features)"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "euclidean_distances",
            "line": 164,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix}, shape (n_samples_1, n_features)"
                ],
                [
                    "Y",
                    "{array-like, sparse matrix}, shape (n_samples_2, n_features)"
                ],
                [
                    "Y_norm_squared",
                    "array-like, shape (n_samples_2, ), optional"
                ],
                [
                    "squared",
                    "boolean, optional"
                ],
                [
                    "X_norm_squared",
                    "array-like, shape = [n_samples_1], optional"
                ]
            ],
            "returns": [
                [
                    "distances",
                    "{array, sparse matrix}, shape (n_samples_1, n_samples_2)"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "pairwise_distances_argmin_min",
            "line": 261,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix}, shape (n_samples1, n_features)"
                ],
                [
                    "Y",
                    "{array-like, sparse matrix}, shape (n_samples2, n_features)"
                ],
                [
                    "axis",
                    "int, optional, default 1"
                ],
                [
                    "metric",
                    "string or callable, default 'euclidean'"
                ],
                [
                    "batch_size",
                    "integer"
                ],
                [
                    "metric_kwargs",
                    "dict, optional"
                ]
            ],
            "returns": [
                [
                    "argmin",
                    "numpy.ndarray"
                ],
                [
                    "distances",
                    "numpy.ndarray"
                ]
            ],
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "pairwise_distances_argmin",
            "line": 390,
            "params": [
                [
                    "X",
                    "array-like"
                ],
                [
                    "Y",
                    "array-like"
                ],
                [
                    "axis",
                    "int, optional, default 1"
                ],
                [
                    "metric",
                    "string or callable"
                ],
                [
                    "batch_size",
                    "integer"
                ],
                [
                    "metric_kwargs",
                    "dict"
                ]
            ],
            "returns": [
                [
                    "argmin",
                    "numpy.ndarray"
                ]
            ],
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "manhattan_distances",
            "line": 471,
            "params": [
                [
                    "X",
                    "array_like"
                ],
                [
                    "Y",
                    "array_like, optional"
                ],
                [
                    "sum_over_features",
                    "bool, default=True"
                ],
                [
                    "size_threshold",
                    "int, default=5e8"
                ]
            ],
            "returns": [
                [
                    "D",
                    "array"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "cosine_distances",
            "line": 551,
            "params": [
                [
                    "X",
                    "array_like, sparse matrix"
                ],
                [
                    "Y",
                    "array_like, sparse matrix (optional)"
                ]
            ],
            "returns": [
                [
                    "distance matrix",
                    "array"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "paired_euclidean_distances",
            "line": 589,
            "params": [
                [
                    "X",
                    "array-like, shape (n_samples, n_features)"
                ],
                [
                    "Y",
                    "array-like, shape (n_samples, n_features)"
                ]
            ],
            "returns": [
                [
                    "distances",
                    "ndarray (n_samples, )"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "paired_manhattan_distances",
            "line": 609,
            "params": [
                [
                    "X",
                    "array-like, shape (n_samples, n_features)"
                ],
                [
                    "Y",
                    "array-like, shape (n_samples, n_features)"
                ]
            ],
            "returns": [
                [
                    "distances",
                    "ndarray (n_samples, )"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "paired_cosine_distances",
            "line": 633,
            "params": [
                [
                    "X",
                    "array-like, shape (n_samples, n_features)"
                ],
                [
                    "Y",
                    "array-like, shape (n_samples, n_features)"
                ]
            ],
            "returns": [
                [
                    "distances",
                    "ndarray, shape (n_samples, )"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "paired_distances",
            "line": 667,
            "params": [
                [
                    "X",
                    "ndarray (n_samples, n_features)"
                ],
                [
                    "Y",
                    "ndarray (n_samples, n_features)"
                ],
                [
                    "metric",
                    "string or callable"
                ]
            ],
            "returns": [
                [
                    "distances",
                    "ndarray (n_samples, )"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "linear_kernel",
            "line": 725,
            "params": [
                [
                    "X",
                    "array of shape (n_samples_1, n_features)"
                ],
                [
                    "Y",
                    "array of shape (n_samples_2, n_features)"
                ]
            ],
            "returns": [
                [
                    "Gram matrix",
                    "array of shape (n_samples_1, n_samples_2)"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "polynomial_kernel",
            "line": 745,
            "params": [
                [
                    "X",
                    "ndarray of shape (n_samples_1, n_features)"
                ],
                [
                    "Y",
                    "ndarray of shape (n_samples_2, n_features)"
                ],
                [
                    "degree",
                    "int, default 3"
                ],
                [
                    "gamma",
                    "float, default None"
                ],
                [
                    "coef0",
                    "int, default 1"
                ]
            ],
            "returns": [
                [
                    "Gram matrix",
                    "array of shape (n_samples_1, n_samples_2)"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "sigmoid_kernel",
            "line": 781,
            "params": [
                [
                    "X",
                    "ndarray of shape (n_samples_1, n_features)"
                ],
                [
                    "Y",
                    "ndarray of shape (n_samples_2, n_features)"
                ],
                [
                    "gamma",
                    "float, default None"
                ],
                [
                    "coef0",
                    "int, default 1"
                ]
            ],
            "returns": [
                [
                    "Gram matrix",
                    "array of shape (n_samples_1, n_samples_2)"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "rbf_kernel",
            "line": 815,
            "params": [
                [
                    "X",
                    "array of shape (n_samples_X, n_features)"
                ],
                [
                    "Y",
                    "array of shape (n_samples_Y, n_features)"
                ],
                [
                    "gamma",
                    "float, default None"
                ]
            ],
            "returns": [
                [
                    "kernel_matrix",
                    "array of shape (n_samples_X, n_samples_Y)"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "laplacian_kernel",
            "line": 848,
            "params": [
                [
                    "X",
                    "array of shape (n_samples_X, n_features)"
                ],
                [
                    "Y",
                    "array of shape (n_samples_Y, n_features)"
                ],
                [
                    "gamma",
                    "float, default None"
                ]
            ],
            "returns": [
                [
                    "kernel_matrix",
                    "array of shape (n_samples_X, n_samples_Y)"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "cosine_similarity",
            "line": 882,
            "params": [
                [
                    "X",
                    "ndarray or sparse array, shape: (n_samples_X, n_features)"
                ],
                [
                    "Y",
                    "ndarray or sparse array, shape: (n_samples_Y, n_features)"
                ],
                [
                    "dense_output",
                    "boolean (optional), default True"
                ]
            ],
            "returns": [
                [
                    "kernel matrix",
                    "array"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "additive_chi2_kernel",
            "line": 930,
            "params": [
                [
                    "X",
                    "array-like of shape (n_samples_X, n_features)"
                ],
                [
                    "Y",
                    "array of shape (n_samples_Y, n_features)"
                ]
            ],
            "returns": [
                [
                    "kernel_matrix",
                    "array of shape (n_samples_X, n_samples_Y)"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "chi2_kernel",
            "line": 991,
            "params": [
                [
                    "X",
                    "array-like of shape (n_samples_X, n_features)"
                ],
                [
                    "Y",
                    "array of shape (n_samples_Y, n_features)"
                ],
                [
                    "gamma",
                    "float, default=1."
                ]
            ],
            "returns": [
                [
                    "kernel_matrix",
                    "array of shape (n_samples_X, n_samples_Y)"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "distance_metrics",
            "line": 1053,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "pairwise_distances",
            "line": 1141,
            "params": [
                [
                    "X",
                    "array [n_samples_a, n_samples_a] if metric == \"precomputed\", or,              [n_samples_a, n_features] otherwise"
                ],
                [
                    "Y",
                    "array [n_samples_b, n_features], optional"
                ],
                [
                    "metric",
                    "string, or callable"
                ],
                [
                    "n_jobs",
                    "int"
                ]
            ],
            "returns": [
                [
                    "D",
                    "array [n_samples_a, n_samples_a] or [n_samples_a, n_samples_b]"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "kernel_metrics",
            "line": 1279,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "pairwise_kernels",
            "line": 1320,
            "params": [
                [
                    "X",
                    "array [n_samples_a, n_samples_a] if metric == \"precomputed\", or,              [n_samples_a, n_features] otherwise"
                ],
                [
                    "Y",
                    "array [n_samples_b, n_features]"
                ],
                [
                    "metric",
                    "string, or callable"
                ],
                [
                    "filter_params",
                    "boolean"
                ],
                [
                    "n_jobs",
                    "int"
                ]
            ],
            "returns": [
                [
                    "K",
                    "array [n_samples_a, n_samples_a] or [n_samples_a, n_samples_b]"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\ranking.py": [
        {
            "name": "auc",
            "line": 39,
            "params": [
                [
                    "x",
                    "array, shape = [n]"
                ],
                [
                    "y",
                    "array, shape = [n]"
                ],
                [
                    "reorder",
                    "boolean, optional (default=False)"
                ]
            ],
            "returns": [
                [
                    "auc",
                    "float"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "average_precision_score",
            "line": 111,
            "params": [
                [
                    "y_true",
                    "array, shape = [n_samples] or [n_samples, n_classes]"
                ],
                [
                    "y_score",
                    "array, shape = [n_samples] or [n_samples, n_classes]"
                ],
                [
                    "average",
                    "string, [None, 'micro', 'macro' (default), 'samples', 'weighted']"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ]
            ],
            "returns": [
                [
                    "average_precision",
                    "float"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "roc_auc_score",
            "line": 203,
            "params": [
                [
                    "y_true",
                    "array, shape = [n_samples] or [n_samples, n_classes]"
                ],
                [
                    "y_score",
                    "array, shape = [n_samples] or [n_samples, n_classes]"
                ],
                [
                    "average",
                    "string, [None, 'micro', 'macro' (default), 'samples', 'weighted']"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ]
            ],
            "returns": [
                [
                    "auc",
                    "float"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "precision_recall_curve",
            "line": 363,
            "params": [
                [
                    "y_true",
                    "array, shape = [n_samples]"
                ],
                [
                    "probas_pred",
                    "array, shape = [n_samples]"
                ],
                [
                    "pos_label",
                    "int or str, default=None"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ]
            ],
            "returns": [
                [
                    "precision",
                    "array, shape = [n_thresholds + 1]"
                ],
                [
                    "recall",
                    "array, shape = [n_thresholds + 1]"
                ],
                [
                    "thresholds",
                    "array, shape = [n_thresholds <= len(np.unique(probas_pred))]"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "roc_curve",
            "line": 448,
            "params": [
                [
                    "y_true",
                    "array, shape = [n_samples]"
                ],
                [
                    "y_score",
                    "array, shape = [n_samples]"
                ],
                [
                    "pos_label",
                    "int or str, default=None"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ],
                [
                    "drop_intermediate",
                    "boolean, optional (default=True)"
                ]
            ],
            "returns": [
                [
                    "fpr",
                    "array, shape = [>2]"
                ],
                [
                    "tpr",
                    "array, shape = [>2]"
                ],
                [
                    "thresholds",
                    "array, shape = [n_thresholds]"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "label_ranking_average_precision_score",
            "line": 573,
            "params": [
                [
                    "y_true",
                    "array or sparse matrix, shape = [n_samples, n_labels]"
                ],
                [
                    "y_score",
                    "array, shape = [n_samples, n_labels]"
                ]
            ],
            "returns": [
                [
                    "score",
                    "float"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "coverage_error",
            "line": 649,
            "params": [
                [
                    "y_true",
                    "array, shape = [n_samples, n_labels]"
                ],
                [
                    "y_score",
                    "array, shape = [n_samples, n_labels]"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ]
            ],
            "returns": [
                [
                    "coverage_error",
                    "float"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "label_ranking_loss",
            "line": 708,
            "params": [
                [
                    "y_true",
                    "array or sparse matrix, shape = [n_samples, n_labels]"
                ],
                [
                    "y_score",
                    "array, shape = [n_samples, n_labels]"
                ],
                [
                    "sample_weight",
                    "array-like of shape = [n_samples], optional"
                ]
            ],
            "returns": [
                [
                    "loss",
                    "float"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "dcg_score",
            "line": 793,
            "params": [
                [
                    "y_true",
                    "array, shape = [n_samples]"
                ],
                [
                    "y_score",
                    "array, shape = [n_samples]"
                ],
                [
                    "k",
                    "int"
                ]
            ],
            "returns": [
                [
                    "score",
                    "float"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "ndcg_score",
            "line": 823,
            "params": [
                [
                    "y_true",
                    "array, shape = [n_samples]"
                ],
                [
                    "y_score",
                    "array, shape = [n_samples, n_classes]"
                ],
                [
                    "k",
                    "int"
                ]
            ],
            "returns": [
                [
                    "score",
                    "float"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\regression.py": [
        {
            "name": "mean_absolute_error",
            "line": 114,
            "params": [
                [
                    "y_true",
                    "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                ],
                [
                    "y_pred",
                    "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                ],
                [
                    "sample_weight",
                    "array-like of shape = (n_samples), optional"
                ],
                [
                    "multioutput",
                    "string in ['raw_values', 'uniform_average']"
                ]
            ],
            "returns": [
                [
                    "loss",
                    "float or ndarray of floats"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "mean_squared_error",
            "line": 185,
            "params": [
                [
                    "y_true",
                    "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                ],
                [
                    "y_pred",
                    "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                ],
                [
                    "sample_weight",
                    "array-like of shape = (n_samples), optional"
                ],
                [
                    "multioutput",
                    "string in ['raw_values', 'uniform_average']"
                ]
            ],
            "returns": [
                [
                    "loss",
                    "float or ndarray of floats"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "mean_squared_log_error",
            "line": 253,
            "params": [
                [
                    "y_true",
                    "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                ],
                [
                    "y_pred",
                    "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                ],
                [
                    "sample_weight",
                    "array-like of shape = (n_samples), optional"
                ],
                [
                    "multioutput",
                    "string in ['raw_values', 'uniform_average']             or array-like of shape = (n_outputs)"
                ]
            ],
            "returns": [
                [
                    "loss",
                    "float or ndarray of floats"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "median_absolute_error",
            "line": 318,
            "params": [
                [
                    "y_true",
                    "array-like of shape = (n_samples)"
                ],
                [
                    "y_pred",
                    "array-like of shape = (n_samples)"
                ]
            ],
            "returns": [
                [
                    "loss",
                    "float"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "explained_variance_score",
            "line": 354,
            "params": [
                [
                    "y_true",
                    "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                ],
                [
                    "y_pred",
                    "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                ],
                [
                    "sample_weight",
                    "array-like of shape = (n_samples), optional"
                ],
                [
                    "multioutput",
                    "string in ['raw_values', 'uniform_average',                 'variance_weighted'] or array-like of shape (n_outputs)"
                ]
            ],
            "returns": [
                [
                    "score",
                    "float or ndarray of floats"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "r2_score",
            "line": 445,
            "params": [
                [
                    "y_true",
                    "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                ],
                [
                    "y_pred",
                    "array-like of shape = (n_samples) or (n_samples, n_outputs)"
                ],
                [
                    "sample_weight",
                    "array-like of shape = (n_samples), optional"
                ],
                [
                    "multioutput",
                    "string in ['raw_values', 'uniform_average', 'variance_weighted'] or None or array-like of shape (n_outputs)"
                ]
            ],
            "returns": [
                [
                    "z",
                    "float or ndarray of floats"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\scorer.py": [
        {
            "name": "get_scorer",
            "line": 215,
            "params": [
                [
                    "scoring",
                    "str | callable"
                ]
            ],
            "returns": [
                [
                    "scorer",
                    "callable"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "check_scoring",
            "line": 250,
            "params": [
                [
                    "estimator",
                    "estimator object implementing 'fit'"
                ],
                [
                    "scoring",
                    "string, callable or None, optional, default: None"
                ],
                [
                    "allow_none",
                    "boolean, optional, default: False"
                ]
            ],
            "returns": [
                [
                    "scoring",
                    "callable"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "make_scorer",
            "line": 404,
            "params": [
                [
                    "score_func",
                    "callable,"
                ],
                [
                    "greater_is_better",
                    "boolean, default=True"
                ],
                [
                    "needs_proba",
                    "boolean, default=False"
                ],
                [
                    "needs_threshold",
                    "boolean, default=False"
                ]
            ],
            "returns": [
                [
                    "scorer",
                    "callable"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\setup.py": [],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\bicluster.py": [
        {
            "name": "consensus_score",
            "line": 49,
            "params": [
                [
                    "a",
                    "(rows, columns)"
                ],
                [
                    "b",
                    "(rows, columns)"
                ],
                [
                    "similarity",
                    "string or function, optional, default: \"jaccard\""
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\setup.py": [],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\supervised.py": [
        {
            "name": "check_clusterings",
            "line": 34,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "contingency_matrix",
            "line": 53,
            "params": [
                [
                    "labels_true",
                    "int array, shape = [n_samples]"
                ],
                [
                    "labels_pred",
                    "array, shape = [n_samples]"
                ],
                [
                    "eps",
                    "None or float, optional."
                ],
                [
                    "sparse",
                    "boolean, optional."
                ]
            ],
            "returns": [
                [
                    "contingency",
                    "{array-like, sparse}, shape=[n_classes_true, n_classes_pred]"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "adjusted_rand_score",
            "line": 112,
            "params": [
                [
                    "labels_true",
                    "int array, shape = [n_samples]"
                ],
                [
                    "labels_pred",
                    "array, shape = [n_samples]"
                ]
            ],
            "returns": [
                [
                    "ari",
                    "float"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "homogeneity_completeness_v_measure",
            "line": 217,
            "params": [
                [
                    "labels_true",
                    "int array, shape = [n_samples]"
                ],
                [
                    "labels_pred",
                    "array, shape = [n_samples]"
                ]
            ],
            "returns": [
                [
                    "homogeneity",
                    "float"
                ],
                [
                    "completeness",
                    "float"
                ],
                [
                    "v_measure",
                    "float"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "homogeneity_score",
            "line": 291,
            "params": [
                [
                    "labels_true",
                    "int array, shape = [n_samples]"
                ],
                [
                    "labels_pred",
                    "array, shape = [n_samples]"
                ]
            ],
            "returns": [
                [
                    "homogeneity",
                    "float"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "completeness_score",
            "line": 365,
            "params": [
                [
                    "labels_true",
                    "int array, shape = [n_samples]"
                ],
                [
                    "labels_pred",
                    "array, shape = [n_samples]"
                ]
            ],
            "returns": [
                [
                    "completeness",
                    "float"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "v_measure_score",
            "line": 435,
            "params": [
                [
                    "labels_true",
                    "int array, shape = [n_samples]"
                ],
                [
                    "labels_pred",
                    "array, shape = [n_samples]"
                ]
            ],
            "returns": [
                [
                    "v_measure",
                    "float"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "mutual_info_score",
            "line": 530,
            "params": [
                [
                    "labels_true",
                    "int array, shape = [n_samples]"
                ],
                [
                    "labels_pred",
                    "array, shape = [n_samples]"
                ],
                [
                    "contingency",
                    "{None, array, sparse matrix},"
                ]
            ],
            "returns": [
                [
                    "mi",
                    "float"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "adjusted_mutual_info_score",
            "line": 611,
            "params": [
                [
                    "labels_true",
                    "int array, shape = [n_samples]"
                ],
                [
                    "labels_pred",
                    "array, shape = [n_samples]"
                ]
            ],
            "returns": [
                [
                    "ami",
                    "float(upperlimited by 1.0)"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "normalized_mutual_info_score",
            "line": 707,
            "params": [
                [
                    "labels_true",
                    "int array, shape = [n_samples]"
                ],
                [
                    "labels_pred",
                    "array, shape = [n_samples]"
                ]
            ],
            "returns": [
                [
                    "nmi",
                    "float"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "fowlkes_mallows_score",
            "line": 787,
            "params": [
                [
                    "labels_true",
                    "int array, shape = (``n_samples``,)"
                ],
                [
                    "labels_pred",
                    "array, shape = (``n_samples``, )"
                ],
                [
                    "sparse",
                    "bool"
                ]
            ],
            "returns": [
                [
                    "score",
                    "float"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "entropy",
            "line": 862,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\unsupervised.py": [
        {
            "name": "silhouette_score",
            "line": 23,
            "params": [
                [
                    "X",
                    "array [n_samples_a, n_samples_a] if metric == \"precomputed\", or,              [n_samples_a, n_features] otherwise"
                ],
                [
                    "labels",
                    "array, shape = [n_samples]"
                ],
                [
                    "metric",
                    "string, or callable"
                ],
                [
                    "sample_size",
                    "int or None"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "silhouette",
                    "float"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "silhouette_samples",
            "line": 104,
            "params": [
                [
                    "X",
                    "array [n_samples_a, n_samples_a] if metric == \"precomputed\", or,              [n_samples_a, n_features] otherwise"
                ],
                [
                    "labels",
                    "array, shape = [n_samples]"
                ],
                [
                    "metric",
                    "string, or callable"
                ]
            ],
            "returns": [
                [
                    "silhouette",
                    "array, shape = [n_samples]"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "calinski_harabaz_score",
            "line": 211,
            "params": [
                [
                    "X",
                    "array-like, shape (``n_samples``, ``n_features``)"
                ],
                [
                    "labels",
                    "array-like, shape (``n_samples``,)"
                ]
            ],
            "returns": [
                [
                    "score",
                    "float"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\tests\\test_bicluster.py": [
        {
            "name": "test_consensus_score_issue2445",
            "line": 39,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\tests\\test_supervised.py": [],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\tests\\test_unsupervised.py": [],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_classification.py": [
        {
            "name": "make_prediction",
            "line": 56,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "test_confusion_matrix_sample_weight",
            "line": 656,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_common.py": [],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_pairwise.py": [],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_ranking.py": [
        {
            "name": "make_prediction",
            "line": 40,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_regression.py": [],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_score_objects.py": [],
    "../scikit-learn-master/sklearn\\mixture\\base.py": [],
    "../scikit-learn-master/sklearn\\mixture\\bayesian_mixture.py": [],
    "../scikit-learn-master/sklearn\\mixture\\dpgmm.py": [
        {
            "name": "log_normalize",
            "line": 49,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "wishart_log_det",
            "line": 63,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "wishart_logz",
            "line": 75,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        }
    ],
    "../scikit-learn-master/sklearn\\mixture\\gaussian_mixture.py": [],
    "../scikit-learn-master/sklearn\\mixture\\gmm.py": [
        {
            "name": "log_multivariate_normal_density",
            "line": 35,
            "params": [
                [
                    "X",
                    "array_like, shape (n_samples, n_features)"
                ],
                [
                    "means",
                    "array_like, shape (n_components, n_features)"
                ],
                [
                    "covars",
                    "array_like"
                ],
                [
                    "covariance_type",
                    "string"
                ]
            ],
            "returns": [
                [
                    "lpr",
                    "array_like, shape (n_samples, n_components)"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "sample_gaussian",
            "line": 79,
            "params": [
                [
                    "mean",
                    "array_like, shape (n_features,)"
                ],
                [
                    "covar",
                    "array_like"
                ],
                [
                    "covariance_type",
                    "string, optional"
                ],
                [
                    "n_samples",
                    "int, optional"
                ]
            ],
            "returns": [
                [
                    "X",
                    "array"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 1
            }
        },
        {
            "name": "distribute_covar_matrix_to_match_covariance_type",
            "line": 787,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\mixture\\tests\\test_bayesian_mixture.py": [],
    "../scikit-learn-master/sklearn\\mixture\\tests\\test_dpgmm.py": [],
    "../scikit-learn-master/sklearn\\mixture\\tests\\test_gaussian_mixture.py": [],
    "../scikit-learn-master/sklearn\\mixture\\tests\\test_gmm.py": [
        {
            "name": "test_fit_predict",
            "line": 409,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "check_positive_definite_covars",
            "line": 454,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\model_selection\\tests\\common.py": [],
    "../scikit-learn-master/sklearn\\model_selection\\tests\\test_search.py": [
        {
            "name": "compare_cv_results_multimetric_with_single",
            "line": 1006,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "compare_refit_methods_when_refit_with_acc",
            "line": 1036,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\model_selection\\tests\\test_split.py": [],
    "../scikit-learn-master/sklearn\\model_selection\\tests\\test_validation.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\approximate.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\base.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\classification.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\graph.py": [
        {
            "name": "kneighbors_graph",
            "line": 35,
            "params": [
                [
                    "X",
                    "array-like or BallTree, shape = [n_samples, n_features]"
                ],
                [
                    "n_neighbors",
                    "int"
                ],
                [
                    "mode",
                    "{'connectivity', 'distance'}, optional"
                ],
                [
                    "metric",
                    "string, default 'minkowski'"
                ],
                [
                    "p",
                    "int, default 2"
                ],
                [
                    "metric_params",
                    "dict, optional"
                ],
                [
                    "include_self",
                    "bool, default=False."
                ],
                [
                    "n_jobs",
                    "int, optional (default = 1)"
                ]
            ],
            "returns": [
                [
                    "A",
                    "sparse matrix in CSR format, shape = [n_samples, n_samples]"
                ]
            ],
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "radius_neighbors_graph",
            "line": 107,
            "params": [
                [
                    "X",
                    "array-like or BallTree, shape = [n_samples, n_features]"
                ],
                [
                    "radius",
                    "float"
                ],
                [
                    "mode",
                    "{'connectivity', 'distance'}, optional"
                ],
                [
                    "metric",
                    "string, default 'minkowski'"
                ],
                [
                    "p",
                    "int, default 2"
                ],
                [
                    "metric_params",
                    "dict, optional"
                ],
                [
                    "include_self",
                    "bool, default=False"
                ],
                [
                    "n_jobs",
                    "int, optional (default = 1)"
                ]
            ],
            "returns": [
                [
                    "A",
                    "sparse matrix in CSR format, shape = [n_samples, n_samples]"
                ]
            ],
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\neighbors\\kde.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\lof.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\nearest_centroid.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\regression.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\setup.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\unsupervised.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_approximate.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_ball_tree.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_dist_metrics.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_kde.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_kd_tree.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_lof.py": [
        {
            "name": "test_lof_precomputed",
            "line": 85,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_nearest_centroid.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_neighbors.py": [
        {
            "name": "test_precomputed",
            "line": 110,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "test_radius_neighbors_boundary_handling",
            "line": 432,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_quad_tree.py": [],
    "../scikit-learn-master/sklearn\\neural_network\\multilayer_perceptron.py": [],
    "../scikit-learn-master/sklearn\\neural_network\\rbm.py": [],
    "../scikit-learn-master/sklearn\\neural_network\\tests\\test_mlp.py": [],
    "../scikit-learn-master/sklearn\\neural_network\\tests\\test_rbm.py": [],
    "../scikit-learn-master/sklearn\\neural_network\\tests\\test_stochastic_optimizers.py": [],
    "../scikit-learn-master/sklearn\\preprocessing\\data.py": [
        {
            "name": "scale",
            "line": 79,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix}"
                ],
                [
                    "axis",
                    "int (0 by default)"
                ],
                [
                    "with_mean",
                    "boolean, True by default"
                ],
                [
                    "with_std",
                    "boolean, True by default"
                ],
                [
                    "copy",
                    "boolean, optional, default True"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "minmax_scale",
            "line": 390,
            "params": [
                [
                    "X",
                    "array-like, shape (n_samples, n_features)"
                ],
                [
                    "feature_range",
                    "tuple (min, max), default=(0, 1)"
                ],
                [
                    "axis",
                    "int (0 by default)"
                ],
                [
                    "copy",
                    "boolean, optional, default is True"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "maxabs_scale",
            "line": 884,
            "params": [
                [
                    "X",
                    "array-like, shape (n_samples, n_features)"
                ],
                [
                    "axis",
                    "int (0 by default)"
                ],
                [
                    "copy",
                    "boolean, optional, default is True"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "robust_scale",
            "line": 1114,
            "params": [
                [
                    "X",
                    "array-like"
                ],
                [
                    "axis",
                    "int (0 by default)"
                ],
                [
                    "with_centering",
                    "boolean, True by default"
                ],
                [
                    "with_scaling",
                    "boolean, True by default"
                ],
                [
                    "quantile_range",
                    "tuple (q_min, q_max), 0.0 < q_min < q_max < 100.0"
                ],
                [
                    "copy",
                    "boolean, optional, default is True"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "normalize",
            "line": 1363,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix}, shape [n_samples, n_features]"
                ],
                [
                    "norm",
                    "'l1', 'l2', or 'max', optional ('l2' by default)"
                ],
                [
                    "axis",
                    "0 or 1, optional (1 by default)"
                ],
                [
                    "copy",
                    "boolean, optional, default True"
                ],
                [
                    "return_norm",
                    "boolean, default False"
                ]
            ],
            "returns": [
                [
                    "X",
                    "{array-like, sparse matrix}, shape [n_samples, n_features]"
                ],
                [
                    "norms",
                    "array, shape [n_samples] if axis=1 else [n_features]"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "binarize",
            "line": 1546,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix}, shape [n_samples, n_features]"
                ],
                [
                    "threshold",
                    "float, optional (0.0 by default)"
                ],
                [
                    "copy",
                    "boolean, optional, default True"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "add_dummy_feature",
            "line": 1741,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix}, shape [n_samples, n_features]"
                ],
                [
                    "value",
                    "float"
                ]
            ],
            "returns": [
                [
                    "X",
                    "{array, sparse matrix}, shape [n_samples, n_features + 1]"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "quantile_transform",
            "line": 2467,
            "params": [
                [
                    "X",
                    "array-like, sparse matrix"
                ],
                [
                    "axis",
                    "int, (default=0)"
                ],
                [
                    "n_quantiles",
                    "int, optional (default=1000)"
                ],
                [
                    "output_distribution",
                    "str, optional (default='uniform')"
                ],
                [
                    "ignore_implicit_zeros",
                    "bool, optional (default=False)"
                ],
                [
                    "subsample",
                    "int, optional (default=1e5)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ],
                [
                    "copy",
                    "boolean, optional, (default=True)"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\preprocessing\\imputation.py": [],
    "../scikit-learn-master/sklearn\\preprocessing\\label.py": [
        {
            "name": "label_binarize",
            "line": 392,
            "params": [
                [
                    "y",
                    "array-like"
                ],
                [
                    "classes",
                    "array-like of shape [n_classes]"
                ],
                [
                    "neg_label",
                    "int (default: 0)"
                ],
                [
                    "pos_label",
                    "int (default: 1)"
                ],
                [
                    "sparse_output",
                    "boolean (default: False),"
                ]
            ],
            "returns": [
                [
                    "Y",
                    "numpy array or CSR matrix of shape [n_samples, n_classes]"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\preprocessing\\tests\\test_data.py": [],
    "../scikit-learn-master/sklearn\\preprocessing\\tests\\test_function_transformer.py": [],
    "../scikit-learn-master/sklearn\\preprocessing\\tests\\test_imputation.py": [],
    "../scikit-learn-master/sklearn\\preprocessing\\tests\\test_label.py": [],
    "../scikit-learn-master/sklearn\\semi_supervised\\label_propagation.py": [],
    "../scikit-learn-master/sklearn\\semi_supervised\\tests\\test_label_propagation.py": [],
    "../scikit-learn-master/sklearn\\svm\\base.py": [],
    "../scikit-learn-master/sklearn\\svm\\bounds.py": [
        {
            "name": "l1_min_c",
            "line": 13,
            "params": [
                [
                    "X",
                    "array-like or sparse matrix, shape = [n_samples, n_features]"
                ],
                [
                    "y",
                    "array, shape = [n_samples]"
                ],
                [
                    "loss",
                    "{'squared_hinge', 'log'}, default 'squared_hinge'"
                ],
                [
                    "fit_intercept",
                    "bool, default: True"
                ],
                [
                    "intercept_scaling",
                    "float, default: 1"
                ]
            ],
            "returns": [
                [
                    "l1_min_c",
                    "float"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\svm\\classes.py": [],
    "../scikit-learn-master/sklearn\\svm\\setup.py": [],
    "../scikit-learn-master/sklearn\\svm\\tests\\test_bounds.py": [],
    "../scikit-learn-master/sklearn\\svm\\tests\\test_sparse.py": [
        {
            "name": "test_svc",
            "line": 72,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sparse_oneclasssvm",
            "line": 264,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\svm\\tests\\test_svm.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_base.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_calibration.py": [
        {
            "name": "test_calibration",
            "line": 28,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_calibration_multiclass",
            "line": 128,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_calibration_prefit",
            "line": 183,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sigmoid_calibration",
            "line": 224,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_calibration_curve",
            "line": 242,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_calibration_nan_imputer",
            "line": 262,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\tests\\test_check_build.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_common.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_config.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_cross_validation.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_discriminant_analysis.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_docstring_parameters.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_dummy.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_grid_search.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_init.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_isotonic.py": [
        {
            "name": "test_isotonic_regression_ties_secondary_",
            "line": 139,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_isotonic_regression_with_ties_in_differently_sized_groups",
            "line": 169,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\tests\\test_kernel_approximation.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_kernel_ridge.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_learning_curve.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_metaestimators.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_multiclass.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_multioutput.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_naive_bayes.py": [
        {
            "name": "test_gnb_sample_weight",
            "line": 70,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_gnb_neg_priors",
            "line": 102,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_gnb_priors",
            "line": 108,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_gnb_wrong_nb_priors",
            "line": 117,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_gnb_prior_greater_one",
            "line": 124,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_gnb_prior_large_bias",
            "line": 130,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_check_update_with_no_data",
            "line": 137,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_gnb_pfit_wrong_nb_features",
            "line": 150,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\tests\\test_pipeline.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_random_projection.py": [],
    "../scikit-learn-master/sklearn\\tree\\export.py": [
        {
            "name": "export_graphviz",
            "line": 78,
            "params": [
                [
                    "decision_tree",
                    "decision tree regressor or classifier"
                ],
                [
                    "out_file",
                    "file object or string, optional (default='tree.dot')"
                ],
                [
                    "max_depth",
                    "int, optional (default=None)"
                ],
                [
                    "feature_names",
                    "list of strings, optional (default=None)"
                ],
                [
                    "class_names",
                    "list of strings, bool or None, optional (default=None)"
                ],
                [
                    "label",
                    "{'all', 'root', 'none'}, optional (default='all')"
                ],
                [
                    "filled",
                    "bool, optional (default=False)"
                ],
                [
                    "leaves_parallel",
                    "bool, optional (default=False)"
                ],
                [
                    "impurity",
                    "bool, optional (default=True)"
                ],
                [
                    "node_ids",
                    "bool, optional (default=False)"
                ],
                [
                    "proportion",
                    "bool, optional (default=False)"
                ],
                [
                    "rotate",
                    "bool, optional (default=False)"
                ],
                [
                    "rounded",
                    "bool, optional (default=False)"
                ],
                [
                    "special_characters",
                    "bool, optional (default=False)"
                ],
                [
                    "precision",
                    "int, optional (default=3)"
                ]
            ],
            "returns": [
                [
                    "dot_data",
                    "string"
                ]
            ],
            "count": {
                "total_params": 15,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\tree\\setup.py": [],
    "../scikit-learn-master/sklearn\\tree\\tree.py": [],
    "../scikit-learn-master/sklearn\\tree\\tests\\test_export.py": [],
    "../scikit-learn-master/sklearn\\tree\\tests\\test_tree.py": [
        {
            "name": "test_min_samples_split",
            "line": 569,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "check_min_weight_fraction_leaf",
            "line": 637,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "check_min_weight_fraction_leaf_with_min_samples_leaf",
            "line": 711,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "check_class_weights",
            "line": 1134,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\arpack.py": [],
    "../scikit-learn-master/sklearn\\utils\\bench.py": [
        {
            "name": "total_seconds",
            "line": 6,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\class_weight.py": [
        {
            "name": "compute_class_weight",
            "line": 9,
            "params": [
                [
                    "class_weight",
                    "dict, 'balanced' or None"
                ],
                [
                    "classes",
                    "ndarray"
                ],
                [
                    "y",
                    "array-like, shape (n_samples,)"
                ]
            ],
            "returns": [
                [
                    "class_weight_vect",
                    "ndarray, shape (n_classes,)"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "compute_sample_weight",
            "line": 73,
            "params": [
                [
                    "class_weight",
                    "dict, list of dicts, \"balanced\", or None, optional"
                ],
                [
                    "y",
                    "array-like, shape = [n_samples] or [n_samples, n_outputs]"
                ],
                [
                    "indices",
                    "array-like, shape (n_subsample,), or None"
                ]
            ],
            "returns": [
                [
                    "sample_weight_vect",
                    "ndarray, shape (n_samples,)"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\deprecation.py": [],
    "../scikit-learn-master/sklearn\\utils\\estimator_checks.py": [
        {
            "name": "check_estimator",
            "line": 234,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "check_estimators_pickle",
            "line": 962,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "check_clusterer_compute_labels_predict",
            "line": 1057,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "check_estimators_fit_returns_self",
            "line": 1192,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "check_estimators_unfitted",
            "line": 1207,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "check_class_weight_balanced_linear_classifier",
            "line": 1456,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "check_no_fit_attributes_set_in_init",
            "line": 1524,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\extmath.py": [
        {
            "name": "norm",
            "line": 32,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "squared_norm",
            "line": 41,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "row_norms",
            "line": 55,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "fast_logdet",
            "line": 75,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "density",
            "line": 103,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "safe_sparse_dot",
            "line": 115,
            "params": [
                [
                    "a",
                    "array or sparse matrix"
                ],
                [
                    "b",
                    "array or sparse matrix"
                ],
                [
                    "dense_output",
                    "boolean, default False"
                ]
            ],
            "returns": [
                [
                    "dot_product",
                    "array or sparse matrix"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "randomized_range_finder",
            "line": 145,
            "params": [
                [
                    "A",
                    "2D array"
                ],
                [
                    "size",
                    "integer"
                ],
                [
                    "n_iter",
                    "integer"
                ],
                [
                    "power_iteration_normalizer",
                    "'auto' (default), 'QR', 'LU', 'none'"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "Q",
                    "2D array"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "randomized_svd",
            "line": 230,
            "params": [
                [
                    "M",
                    "ndarray or sparse matrix"
                ],
                [
                    "n_components",
                    "int"
                ],
                [
                    "n_oversamples",
                    "int (default is 10)"
                ],
                [
                    "n_iter",
                    "int or 'auto' (default is 'auto')"
                ],
                [
                    "power_iteration_normalizer",
                    "'auto' (default), 'QR', 'LU', 'none'"
                ],
                [
                    "transpose",
                    "True, False or 'auto' (default)"
                ],
                [
                    "flip_sign",
                    "boolean, (True by default)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "logsumexp",
            "line": 354,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "weighted_mode",
            "line": 371,
            "params": [
                [
                    "a",
                    "array_like"
                ],
                [
                    "w",
                    "array_like"
                ],
                [
                    "axis",
                    "int, optional"
                ]
            ],
            "returns": [
                [
                    "vals",
                    "ndarray"
                ],
                [
                    "score",
                    "ndarray"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "cartesian",
            "line": 450,
            "params": [
                [
                    "arrays",
                    "list of array-like"
                ],
                [
                    "out",
                    "ndarray"
                ]
            ],
            "returns": [
                [
                    "out",
                    "ndarray"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "svd_flip",
            "line": 499,
            "params": [
                [
                    "u",
                    "ndarray"
                ],
                [
                    "v",
                    "ndarray"
                ],
                [
                    "u_based_decision",
                    "boolean, (default=True)"
                ]
            ],
            "returns": [
                [
                    "u_adjusted",
                    "arrays with the same dimensions as the input."
                ],
                [
                    "v_adjusted",
                    "arrays with the same dimensions as the input."
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "log_logistic",
            "line": 538,
            "params": [
                [
                    "X",
                    "array-like, shape (M, N) or (M, )"
                ],
                [
                    "out",
                    "array-like, shape: (M, N) or (M, ), optional:"
                ]
            ],
            "returns": [
                [
                    "out",
                    "array, shape (M, N) or (M, )"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "softmax",
            "line": 583,
            "params": [
                [
                    "X",
                    "array-like, shape (M, N)"
                ],
                [
                    "copy",
                    "bool, optional"
                ]
            ],
            "returns": [
                [
                    "out",
                    "array, shape (M, N)"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "safe_min",
            "line": 617,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "make_nonnegative",
            "line": 632,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "stable_cumsum",
            "line": 740,
            "params": [
                [
                    "arr",
                    "array-like"
                ],
                [
                    "axis",
                    "int, optional"
                ],
                [
                    "rtol",
                    "float"
                ],
                [
                    "atol",
                    "float"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\fixes.py": [
        {
            "name": "parallel_helper",
            "line": 153,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\graph.py": [
        {
            "name": "single_source_shortest_path_length",
            "line": 23,
            "params": [
                [
                    "graph",
                    "sparse matrix or 2D array (preferably LIL matrix)"
                ],
                [
                    "source",
                    "node label"
                ],
                [
                    "cutoff",
                    "integer, optional"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\linear_assignment_.py": [
        {
            "name": "linear_assignment",
            "line": 19,
            "params": [
                [
                    "X",
                    "array"
                ]
            ],
            "returns": [
                [
                    "indices",
                    "array,"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\metaestimators.py": [
        {
            "name": "if_delegate_has_method",
            "line": 121,
            "params": [
                [
                    "delegate",
                    "string, list of strings or tuple of strings"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\mocking.py": [],
    "../scikit-learn-master/sklearn\\utils\\multiclass.py": [
        {
            "name": "unique_labels",
            "line": 43,
            "params": [],
            "returns": [
                [
                    "out",
                    "numpy array of shape [n_unique_labels]"
                ]
            ],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "is_multilabel",
            "line": 112,
            "params": [
                [
                    "y",
                    "numpy array of shape [n_samples]"
                ]
            ],
            "returns": [
                [
                    "out",
                    "bool,"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "check_classification_targets",
            "line": 158,
            "params": [
                [
                    "y",
                    "array-like"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "type_of_target",
            "line": 175,
            "params": [
                [
                    "y",
                    "array-like"
                ]
            ],
            "returns": [
                [
                    "target_type",
                    "string"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "class_distribution",
            "line": 325,
            "params": [
                [
                    "y",
                    "array like or sparse matrix of size (n_samples, n_outputs)"
                ],
                [
                    "sample_weight",
                    "array-like of shape = (n_samples,), optional"
                ]
            ],
            "returns": [
                [
                    "classes",
                    "list of size n_outputs of arrays of size (n_classes,)"
                ],
                [
                    "n_classes",
                    "list of integers of size n_outputs"
                ],
                [
                    "class_prior",
                    "list of size n_outputs of arrays of size (n_classes,)"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\optimize.py": [
        {
            "name": "newton_cg",
            "line": 115,
            "params": [
                [
                    "grad_hess",
                    "callable"
                ],
                [
                    "func",
                    "callable"
                ],
                [
                    "grad",
                    "callable"
                ],
                [
                    "x0",
                    "array of float"
                ],
                [
                    "args",
                    "tuple, optional"
                ],
                [
                    "tol",
                    "float"
                ],
                [
                    "maxiter",
                    "int"
                ],
                [
                    "maxinner",
                    "int"
                ],
                [
                    "line_search",
                    "boolean"
                ],
                [
                    "warn",
                    "boolean"
                ]
            ],
            "returns": [
                [
                    "xk",
                    "ndarray of float"
                ]
            ],
            "count": {
                "total_params": 10,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\random.py": [
        {
            "name": "choice",
            "line": 21,
            "params": [
                [
                    "a",
                    "1-D array-like or int"
                ],
                [
                    "size",
                    "int or tuple of ints, optional"
                ],
                [
                    "replace",
                    "boolean, optional"
                ],
                [
                    "p",
                    "1-D array-like, optional"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "samples",
                    "1-D ndarray, shape (size,)"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "random_choice_csc",
            "line": 117,
            "params": [
                [
                    "n_samples",
                    "int,"
                ],
                [
                    "classes",
                    "list of size n_outputs of arrays of size (n_classes,)"
                ],
                [
                    "class_probability",
                    "list of size n_outputs of arrays of size (n_classes,)"
                ],
                [
                    "random_state",
                    "int, RandomState instance or None, optional (default=None)"
                ]
            ],
            "returns": [
                [
                    "random_matrix",
                    "sparse csc matrix of size (n_samples, n_outputs)"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\setup.py": [],
    "../scikit-learn-master/sklearn\\utils\\sparsefuncs.py": [
        {
            "name": "inplace_csr_column_scale",
            "line": 29,
            "params": [
                [
                    "X",
                    "CSR matrix with shape (n_samples, n_features)"
                ],
                [
                    "scale",
                    "float array with shape (n_features,)"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_csr_row_scale",
            "line": 47,
            "params": [
                [
                    "X",
                    "CSR sparse matrix, shape (n_samples, n_features)"
                ],
                [
                    "scale",
                    "float array with shape (n_samples,)"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "mean_variance_axis",
            "line": 65,
            "params": [
                [
                    "X",
                    "CSR or CSC sparse matrix, shape (n_samples, n_features)"
                ],
                [
                    "axis",
                    "int (either 0 or 1)"
                ]
            ],
            "returns": [
                [
                    "means",
                    "float array with shape (n_features,)"
                ],
                [
                    "variances",
                    "float array with shape (n_features,)"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "incr_mean_variance_axis",
            "line": 102,
            "params": [
                [
                    "X",
                    "CSR or CSC sparse matrix, shape (n_samples, n_features)"
                ],
                [
                    "axis",
                    "int (either 0 or 1)"
                ],
                [
                    "last_mean",
                    "float array with shape (n_features,)"
                ],
                [
                    "last_var",
                    "float array with shape (n_features,)"
                ],
                [
                    "last_n",
                    "int"
                ]
            ],
            "returns": [
                [
                    "means",
                    "float array with shape (n_features,)"
                ],
                [
                    "variances",
                    "float array with shape (n_features,)"
                ],
                [
                    "n",
                    "int"
                ]
            ],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_column_scale",
            "line": 161,
            "params": [
                [
                    "X",
                    "CSC or CSR matrix with shape (n_samples, n_features)"
                ],
                [
                    "scale",
                    "float array with shape (n_features,)"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_row_scale",
            "line": 183,
            "params": [
                [
                    "X",
                    "CSR or CSC sparse matrix, shape (n_samples, n_features)"
                ],
                [
                    "scale",
                    "float array with shape (n_features,)"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_swap_row_csc",
            "line": 205,
            "params": [
                [
                    "X",
                    "scipy.sparse.csc_matrix, shape=(n_samples, n_features)"
                ],
                [
                    "m",
                    "int"
                ],
                [
                    "n",
                    "int"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_swap_row_csr",
            "line": 234,
            "params": [
                [
                    "X",
                    "scipy.sparse.csr_matrix, shape=(n_samples, n_features)"
                ],
                [
                    "m",
                    "int"
                ],
                [
                    "n",
                    "int"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_swap_row",
            "line": 289,
            "params": [
                [
                    "X",
                    "CSR or CSC sparse matrix, shape=(n_samples, n_features)"
                ],
                [
                    "m",
                    "int"
                ],
                [
                    "n",
                    "int"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_swap_column",
            "line": 312,
            "params": [
                [
                    "X",
                    "CSR or CSC sparse matrix, shape=(n_samples, n_features)"
                ],
                [
                    "m",
                    "int"
                ],
                [
                    "n",
                    "int"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "min_max_axis",
            "line": 339,
            "params": [
                [
                    "X",
                    "CSR or CSC sparse matrix, shape (n_samples, n_features)"
                ],
                [
                    "axis",
                    "int (either 0 or 1)"
                ]
            ],
            "returns": [
                [
                    "mins",
                    "float array with shape (n_features,)"
                ],
                [
                    "maxs",
                    "float array with shape (n_features,)"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "count_nonzero",
            "line": 365,
            "params": [
                [
                    "X",
                    "CSR sparse matrix, shape = (n_samples, n_labels)"
                ],
                [
                    "axis",
                    "None, 0 or 1"
                ],
                [
                    "sample_weight",
                    "array, shape = (n_samples,), optional"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "csc_median_axis_0",
            "line": 441,
            "params": [
                [
                    "X",
                    "CSC sparse matrix, shape (n_samples, n_features)"
                ]
            ],
            "returns": [
                [
                    "median",
                    "ndarray, shape (n_features,)"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\stats.py": [],
    "../scikit-learn-master/sklearn\\utils\\testing.py": [
        {
            "name": "assert_warns",
            "line": 116,
            "params": [
                [
                    "warning_class",
                    "the warning class"
                ],
                [
                    "func",
                    "callable"
                ]
            ],
            "returns": [
                [
                    "result",
                    "the return value of"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "assert_warns_message",
            "line": 161,
            "params": [
                [
                    "warning_class",
                    "the warning class"
                ],
                [
                    "message",
                    "str | callable"
                ],
                [
                    "func",
                    "callable"
                ]
            ],
            "returns": [
                [
                    "result",
                    "the return value of"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "ignore_warnings",
            "line": 251,
            "params": [
                [
                    "category",
                    "warning class, defaults to Warning."
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 1
            }
        },
        {
            "name": "assert_raise_message",
            "line": 361,
            "params": [
                [
                    "exceptions",
                    "exception or tuple of exception"
                ],
                [
                    "function",
                    "callable"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 3,
                "missed_params": 1
            }
        },
        {
            "name": "assert_allclose_dense_sparse",
            "line": 395,
            "params": [
                [
                    "x",
                    "array-like or sparse matrix"
                ],
                [
                    "y",
                    "array-like or sparse matrix"
                ],
                [
                    "rtol",
                    "float, optional"
                ],
                [
                    "atol",
                    "float, optional"
                ],
                [
                    "err_msg",
                    "string, default=''"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "fake_mldata",
            "line": 436,
            "params": [
                [
                    "columns_dict",
                    "dict, keys=str, values=ndarray"
                ],
                [
                    "dataname",
                    "string"
                ],
                [
                    "matfile",
                    "string or file object"
                ],
                [
                    "ordering",
                    "list, default None"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "all_estimators",
            "line": 554,
            "params": [
                [
                    "include_meta_estimators",
                    "boolean, default=False"
                ],
                [
                    "include_other",
                    "boolean, default=False"
                ],
                [
                    "type_filter",
                    "string, list of string,  or None, default=None"
                ],
                [
                    "include_dont_test",
                    "boolean, default=False"
                ]
            ],
            "returns": [
                [
                    "estimators",
                    "list of tuples"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "set_random_state",
            "line": 653,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "if_matplotlib",
            "line": 660,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "skip_if_32bit",
            "line": 677,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "if_safe_multiprocessing_with_blas",
            "line": 689,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "clean_warning_registry",
            "line": 717,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "check_skip_travis",
            "line": 733,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "check_docstring_parameters",
            "line": 842,
            "params": [
                [
                    "func",
                    "callable"
                ],
                [
                    "doc",
                    "str, optional (default: None)"
                ],
                [
                    "ignore",
                    "None | list"
                ],
                [
                    "class_name",
                    "string, optional (default: None)"
                ]
            ],
            "returns": [
                [
                    "incorrect",
                    "list"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\validation.py": [
        {
            "name": "assert_all_finite",
            "line": 48,
            "params": [
                [
                    "X",
                    "array or sparse matrix"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "as_float_array",
            "line": 58,
            "params": [
                [
                    "X",
                    "{array-like, sparse matrix}"
                ],
                [
                    "copy",
                    "bool, optional"
                ],
                [
                    "force_all_finite",
                    "boolean (default=True)"
                ]
            ],
            "returns": [
                [
                    "XT",
                    "{array, sparse matrix}"
                ]
            ],
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "check_memory",
            "line": 160,
            "params": [
                [
                    "memory",
                    "None, str or object with the joblib.Memory interface"
                ]
            ],
            "returns": [
                [
                    "memory",
                    "object with the joblib.Memory interface"
                ]
            ],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "check_consistent_length",
            "line": 190,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "indexable",
            "line": 208,
            "params": [],
            "returns": [],
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "check_array",
            "line": 321,
            "params": [
                [
                    "array",
                    "object"
                ],
                [
                    "accept_sparse",
                    "string, boolean or list/tuple of strings (default=False)"
                ],
                [
                    "dtype",
                    "string, type, list of types or None (default=\"numeric\")"
                ],
                [
                    "order",
                    "'F', 'C' or None (default=None)"
                ],
                [
                    "copy",
                    "boolean (default=False)"
                ],
                [
                    "force_all_finite",
                    "boolean (default=True)"
                ],
                [
                    "ensure_2d",
                    "boolean (default=True)"
                ],
                [
                    "allow_nd",
                    "boolean (default=False)"
                ],
                [
                    "ensure_min_samples",
                    "int (default=1)"
                ],
                [
                    "ensure_min_features",
                    "int (default=1)"
                ],
                [
                    "warn_on_dtype",
                    "boolean (default=False)"
                ],
                [
                    "estimator",
                    "str or estimator instance (default=None)"
                ]
            ],
            "returns": [
                [
                    "X_converted",
                    "object"
                ]
            ],
            "count": {
                "total_params": 12,
                "missed_params": 0
            }
        },
        {
            "name": "check_X_y",
            "line": 509,
            "params": [
                [
                    "X",
                    "nd-array, list or sparse matrix"
                ],
                [
                    "y",
                    "nd-array, list or sparse matrix"
                ],
                [
                    "accept_sparse",
                    "string, boolean or list of string (default=False)"
                ],
                [
                    "dtype",
                    "string, type, list of types or None (default=\"numeric\")"
                ],
                [
                    "order",
                    "'F', 'C' or None (default=None)"
                ],
                [
                    "copy",
                    "boolean (default=False)"
                ],
                [
                    "force_all_finite",
                    "boolean (default=True)"
                ],
                [
                    "ensure_2d",
                    "boolean (default=True)"
                ],
                [
                    "allow_nd",
                    "boolean (default=False)"
                ],
                [
                    "multi_output",
                    "boolean (default=False)"
                ],
                [
                    "ensure_min_samples",
                    "int (default=1)"
                ],
                [
                    "ensure_min_features",
                    "int (default=1)"
                ],
                [
                    "y_numeric",
                    "boolean (default=False)"
                ],
                [
                    "warn_on_dtype",
                    "boolean (default=False)"
                ],
                [
                    "estimator",
                    "str or estimator instance (default=None)"
                ]
            ],
            "returns": [
                [
                    "X_converted",
                    "object"
                ],
                [
                    "y_converted",
                    "object"
                ]
            ],
            "count": {
                "total_params": 15,
                "missed_params": 0
            }
        },
        {
            "name": "column_or_1d",
            "line": 614,
            "params": [
                [
                    "y",
                    "array-like"
                ],
                [
                    "warn",
                    "boolean, default False"
                ]
            ],
            "returns": [
                [
                    "y",
                    "array"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "check_random_state",
            "line": 643,
            "params": [
                [
                    "seed",
                    "None | int | instance of RandomState"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "has_fit_parameter",
            "line": 664,
            "params": [
                [
                    "estimator",
                    "object"
                ],
                [
                    "parameter",
                    "str"
                ]
            ],
            "returns": [
                [
                    "is_parameter",
                    "bool"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "check_symmetric",
            "line": 692,
            "params": [
                [
                    "array",
                    "nd-array or sparse matrix"
                ],
                [
                    "tol",
                    "float"
                ],
                [
                    "raise_warning",
                    "boolean (default=True)"
                ],
                [
                    "raise_exception",
                    "boolean (default=False)"
                ]
            ],
            "returns": [
                [
                    "array_sym",
                    "ndarray or sparse matrix"
                ]
            ],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "check_is_fitted",
            "line": 746,
            "params": [
                [
                    "estimator",
                    "estimator instance."
                ],
                [
                    "attributes",
                    "attribute name(s) given as string or a list/tuple of strings"
                ],
                [
                    "msg",
                    "string"
                ],
                [
                    "all_or_any",
                    "callable, {all, any}, default all"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "check_non_negative",
            "line": 797,
            "params": [
                [
                    "X",
                    "array-like or sparse matrix"
                ],
                [
                    "whom",
                    "string"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\sparsetools\\setup.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_bench.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_class_weight.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_deprecation.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_estimator_checks.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_extmath.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_fast_dict.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_fixes.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_graph.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_linear_assignment.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_metaestimators.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_multiclass.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_murmurhash.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_optimize.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_random.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_seq_dataset.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_shortest_path.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_sparsefuncs.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_stats.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_testing.py": [
        {
            "name": "f_ok",
            "line": 254,
            "params": [
                [
                    "a",
                    "int"
                ],
                [
                    "b",
                    "float"
                ]
            ],
            "returns": [
                [
                    "c",
                    "list"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "f_bad_sections",
            "line": 273,
            "params": [
                [
                    "a",
                    "int"
                ],
                [
                    "b",
                    "float"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "f_bad_order",
            "line": 292,
            "params": [
                [
                    "b",
                    "float"
                ],
                [
                    "a",
                    "int"
                ]
            ],
            "returns": [
                [
                    "c",
                    "list"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "f_missing",
            "line": 311,
            "params": [
                [
                    "a",
                    "int"
                ]
            ],
            "returns": [
                [
                    "c",
                    "list"
                ]
            ],
            "count": {
                "total_params": 2,
                "missed_params": 1
            }
        },
        {
            "name": "f_check_param_definition",
            "line": 328,
            "params": [
                [
                    "a",
                    "int"
                ],
                [
                    "b",
                    ""
                ],
                [
                    "c",
                    ""
                ],
                [
                    "d",
                    "int"
                ]
            ],
            "returns": [],
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_utils.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_validation.py": [],
    "../scikit-learn-master/sklearn\\__check_build\\setup.py": []
}