{
    "../scikit-learn-master/sklearn\\base.py": [
        {
            "name": "_first_and_last_element",
            "line": 17,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "clone",
            "line": 29,
            "params": {
                "estimator": {
                    "type": "estimator object, or list, tuple or set of objects",
                    "line": 29
                },
                "safe": {
                    "type": "boolean, optional",
                    "line": 29
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "_pprint",
            "line": 124,
            "params": {
                "params": {
                    "type": "dict",
                    "line": 124
                },
                "offset": {
                    "type": "int",
                    "line": 124
                },
                "printer": {
                    "type": "callable",
                    "line": 124
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "is_classifier",
            "line": 535,
            "params": {
                "estimator": {
                    "type": "object",
                    "line": 535
                }
            },
            "returns": {
                "estimator": "object"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "is_regressor",
            "line": 551,
            "params": {
                "estimator": {
                    "type": "object",
                    "line": 551
                }
            },
            "returns": {
                "estimator": "object"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\calibration.py": [
        {
            "name": "_sigmoid_calibration",
            "line": 393,
            "params": {
                "df": {
                    "type": "ndarray, shape (n_samples,)",
                    "line": 393
                },
                "y": {
                    "type": "ndarray, shape (n_samples,)",
                    "line": 393
                },
                "sample_weight": {
                    "type": "array-like, shape = [n_samples] or None",
                    "line": 393
                }
            },
            "returns": {
                "a": "float",
                "b": "float"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "calibration_curve",
            "line": 513,
            "params": {
                "y_true": {
                    "type": "array, shape (n_samples,)",
                    "line": 513
                },
                "y_prob": {
                    "type": "array, shape (n_samples,)",
                    "line": 513
                },
                "normalize": {
                    "type": "bool, optional, default=False",
                    "line": 513
                },
                "n_bins": {
                    "type": "int",
                    "line": 513
                }
            },
            "returns": {
                "prob_true": "array, shape (n_bins,)",
                "prob_pred": "array, shape (n_bins,)"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cross_validation.py": [
        {
            "name": "_approximate_mode",
            "line": 946,
            "params": {
                "class_counts": {
                    "type": "ndarray of int",
                    "line": 946
                },
                "n_draws": {
                    "type": "int",
                    "line": 946
                },
                "rng": {
                    "type": "random state",
                    "line": 946
                }
            },
            "returns": {
                "sampled_classes": "ndarray of int"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "_index_param_value",
            "line": 1284,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "cross_val_predict",
            "line": 1294,
            "params": {
                "estimator": {
                    "type": "estimator object implementing 'fit' and 'predict'",
                    "line": 1294
                },
                "X": {
                    "type": "array-like",
                    "line": 1294
                },
                "y": {
                    "type": "array-like, optional, default",
                    "line": 1294
                },
                "cv": {
                    "type": "int, cross-validation generator or an iterable, optional",
                    "line": 1294
                },
                "n_jobs": {
                    "type": "integer, optional",
                    "line": 1294
                },
                "verbose": {
                    "type": "integer, optional",
                    "line": 1295
                },
                "fit_params": {
                    "type": "dict, optional",
                    "line": 1295
                },
                "pre_dispatch": {
                    "type": "int, or string, optional",
                    "line": 1295
                }
            },
            "returns": {
                "preds": "ndarray"
            },
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "_fit_and_predict",
            "line": 1401,
            "params": {
                "estimator": {
                    "type": "estimator object implementing 'fit' and 'predict'",
                    "line": 1401
                },
                "X": {
                    "type": "array-like of shape at least 2D",
                    "line": 1401
                },
                "y": {
                    "type": "array-like, optional, default",
                    "line": 1401
                },
                "train": {
                    "type": "array-like, shape (n_train_samples,)",
                    "line": 1401
                },
                "test": {
                    "type": "array-like, shape (n_test_samples,)",
                    "line": 1401
                },
                "verbose": {
                    "type": "integer",
                    "line": 1401
                },
                "fit_params": {
                    "type": "dict or None",
                    "line": 1401
                }
            },
            "returns": {
                "preds": "sequence",
                "test": "array-like"
            },
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "_check_is_partition",
            "line": 1454,
            "params": {
                "locs": {
                    "type": "ndarray",
                    "line": 1454
                },
                "n": {
                    "type": "int",
                    "line": 1454
                }
            },
            "returns": {
                "is_partition": "bool"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "cross_val_score",
            "line": 1478,
            "params": {
                "estimator": {
                    "type": "estimator object implementing 'fit'",
                    "line": 1478
                },
                "X": {
                    "type": "array-like",
                    "line": 1478
                },
                "y": {
                    "type": "array-like, optional, default",
                    "line": 1478
                },
                "scoring": {
                    "type": "string, callable or None, optional, default",
                    "line": 1478
                },
                "cv": {
                    "type": "int, cross-validation generator or an iterable, optional",
                    "line": 1478
                },
                "n_jobs": {
                    "type": "integer, optional",
                    "line": 1478
                },
                "verbose": {
                    "type": "integer, optional",
                    "line": 1479
                },
                "fit_params": {
                    "type": "dict, optional",
                    "line": 1479
                },
                "pre_dispatch": {
                    "type": "int, or string, optional",
                    "line": 1479
                }
            },
            "returns": {
                "scores": "array of float, shape=(len(list(cv)),)"
            },
            "count": {
                "total_params": 9,
                "missed_params": 0
            }
        },
        {
            "name": "_fit_and_score",
            "line": 1585,
            "params": {
                "estimator": {
                    "type": "estimator object implementing 'fit'",
                    "line": 1585
                },
                "X": {
                    "type": "array-like of shape at least 2D",
                    "line": 1585
                },
                "y": {
                    "type": "array-like, optional, default",
                    "line": 1585
                },
                "scorer": {
                    "type": "callable",
                    "line": 1585
                },
                "train": {
                    "type": "array-like, shape (n_train_samples,)",
                    "line": 1585
                },
                "test": {
                    "type": "array-like, shape (n_test_samples,)",
                    "line": 1585
                },
                "verbose": {
                    "type": "integer",
                    "line": 1585
                },
                "parameters": {
                    "type": "dict or None",
                    "line": 1586
                },
                "fit_params": {
                    "type": "dict or None",
                    "line": 1586
                },
                "return_train_score": {
                    "type": "boolean, optional, default",
                    "line": 1586
                },
                "return_parameters": {
                    "type": "boolean, optional, default",
                    "line": 1587
                },
                "error_score": {
                    "type": "'raise' (default) or numeric",
                    "line": 1587
                }
            },
            "returns": {
                "train_score": "float, optional",
                "test_score": "float",
                "n_test_samples": "int",
                "scoring_time": "float",
                "parameters": "dict or None, optional"
            },
            "count": {
                "total_params": 12,
                "missed_params": 0
            }
        },
        {
            "name": "_safe_split",
            "line": 1713,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 5,
                "missed_params": 5
            }
        },
        {
            "name": "_score",
            "line": 1746,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "_permutation_test_score",
            "line": 1765,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 5,
                "missed_params": 5
            }
        },
        {
            "name": "_shuffle",
            "line": 1776,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "check_cv",
            "line": 1788,
            "params": {
                "cv": {
                    "type": "int, cross-validation generator or an iterable, optional",
                    "line": 1788
                },
                "X": {
                    "type": "array-like",
                    "line": 1788
                },
                "y": {
                    "type": "array-like",
                    "line": 1788
                },
                "classifier": {
                    "type": "boolean optional",
                    "line": 1788
                }
            },
            "returns": {
                "checked_cv": "a cross-validation generator instance."
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "permutation_test_score",
            "line": 1847,
            "params": {
                "estimator": {
                    "type": "estimator object implementing 'fit'",
                    "line": 1847
                },
                "X": {
                    "type": "array-like of shape at least 2D",
                    "line": 1847
                },
                "y": {
                    "type": "array-like",
                    "line": 1847
                },
                "cv": {
                    "type": "int, cross-validation generator or an iterable, optional",
                    "line": 1847
                },
                "n_permutations": {
                    "type": "integer, optional",
                    "line": 1848
                },
                "n_jobs": {
                    "type": "integer, optional",
                    "line": 1848
                },
                "labels": {
                    "type": "array-like of shape [n_samples] (optional)",
                    "line": 1848
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=0)",
                    "line": 1849
                },
                "verbose": {
                    "type": "integer, optional",
                    "line": 1849
                },
                "scoring": {
                    "type": "string, callable or None, optional, default",
                    "line": 1849
                }
            },
            "returns": {
                "score": "float",
                "permutation_scores": "array, shape (n_permutations,)",
                "pvalue": "float",
                "as": ""
            },
            "count": {
                "total_params": 10,
                "missed_params": 0
            }
        },
        {
            "name": "train_test_split",
            "line": 1959,
            "params": {},
            "returns": {
                "splitting": "list, length = 2 * len(arrays),",
                "versionadded": ""
            },
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\discriminant_analysis.py": [
        {
            "name": "_cov",
            "line": 33,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 33
                },
                "shrinkage": {
                    "type": "string or float, optional",
                    "line": 33
                }
            },
            "returns": {
                "s": "array, shape (n_features, n_features)"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "_class_means",
            "line": 73,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 73
                },
                "y": {
                    "type": "array-like, shape (n_samples,) or (n_samples, n_targets)",
                    "line": 73
                }
            },
            "returns": {
                "means": "array-like, shape (n_features,)"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "_class_cov",
            "line": 97,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 97
                },
                "y": {
                    "type": "array-like, shape (n_samples,) or (n_samples, n_targets)",
                    "line": 97
                },
                "priors": {
                    "type": "array-like, shape (n_classes,)",
                    "line": 97
                },
                "shrinkage": {
                    "type": "string or float, optional",
                    "line": 97
                }
            },
            "returns": {
                "cov": "array-like, shape (n_features, n_features)"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\dummy.py": [],
    "../scikit-learn-master/sklearn\\exceptions.py": [],
    "../scikit-learn-master/sklearn\\grid_search.py": [
        {
            "name": "fit_grid_point",
            "line": 275,
            "params": {
                "X": {
                    "type": "array-like, sparse matrix or list",
                    "line": 275
                },
                "y": {
                    "type": "array-like or None",
                    "line": 275
                },
                "estimator": {
                    "type": "estimator object",
                    "line": 275
                },
                "parameters": {
                    "type": "dict",
                    "line": 275
                },
                "train": {
                    "type": "ndarray, dtype int or bool",
                    "line": 275
                },
                "test": {
                    "type": "ndarray, dtype int or bool",
                    "line": 275
                },
                "scorer": {
                    "type": "callable or None.",
                    "line": 275
                },
                "verbose": {
                    "type": "int",
                    "line": 276
                },
                "error_score": {
                    "type": "'raise' (default) or numeric",
                    "line": 276
                }
            },
            "returns": {
                "score": "float",
                "parameters": "dict",
                "n_samples_test": "int"
            },
            "count": {
                "total_params": 9,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\isotonic.py": [
        {
            "name": "check_increasing",
            "line": 21,
            "params": {
                "x": {
                    "type": "array-like, shape=(n_samples,)",
                    "line": 21
                },
                "y": {
                    "type": "array-like, shape=(n_samples,)",
                    "line": 21
                }
            },
            "returns": {
                "increasing_bool": "boolean"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "isotonic_regression",
            "line": 78,
            "params": {
                "y": {
                    "type": "iterable of floating-point values",
                    "line": 78
                },
                "sample_weight": {
                    "type": "iterable of floating-point values, optional, default",
                    "line": 78
                },
                "y_min": {
                    "type": "optional, default",
                    "line": 78
                },
                "y_max": {
                    "type": "optional, default",
                    "line": 78
                },
                "increasing": {
                    "type": "boolean, optional, default",
                    "line": 79
                }
            },
            "returns": {
                "y_": "list of floating-point values"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\kernel_approximation.py": [],
    "../scikit-learn-master/sklearn\\kernel_ridge.py": [],
    "../scikit-learn-master/sklearn\\learning_curve.py": [
        {
            "name": "learning_curve",
            "line": 28,
            "params": {
                "estimator": {
                    "type": "object type that implements the \"fit\" and \"predict\" methods",
                    "line": 28
                },
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 28
                },
                "y": {
                    "type": "array-like, shape (n_samples) or (n_samples, n_features), optional",
                    "line": 28
                },
                "train_sizes": {
                    "type": "array-like, shape (n_ticks,), dtype float or int",
                    "line": 28
                },
                "cv": {
                    "type": "int, cross-validation generator or an iterable, optional",
                    "line": 29
                },
                "scoring": {
                    "type": "string, callable or None, optional, default",
                    "line": 29
                },
                "exploit_incremental_learning": {
                    "type": "boolean, optional, default",
                    "line": 29
                },
                "n_jobs": {
                    "type": "integer, optional",
                    "line": 30
                },
                "pre_dispatch": {
                    "type": "integer or string, optional",
                    "line": 30
                },
                "verbose": {
                    "type": "integer, optional",
                    "line": 30
                },
                "error_score": {
                    "type": "'raise' (default) or numeric",
                    "line": 31
                }
            },
            "returns": {
                "train_sizes_abs": "array, shape = (n_unique_ticks,), dtype int",
                "train_scores": "array, shape (n_ticks, n_cv_folds)",
                "test_scores": "array, shape (n_ticks, n_cv_folds)"
            },
            "count": {
                "total_params": 11,
                "missed_params": 0
            }
        },
        {
            "name": "_translate_train_sizes",
            "line": 181,
            "params": {
                "train_sizes": {
                    "type": "array-like, shape (n_ticks,), dtype float or int",
                    "line": 181
                },
                "n_max_training_samples": {
                    "type": "int",
                    "line": 181
                }
            },
            "returns": {
                "train_sizes_abs": "array, shape (n_unique_ticks,), dtype int"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "_incremental_fit_estimator",
            "line": 240,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 9,
                "missed_params": 9
            }
        },
        {
            "name": "validation_curve",
            "line": 261,
            "params": {
                "estimator": {
                    "type": "object type that implements the \"fit\" and \"predict\" methods",
                    "line": 261
                },
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 261
                },
                "y": {
                    "type": "array-like, shape (n_samples) or (n_samples, n_features), optional",
                    "line": 261
                },
                "param_name": {
                    "type": "string",
                    "line": 261
                },
                "param_range": {
                    "type": "array-like, shape (n_values,)",
                    "line": 261
                },
                "cv": {
                    "type": "int, cross-validation generator or an iterable, optional",
                    "line": 261
                },
                "scoring": {
                    "type": "string, callable or None, optional, default",
                    "line": 262
                },
                "n_jobs": {
                    "type": "integer, optional",
                    "line": 262
                },
                "pre_dispatch": {
                    "type": "integer or string, optional",
                    "line": 262
                },
                "verbose": {
                    "type": "integer, optional",
                    "line": 262
                }
            },
            "returns": {
                "train_scores": "array, shape (n_ticks, n_cv_folds)",
                "test_scores": "array, shape (n_ticks, n_cv_folds)"
            },
            "count": {
                "total_params": 10,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\multiclass.py": [
        {
            "name": "_fit_binary",
            "line": 66,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "_partial_fit_binary",
            "line": 84,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_predict_binary",
            "line": 90,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_check_estimator",
            "line": 102,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_fit_ovo_binary",
            "line": 413,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 5,
                "missed_params": 5
            }
        },
        {
            "name": "_partial_fit_ovo_binary",
            "line": 426,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 5,
                "missed_params": 5
            }
        }
    ],
    "../scikit-learn-master/sklearn\\multioutput.py": [],
    "../scikit-learn-master/sklearn\\naive_bayes.py": [],
    "../scikit-learn-master/sklearn\\pipeline.py": [
        {
            "name": "_name_estimators",
            "line": 502,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "make_pipeline",
            "line": 523,
            "params": {},
            "returns": {
                "p": "Pipeline"
            },
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "make_union",
            "line": 787,
            "params": {},
            "returns": {
                "f": "FeatureUnion"
            },
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\random_projection.py": [
        {
            "name": "johnson_lindenstrauss_min_dim",
            "line": 53,
            "params": {
                "n_samples": {
                    "type": "int or numpy array of int greater than 0,",
                    "line": 53
                },
                "eps": {
                    "type": "float or numpy array of float in ]0,1[, optional (default=0.1)",
                    "line": 53
                }
            },
            "returns": {
                "n_components": "int or numpy array of int,"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "_check_density",
            "line": 135,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_check_input_size",
            "line": 146,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "gaussian_random_matrix",
            "line": 156,
            "params": {
                "n_components": {
                    "type": "int,",
                    "line": 156
                },
                "n_features": {
                    "type": "int,",
                    "line": 156
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 156
                }
            },
            "returns": {
                "components": "numpy array of shape [n_components, n_features]"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "sparse_random_matrix",
            "line": 198,
            "params": {
                "n_components": {
                    "type": "int,",
                    "line": 198
                },
                "n_features": {
                    "type": "int,",
                    "line": 198
                },
                "density": {
                    "type": "float in range ]0, 1] or 'auto', optional (default='auto')",
                    "line": 198
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 199
                }
            },
            "returns": {
                "components": "array or CSR matrix with shape [n_components, n_features]"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\setup.py": [],
    "../scikit-learn-master/sklearn\\__init__.py": [
        {
            "name": "get_config",
            "line": 29,
            "params": {},
            "returns": {
                "config": "dict",
                "to": "func"
            },
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "set_config",
            "line": 40,
            "params": {
                "assume_finite": {
                    "type": "bool, optional",
                    "line": 40
                }
            },
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "config_context",
            "line": 56,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "setup_module",
            "line": 151,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\affinity_propagation_.py": [
        {
            "name": "affinity_propagation",
            "line": 33,
            "params": {
                "S": {
                    "type": "array-like, shape (n_samples, n_samples)",
                    "line": 33
                },
                "preference": {
                    "type": "array-like, shape (n_samples,) or float, optional",
                    "line": 33
                },
                "convergence_iter": {
                    "type": "int, optional, default",
                    "line": 33
                },
                "max_iter": {
                    "type": "int, optional, default",
                    "line": 33
                },
                "damping": {
                    "type": "float, optional, default",
                    "line": 34
                },
                "copy": {
                    "type": "boolean, optional, default",
                    "line": 34
                },
                "verbose": {
                    "type": "boolean, optional, default",
                    "line": 34
                },
                "return_n_iter": {
                    "type": "bool, default False",
                    "line": 35
                }
            },
            "returns": {
                "cluster_centers_indices": "array, shape (n_clusters,)",
                "labels": "array, shape (n_samples,)",
                "n_iter": "int"
            },
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\bicluster.py": [
        {
            "name": "_scale_normalize",
            "line": 30,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_bistochastic_normalize",
            "line": 52,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_log_normalize",
            "line": 75,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\birch.py": [
        {
            "name": "_iterate_sparse_X",
            "line": 22,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_split_node",
            "line": 40,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\dbscan_.py": [
        {
            "name": "dbscan",
            "line": 22,
            "params": {
                "X": {
                    "type": "array or sparse (CSR) matrix of shape (n_samples, n_features), or             array of shape (n_samples, n_samples)",
                    "line": 22
                },
                "eps": {
                    "type": "float, optional",
                    "line": 22
                },
                "min_samples": {
                    "type": "int, optional",
                    "line": 22
                },
                "metric": {
                    "type": "string, or callable",
                    "line": 22
                },
                "metric_params": {
                    "type": "dict, optional",
                    "line": 22
                },
                "algorithm": {
                    "type": "{'auto', 'ball_tree', 'kd_tree', 'brute'}, optional",
                    "line": 23
                },
                "leaf_size": {
                    "type": "int, optional (default = 30)",
                    "line": 23
                },
                "p": {
                    "type": "float, optional",
                    "line": 23
                },
                "sample_weight": {
                    "type": "array, shape (n_samples,), optional",
                    "line": 23
                },
                "n_jobs": {
                    "type": "int, optional (default = 1)",
                    "line": 23
                }
            },
            "returns": {
                "core_samples": "array [n_core_samples]",
                "labels": "array [n_samples]"
            },
            "count": {
                "total_params": 10,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\hierarchical.py": [
        {
            "name": "_fix_connectivity",
            "line": 33,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "ward_tree",
            "line": 86,
            "params": {
                "X": {
                    "type": "array, shape (n_samples, n_features)",
                    "line": 86
                },
                "connectivity": {
                    "type": "sparse matrix (optional).",
                    "line": 86
                },
                "n_clusters": {
                    "type": "int (optional)",
                    "line": 86
                },
                "return_distance": {
                    "type": "bool (optional)",
                    "line": 86
                }
            },
            "returns": {
                "children": "2D array, shape (n_nodes-1, 2)",
                "n_components": "int",
                "n_leaves": "int",
                "parents": "1D array, shape (n_nodes, ) or None",
                "distances": "1D array, shape (n_nodes-1, )",
                "entry": "math",
                "math": "",
                "where": "math",
                "clusters": "math"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "linkage_tree",
            "line": 292,
            "params": {
                "X": {
                    "type": "array, shape (n_samples, n_features)",
                    "line": 292
                },
                "connectivity": {
                    "type": "sparse matrix (optional).",
                    "line": 292
                },
                "n_components": {
                    "type": "int (optional)",
                    "line": 292
                },
                "n_clusters": {
                    "type": "int (optional)",
                    "line": 293
                },
                "linkage": {
                    "type": "{\"average\", \"complete\"}, optional, default",
                    "line": 293
                },
                "affinity": {
                    "type": "string or callable, optional, default",
                    "line": 293
                },
                "return_distance": {
                    "type": "bool, default False",
                    "line": 294
                }
            },
            "returns": {
                "children": "2D array, shape (n_nodes-1, 2)",
                "n_components": "int",
                "n_leaves": "int",
                "parents": "1D array, shape (n_nodes, ) or None",
                "distances": "ndarray, shape (n_nodes-1,)"
            },
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "_hc_cut",
            "line": 544,
            "params": {
                "n_clusters": {
                    "type": "int or ndarray",
                    "line": 544
                },
                "children": {
                    "type": "2D array, shape (n_nodes-1, 2)",
                    "line": 544
                },
                "n_leaves": {
                    "type": "int",
                    "line": 544
                }
            },
            "returns": {
                "labels": "array [n_samples]"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\k_means_.py": [
        {
            "name": "_k_init",
            "line": 43,
            "params": {
                "X": {
                    "type": "array or sparse matrix, shape (n_samples, n_features)",
                    "line": 43
                },
                "n_clusters": {
                    "type": "integer",
                    "line": 43
                },
                "x_squared_norms": {
                    "type": "array, shape (n_samples,)",
                    "line": 43
                },
                "random_state": {
                    "type": "numpy.RandomState",
                    "line": 43
                },
                "n_local_trials": {
                    "type": "integer, optional",
                    "line": 43
                }
            },
            "returns": {},
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "_validate_center_shape",
            "line": 145,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_tolerance",
            "line": 158,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "k_means",
            "line": 167,
            "params": {
                "X": {
                    "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                    "line": 167
                },
                "n_clusters": {
                    "type": "int",
                    "line": 167
                },
                "init": {
                    "type": "{'k-means++', 'random', or ndarray, or a callable}, optional",
                    "line": 167
                },
                "precompute_distances": {
                    "type": "{'auto', True, False}",
                    "line": 167
                },
                "n_init": {
                    "type": "int, optional, default",
                    "line": 168
                },
                "max_iter": {
                    "type": "int, optional, default 300",
                    "line": 168
                },
                "verbose": {
                    "type": "boolean, optional",
                    "line": 168
                },
                "tol": {
                    "type": "float, optional",
                    "line": 169
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default",
                    "line": 169
                },
                "copy_x": {
                    "type": "boolean, optional",
                    "line": 169
                },
                "n_jobs": {
                    "type": "int",
                    "line": 169
                },
                "algorithm": {
                    "type": "\"auto\", \"full\" or \"elkan\", default=\"auto\"",
                    "line": 170
                },
                "return_n_iter": {
                    "type": "bool, optional",
                    "line": 170
                }
            },
            "returns": {
                "centroid": "float ndarray with shape (k, n_features)",
                "label": "integer ndarray with shape (n_samples,)",
                "inertia": "float",
                "best_n_iter": "int"
            },
            "count": {
                "total_params": 13,
                "missed_params": 0
            }
        },
        {
            "name": "_kmeans_single_lloyd",
            "line": 405,
            "params": {
                "X": {
                    "type": "array-like of floats, shape (n_samples, n_features)",
                    "line": 405
                },
                "n_clusters": {
                    "type": "int",
                    "line": 405
                },
                "max_iter": {
                    "type": "int, optional, default 300",
                    "line": 405
                },
                "init": {
                    "type": "{'k-means++', 'random', or ndarray, or a callable}, optional",
                    "line": 405
                },
                "verbose": {
                    "type": "boolean, optional",
                    "line": 406
                },
                "x_squared_norms": {
                    "type": "array",
                    "line": 406
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default",
                    "line": 407
                },
                "tol": {
                    "type": "float, optional",
                    "line": 407
                },
                "precompute_distances": {
                    "type": "boolean, default",
                    "line": 408
                }
            },
            "returns": {
                "centroid": "float ndarray with shape (k, n_features)",
                "label": "integer ndarray with shape (n_samples,)",
                "inertia": "float",
                "n_iter": "int"
            },
            "count": {
                "total_params": 9,
                "missed_params": 0
            }
        },
        {
            "name": "_labels_inertia_precompute_dense",
            "line": 529,
            "params": {
                "X": {
                    "type": "numpy array, shape (n_sample, n_features)",
                    "line": 529
                },
                "x_squared_norms": {
                    "type": "numpy array, shape (n_samples,)",
                    "line": 529
                },
                "centers": {
                    "type": "numpy array, shape (n_clusters, n_features)",
                    "line": 529
                },
                "distances": {
                    "type": "numpy array, shape (n_samples,)",
                    "line": 529
                }
            },
            "returns": {
                "labels": "numpy array, dtype=np.int, shape (n_samples,)",
                "inertia": "float"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "_labels_inertia",
            "line": 573,
            "params": {
                "X": {
                    "type": "float64 array-like or CSR sparse matrix, shape (n_samples, n_features)",
                    "line": 573
                },
                "x_squared_norms": {
                    "type": "array, shape (n_samples,)",
                    "line": 573
                },
                "centers": {
                    "type": "float array, shape (k, n_features)",
                    "line": 573
                },
                "precompute_distances": {
                    "type": "boolean, default",
                    "line": 574
                },
                "distances": {
                    "type": "float array, shape (n_samples,)",
                    "line": 574
                }
            },
            "returns": {
                "labels": "int array of shape(n)",
                "inertia": "float"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "_init_centroids",
            "line": 626,
            "params": {
                "X": {
                    "type": "array, shape (n_samples, n_features)",
                    "line": 626
                },
                "k": {
                    "type": "int",
                    "line": 626
                },
                "init": {
                    "type": "{'k-means++', 'random' or ndarray or callable} optional",
                    "line": 626
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default",
                    "line": 626
                },
                "x_squared_norms": {
                    "type": "array, shape (n_samples,), optional",
                    "line": 626
                },
                "init_size": {
                    "type": "int, optional",
                    "line": 627
                }
            },
            "returns": {
                "centers": "array, shape(k, n_features)"
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "_mini_batch_step",
            "line": 1014,
            "params": {
                "X": {
                    "type": "array, shape (n_samples, n_features)",
                    "line": 1014
                },
                "x_squared_norms": {
                    "type": "array, shape (n_samples,)",
                    "line": 1014
                },
                "centers": {
                    "type": "array, shape (k, n_features)",
                    "line": 1014
                },
                "counts": {
                    "type": "array, shape (k,)",
                    "line": 1014
                },
                "old_center_buffer": {
                    "type": "int",
                    "line": 1015
                },
                "compute_squared_diff": {
                    "type": "bool",
                    "line": 1015
                },
                "distances": {
                    "type": "array, dtype float, shape (n_samples), optional",
                    "line": 1016
                },
                "random_reassign": {
                    "type": "boolean, optional",
                    "line": 1016
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default",
                    "line": 1017
                },
                "reassignment_ratio": {
                    "type": "float, optional",
                    "line": 1017
                },
                "verbose": {
                    "type": "bool, optional, default False",
                    "line": 1018
                }
            },
            "returns": {
                "inertia": "float",
                "squared_diff": "numpy array, shape (n_clusters,)"
            },
            "count": {
                "total_params": 11,
                "missed_params": 0
            }
        },
        {
            "name": "_mini_batch_convergence",
            "line": 1150,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 9,
                "missed_params": 9
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\mean_shift_.py": [
        {
            "name": "estimate_bandwidth",
            "line": 31,
            "params": {
                "X": {
                    "type": "array-like, shape=[n_samples, n_features]",
                    "line": 31
                },
                "quantile": {
                    "type": "float, default 0.3",
                    "line": 31
                },
                "n_samples": {
                    "type": "int, optional",
                    "line": 31
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 31
                },
                "n_jobs": {
                    "type": "int, optional (default = 1)",
                    "line": 32
                }
            },
            "returns": {
                "bandwidth": "float"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "mean_shift",
            "line": 105,
            "params": {
                "X": {
                    "type": "array-like, shape=[n_samples, n_features]",
                    "line": 105
                },
                "bandwidth": {
                    "type": "float, optional",
                    "line": 105
                },
                "seeds": {
                    "type": "array-like, shape=[n_seeds, n_features] or None",
                    "line": 105
                },
                "bin_seeding": {
                    "type": "boolean, default=False",
                    "line": 105
                },
                "min_bin_freq": {
                    "type": "int, default=1",
                    "line": 106
                },
                "cluster_all": {
                    "type": "boolean, default True",
                    "line": 106
                },
                "max_iter": {
                    "type": "int, default 300",
                    "line": 106
                },
                "n_jobs": {
                    "type": "int",
                    "line": 107
                }
            },
            "returns": {
                "cluster_centers": "array, shape=[n_clusters, n_features]",
                "labels": "array, shape=[n_samples]"
            },
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "get_bin_seeds",
            "line": 241,
            "params": {
                "X": {
                    "type": "array-like, shape=[n_samples, n_features]",
                    "line": 241
                },
                "bin_size": {
                    "type": "float",
                    "line": 241
                },
                "min_bin_freq": {
                    "type": "integer, optional",
                    "line": 241
                }
            },
            "returns": {
                "bin_seeds": "array-like, shape=[n_samples, n_features]"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\setup.py": [],
    "../scikit-learn-master/sklearn\\cluster\\spectral.py": [
        {
            "name": "discretize",
            "line": 21,
            "params": {
                "vectors": {
                    "type": "array-like, shape",
                    "line": 21
                },
                "copy": {
                    "type": "boolean, optional, default",
                    "line": 21
                },
                "max_svd_restarts": {
                    "type": "int, optional, default",
                    "line": 21
                },
                "n_iter_max": {
                    "type": "int, optional, default",
                    "line": 21
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default",
                    "line": 22
                }
            },
            "returns": {
                "labels": "array of integers, shape"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "spectral_clustering",
            "line": 160,
            "params": {
                "affinity": {
                    "type": "array-like or sparse matrix, shape",
                    "line": 160
                },
                "n_clusters": {
                    "type": "integer, optional",
                    "line": 160
                },
                "n_components": {
                    "type": "integer, optional, default is n_clusters",
                    "line": 160
                },
                "eigen_solver": {
                    "type": "{None, 'arpack', 'lobpcg', or 'amg'}",
                    "line": 161
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default",
                    "line": 161
                },
                "n_init": {
                    "type": "int, optional, default",
                    "line": 161
                },
                "eigen_tol": {
                    "type": "float, optional, default",
                    "line": 162
                },
                "assign_labels": {
                    "type": "{'kmeans', 'discretize'}, default",
                    "line": 162
                }
            },
            "returns": {
                "labels": "array of integers, shape"
            },
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\_feature_agglomeration.py": [],
    "../scikit-learn-master/sklearn\\cluster\\__init__.py": [],
    "../scikit-learn-master/sklearn\\cluster\\tests\\common.py": [],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_affinity_propagation.py": [],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_bicluster.py": [
        {
            "name": "_do_scale_test",
            "line": 136,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_do_bistochastic_test",
            "line": 149,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_birch.py": [
        {
            "name": "check_threshold",
            "line": 142,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_dbscan.py": [],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_hierarchical.py": [
        {
            "name": "assess_same_labelling",
            "line": 251,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_k_means.py": [
        {
            "name": "test_x_squared_norms_init_centroids",
            "line": 753,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_mean_shift.py": [],
    "../scikit-learn-master/sklearn\\cluster\\tests\\test_spectral.py": [],
    "../scikit-learn-master/sklearn\\cluster\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\covariance\\empirical_covariance_.py": [
        {
            "name": "log_likelihood",
            "line": 23,
            "params": {
                "emp_cov": {
                    "type": "2D ndarray (n_features, n_features)",
                    "line": 23
                },
                "precision": {
                    "type": "2D ndarray (n_features, n_features)",
                    "line": 23
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "empirical_covariance",
            "line": 49,
            "params": {
                "X": {
                    "type": "ndarray, shape (n_samples, n_features)",
                    "line": 49
                },
                "assume_centered": {
                    "type": "Boolean",
                    "line": 49
                }
            },
            "returns": {
                "covariance": "2D ndarray, shape (n_features, n_features)"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\covariance\\graph_lasso_.py": [
        {
            "name": "_objective",
            "line": 31,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_dual_gap",
            "line": 45,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "alpha_max",
            "line": 58,
            "params": {
                "emp_cov": {
                    "type": "2D array, (n_features, n_features)",
                    "line": 58
                }
            },
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "graph_lasso",
            "line": 81,
            "params": {
                "emp_cov": {
                    "type": "2D ndarray, shape (n_features, n_features)",
                    "line": 81
                },
                "alpha": {
                    "type": "positive float",
                    "line": 81
                },
                "cov_init": {
                    "type": "2D array (n_features, n_features), optional",
                    "line": 81
                },
                "mode": {
                    "type": "{'cd', 'lars'}",
                    "line": 81
                },
                "tol": {
                    "type": "positive float, optional",
                    "line": 81
                },
                "enet_tol": {
                    "type": "positive float, optional",
                    "line": 82
                },
                "max_iter": {
                    "type": "integer, optional",
                    "line": 82
                },
                "verbose": {
                    "type": "boolean, optional",
                    "line": 82
                },
                "return_costs": {
                    "type": "boolean, optional",
                    "line": 83
                },
                "eps": {
                    "type": "float, optional",
                    "line": 83
                },
                "return_n_iter": {
                    "type": "bool, optional",
                    "line": 84
                }
            },
            "returns": {
                "covariance": "2D ndarray, shape (n_features, n_features)",
                "precision": "2D ndarray, shape (n_features, n_features)",
                "costs": "list of (objective, dual_gap) pairs",
                "n_iter": "int"
            },
            "count": {
                "total_params": 11,
                "missed_params": 0
            }
        },
        {
            "name": "graph_lasso_path",
            "line": 362,
            "params": {
                "X": {
                    "type": "2D ndarray, shape (n_samples, n_features)",
                    "line": 362
                },
                "alphas": {
                    "type": "list of positive floats",
                    "line": 362
                },
                "X_test": {
                    "type": "2D array, shape (n_test_samples, n_features), optional",
                    "line": 362
                },
                "mode": {
                    "type": "{'cd', 'lars'}",
                    "line": 362
                },
                "tol": {
                    "type": "positive float, optional",
                    "line": 363
                },
                "enet_tol": {
                    "type": "positive float, optional",
                    "line": 363
                },
                "max_iter": {
                    "type": "integer, optional",
                    "line": 363
                },
                "verbose": {
                    "type": "integer, optional",
                    "line": 363
                }
            },
            "returns": {
                "covariances_": "List of 2D ndarray, shape (n_features, n_features)",
                "precisions_": "List of 2D ndarray, shape (n_features, n_features)",
                "scores_": "List of float"
            },
            "count": {
                "total_params": 9,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\covariance\\outlier_detection.py": [],
    "../scikit-learn-master/sklearn\\covariance\\robust_covariance.py": [
        {
            "name": "c_step",
            "line": 28,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 28
                },
                "n_support": {
                    "type": "int, > n_samples / 2",
                    "line": 28
                },
                "remaining_iterations": {
                    "type": "int, optional",
                    "line": 28
                },
                "initial_estimates": {
                    "type": "2-tuple, optional",
                    "line": 28
                },
                "verbose": {
                    "type": "boolean, optional",
                    "line": 29
                },
                "cov_computation_method": {
                    "type": "callable, default empirical_covariance",
                    "line": 29
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 30
                }
            },
            "returns": {
                "location": "array-like, shape (n_features,)",
                "covariance": "array-like, shape (n_features, n_features)",
                "support": "array-like, shape (n_samples,)"
            },
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "select_candidates",
            "line": 178,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 178
                },
                "n_support": {
                    "type": "int, [(n + p + 1)/2] < n_support < n",
                    "line": 178
                },
                "n_trials": {
                    "type": "int, nb_trials > 0 or 2-tuple",
                    "line": 178
                },
                "select": {
                    "type": "int, int > 0",
                    "line": 178
                },
                "n_iter": {
                    "type": "int, nb_iter > 0",
                    "line": 178
                },
                "verbose": {
                    "type": "boolean, default False",
                    "line": 179
                },
                "cov_computation_method": {
                    "type": "callable, default empirical_covariance",
                    "line": 180
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 181
                }
            },
            "returns": {
                "best_locations": "array-like, shape (select, n_features)",
                "best_covariances": "array-like, shape (select, n_features, n_features)",
                "best_supports": "array-like, shape (select, n_samples)"
            },
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "fast_mcd",
            "line": 302,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 302
                },
                "support_fraction": {
                    "type": "float, 0 < support_fraction < 1",
                    "line": 302
                },
                "cov_computation_method": {
                    "type": "callable, default empirical_covariance",
                    "line": 303
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 304
                }
            },
            "returns": {
                "location": "array-like, shape (n_features,)",
                "covariance": "array-like, shape (n_features, n_features)",
                "support": "array-like, type boolean, shape (n_samples,)"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\covariance\\shrunk_covariance_.py": [
        {
            "name": "shrunk_covariance",
            "line": 27,
            "params": {
                "emp_cov": {
                    "type": "array-like, shape (n_features, n_features)",
                    "line": 27
                },
                "shrinkage": {
                    "type": "float, 0 <= shrinkage <= 1",
                    "line": 27
                }
            },
            "returns": {
                "shrunk_cov": "array-like"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "ledoit_wolf_shrinkage",
            "line": 150,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 150
                },
                "assume_centered": {
                    "type": "Boolean",
                    "line": 150
                },
                "block_size": {
                    "type": "int",
                    "line": 150
                }
            },
            "returns": {
                "shrinkage": "float"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "ledoit_wolf",
            "line": 246,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 246
                },
                "assume_centered": {
                    "type": "boolean, default=False",
                    "line": 246
                },
                "block_size": {
                    "type": "int, default=1000",
                    "line": 246
                }
            },
            "returns": {
                "shrunk_cov": "array-like, shape (n_features, n_features)",
                "shrinkage": "float"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "oas",
            "line": 409,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 409
                },
                "assume_centered": {
                    "type": "boolean",
                    "line": 409
                }
            },
            "returns": {
                "shrunk_cov": "array-like, shape (n_features, n_features)",
                "shrinkage": "float"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\covariance\\__init__.py": [],
    "../scikit-learn-master/sklearn\\covariance\\tests\\test_covariance.py": [],
    "../scikit-learn-master/sklearn\\covariance\\tests\\test_graph_lasso.py": [],
    "../scikit-learn-master/sklearn\\covariance\\tests\\test_robust_covariance.py": [],
    "../scikit-learn-master/sklearn\\covariance\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\cross_decomposition\\cca_.py": [],
    "../scikit-learn-master/sklearn\\cross_decomposition\\pls_.py": [
        {
            "name": "_nipals_twoblocks_inner_loop",
            "line": 24,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 6,
                "missed_params": 6
            }
        },
        {
            "name": "_center_scale_xy",
            "line": 92,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\cross_decomposition\\__init__.py": [],
    "../scikit-learn-master/sklearn\\cross_decomposition\\tests\\test_pls.py": [],
    "../scikit-learn-master/sklearn\\cross_decomposition\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\datasets\\base.py": [
        {
            "name": "get_data_home",
            "line": 31,
            "params": {
                "data_home": {
                    "type": "str | None",
                    "line": 31
                }
            },
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "clear_data_home",
            "line": 60,
            "params": {
                "data_home": {
                    "type": "str | None",
                    "line": 60
                }
            },
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "load_files",
            "line": 72,
            "params": {
                "container_path": {
                    "type": "string or unicode",
                    "line": 72
                },
                "description": {
                    "type": "string or unicode, optional (default=None)",
                    "line": 72
                },
                "categories": {
                    "type": "A collection of strings or None, optional (default=None)",
                    "line": 72
                },
                "load_content": {
                    "type": "boolean, optional (default=True)",
                    "line": 73
                },
                "shuffle": {
                    "type": "bool, optional (default=True)",
                    "line": 73
                },
                "encoding": {
                    "type": "string or None (default is None)",
                    "line": 73
                },
                "decode_error": {
                    "type": "{'strict', 'ignore', 'replace'}, optional",
                    "line": 74
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=0)",
                    "line": 74
                }
            },
            "returns": {
                "data": "Bunch",
                "are": "either"
            },
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "load_data",
            "line": 210,
            "params": {
                "data_file_name": {
                    "type": "String. Name of csv file to be loaded from",
                    "line": 210
                }
            },
            "returns": {
                "data": "Numpy Array",
                "target": "Numpy Array",
                "target_names": "Numpy Array"
            },
            "count": {
                "total_params": 2,
                "missed_params": 1
            }
        },
        {
            "name": "load_wine",
            "line": 248,
            "params": {
                "return_X_y": {
                    "type": "boolean, default=False.",
                    "line": 248
                }
            },
            "returns": {
                "data": "Bunch",
                "are": "'data', the",
                "from": "",
                "https": "//archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "load_iris",
            "line": 325,
            "params": {
                "return_X_y": {
                    "type": "boolean, default=False.",
                    "line": 325
                }
            },
            "returns": {
                "data": "Bunch",
                "are": "",
                "versionadded": ""
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "load_breast_cancer",
            "line": 390,
            "params": {
                "return_X_y": {
                    "type": "boolean, default=False",
                    "line": 390
                }
            },
            "returns": {
                "data": "Bunch",
                "are": "",
                "versionadded": "",
                "from": "",
                "https": "//goo.gl/U2Uwz2"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "load_digits",
            "line": 472,
            "params": {
                "n_class": {
                    "type": "integer, between 0 and 10, optional (default=10)",
                    "line": 472
                },
                "return_X_y": {
                    "type": "boolean, default=False.",
                    "line": 472
                }
            },
            "returns": {
                "data": "Bunch",
                "are": "",
                "versionadded": "",
                "http": "//archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "load_diabetes",
            "line": 552,
            "params": {
                "return_X_y": {
                    "type": "boolean, default=False.",
                    "line": 552
                }
            },
            "returns": {
                "data": "Bunch",
                "are": "",
                "versionadded": ""
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "load_linnerud",
            "line": 600,
            "params": {
                "return_X_y": {
                    "type": "boolean, default=False.",
                    "line": 600
                }
            },
            "returns": {
                "data": "Bunch",
                "are": "'data' and",
                "versionadded": ""
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "load_boston",
            "line": 652,
            "params": {
                "return_X_y": {
                    "type": "boolean, default=False.",
                    "line": 652
                }
            },
            "returns": {
                "data": "Bunch",
                "are": "",
                "versionadded": ""
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "load_sample_images",
            "line": 719,
            "params": {},
            "returns": {
                "data": "Bunch",
                "attributes": "'images', the"
            },
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "load_sample_image",
            "line": 769,
            "params": {
                "image_name": {
                    "type": "{`china.jpg`, `flower.jpg`}",
                    "line": 769
                }
            },
            "returns": {
                "img": "3D array",
                "array": "height x width x color"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "_pkl_filepath",
            "line": 808,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "_sha256",
            "line": 837,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_fetch_remote",
            "line": 850,
            "params": {
                "remote": {
                    "type": "RemoteFileMetadata",
                    "line": 850
                },
                "dirname": {
                    "type": "string",
                    "line": 850
                }
            },
            "returns": {
                "file_path": "string"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\california_housing.py": [
        {
            "name": "fetch_california_housing",
            "line": 52,
            "params": {
                "data_home": {
                    "type": "optional, default",
                    "line": 52
                },
                "download_if_missing": {
                    "type": "optional, True by default",
                    "line": 52
                }
            },
            "returns": {
                "dataset": "dict-like object with the following attributes"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\covtype.py": [
        {
            "name": "fetch_covtype",
            "line": 44,
            "params": {
                "data_home": {
                    "type": "string, optional",
                    "line": 44
                },
                "download_if_missing": {
                    "type": "boolean, default=True",
                    "line": 44
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 45
                },
                "shuffle": {
                    "type": "bool, default=False",
                    "line": 45
                }
            },
            "returns": {
                "dataset": "dict-like object with the following attributes"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\kddcup99.py": [
        {
            "name": "fetch_kddcup99",
            "line": 48,
            "params": {
                "subset": {
                    "type": "None, 'SA', 'SF', 'http', 'smtp'",
                    "line": 48
                },
                "data_home": {
                    "type": "string, optional",
                    "line": 48
                },
                "shuffle": {
                    "type": "bool, default=False",
                    "line": 48
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 49
                },
                "percent10": {
                    "type": "bool, default=True",
                    "line": 50
                },
                "download_if_missing": {
                    "type": "bool, default=True",
                    "line": 50
                }
            },
            "returns": {
                "data": "Bunch",
                "are": ""
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "_fetch_brute_kddcup99",
            "line": 236,
            "params": {
                "data_home": {
                    "type": "string, optional",
                    "line": 236
                },
                "download_if_missing": {
                    "type": "boolean, default=True",
                    "line": 237
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 237
                },
                "percent10": {
                    "type": "bool, default=True",
                    "line": 238
                }
            },
            "returns": {
                "dataset": "dict-like object with the following attributes"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "_mkdirp",
            "line": 380,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\lfw.py": [
        {
            "name": "scale_face",
            "line": 81,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "check_fetch_lfw",
            "line": 94,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_load_imgs",
            "line": 137,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "_fetch_lfw_people",
            "line": 208,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 5,
                "missed_params": 5
            }
        },
        {
            "name": "fetch_lfw_people",
            "line": 249,
            "params": {
                "data_home": {
                    "type": "optional, default",
                    "line": 249
                },
                "funneled": {
                    "type": "boolean, optional, default",
                    "line": 249
                },
                "resize": {
                    "type": "float, optional, default 0.5",
                    "line": 249
                },
                "min_faces_per_person": {
                    "type": "int, optional, default None",
                    "line": 250
                },
                "color": {
                    "type": "boolean, optional, default False",
                    "line": 250
                },
                "slice_": {
                    "type": "optional",
                    "line": 251
                },
                "download_if_missing": {
                    "type": "optional, True by default",
                    "line": 252
                }
            },
            "returns": {
                "dataset": "dict-like object with the following attributes"
            },
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "_fetch_lfw_pairs",
            "line": 348,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 5,
                "missed_params": 5
            }
        },
        {
            "name": "fetch_lfw_pairs",
            "line": 399,
            "params": {
                "subset": {
                    "type": "optional, default",
                    "line": 399
                },
                "data_home": {
                    "type": "optional, default",
                    "line": 399
                },
                "funneled": {
                    "type": "boolean, optional, default",
                    "line": 399
                },
                "resize": {
                    "type": "float, optional, default 0.5",
                    "line": 399
                },
                "color": {
                    "type": "boolean, optional, default False",
                    "line": 400
                },
                "slice_": {
                    "type": "optional",
                    "line": 400
                },
                "download_if_missing": {
                    "type": "optional, True by default",
                    "line": 401
                }
            },
            "returns": {
                "attributes": "",
                "data": "numpy array of shape (2200, 5828). Shape depends on ``subset``.",
                "pairs": "numpy array of shape (2200, 2, 62, 47). Shape depends on",
                "target": "numpy array of shape (2200,). Shape depends on ``subset``.",
                "DESCR": "string"
            },
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\mlcomp.py": [
        {
            "name": "load_mlcomp",
            "line": 23,
            "params": {
                "name_or_id": {
                    "type": "the integer id or the string name metadata of the MLComp",
                    "line": 26
                },
                "set_": {
                    "type": "select the portion to load",
                    "line": 26
                },
                "mlcomp_root": {
                    "type": "the filesystem path to the root folder where MLComp datasets",
                    "line": 26
                }
            },
            "returns": {
                "data": "Bunch",
                "are": "",
                "process": "depending on the type of name_or_id,",
                "TODO": "implement zip dataset loading too"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\mldata.py": [
        {
            "name": "mldata_filename",
            "line": 32,
            "params": {
                "dataname": {
                    "type": "str",
                    "line": 32
                }
            },
            "returns": {
                "fname": "str"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "fetch_mldata",
            "line": 49,
            "params": {
                "dataname": {
                    "type": "str",
                    "line": 49
                },
                "target_name": {
                    "type": "optional, default",
                    "line": 49
                },
                "data_name": {
                    "type": "optional, default",
                    "line": 49
                },
                "transpose_data": {
                    "type": "optional, default",
                    "line": 50
                },
                "data_home": {
                    "type": "optional, default",
                    "line": 50
                }
            },
            "returns": {
                "data": "Bunch",
                "are": ""
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\olivetti_faces.py": [
        {
            "name": "fetch_olivetti_faces",
            "line": 51,
            "params": {
                "data_home": {
                    "type": "optional, default",
                    "line": 51
                },
                "shuffle": {
                    "type": "boolean, optional",
                    "line": 51
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=0)",
                    "line": 51
                },
                "download_if_missing": {
                    "type": "optional, True by default",
                    "line": 52
                }
            },
            "returns": {
                "attributes": "",
                "data": "numpy array of shape (400, 4096)",
                "images": "numpy array of shape (400, 64, 64)",
                "target": "numpy array of shape (400, )",
                "DESCR": "string"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\rcv1.py": [
        {
            "name": "fetch_rcv1",
            "line": 72,
            "params": {
                "data_home": {
                    "type": "string, optional",
                    "line": 72
                },
                "subset": {
                    "type": "string, 'train', 'test', or 'all', default='all'",
                    "line": 72
                },
                "download_if_missing": {
                    "type": "boolean, default=True",
                    "line": 72
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 73
                },
                "shuffle": {
                    "type": "bool, default=False",
                    "line": 73
                }
            },
            "returns": {
                "dataset": "dict-like object with the following attributes"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "_inverse_permutation",
            "line": 258,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_find_permutation",
            "line": 267,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\samples_generator.py": [
        {
            "name": "_generate_hypercube",
            "line": 24,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "make_classification",
            "line": 37,
            "params": {
                "n_samples": {
                    "type": "int, optional (default=100)",
                    "line": 37
                },
                "n_features": {
                    "type": "int, optional (default=20)",
                    "line": 37
                },
                "n_informative": {
                    "type": "int, optional (default=2)",
                    "line": 37
                },
                "n_redundant": {
                    "type": "int, optional (default=2)",
                    "line": 38
                },
                "n_repeated": {
                    "type": "int, optional (default=0)",
                    "line": 38
                },
                "n_classes": {
                    "type": "int, optional (default=2)",
                    "line": 38
                },
                "n_clusters_per_class": {
                    "type": "int, optional (default=2)",
                    "line": 39
                },
                "weights": {
                    "type": "list of floats or None (default=None)",
                    "line": 39
                },
                "flip_y": {
                    "type": "float, optional (default=0.01)",
                    "line": 39
                },
                "class_sep": {
                    "type": "float, optional (default=1.0)",
                    "line": 40
                },
                "hypercube": {
                    "type": "boolean, optional (default=True)",
                    "line": 40
                },
                "shift": {
                    "type": "float, array of shape [n_features] or None, optional (default=0.0)",
                    "line": 40
                },
                "scale": {
                    "type": "float, array of shape [n_features] or None, optional (default=1.0)",
                    "line": 40
                },
                "shuffle": {
                    "type": "boolean, optional (default=True)",
                    "line": 41
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 41
                }
            },
            "returns": {
                "X": "array of shape [n_samples, n_features]",
                "y": "array of shape [n_samples]"
            },
            "count": {
                "total_params": 15,
                "missed_params": 0
            }
        },
        {
            "name": "make_multilabel_classification",
            "line": 249,
            "params": {
                "n_samples": {
                    "type": "int, optional (default=100)",
                    "line": 249
                },
                "n_features": {
                    "type": "int, optional (default=20)",
                    "line": 249
                },
                "n_classes": {
                    "type": "int, optional (default=5)",
                    "line": 249
                },
                "n_labels": {
                    "type": "int, optional (default=2)",
                    "line": 250
                },
                "length": {
                    "type": "int, optional (default=50)",
                    "line": 250
                },
                "allow_unlabeled": {
                    "type": "bool, optional (default=True)",
                    "line": 250
                },
                "sparse": {
                    "type": "bool, optional (default=False)",
                    "line": 251
                },
                "return_indicator": {
                    "type": "'dense' (default) | 'sparse' | False",
                    "line": 251
                },
                "return_distributions": {
                    "type": "bool, optional (default=False)",
                    "line": 252
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 253
                }
            },
            "returns": {
                "X": "array of shape [n_samples, n_features]",
                "Y": "array or sparse CSR matrix of shape [n_samples, n_classes]",
                "p_c": "array, shape [n_classes]",
                "p_w_c": "array, shape [n_features, n_classes]"
            },
            "count": {
                "total_params": 10,
                "missed_params": 0
            }
        },
        {
            "name": "make_hastie_10_2",
            "line": 400,
            "params": {
                "n_samples": {
                    "type": "int, optional (default=12000)",
                    "line": 400
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 400
                }
            },
            "returns": {
                "X": "array of shape [n_samples, 10]",
                "y": "array of shape [n_samples]"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "make_regression",
            "line": 449,
            "params": {
                "n_samples": {
                    "type": "int, optional (default=100)",
                    "line": 449
                },
                "n_features": {
                    "type": "int, optional (default=100)",
                    "line": 449
                },
                "n_informative": {
                    "type": "int, optional (default=10)",
                    "line": 449
                },
                "n_targets": {
                    "type": "int, optional (default=1)",
                    "line": 450
                },
                "bias": {
                    "type": "float, optional (default=0.0)",
                    "line": 450
                },
                "effective_rank": {
                    "type": "int or None, optional (default=None)",
                    "line": 450
                },
                "tail_strength": {
                    "type": "float between 0.0 and 1.0, optional (default=0.5)",
                    "line": 451
                },
                "noise": {
                    "type": "float, optional (default=0.0)",
                    "line": 451
                },
                "shuffle": {
                    "type": "boolean, optional (default=True)",
                    "line": 451
                },
                "coef": {
                    "type": "boolean, optional (default=False)",
                    "line": 451
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 452
                }
            },
            "returns": {
                "X": "array of shape [n_samples, n_features]",
                "y": "array of shape [n_samples] or [n_samples, n_targets]",
                "coef": "array of shape [n_features] or [n_features, n_targets], optional"
            },
            "count": {
                "total_params": 11,
                "missed_params": 0
            }
        },
        {
            "name": "make_circles",
            "line": 572,
            "params": {
                "n_samples": {
                    "type": "int, optional (default=100)",
                    "line": 572
                },
                "shuffle": {
                    "type": "bool, optional (default=True)",
                    "line": 572
                },
                "noise": {
                    "type": "double or None (default=None)",
                    "line": 572
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 572
                },
                "factor": {
                    "type": "double < 1 (default=.8)",
                    "line": 573
                }
            },
            "returns": {
                "X": "array of shape [n_samples, 2]",
                "y": "array of shape [n_samples]"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "make_moons",
            "line": 635,
            "params": {
                "n_samples": {
                    "type": "int, optional (default=100)",
                    "line": 635
                },
                "shuffle": {
                    "type": "bool, optional (default=True)",
                    "line": 635
                },
                "noise": {
                    "type": "double or None (default=None)",
                    "line": 635
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 635
                }
            },
            "returns": {
                "X": "array of shape [n_samples, 2]",
                "y": "array of shape [n_samples]"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "make_blobs",
            "line": 691,
            "params": {
                "n_samples": {
                    "type": "int, optional (default=100)",
                    "line": 691
                },
                "n_features": {
                    "type": "int, optional (default=2)",
                    "line": 691
                },
                "centers": {
                    "type": "int or array of shape [n_centers, n_features], optional",
                    "line": 691
                },
                "cluster_std": {
                    "type": "float or sequence of floats, optional (default=1.0)",
                    "line": 691
                },
                "center_box": {
                    "type": "pair of floats (min, max), optional (default=(-10.0, 10.0))",
                    "line": 692
                },
                "shuffle": {
                    "type": "boolean, optional (default=True)",
                    "line": 692
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 692
                }
            },
            "returns": {
                "X": "array of shape [n_samples, n_features]",
                "y": "array of shape [n_samples]"
            },
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "make_friedman1",
            "line": 785,
            "params": {
                "n_samples": {
                    "type": "int, optional (default=100)",
                    "line": 785
                },
                "n_features": {
                    "type": "int, optional (default=10)",
                    "line": 785
                },
                "noise": {
                    "type": "float, optional (default=0.0)",
                    "line": 785
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 785
                }
            },
            "returns": {
                "X": "array of shape [n_samples, n_features]",
                "y": "array of shape [n_samples]"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "make_friedman2",
            "line": 848,
            "params": {
                "n_samples": {
                    "type": "int, optional (default=100)",
                    "line": 848
                },
                "noise": {
                    "type": "float, optional (default=0.0)",
                    "line": 848
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 848
                }
            },
            "returns": {
                "X": "array of shape [n_samples, 4]",
                "y": "array of shape [n_samples]"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "make_friedman3",
            "line": 914,
            "params": {
                "n_samples": {
                    "type": "int, optional (default=100)",
                    "line": 914
                },
                "noise": {
                    "type": "float, optional (default=0.0)",
                    "line": 914
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 914
                }
            },
            "returns": {
                "X": "array of shape [n_samples, 4]",
                "y": "array of shape [n_samples]"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "make_low_rank_matrix",
            "line": 979,
            "params": {
                "n_samples": {
                    "type": "int, optional (default=100)",
                    "line": 979
                },
                "n_features": {
                    "type": "int, optional (default=100)",
                    "line": 979
                },
                "effective_rank": {
                    "type": "int, optional (default=10)",
                    "line": 979
                },
                "tail_strength": {
                    "type": "float between 0.0 and 1.0, optional (default=0.5)",
                    "line": 980
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 980
                }
            },
            "returns": {
                "X": "array of shape [n_samples, n_features]"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "make_sparse_coded_signal",
            "line": 1049,
            "params": {
                "n_samples": {
                    "type": "int",
                    "line": 1049
                },
                "n_components": {
                    "type": "int,",
                    "line": 1049
                },
                "n_features": {
                    "type": "int",
                    "line": 1049
                },
                "n_nonzero_coefs": {
                    "type": "int",
                    "line": 1050
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 1050
                }
            },
            "returns": {
                "the": "ref"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "make_sparse_uncorrelated",
            "line": 1112,
            "params": {
                "n_samples": {
                    "type": "int, optional (default=100)",
                    "line": 1112
                },
                "n_features": {
                    "type": "int, optional (default=10)",
                    "line": 1112
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 1112
                }
            },
            "returns": {
                "X": "array of shape [n_samples, n_features]",
                "y": "array of shape [n_samples]"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "make_spd_matrix",
            "line": 1164,
            "params": {
                "n_dim": {
                    "type": "int",
                    "line": 1164
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 1164
                }
            },
            "returns": {
                "X": "array of shape [n_dim, n_dim]"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "make_sparse_spd_matrix",
            "line": 1198,
            "params": {
                "dim": {
                    "type": "integer, optional (default=1)",
                    "line": 1198
                },
                "alpha": {
                    "type": "float between 0 and 1, optional (default=0.95)",
                    "line": 1198
                },
                "norm_diag": {
                    "type": "boolean, optional (default=False)",
                    "line": 1198
                },
                "smallest_coef": {
                    "type": "float between 0 and 1, optional (default=0.1)",
                    "line": 1199
                },
                "largest_coef": {
                    "type": "float between 0 and 1, optional (default=0.9)",
                    "line": 1199
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 1200
                }
            },
            "returns": {
                "prec": "sparse matrix of shape (dim, dim)"
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "make_swiss_roll",
            "line": 1273,
            "params": {
                "n_samples": {
                    "type": "int, optional (default=100)",
                    "line": 1273
                },
                "noise": {
                    "type": "float, optional (default=0.0)",
                    "line": 1273
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 1273
                }
            },
            "returns": {
                "X": "array of shape [n_samples, 3]",
                "t": "array of shape [n_samples]"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "make_s_curve",
            "line": 1326,
            "params": {
                "n_samples": {
                    "type": "int, optional (default=100)",
                    "line": 1326
                },
                "noise": {
                    "type": "float, optional (default=0.0)",
                    "line": 1326
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 1326
                }
            },
            "returns": {
                "X": "array of shape [n_samples, 3]",
                "t": "array of shape [n_samples]"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "make_gaussian_quantiles",
            "line": 1369,
            "params": {
                "mean": {
                    "type": "array of shape [n_features], optional (default=None)",
                    "line": 1369
                },
                "cov": {
                    "type": "float, optional (default=1.)",
                    "line": 1369
                },
                "n_samples": {
                    "type": "int, optional (default=100)",
                    "line": 1369
                },
                "n_features": {
                    "type": "int, optional (default=2)",
                    "line": 1370
                },
                "n_classes": {
                    "type": "int, optional (default=3)",
                    "line": 1370
                },
                "shuffle": {
                    "type": "boolean, optional (default=True)",
                    "line": 1371
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 1371
                }
            },
            "returns": {
                "X": "array of shape [n_samples, n_features]",
                "y": "array of shape [n_samples]"
            },
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "make_biclusters",
            "line": 1465,
            "params": {
                "shape": {
                    "type": "iterable (n_rows, n_cols)",
                    "line": 1465
                },
                "n_clusters": {
                    "type": "integer",
                    "line": 1465
                },
                "noise": {
                    "type": "float, optional (default=0.0)",
                    "line": 1465
                },
                "minval": {
                    "type": "int, optional (default=10)",
                    "line": 1465
                },
                "maxval": {
                    "type": "int, optional (default=100)",
                    "line": 1466
                },
                "shuffle": {
                    "type": "boolean, optional (default=True)",
                    "line": 1466
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 1466
                }
            },
            "returns": {
                "X": "array of shape `shape`",
                "rows": "array of shape (n_clusters, X.shape[0],)",
                "cols": "array of shape (n_clusters, X.shape[1],)"
            },
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "make_checkerboard",
            "line": 1557,
            "params": {
                "shape": {
                    "type": "iterable (n_rows, n_cols)",
                    "line": 1557
                },
                "n_clusters": {
                    "type": "integer or iterable (n_row_clusters, n_column_clusters)",
                    "line": 1557
                },
                "noise": {
                    "type": "float, optional (default=0.0)",
                    "line": 1557
                },
                "minval": {
                    "type": "int, optional (default=10)",
                    "line": 1557
                },
                "maxval": {
                    "type": "int, optional (default=100)",
                    "line": 1558
                },
                "shuffle": {
                    "type": "boolean, optional (default=True)",
                    "line": 1558
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 1558
                }
            },
            "returns": {
                "X": "array of shape `shape`",
                "rows": "array of shape (n_clusters, X.shape[0],)",
                "cols": "array of shape (n_clusters, X.shape[1],)"
            },
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\setup.py": [],
    "../scikit-learn-master/sklearn\\datasets\\species_distributions.py": [
        {
            "name": "_load_coverage",
            "line": 80,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_load_csv",
            "line": 96,
            "params": {
                "F": {
                    "type": "file object",
                    "line": 96
                }
            },
            "returns": {
                "rec": "np.ndarray"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "construct_grids",
            "line": 121,
            "params": {
                "batch": {
                    "type": "Batch object",
                    "line": 121
                }
            },
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "fetch_species_distributions",
            "line": 148,
            "params": {
                "data_home": {
                    "type": "optional, default",
                    "line": 148
                },
                "download_if_missing": {
                    "type": "optional, True by default",
                    "line": 149
                }
            },
            "returns": {
                "attributes": "",
                "coverages": "array, shape = [14, 1592, 1212]",
                "train": "record array, shape = (1623,)",
                "fields": "",
                "test": "record array, shape = (619,)",
                "Ny": "integers",
                "y_left_lower_corner": "floats",
                "grid_size": "float"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\svmlight_format.py": [
        {
            "name": "load_svmlight_file",
            "line": 33,
            "params": {
                "f": {
                    "type": "{str, file-like, int}",
                    "line": 33
                },
                "n_features": {
                    "type": "int or None",
                    "line": 33
                },
                "dtype": {
                    "type": "numpy data type, default np.float64",
                    "line": 33
                },
                "multilabel": {
                    "type": "boolean, optional, default False",
                    "line": 34
                },
                "zero_based": {
                    "type": "boolean or \"auto\", optional, default \"auto\"",
                    "line": 34
                },
                "query_id": {
                    "type": "boolean, default False",
                    "line": 34
                },
                "offset": {
                    "type": "integer, optional, default 0",
                    "line": 35
                },
                "length": {
                    "type": "integer, optional, default -1",
                    "line": 35
                }
            },
            "returns": {
                "X": "scipy.sparse matrix of shape (n_samples, n_features)",
                "y": "ndarray of shape (n_samples,), or, in the multilabel a list of",
                "query_id": "array of shape (n_samples,)"
            },
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "load_svmlight_files",
            "line": 192,
            "params": {
                "files": {
                    "type": "iterable over {str, file-like, int}",
                    "line": 192
                },
                "n_features": {
                    "type": "int or None",
                    "line": 192
                },
                "dtype": {
                    "type": "numpy data type, default np.float64",
                    "line": 192
                },
                "multilabel": {
                    "type": "boolean, optional",
                    "line": 193
                },
                "zero_based": {
                    "type": "boolean or \"auto\", optional",
                    "line": 193
                },
                "query_id": {
                    "type": "boolean, defaults to False",
                    "line": 193
                },
                "offset": {
                    "type": "integer, optional, default 0",
                    "line": 194
                },
                "length": {
                    "type": "integer, optional, default -1",
                    "line": 194
                }
            },
            "returns": {},
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "dump_svmlight_file",
            "line": 376,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape = [n_samples, n_features]",
                    "line": 376
                },
                "y": {
                    "type": "{array-like, sparse matrix}, shape = [n_samples (, n_labels)]",
                    "line": 376
                },
                "f": {
                    "type": "string or file-like in binary mode",
                    "line": 376
                },
                "zero_based": {
                    "type": "boolean, optional",
                    "line": 376
                },
                "comment": {
                    "type": "string, optional",
                    "line": 376
                },
                "query_id": {
                    "type": "array-like, shape = [n_samples]",
                    "line": 376
                },
                "multilabel": {
                    "type": "boolean, optional",
                    "line": 377
                }
            },
            "returns": {},
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\twenty_newsgroups.py": [
        {
            "name": "download_20newsgroups",
            "line": 74,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "strip_newsgroup_header",
            "line": 100,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "strip_newsgroup_quoting",
            "line": 113,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "strip_newsgroup_footer",
            "line": 124,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "fetch_20newsgroups",
            "line": 144,
            "params": {
                "data_home": {
                    "type": "optional, default",
                    "line": 144
                },
                "subset": {
                    "type": "'train' or 'test', 'all', optional",
                    "line": 144
                },
                "categories": {
                    "type": "None or collection of string or unicode",
                    "line": 144
                },
                "shuffle": {
                    "type": "bool, optional",
                    "line": 145
                },
                "random_state": {
                    "type": "numpy random number generator or seed integer",
                    "line": 145
                },
                "remove": {
                    "type": "tuple",
                    "line": 146
                },
                "download_if_missing": {
                    "type": "optional, True by default",
                    "line": 147
                }
            },
            "returns": {},
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "fetch_20newsgroups_vectorized",
            "line": 277,
            "params": {
                "subset": {
                    "type": "'train' or 'test', 'all', optional",
                    "line": 277
                },
                "remove": {
                    "type": "tuple",
                    "line": 277
                },
                "data_home": {
                    "type": "optional, default",
                    "line": 277
                },
                "download_if_missing": {
                    "type": "optional, True by default",
                    "line": 278
                }
            },
            "returns": {
                "bunch": "Bunch object"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\__init__.py": [],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_20news.py": [
        {
            "name": "test_20news_length_consistency",
            "line": 42,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_base.py": [
        {
            "name": "teardown_module",
            "line": 43,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_covtype.py": [],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_kddcup99.py": [],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_lfw.py": [
        {
            "name": "setup_module",
            "line": 49,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "teardown_module",
            "line": 105,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_mldata.py": [
        {
            "name": "test_download",
            "line": 45,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_rcv1.py": [],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_samples_generator.py": [
        {
            "name": "test_make_classification_informative_features",
            "line": 65,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\datasets\\tests\\test_svmlight_format.py": [],
    "../scikit-learn-master/sklearn\\datasets\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\base.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\dict_learning.py": [
        {
            "name": "_sparse_encode",
            "line": 27,
            "params": {
                "X": {
                    "type": "array of shape (n_samples, n_features)",
                    "line": 27
                },
                "dictionary": {
                    "type": "array of shape (n_components, n_features)",
                    "line": 27
                },
                "gram": {
                    "type": "None | array, shape=(n_components, n_components)",
                    "line": 27
                },
                "cov": {
                    "type": "array, shape=(n_components, n_samples)",
                    "line": 27
                },
                "algorithm": {
                    "type": "{'lasso_lars', 'lasso_cd', 'lars', 'omp', 'threshold'}",
                    "line": 27
                },
                "regularization": {
                    "type": "int | float",
                    "line": 28
                },
                "copy_cov": {
                    "type": "boolean, optional",
                    "line": 28
                },
                "init": {
                    "type": "array of shape (n_samples, n_components)",
                    "line": 29
                },
                "max_iter": {
                    "type": "int, 1000 by default",
                    "line": 29
                },
                "check_input": {
                    "type": "boolean, optional",
                    "line": 29
                },
                "verbose": {
                    "type": "int",
                    "line": 29
                }
            },
            "returns": {
                "code": "array of shape (n_components, n_features)"
            },
            "count": {
                "total_params": 11,
                "missed_params": 0
            }
        },
        {
            "name": "sparse_encode",
            "line": 171,
            "params": {
                "X": {
                    "type": "array of shape (n_samples, n_features)",
                    "line": 171
                },
                "dictionary": {
                    "type": "array of shape (n_components, n_features)",
                    "line": 171
                },
                "gram": {
                    "type": "array, shape=(n_components, n_components)",
                    "line": 171
                },
                "cov": {
                    "type": "array, shape=(n_components, n_samples)",
                    "line": 171
                },
                "algorithm": {
                    "type": "{'lasso_lars', 'lasso_cd', 'lars', 'omp', 'threshold'}",
                    "line": 171
                },
                "n_nonzero_coefs": {
                    "type": "int, 0.1 * n_features by default",
                    "line": 172
                },
                "alpha": {
                    "type": "float, 1. by default",
                    "line": 172
                },
                "copy_cov": {
                    "type": "boolean, optional",
                    "line": 172
                },
                "init": {
                    "type": "array of shape (n_samples, n_components)",
                    "line": 172
                },
                "max_iter": {
                    "type": "int, 1000 by default",
                    "line": 173
                },
                "n_jobs": {
                    "type": "int, optional",
                    "line": 173
                },
                "check_input": {
                    "type": "boolean, optional",
                    "line": 173
                },
                "verbose": {
                    "type": "int, optional",
                    "line": 173
                }
            },
            "returns": {
                "code": "array of shape (n_samples, n_components)"
            },
            "count": {
                "total_params": 13,
                "missed_params": 0
            }
        },
        {
            "name": "_update_dict",
            "line": 312,
            "params": {
                "dictionary": {
                    "type": "array of shape (n_features, n_components)",
                    "line": 312
                },
                "Y": {
                    "type": "array of shape (n_features, n_samples)",
                    "line": 312
                },
                "code": {
                    "type": "array of shape (n_components, n_samples)",
                    "line": 312
                },
                "verbose": {
                    "type": "",
                    "line": 312
                },
                "return_r2": {
                    "type": "bool",
                    "line": 312
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 313
                }
            },
            "returns": {
                "dictionary": "array of shape (n_features, n_components)"
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "dict_learning",
            "line": 387,
            "params": {
                "X": {
                    "type": "array of shape (n_samples, n_features)",
                    "line": 387
                },
                "n_components": {
                    "type": "int,",
                    "line": 387
                },
                "alpha": {
                    "type": "int,",
                    "line": 387
                },
                "max_iter": {
                    "type": "int,",
                    "line": 387
                },
                "tol": {
                    "type": "float,",
                    "line": 387
                },
                "method": {
                    "type": "{'lars', 'cd'}",
                    "line": 388
                },
                "n_jobs": {
                    "type": "int,",
                    "line": 388
                },
                "dict_init": {
                    "type": "array of shape (n_components, n_features),",
                    "line": 388
                },
                "code_init": {
                    "type": "array of shape (n_samples, n_components),",
                    "line": 388
                },
                "callback": {
                    "type": "callable or None, optional (default",
                    "line": 389
                },
                "verbose": {
                    "type": "bool, optional (default",
                    "line": 389
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 389
                },
                "return_n_iter": {
                    "type": "bool",
                    "line": 390
                }
            },
            "returns": {
                "code": "array of shape (n_samples, n_components)",
                "dictionary": "array of shape (n_components, n_features),",
                "errors": "array",
                "n_iter": "int"
            },
            "count": {
                "total_params": 13,
                "missed_params": 0
            }
        },
        {
            "name": "dict_learning_online",
            "line": 561,
            "params": {
                "X": {
                    "type": "array of shape (n_samples, n_features)",
                    "line": 561
                },
                "n_components": {
                    "type": "int,",
                    "line": 561
                },
                "alpha": {
                    "type": "float,",
                    "line": 561
                },
                "n_iter": {
                    "type": "int,",
                    "line": 561
                },
                "return_code": {
                    "type": "boolean,",
                    "line": 562
                },
                "dict_init": {
                    "type": "array of shape (n_components, n_features),",
                    "line": 562
                },
                "callback": {
                    "type": "callable or None, optional (default",
                    "line": 562
                },
                "batch_size": {
                    "type": "int,",
                    "line": 563
                },
                "verbose": {
                    "type": "bool, optional (default",
                    "line": 563
                },
                "shuffle": {
                    "type": "boolean,",
                    "line": 563
                },
                "n_jobs": {
                    "type": "int,",
                    "line": 563
                },
                "method": {
                    "type": "{'lars', 'cd'}",
                    "line": 564
                },
                "iter_offset": {
                    "type": "int, default 0",
                    "line": 564
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 564
                },
                "return_inner_stats": {
                    "type": "boolean, optional",
                    "line": 565
                },
                "inner_stats": {
                    "type": "tuple of (A, B) ndarrays",
                    "line": 565
                },
                "return_n_iter": {
                    "type": "bool",
                    "line": 566
                }
            },
            "returns": {
                "code": "array of shape (n_samples, n_components),",
                "dictionary": "array of shape (n_components, n_features),",
                "n_iter": "int"
            },
            "count": {
                "total_params": 17,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\decomposition\\factor_analysis.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\fastica_.py": [
        {
            "name": "_gs_decorrelation",
            "line": 28,
            "params": {
                "w": {
                    "type": "ndarray of shape(n)",
                    "line": 28
                },
                "W": {
                    "type": "ndarray of shape(p, n)",
                    "line": 28
                },
                "j": {
                    "type": "int < p",
                    "line": 28
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "_sym_decorrelation",
            "line": 53,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_ica_def",
            "line": 63,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 6,
                "missed_params": 6
            }
        },
        {
            "name": "_ica_par",
            "line": 98,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 6,
                "missed_params": 6
            }
        },
        {
            "name": "fastica",
            "line": 149,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 149
                },
                "n_components": {
                    "type": "int, optional",
                    "line": 149
                },
                "algorithm": {
                    "type": "{'parallel', 'deflation'}, optional",
                    "line": 149
                },
                "whiten": {
                    "type": "boolean, optional",
                    "line": 149
                },
                "fun": {
                    "type": "string or function, optional. Default",
                    "line": 150
                },
                "fun_args": {
                    "type": "dictionary, optional",
                    "line": 150
                },
                "max_iter": {
                    "type": "int, optional",
                    "line": 150
                },
                "tol": {
                    "type": "float, optional",
                    "line": 150
                },
                "w_init": {
                    "type": "(n_components, n_components) array, optional",
                    "line": 150
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 151
                },
                "return_X_mean": {
                    "type": "bool, optional",
                    "line": 151
                },
                "compute_sources": {
                    "type": "bool, optional",
                    "line": 151
                },
                "return_n_iter": {
                    "type": "bool, optional",
                    "line": 152
                }
            },
            "returns": {
                "K": "array, shape (n_components, n_features) | None.",
                "W": "array, shape (n_components, n_components)",
                "by": "",
                "S": "array, shape (n_samples, n_components) | None",
                "X_mean": "array, shape (n_features, )",
                "n_iter": "int"
            },
            "count": {
                "total_params": 13,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\decomposition\\incremental_pca.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\kernel_pca.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\nmf.py": [
        {
            "name": "norm",
            "line": 33,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "trace_dot",
            "line": 41,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_beta_divergence",
            "line": 56,
            "params": {
                "X": {
                    "type": "float or array-like, shape (n_samples, n_features)",
                    "line": 56
                },
                "W": {
                    "type": "float or dense array-like, shape (n_samples, n_components)",
                    "line": 56
                },
                "H": {
                    "type": "float or dense array-like, shape (n_components, n_features)",
                    "line": 56
                },
                "beta": {
                    "type": "float, string in {'frobenius', 'kullback-leibler', 'itakura-saito'}",
                    "line": 56
                },
                "square_root": {
                    "type": "boolean, default False",
                    "line": 56
                }
            },
            "returns": {
                "res": "float"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "_special_sparse_dot",
            "line": 161,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_compute_regularization",
            "line": 172,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_beta_loss_to_float",
            "line": 218,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_initialize_nmf",
            "line": 233,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 233
                },
                "n_components": {
                    "type": "integer",
                    "line": 233
                },
                "init": {
                    "type": "None | 'random' | 'nndsvd' | 'nndsvda' | 'nndsvdar'",
                    "line": 233
                },
                "eps": {
                    "type": "float",
                    "line": 233
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default",
                    "line": 234
                }
            },
            "returns": {
                "W": "array-like, shape (n_samples, n_components)",
                "H": "array-like, shape (n_components, n_features)"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "_update_coordinate_descent",
            "line": 371,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 7,
                "missed_params": 7
            }
        },
        {
            "name": "_fit_coordinate_descent",
            "line": 402,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 402
                },
                "W": {
                    "type": "array-like, shape (n_samples, n_components)",
                    "line": 402
                },
                "H": {
                    "type": "array-like, shape (n_components, n_features)",
                    "line": 402
                },
                "tol": {
                    "type": "float, default",
                    "line": 402
                },
                "max_iter": {
                    "type": "integer, default",
                    "line": 402
                },
                "l1_reg_W": {
                    "type": "double, default",
                    "line": 402
                },
                "l1_reg_H": {
                    "type": "double, default",
                    "line": 403
                },
                "l2_reg_W": {
                    "type": "double, default",
                    "line": 403
                },
                "l2_reg_H": {
                    "type": "double, default",
                    "line": 403
                },
                "update_H": {
                    "type": "boolean, default",
                    "line": 403
                },
                "verbose": {
                    "type": "integer, default",
                    "line": 404
                },
                "shuffle": {
                    "type": "boolean, default",
                    "line": 404
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default",
                    "line": 404
                }
            },
            "returns": {
                "W": "array-like, shape (n_samples, n_components)",
                "H": "array-like, shape (n_components, n_features)",
                "n_iter": "int"
            },
            "count": {
                "total_params": 13,
                "missed_params": 0
            }
        },
        {
            "name": "_multiplicative_update_w",
            "line": 508,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 11,
                "missed_params": 11
            }
        },
        {
            "name": "_multiplicative_update_h",
            "line": 603,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 7,
                "missed_params": 7
            }
        },
        {
            "name": "_fit_multiplicative_update",
            "line": 685,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 685
                },
                "W": {
                    "type": "array-like, shape (n_samples, n_components)",
                    "line": 685
                },
                "H": {
                    "type": "array-like, shape (n_components, n_features)",
                    "line": 685
                },
                "beta_loss": {
                    "type": "float or string, default 'frobenius'",
                    "line": 685
                },
                "max_iter": {
                    "type": "integer, default",
                    "line": 686
                },
                "tol": {
                    "type": "float, default",
                    "line": 686
                },
                "l1_reg_W": {
                    "type": "double, default",
                    "line": 687
                },
                "l1_reg_H": {
                    "type": "double, default",
                    "line": 687
                },
                "l2_reg_W": {
                    "type": "double, default",
                    "line": 687
                },
                "l2_reg_H": {
                    "type": "double, default",
                    "line": 687
                },
                "update_H": {
                    "type": "boolean, default",
                    "line": 688
                },
                "verbose": {
                    "type": "integer, default",
                    "line": 688
                }
            },
            "returns": {
                "W": "array, shape (n_samples, n_components)",
                "H": "array, shape (n_components, n_features)",
                "n_iter": "int"
            },
            "count": {
                "total_params": 12,
                "missed_params": 0
            }
        },
        {
            "name": "non_negative_factorization",
            "line": 819,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 819
                },
                "W": {
                    "type": "array-like, shape (n_samples, n_components)",
                    "line": 819
                },
                "H": {
                    "type": "array-like, shape (n_components, n_features)",
                    "line": 819
                },
                "n_components": {
                    "type": "integer",
                    "line": 819
                },
                "init": {
                    "type": "None | 'random' | 'nndsvd' | 'nndsvda' | 'nndsvdar' | 'custom'",
                    "line": 820
                },
                "update_H": {
                    "type": "boolean, default",
                    "line": 820
                },
                "solver": {
                    "type": "'cd' | 'mu'",
                    "line": 820
                },
                "beta_loss": {
                    "type": "float or string, default 'frobenius'",
                    "line": 821
                },
                "tol": {
                    "type": "float, default",
                    "line": 821
                },
                "max_iter": {
                    "type": "integer, default",
                    "line": 822
                },
                "alpha": {
                    "type": "double, default",
                    "line": 822
                },
                "l1_ratio": {
                    "type": "double, default",
                    "line": 822
                },
                "regularization": {
                    "type": "'both' | 'components' | 'transformation' | None",
                    "line": 823
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default",
                    "line": 823
                },
                "verbose": {
                    "type": "integer, default",
                    "line": 824
                },
                "shuffle": {
                    "type": "boolean, default",
                    "line": 824
                }
            },
            "returns": {
                "W": "array-like, shape (n_samples, n_components)",
                "H": "array-like, shape (n_components, n_features)",
                "n_iter": "int"
            },
            "count": {
                "total_params": 16,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\decomposition\\online_lda.py": [
        {
            "name": "_update_doc_distribution",
            "line": 34,
            "params": {
                "X": {
                    "type": "array-like or sparse matrix, shape=(n_samples, n_features)",
                    "line": 34
                },
                "exp_topic_word_distr": {
                    "type": "dense matrix, shape=(n_topics, n_features)",
                    "line": 34
                },
                "doc_topic_prior": {
                    "type": "float",
                    "line": 34
                },
                "max_iters": {
                    "type": "int",
                    "line": 35
                },
                "mean_change_tol": {
                    "type": "float",
                    "line": 36
                },
                "cal_sstats": {
                    "type": "boolean",
                    "line": 36
                },
                "random_state": {
                    "type": "RandomState instance or None",
                    "line": 36
                }
            },
            "returns": {},
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\decomposition\\pca.py": [
        {
            "name": "_assess_dimension_",
            "line": 33,
            "params": {
                "spectrum": {
                    "type": "array of shape (n)",
                    "line": 33
                },
                "rank": {
                    "type": "int",
                    "line": 33
                },
                "n_samples": {
                    "type": "int",
                    "line": 33
                },
                "n_features": {
                    "type": "int",
                    "line": 33
                }
            },
            "returns": {
                "ll": "float,"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "_infer_dimension_",
            "line": 95,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\decomposition\\setup.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\sparse_pca.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\truncated_svd.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\__init__.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_dict_learning.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_factor_analysis.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_fastica.py": [
        {
            "name": "center_and_norm",
            "line": 23,
            "params": {
                "x": {
                    "type": "ndarray",
                    "line": 23
                },
                "axis": {
                    "type": "int, optional",
                    "line": 23
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_incremental_pca.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_kernel_pca.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_nmf.py": [
        {
            "name": "_beta_divergence_dense",
            "line": 234,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        }
    ],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_online_lda.py": [
        {
            "name": "test_lda_empty_docs",
            "line": 361,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_dirichlet_expectation",
            "line": 370,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_pca.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_sparse_pca.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\test_truncated_svd.py": [],
    "../scikit-learn-master/sklearn\\decomposition\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\bagging.py": [
        {
            "name": "_generate_indices",
            "line": 36,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "_generate_bagging_indices",
            "line": 48,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 7,
                "missed_params": 7
            }
        },
        {
            "name": "_parallel_build_estimators",
            "line": 64,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 8,
                "missed_params": 8
            }
        },
        {
            "name": "_parallel_predict_proba",
            "line": 124,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "_parallel_predict_log_proba",
            "line": 150,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "_parallel_decision_function",
            "line": 175,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_parallel_predict_regression",
            "line": 182,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\ensemble\\base.py": [
        {
            "name": "_set_random_states",
            "line": 21,
            "params": {
                "estimator": {
                    "type": "estimator supporting get/set_params",
                    "line": 21
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 21
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "_partition_estimators",
            "line": 150,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\ensemble\\forest.py": [
        {
            "name": "_generate_sample_indices",
            "line": 77,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_generate_unsampled_indices",
            "line": 85,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_parallel_build_trees",
            "line": 96,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 9,
                "missed_params": 9
            }
        }
    ],
    "../scikit-learn-master/sklearn\\ensemble\\gradient_boosting.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\iforest.py": [
        {
            "name": "_average_path_length",
            "line": 289,
            "params": {
                "n_samples_leaf": {
                    "type": "array-like of shape (n_samples, n_estimators), or int.",
                    "line": 289
                }
            },
            "returns": {
                "average_path_length": "array, same shape as n_samples_leaf"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\ensemble\\partial_dependence.py": [
        {
            "name": "_grid_from_X",
            "line": 24,
            "params": {
                "X": {
                    "type": "ndarray",
                    "line": 24
                },
                "percentiles": {
                    "type": "tuple of floats",
                    "line": 24
                },
                "grid_resolution": {
                    "type": "int",
                    "line": 24
                }
            },
            "returns": {
                "grid": "ndarray",
                "axes": "seq of ndarray"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "partial_dependence",
            "line": 72,
            "params": {
                "gbrt": {
                    "type": "BaseGradientBoosting",
                    "line": 72
                },
                "target_variables": {
                    "type": "array-like, dtype=int",
                    "line": 72
                },
                "grid": {
                    "type": "array-like, shape=(n_points, len(target_variables))",
                    "line": 72
                },
                "X": {
                    "type": "array-like, shape=(n_samples, n_features)",
                    "line": 72
                },
                "percentiles": {
                    "type": "(low, high), default=(0.05, 0.95)",
                    "line": 73
                },
                "grid_resolution": {
                    "type": "int, default=100",
                    "line": 73
                }
            },
            "returns": {
                "pdp": "array, shape=(n_classes, n_points)",
                "axes": "seq of ndarray or None"
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "plot_partial_dependence",
            "line": 166,
            "params": {
                "gbrt": {
                    "type": "BaseGradientBoosting",
                    "line": 166
                },
                "X": {
                    "type": "array-like, shape=(n_samples, n_features)",
                    "line": 166
                },
                "features": {
                    "type": "seq of ints, strings, or tuples of ints or strings",
                    "line": 166
                },
                "feature_names": {
                    "type": "seq of str",
                    "line": 166
                },
                "label": {
                    "type": "object",
                    "line": 167
                },
                "n_cols": {
                    "type": "int",
                    "line": 167
                },
                "grid_resolution": {
                    "type": "int, default=100",
                    "line": 167
                },
                "percentiles": {
                    "type": "(low, high), default=(0.05, 0.95)",
                    "line": 168
                },
                "n_jobs": {
                    "type": "int",
                    "line": 168
                },
                "verbose": {
                    "type": "int",
                    "line": 169
                },
                "ax": {
                    "type": "Matplotlib axis object, default None",
                    "line": 169
                },
                "line_kw": {
                    "type": "dict",
                    "line": 169
                },
                "contour_kw": {
                    "type": "dict",
                    "line": 170
                }
            },
            "returns": {
                "fig": "figure",
                "axs": "seq of Axis objects"
            },
            "count": {
                "total_params": 13,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\ensemble\\setup.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\voting_classifier.py": [
        {
            "name": "_parallel_fit_estimator",
            "line": 27,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        }
    ],
    "../scikit-learn-master/sklearn\\ensemble\\weight_boosting.py": [
        {
            "name": "_samme_proba",
            "line": 277,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\ensemble\\__init__.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_bagging.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_base.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_forest.py": [
        {
            "name": "check_classification_toy",
            "line": 98,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "check_parallel",
            "line": 441,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_gradient_boosting.py": [
        {
            "name": "early_stopping_monitor",
            "line": 832,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_gradient_boosting_loss_functions.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_iforest.py": [
        {
            "name": "test_iforest",
            "line": 49,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_iforest_sparse",
            "line": 64,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_iforest_error",
            "line": 91,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_recalculate_max_depth",
            "line": 114,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_iforest_parallel_regression",
            "line": 137,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_iforest_performance",
            "line": 161,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_partial_dependence.py": [],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_voting_classifier.py": [
        {
            "name": "test_majority_label_iris",
            "line": 77,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_tie_situation",
            "line": 89,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_weights_iris",
            "line": 100,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_predict_on_toy_problem",
            "line": 113,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_predict_proba_on_toy_problem",
            "line": 145,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_multilabel",
            "line": 197,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_gridsearch",
            "line": 212,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_parallel_fit",
            "line": 229,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sample_weight",
            "line": 250,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sample_weight_kwargs",
            "line": 279,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_set_params",
            "line": 293,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_set_estimator_none",
            "line": 327,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_transform",
            "line": 396,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\test_weight_boosting.py": [
        {
            "name": "test_sample_weight_adaboost_regressor",
            "line": 468,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\ensemble\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\externals\\funcsigs.py": [
        {
            "name": "signature",
            "line": 52,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\setup.py": [],
    "../scikit-learn-master/sklearn\\externals\\six.py": [
        {
            "name": "_add_doc",
            "line": 69,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_import_module",
            "line": 74,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "add_move",
            "line": 338,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "remove_move",
            "line": 343,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "iterkeys",
            "line": 429,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "itervalues",
            "line": 433,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "iteritems",
            "line": 437,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "iterlists",
            "line": 441,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "with_metaclass",
            "line": 564,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "add_metaclass",
            "line": 568,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\test_externals_setup.py": [],
    "../scikit-learn-master/sklearn\\externals\\__init__.py": [],
    "../scikit-learn-master/sklearn\\externals\\joblib\\backports.py": [],
    "../scikit-learn-master/sklearn\\externals\\joblib\\disk.py": [
        {
            "name": "disk_used",
            "line": 18,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "memstr_to_bytes",
            "line": 34,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "mkdirp",
            "line": 48,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "rm_subdirs",
            "line": 64,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\format_stack.py": [
        {
            "name": "safe_repr",
            "line": 42,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "uniq_stable",
            "line": 76,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "fix_frame_records_filenames",
            "line": 98,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "format_exc",
            "line": 326,
            "params": {
                "etb": {
                    "type": "as returned by sys.exc_info",
                    "line": 326
                },
                "context": {
                    "type": "number of lines of the source file to plot",
                    "line": 326
                },
                "tb_offset": {
                    "type": "the number of stack frame not to use (0 = use all)",
                    "line": 326
                }
            },
            "returns": {},
            "count": {
                "total_params": 5,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\func_inspect.py": [
        {
            "name": "get_func_code",
            "line": 21,
            "params": {},
            "returns": {
                "func_code": "string",
                "source_file": "string",
                "first_line": "int"
            },
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_clean_win_chars",
            "line": 77,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "get_func_name",
            "line": 91,
            "params": {
                "func": {
                    "type": "callable",
                    "line": 91
                },
                "resolv_alias": {
                    "type": "boolean, optional",
                    "line": 91
                },
                "win_characters": {
                    "type": "boolean, optional",
                    "line": 91
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "getfullargspec",
            "line": 160,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_signature_str",
            "line": 186,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_function_called_str",
            "line": 196,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "filter_args",
            "line": 207,
            "params": {
                "func": {
                    "type": "callable",
                    "line": 207
                },
                "ignore_lst": {
                    "type": "list of strings",
                    "line": 207
                }
            },
            "returns": {
                "filtered_args": "list"
            },
            "count": {
                "total_params": 4,
                "missed_params": 2
            }
        },
        {
            "name": "format_call",
            "line": 350,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\hashing.py": [
        {
            "name": "hash",
            "line": 246,
            "params": {
                "hash_name": {
                    "type": "'md5' or 'sha1'",
                    "line": 246
                },
                "coerce_mmap": {
                    "type": "boolean",
                    "line": 246
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\logger.py": [
        {
            "name": "_squeeze_time",
            "line": 23,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\memory.py": [
        {
            "name": "extract_first_line",
            "line": 60,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_get_func_fullname",
            "line": 78,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_cache_key_to_dir",
            "line": 88,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_load_output",
            "line": 104,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 6,
                "missed_params": 6
            }
        },
        {
            "name": "_get_cache_items",
            "line": 142,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_get_cache_items_to_delete",
            "line": 177,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "concurrency_safe_write",
            "line": 206,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\my_exceptions.py": [],
    "../scikit-learn-master/sklearn\\externals\\joblib\\numpy_pickle.py": [
        {
            "name": "dump",
            "line": 353,
            "params": {
                "value": {
                    "type": "any Python object",
                    "line": 353
                },
                "filename": {
                    "type": "str or pathlib.Path",
                    "line": 353
                },
                "compress": {
                    "type": "int from 0 to 9 or bool or 2-tuple, optional",
                    "line": 353
                },
                "protocol": {
                    "type": "positive int",
                    "line": 353
                },
                "cache_size": {
                    "type": "positive int, optional",
                    "line": 353
                }
            },
            "returns": {
                "filenames": "list of strings"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "_unpickle",
            "line": 497,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "load",
            "line": 530,
            "params": {
                "filename": {
                    "type": "str or pathlib.Path",
                    "line": 530
                },
                "mmap_mode": {
                    "type": "{None, 'r+', 'r', 'w+', 'c'}, optional",
                    "line": 530
                }
            },
            "returns": {
                "result": "any Python object"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\numpy_pickle_compat.py": [
        {
            "name": "hex_str",
            "line": 13,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "read_zfile",
            "line": 29,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "write_zfile",
            "line": 62,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "load_compatibility",
            "line": 193,
            "params": {
                "filename": {
                    "type": "string",
                    "line": 193
                }
            },
            "returns": {
                "result": "any Python object"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\numpy_pickle_utils.py": [
        {
            "name": "_is_raw_file",
            "line": 79,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_detect_compressor",
            "line": 90,
            "params": {
                "fileobj": {
                    "type": "file object",
                    "line": 90
                }
            },
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "_buffered_read_file",
            "line": 127,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_buffered_write_file",
            "line": 137,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_read_fileobject",
            "line": 149,
            "params": {
                "fileobj": {
                    "type": "file object",
                    "line": 150
                },
                "filename": {
                    "type": "str",
                    "line": 150
                },
                "mmap_mode": {
                    "type": "str",
                    "line": 150
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "_write_fileobject",
            "line": 239,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_read_bytes",
            "line": 609,
            "params": {
                "fp": {
                    "type": "file-like object",
                    "line": 609
                },
                "size": {
                    "type": "int",
                    "line": 609
                },
                "error_template": {
                    "type": "str",
                    "line": 609
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\parallel.py": [
        {
            "name": "get_active_backend",
            "line": 56,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "parallel_backend",
            "line": 67,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "cpu_count",
            "line": 140,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "_verbosity_filter",
            "line": 150,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "delayed",
            "line": 169,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "register_parallel_backend",
            "line": 223,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "effective_n_jobs",
            "line": 245,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\pool.py": [
        {
            "name": "_get_backing_memmap",
            "line": 79,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "has_shareable_memory",
            "line": 96,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_strided_from_memmap",
            "line": 101,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 8,
                "missed_params": 8
            }
        },
        {
            "name": "_reduce_memmap_backed",
            "line": 120,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "reduce_memmap",
            "line": 156,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "delete_folder",
            "line": 432,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\_compat.py": [
        {
            "name": "with_metaclass",
            "line": 17,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\externals\\joblib\\_memory_helpers.py": [],
    "../scikit-learn-master/sklearn\\externals\\joblib\\_multiprocessing_helpers.py": [],
    "../scikit-learn-master/sklearn\\externals\\joblib\\_parallel_backends.py": [],
    "../scikit-learn-master/sklearn\\externals\\joblib\\__init__.py": [],
    "../scikit-learn-master/sklearn\\feature_extraction\\dict_vectorizer.py": [
        {
            "name": "_tosequence",
            "line": 18,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\hashing.py": [
        {
            "name": "_iteritems",
            "line": 14,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\image.py": [
        {
            "name": "_make_edges_3d",
            "line": 31,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_mask_edges_weights",
            "line": 66,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_to_graph",
            "line": 87,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 7,
                "missed_params": 7
            }
        },
        {
            "name": "img_to_graph",
            "line": 132,
            "params": {
                "img": {
                    "type": "ndarray, 2D or 3D",
                    "line": 132
                },
                "mask": {
                    "type": "ndarray of booleans, optional",
                    "line": 132
                },
                "return_as": {
                    "type": "np.ndarray or a sparse matrix class, optional",
                    "line": 132
                },
                "dtype": {
                    "type": "None or dtype, optional",
                    "line": 132
                }
            },
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "grid_to_graph",
            "line": 166,
            "params": {
                "n_x": {
                    "type": "int",
                    "line": 166
                },
                "n_y": {
                    "type": "int",
                    "line": 166
                },
                "n_z": {
                    "type": "int, optional, default 1",
                    "line": 166
                },
                "mask": {
                    "type": "ndarray of booleans, optional",
                    "line": 166
                },
                "return_as": {
                    "type": "np.ndarray or a sparse matrix class, optional",
                    "line": 166
                },
                "dtype": {
                    "type": "dtype, optional, default int",
                    "line": 167
                }
            },
            "returns": {},
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "_compute_n_patches",
            "line": 204,
            "params": {
                "i_h": {
                    "type": "int",
                    "line": 204
                },
                "i_w": {
                    "type": "int",
                    "line": 204
                },
                "p_h": {
                    "type": "int",
                    "line": 204
                },
                "p_w": {
                    "type": "int",
                    "line": 204
                },
                "max_patches": {
                    "type": "integer or float, optional default is None",
                    "line": 204
                }
            },
            "returns": {},
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "extract_patches",
            "line": 241,
            "params": {
                "arr": {
                    "type": "ndarray",
                    "line": 241
                },
                "patch_shape": {
                    "type": "integer or tuple of length arr.ndim",
                    "line": 241
                },
                "extraction_step": {
                    "type": "integer or tuple of length arr.ndim",
                    "line": 241
                }
            },
            "returns": {
                "patches": ""
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "extract_patches_2d",
            "line": 299,
            "params": {
                "image": {
                    "type": "array, shape = (image_height, image_width) or",
                    "line": 299
                },
                "patch_size": {
                    "type": "tuple of ints (patch_height, patch_width)",
                    "line": 299
                },
                "max_patches": {
                    "type": "integer or float, optional default is None",
                    "line": 299
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 299
                }
            },
            "returns": {
                "patches": "array, shape = (n_patches, patch_height, patch_width) or"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "reconstruct_from_patches_2d",
            "line": 395,
            "params": {
                "patches": {
                    "type": "array, shape = (n_patches, patch_height, patch_width) or",
                    "line": 395
                },
                "image_size": {
                    "type": "tuple of ints (image_height, image_width) or",
                    "line": 395
                }
            },
            "returns": {
                "image": "array, shape = image_size"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\setup.py": [],
    "../scikit-learn-master/sklearn\\feature_extraction\\stop_words.py": [],
    "../scikit-learn-master/sklearn\\feature_extraction\\text.py": [
        {
            "name": "strip_accents_unicode",
            "line": 43,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "strip_accents_ascii",
            "line": 63,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "strip_tags",
            "line": 78,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_document_frequency",
            "line": 533,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_make_int_array",
            "line": 966,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\feature_extraction\\__init__.py": [],
    "../scikit-learn-master/sklearn\\feature_extraction\\tests\\test_dict_vectorizer.py": [],
    "../scikit-learn-master/sklearn\\feature_extraction\\tests\\test_feature_hasher.py": [],
    "../scikit-learn-master/sklearn\\feature_extraction\\tests\\test_image.py": [],
    "../scikit-learn-master/sklearn\\feature_extraction\\tests\\test_text.py": [],
    "../scikit-learn-master/sklearn\\feature_extraction\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\base.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\from_model.py": [
        {
            "name": "_get_feature_importances",
            "line": 14,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_calculate_threshold",
            "line": 36,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\mutual_info_.py": [
        {
            "name": "_compute_mi_cc",
            "line": 18,
            "params": {
                "y": {
                    "type": "ndarray, shape (n_samples,)",
                    "line": 18
                },
                "n_neighbors": {
                    "type": "int",
                    "line": 18
                }
            },
            "returns": {
                "mi": "float"
            },
            "count": {
                "total_params": 3,
                "missed_params": 1
            }
        },
        {
            "name": "_compute_mi_cd",
            "line": 79,
            "params": {
                "c": {
                    "type": "ndarray, shape (n_samples,)",
                    "line": 79
                },
                "d": {
                    "type": "ndarray, shape (n_samples,)",
                    "line": 79
                },
                "n_neighbors": {
                    "type": "int",
                    "line": 79
                }
            },
            "returns": {
                "mi": "float"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "_compute_mi",
            "line": 150,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 5,
                "missed_params": 5
            }
        },
        {
            "name": "_iterate_columns",
            "line": 166,
            "params": {
                "X": {
                    "type": "ndarray or csc_matrix, shape (n_samples, n_features)",
                    "line": 166
                },
                "columns": {
                    "type": "iterable or None, default None",
                    "line": 166
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "_estimate_mi",
            "line": 196,
            "params": {
                "X": {
                    "type": "array_like or sparse matrix, shape (n_samples, n_features)",
                    "line": 196
                },
                "y": {
                    "type": "array_like, shape (n_samples,)",
                    "line": 196
                },
                "discrete_features": {
                    "type": "{'auto', bool, array_like}, default 'auto'",
                    "line": 196
                },
                "discrete_target": {
                    "type": "bool, default False",
                    "line": 196
                },
                "n_neighbors": {
                    "type": "int, default 3",
                    "line": 197
                },
                "copy": {
                    "type": "bool, default True",
                    "line": 197
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default None",
                    "line": 197
                }
            },
            "returns": {
                "mi": "ndarray, shape (n_features,)"
            },
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "mutual_info_regression",
            "line": 294,
            "params": {
                "X": {
                    "type": "array_like or sparse matrix, shape (n_samples, n_features)",
                    "line": 294
                },
                "y": {
                    "type": "array_like, shape (n_samples,)",
                    "line": 294
                },
                "discrete_features": {
                    "type": "{'auto', bool, array_like}, default 'auto'",
                    "line": 294
                },
                "n_neighbors": {
                    "type": "int, default 3",
                    "line": 294
                },
                "copy": {
                    "type": "bool, default True",
                    "line": 295
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default None",
                    "line": 295
                }
            },
            "returns": {
                "mi": "ndarray, shape (n_features,)"
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "mutual_info_classif",
            "line": 373,
            "params": {
                "X": {
                    "type": "array_like or sparse matrix, shape (n_samples, n_features)",
                    "line": 373
                },
                "y": {
                    "type": "array_like, shape (n_samples,)",
                    "line": 373
                },
                "discrete_features": {
                    "type": "{'auto', bool, array_like}, default 'auto'",
                    "line": 373
                },
                "n_neighbors": {
                    "type": "int, default 3",
                    "line": 373
                },
                "copy": {
                    "type": "bool, default True",
                    "line": 374
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default None",
                    "line": 374
                }
            },
            "returns": {
                "mi": "ndarray, shape (n_features,)"
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\rfe.py": [
        {
            "name": "_rfe_single_fit",
            "line": 24,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 7,
                "missed_params": 7
            }
        }
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\univariate_selection.py": [
        {
            "name": "_clean_nans",
            "line": 23,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "f_oneway",
            "line": 42,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "f_classif",
            "line": 121,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix} shape = [n_samples, n_features]",
                    "line": 121
                },
                "y": {
                    "type": "array of shape(n_samples)",
                    "line": 121
                }
            },
            "returns": {
                "F": "array, shape = [n_features,]",
                "pval": "array, shape = [n_features,]"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "_chisquare",
            "line": 152,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "chi2",
            "line": 171,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape = (n_samples, n_features_in)",
                    "line": 171
                },
                "y": {
                    "type": "array-like, shape = (n_samples,)",
                    "line": 171
                }
            },
            "returns": {
                "chi2": "array, shape = (n_features,)",
                "pval": "array, shape = (n_features,)"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "f_regression",
            "line": 230,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}  shape = (n_samples, n_features)",
                    "line": 230
                },
                "y": {
                    "type": "array of shape(n_samples).",
                    "line": 230
                },
                "center": {
                    "type": "True, bool,",
                    "line": 230
                }
            },
            "returns": {
                "F": "array, shape=(n_features,)",
                "pval": "array, shape=(n_features,)"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\variance_threshold.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\__init__.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_base.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_chi2.py": [
        {
            "name": "mkchi2",
            "line": 29,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_feature_select.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_from_model.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_mutual_info.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_rfe.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\test_variance_threshold.py": [],
    "../scikit-learn-master/sklearn\\feature_selection\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\gaussian_process\\correlation_models.py": [
        {
            "name": "absolute_exponential",
            "line": 15,
            "params": {
                "theta": {
                    "type": "array_like",
                    "line": 15
                },
                "d": {
                    "type": "array_like",
                    "line": 15
                }
            },
            "returns": {
                "r": "array_like"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "squared_exponential",
            "line": 57,
            "params": {
                "theta": {
                    "type": "array_like",
                    "line": 57
                },
                "d": {
                    "type": "array_like",
                    "line": 57
                }
            },
            "returns": {
                "r": "array_like"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "generalized_exponential",
            "line": 100,
            "params": {
                "theta": {
                    "type": "array_like",
                    "line": 100
                },
                "d": {
                    "type": "array_like",
                    "line": 100
                }
            },
            "returns": {
                "r": "array_like"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "pure_nugget",
            "line": 150,
            "params": {
                "theta": {
                    "type": "array_like",
                    "line": 150
                },
                "d": {
                    "type": "array_like",
                    "line": 150
                }
            },
            "returns": {
                "r": "array_like"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "cubic",
            "line": 187,
            "params": {
                "theta": {
                    "type": "array_like",
                    "line": 187
                },
                "d": {
                    "type": "array_like",
                    "line": 187
                }
            },
            "returns": {
                "r": "array_like"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "linear",
            "line": 237,
            "params": {
                "theta": {
                    "type": "array_like",
                    "line": 237
                },
                "d": {
                    "type": "array_like",
                    "line": 237
                }
            },
            "returns": {
                "r": "array_like"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\gaussian_process.py": [
        {
            "name": "l1_cross_distances",
            "line": 23,
            "params": {
                "X": {
                    "type": "array_like",
                    "line": 25
                }
            },
            "returns": {
                "D": "D[k] = np.abs(X[ij[k, 0]] - Y[ij[k, 1]]).",
                "ij": "arrays with shape (n_samples * (n_samples - 1) / 2, 2)"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\gpc.py": [],
    "../scikit-learn-master/sklearn\\gaussian_process\\gpr.py": [],
    "../scikit-learn-master/sklearn\\gaussian_process\\kernels.py": [],
    "../scikit-learn-master/sklearn\\gaussian_process\\regression_models.py": [
        {
            "name": "constant",
            "line": 15,
            "params": {
                "x": {
                    "type": "array_like",
                    "line": 15
                }
            },
            "returns": {
                "f": "array_like"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "linear",
            "line": 39,
            "params": {
                "x": {
                    "type": "array_like",
                    "line": 39
                }
            },
            "returns": {
                "f": "array_like"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "quadratic",
            "line": 63,
            "params": {
                "x": {
                    "type": "array_like",
                    "line": 63
                }
            },
            "returns": {
                "f": "array_like"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\gaussian_process\\__init__.py": [],
    "../scikit-learn-master/sklearn\\gaussian_process\\tests\\test_gaussian_process.py": [],
    "../scikit-learn-master/sklearn\\gaussian_process\\tests\\test_gpc.py": [],
    "../scikit-learn-master/sklearn\\gaussian_process\\tests\\test_gpr.py": [],
    "../scikit-learn-master/sklearn\\gaussian_process\\tests\\test_kernels.py": [],
    "../scikit-learn-master/sklearn\\gaussian_process\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\base.py": [
        {
            "name": "make_dataset",
            "line": 48,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "sparse_center_data",
            "line": 70,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "center_data",
            "line": 108,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 6,
                "missed_params": 6
            }
        },
        {
            "name": "_preprocess_data",
            "line": 144,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 7,
                "missed_params": 7
            }
        },
        {
            "name": "_rescale_data",
            "line": 217,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_pre_fit",
            "line": 518,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 7,
                "missed_params": 7
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\bayes.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\coordinate_descent.py": [
        {
            "name": "_alpha_grid",
            "line": 35,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 35
                },
                "y": {
                    "type": "ndarray, shape (n_samples,)",
                    "line": 35
                },
                "Xy": {
                    "type": "array-like, optional",
                    "line": 35
                },
                "l1_ratio": {
                    "type": "float",
                    "line": 35
                },
                "fit_intercept": {
                    "type": "boolean, default True",
                    "line": 35
                },
                "eps": {
                    "type": "float, optional",
                    "line": 36
                },
                "n_alphas": {
                    "type": "int, optional",
                    "line": 36
                },
                "normalize": {
                    "type": "boolean, optional, default False",
                    "line": 36
                },
                "copy_X": {
                    "type": "boolean, optional, default True",
                    "line": 36
                }
            },
            "returns": {},
            "count": {
                "total_params": 9,
                "missed_params": 0
            }
        },
        {
            "name": "lasso_path",
            "line": 126,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 126
                },
                "y": {
                    "type": "ndarray, shape (n_samples,), or (n_samples, n_outputs)",
                    "line": 126
                },
                "eps": {
                    "type": "float, optional",
                    "line": 126
                },
                "n_alphas": {
                    "type": "int, optional",
                    "line": 126
                },
                "alphas": {
                    "type": "ndarray, optional",
                    "line": 126
                },
                "precompute": {
                    "type": "True | False | 'auto' | array-like",
                    "line": 127
                },
                "Xy": {
                    "type": "array-like, optional",
                    "line": 127
                },
                "copy_X": {
                    "type": "boolean, optional, default True",
                    "line": 127
                },
                "coef_init": {
                    "type": "array, shape (n_features, ) | None",
                    "line": 127
                },
                "verbose": {
                    "type": "bool or integer",
                    "line": 128
                },
                "return_n_iter": {
                    "type": "bool",
                    "line": 128
                },
                "positive": {
                    "type": "bool, default False",
                    "line": 128
                }
            },
            "returns": {
                "alphas": "array, shape (n_alphas,)",
                "coefs": "array, shape (n_features, n_alphas) or             (n_outputs, n_features, n_alphas)",
                "dual_gaps": "array, shape (n_alphas,)",
                "n_iters": "array-like, shape (n_alphas,)"
            },
            "count": {
                "total_params": 12,
                "missed_params": 0
            }
        },
        {
            "name": "enet_path",
            "line": 268,
            "params": {
                "X": {
                    "type": "{array-like}, shape (n_samples, n_features)",
                    "line": 268
                },
                "y": {
                    "type": "ndarray, shape (n_samples,) or (n_samples, n_outputs)",
                    "line": 268
                },
                "l1_ratio": {
                    "type": "float, optional",
                    "line": 268
                },
                "eps": {
                    "type": "float",
                    "line": 268
                },
                "n_alphas": {
                    "type": "int, optional",
                    "line": 268
                },
                "alphas": {
                    "type": "ndarray, optional",
                    "line": 268
                },
                "precompute": {
                    "type": "True | False | 'auto' | array-like",
                    "line": 269
                },
                "Xy": {
                    "type": "array-like, optional",
                    "line": 269
                },
                "copy_X": {
                    "type": "boolean, optional, default True",
                    "line": 269
                },
                "coef_init": {
                    "type": "array, shape (n_features, ) | None",
                    "line": 269
                },
                "verbose": {
                    "type": "bool or integer",
                    "line": 270
                },
                "return_n_iter": {
                    "type": "bool",
                    "line": 270
                },
                "positive": {
                    "type": "bool, default False",
                    "line": 270
                },
                "check_input": {
                    "type": "bool, default True",
                    "line": 271
                }
            },
            "returns": {
                "alphas": "array, shape (n_alphas,)",
                "coefs": "array, shape (n_features, n_alphas) or             (n_outputs, n_features, n_alphas)",
                "dual_gaps": "array, shape (n_alphas,)",
                "n_iters": "array-like, shape (n_alphas,)"
            },
            "count": {
                "total_params": 14,
                "missed_params": 0
            }
        },
        {
            "name": "_path_residuals",
            "line": 932,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 932
                },
                "y": {
                    "type": "array-like, shape (n_samples,) or (n_samples, n_targets)",
                    "line": 932
                },
                "train": {
                    "type": "list of indices",
                    "line": 932
                },
                "test": {
                    "type": "list of indices",
                    "line": 932
                },
                "path": {
                    "type": "callable",
                    "line": 932
                },
                "path_params": {
                    "type": "dictionary",
                    "line": 932
                },
                "alphas": {
                    "type": "array-like, optional",
                    "line": 932
                },
                "l1_ratio": {
                    "type": "float, optional",
                    "line": 933
                },
                "X_order": {
                    "type": "{'F', 'C', or None}, optional",
                    "line": 933
                },
                "dtype": {
                    "type": "a numpy dtype or None",
                    "line": 933
                }
            },
            "returns": {
                "X": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                "y": "array-like, shape (n_samples,) or (n_samples, n_targets)",
                "train": "list of indices",
                "test": "list of indices",
                "path": "callable",
                "path_params": "dictionary",
                "alphas": "array-like, optional",
                "l1_ratio": "float, optional",
                "X_order": "{'F', 'C', or None}, optional",
                "dtype": "a numpy dtype or None"
            },
            "count": {
                "total_params": 10,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\huber.py": [
        {
            "name": "_huber_loss_and_gradient",
            "line": 16,
            "params": {
                "w": {
                    "type": "ndarray, shape (n_features + 1,) or (n_features + 2,)",
                    "line": 16
                },
                "X": {
                    "type": "ndarray, shape (n_samples, n_features)",
                    "line": 16
                },
                "y": {
                    "type": "ndarray, shape (n_samples,)",
                    "line": 16
                },
                "epsilon": {
                    "type": "float",
                    "line": 16
                },
                "alpha": {
                    "type": "float",
                    "line": 16
                },
                "sample_weight": {
                    "type": "ndarray, shape (n_samples,), optional",
                    "line": 16
                }
            },
            "returns": {
                "w": "ndarray, shape (n_features + 1,) or (n_features + 2,)",
                "X": "ndarray, shape (n_samples, n_features)",
                "y": "ndarray, shape (n_samples,)",
                "epsilon": "float",
                "alpha": "float",
                "sample_weight": "ndarray, shape (n_samples,), optional"
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\least_angle.py": [
        {
            "name": "lars_path",
            "line": 33,
            "params": {
                "X": {
                    "type": "array, shape",
                    "line": 33
                },
                "y": {
                    "type": "array, shape",
                    "line": 33
                },
                "Xy": {
                    "type": "array-like, shape (n_samples,) or (n_samples, n_targets),             optional",
                    "line": 33
                },
                "Gram": {
                    "type": "None, 'auto', array, shape",
                    "line": 33
                },
                "max_iter": {
                    "type": "integer, optional (default=500)",
                    "line": 33
                },
                "alpha_min": {
                    "type": "float, optional (default=0)",
                    "line": 34
                },
                "method": {
                    "type": "{'lar', 'lasso'}, optional (default='lar')",
                    "line": 34
                },
                "copy_X": {
                    "type": "bool, optional (default=True)",
                    "line": 34
                },
                "eps": {
                    "type": "float, optional (default=``np.finfo(np.float).eps``)",
                    "line": 35
                },
                "copy_Gram": {
                    "type": "bool, optional (default=True)",
                    "line": 36
                },
                "verbose": {
                    "type": "int (default=0)",
                    "line": 36
                },
                "return_path": {
                    "type": "bool, optional (default=True)",
                    "line": 36
                },
                "return_n_iter": {
                    "type": "bool, optional (default=False)",
                    "line": 37
                },
                "positive": {
                    "type": "boolean (default=False)",
                    "line": 37
                }
            },
            "returns": {
                "alphas": "array, shape",
                "active": "array, shape [n_alphas]",
                "coefs": "array, shape (n_features, n_alphas + 1)",
                "n_iter": "int"
            },
            "count": {
                "total_params": 14,
                "missed_params": 0
            }
        },
        {
            "name": "_lars_path_residues",
            "line": 857,
            "params": {
                "X_train": {
                    "type": "array, shape (n_samples, n_features)",
                    "line": 857
                },
                "y_train": {
                    "type": "array, shape (n_samples)",
                    "line": 857
                },
                "X_test": {
                    "type": "array, shape (n_samples, n_features)",
                    "line": 857
                },
                "y_test": {
                    "type": "array, shape (n_samples)",
                    "line": 857
                },
                "Gram": {
                    "type": "None, 'auto', array, shape",
                    "line": 857
                },
                "copy": {
                    "type": "boolean, optional",
                    "line": 858
                },
                "method": {
                    "type": "'lar' | 'lasso'",
                    "line": 858
                },
                "verbose": {
                    "type": "integer, optional",
                    "line": 858
                },
                "fit_intercept": {
                    "type": "boolean",
                    "line": 859
                },
                "normalize": {
                    "type": "boolean, optional, default True",
                    "line": 859
                },
                "max_iter": {
                    "type": "integer, optional",
                    "line": 859
                },
                "eps": {
                    "type": "float, optional",
                    "line": 860
                },
                "positive": {
                    "type": "boolean (default=False)",
                    "line": 860
                }
            },
            "returns": {
                "alphas": "array, shape (n_alphas,)",
                "active": "list",
                "coefs": "array, shape (n_features, n_alphas)",
                "residues": "array, shape (n_alphas, n_samples)"
            },
            "count": {
                "total_params": 13,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\logistic.py": [
        {
            "name": "_intercept_dot",
            "line": 41,
            "params": {
                "w": {
                    "type": "ndarray, shape (n_features,) or (n_features + 1,)",
                    "line": 41
                },
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 41
                },
                "y": {
                    "type": "ndarray, shape (n_samples,)",
                    "line": 41
                }
            },
            "returns": {
                "w": "ndarray, shape (n_features,)",
                "X": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                "yz": "float"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "_logistic_loss_and_grad",
            "line": 79,
            "params": {
                "w": {
                    "type": "ndarray, shape (n_features,) or (n_features + 1,)",
                    "line": 79
                },
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 79
                },
                "y": {
                    "type": "ndarray, shape (n_samples,)",
                    "line": 79
                },
                "alpha": {
                    "type": "float",
                    "line": 79
                },
                "sample_weight": {
                    "type": "array-like, shape (n_samples,) optional",
                    "line": 79
                }
            },
            "returns": {
                "out": "float",
                "grad": "ndarray, shape (n_features,) or (n_features + 1,)"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "_logistic_loss",
            "line": 130,
            "params": {
                "w": {
                    "type": "ndarray, shape (n_features,) or (n_features + 1,)",
                    "line": 130
                },
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 130
                },
                "y": {
                    "type": "ndarray, shape (n_samples,)",
                    "line": 130
                },
                "alpha": {
                    "type": "float",
                    "line": 130
                },
                "sample_weight": {
                    "type": "array-like, shape (n_samples,) optional",
                    "line": 130
                }
            },
            "returns": {
                "out": "float"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "_logistic_grad_hess",
            "line": 166,
            "params": {
                "w": {
                    "type": "ndarray, shape (n_features,) or (n_features + 1,)",
                    "line": 166
                },
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 166
                },
                "y": {
                    "type": "ndarray, shape (n_samples,)",
                    "line": 166
                },
                "alpha": {
                    "type": "float",
                    "line": 166
                },
                "sample_weight": {
                    "type": "array-like, shape (n_samples,) optional",
                    "line": 166
                }
            },
            "returns": {
                "grad": "ndarray, shape (n_features,) or (n_features + 1,)",
                "Hs": "callable"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "_multinomial_loss",
            "line": 243,
            "params": {
                "w": {
                    "type": "ndarray, shape (n_classes * n_features,) or",
                    "line": 243
                },
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 243
                },
                "Y": {
                    "type": "ndarray, shape (n_samples, n_classes)",
                    "line": 243
                },
                "alpha": {
                    "type": "float",
                    "line": 243
                },
                "sample_weight": {
                    "type": "array-like, shape (n_samples,) optional",
                    "line": 243
                }
            },
            "returns": {
                "loss": "float",
                "p": "ndarray, shape (n_samples, n_classes)",
                "w": "ndarray, shape (n_classes, n_features)"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "_multinomial_loss_grad",
            "line": 300,
            "params": {
                "w": {
                    "type": "ndarray, shape (n_classes * n_features,) or",
                    "line": 300
                },
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 300
                },
                "Y": {
                    "type": "ndarray, shape (n_samples, n_classes)",
                    "line": 300
                },
                "alpha": {
                    "type": "float",
                    "line": 300
                },
                "sample_weight": {
                    "type": "array-like, shape (n_samples,) optional",
                    "line": 300
                }
            },
            "returns": {
                "loss": "float",
                "grad": "ndarray, shape (n_classes * n_features,) or",
                "p": "ndarray, shape (n_samples, n_classes)"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "_multinomial_grad_hess",
            "line": 353,
            "params": {
                "w": {
                    "type": "ndarray, shape (n_classes * n_features,) or",
                    "line": 353
                },
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 353
                },
                "Y": {
                    "type": "ndarray, shape (n_samples, n_classes)",
                    "line": 353
                },
                "alpha": {
                    "type": "float",
                    "line": 353
                },
                "sample_weight": {
                    "type": "array-like, shape (n_samples,) optional",
                    "line": 353
                }
            },
            "returns": {
                "grad": "array, shape (n_classes * n_features,) or",
                "hessp": "callable"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "logistic_regression_path",
            "line": 450,
            "params": {
                "X": {
                    "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                    "line": 450
                },
                "y": {
                    "type": "array-like, shape (n_samples,)",
                    "line": 450
                },
                "pos_class": {
                    "type": "int, None",
                    "line": 450
                },
                "Cs": {
                    "type": "int | array-like, shape (n_cs,)",
                    "line": 450
                },
                "fit_intercept": {
                    "type": "bool",
                    "line": 450
                },
                "max_iter": {
                    "type": "int",
                    "line": 451
                },
                "tol": {
                    "type": "float",
                    "line": 451
                },
                "verbose": {
                    "type": "int",
                    "line": 451
                },
                "solver": {
                    "type": "{'lbfgs', 'newton-cg', 'liblinear', 'sag', 'saga'}",
                    "line": 452
                },
                "coef": {
                    "type": "array-like, shape (n_features,), default None",
                    "line": 452
                },
                "class_weight": {
                    "type": "dict or 'balanced', optional",
                    "line": 453
                },
                "dual": {
                    "type": "bool",
                    "line": 453
                },
                "penalty": {
                    "type": "str, 'l1' or 'l2'",
                    "line": 453
                },
                "intercept_scaling": {
                    "type": "float, default 1.",
                    "line": 454
                },
                "multi_class": {
                    "type": "str, {'ovr', 'multinomial'}",
                    "line": 454
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default None",
                    "line": 455
                },
                "check_input": {
                    "type": "bool, default True",
                    "line": 455
                },
                "max_squared_sum": {
                    "type": "float, default None",
                    "line": 456
                },
                "sample_weight": {
                    "type": "array-like, shape(n_samples,) optional",
                    "line": 456
                }
            },
            "returns": {
                "coefs": "ndarray, shape (n_cs, n_features) or (n_cs, n_features + 1)",
                "Cs": "ndarray",
                "n_iter": "array, shape (n_cs,)"
            },
            "count": {
                "total_params": 19,
                "missed_params": 0
            }
        },
        {
            "name": "_log_reg_scoring_path",
            "line": 774,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 774
                },
                "y": {
                    "type": "array-like, shape (n_samples,) or (n_samples, n_targets)",
                    "line": 774
                },
                "train": {
                    "type": "list of indices",
                    "line": 774
                },
                "test": {
                    "type": "list of indices",
                    "line": 774
                },
                "pos_class": {
                    "type": "int, None",
                    "line": 774
                },
                "Cs": {
                    "type": "list of floats | int",
                    "line": 774
                },
                "scoring": {
                    "type": "callable or None, optional, default",
                    "line": 775
                },
                "fit_intercept": {
                    "type": "bool",
                    "line": 775
                },
                "max_iter": {
                    "type": "int",
                    "line": 776
                },
                "tol": {
                    "type": "float",
                    "line": 776
                },
                "class_weight": {
                    "type": "dict or 'balanced', optional",
                    "line": 776
                },
                "verbose": {
                    "type": "int",
                    "line": 777
                },
                "solver": {
                    "type": "{'lbfgs', 'newton-cg', 'liblinear', 'sag', 'saga'}",
                    "line": 777
                },
                "penalty": {
                    "type": "str, 'l1' or 'l2'",
                    "line": 777
                },
                "dual": {
                    "type": "bool",
                    "line": 778
                },
                "intercept_scaling": {
                    "type": "float, default 1.",
                    "line": 778
                },
                "multi_class": {
                    "type": "str, {'ovr', 'multinomial'}",
                    "line": 779
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default None",
                    "line": 779
                },
                "max_squared_sum": {
                    "type": "float, default None",
                    "line": 780
                },
                "sample_weight": {
                    "type": "array-like, shape(n_samples,) optional",
                    "line": 780
                }
            },
            "returns": {
                "coefs": "ndarray, shape (n_cs, n_features) or (n_cs, n_features + 1)",
                "Cs": "ndarray",
                "scores": "ndarray, shape (n_cs,)",
                "n_iter": "array, shape(n_cs,)"
            },
            "count": {
                "total_params": 20,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\omp.py": [
        {
            "name": "_cholesky_omp",
            "line": 27,
            "params": {
                "X": {
                    "type": "array, shape (n_samples, n_features)",
                    "line": 27
                },
                "y": {
                    "type": "array, shape (n_samples,)",
                    "line": 27
                },
                "n_nonzero_coefs": {
                    "type": "int",
                    "line": 27
                },
                "tol": {
                    "type": "float",
                    "line": 27
                },
                "copy_X": {
                    "type": "bool, optional",
                    "line": 27
                },
                "return_path": {
                    "type": "bool, optional. Default",
                    "line": 28
                }
            },
            "returns": {
                "gamma": "array, shape (n_nonzero_coefs,)",
                "idx": "array, shape (n_nonzero_coefs,)",
                "coef": "array, shape (n_features, n_nonzero_coefs)",
                "n_active": "int"
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "_gram_omp",
            "line": 138,
            "params": {
                "Gram": {
                    "type": "array, shape (n_features, n_features)",
                    "line": 138
                },
                "Xy": {
                    "type": "array, shape (n_features,)",
                    "line": 138
                },
                "n_nonzero_coefs": {
                    "type": "int",
                    "line": 138
                },
                "tol_0": {
                    "type": "float",
                    "line": 138
                },
                "tol": {
                    "type": "float",
                    "line": 138
                },
                "copy_Gram": {
                    "type": "bool, optional",
                    "line": 139
                },
                "copy_Xy": {
                    "type": "bool, optional",
                    "line": 139
                },
                "return_path": {
                    "type": "bool, optional. Default",
                    "line": 139
                }
            },
            "returns": {
                "gamma": "array, shape (n_nonzero_coefs,)",
                "idx": "array, shape (n_nonzero_coefs,)",
                "coefs": "array, shape (n_features, n_nonzero_coefs)",
                "n_active": "int"
            },
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "orthogonal_mp",
            "line": 263,
            "params": {
                "X": {
                    "type": "array, shape (n_samples, n_features)",
                    "line": 263
                },
                "y": {
                    "type": "array, shape (n_samples,) or (n_samples, n_targets)",
                    "line": 263
                },
                "n_nonzero_coefs": {
                    "type": "int",
                    "line": 263
                },
                "tol": {
                    "type": "float",
                    "line": 263
                },
                "precompute": {
                    "type": "{True, False, 'auto'},",
                    "line": 263
                },
                "copy_X": {
                    "type": "bool, optional",
                    "line": 264
                },
                "return_path": {
                    "type": "bool, optional. Default",
                    "line": 264
                },
                "return_n_iter": {
                    "type": "bool, optional default False",
                    "line": 265
                }
            },
            "returns": {
                "coef": "array, shape (n_features,) or (n_features, n_targets)",
                "n_iters": "array-like or int"
            },
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "orthogonal_mp_gram",
            "line": 405,
            "params": {
                "Gram": {
                    "type": "array, shape (n_features, n_features)",
                    "line": 405
                },
                "Xy": {
                    "type": "array, shape (n_features,) or (n_features, n_targets)",
                    "line": 405
                },
                "n_nonzero_coefs": {
                    "type": "int",
                    "line": 405
                },
                "tol": {
                    "type": "float",
                    "line": 405
                },
                "norms_squared": {
                    "type": "array-like, shape (n_targets,)",
                    "line": 406
                },
                "copy_Gram": {
                    "type": "bool, optional",
                    "line": 406
                },
                "copy_Xy": {
                    "type": "bool, optional",
                    "line": 407
                },
                "return_path": {
                    "type": "bool, optional. Default",
                    "line": 407
                },
                "return_n_iter": {
                    "type": "bool, optional default False",
                    "line": 408
                }
            },
            "returns": {
                "coef": "array, shape (n_features,) or (n_features, n_targets)",
                "n_iters": "array-like or int"
            },
            "count": {
                "total_params": 9,
                "missed_params": 0
            }
        },
        {
            "name": "_omp_path_residues",
            "line": 663,
            "params": {
                "X_train": {
                    "type": "array, shape (n_samples, n_features)",
                    "line": 663
                },
                "y_train": {
                    "type": "array, shape (n_samples)",
                    "line": 663
                },
                "X_test": {
                    "type": "array, shape (n_samples, n_features)",
                    "line": 663
                },
                "y_test": {
                    "type": "array, shape (n_samples)",
                    "line": 663
                },
                "copy": {
                    "type": "boolean, optional",
                    "line": 663
                },
                "fit_intercept": {
                    "type": "boolean",
                    "line": 664
                },
                "normalize": {
                    "type": "boolean, optional, default True",
                    "line": 664
                },
                "max_iter": {
                    "type": "integer, optional",
                    "line": 664
                }
            },
            "returns": {
                "residues": "array, shape (n_samples, max_features)"
            },
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\passive_aggressive.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\perceptron.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\randomized_l1.py": [
        {
            "name": "_lasso_stability_path",
            "line": 543,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 5,
                "missed_params": 5
            }
        },
        {
            "name": "lasso_stability_path",
            "line": 570,
            "params": {
                "X": {
                    "type": "array-like, shape = [n_samples, n_features]",
                    "line": 572
                },
                "y": {
                    "type": "array-like, shape = [n_samples]",
                    "line": 572
                },
                "scaling": {
                    "type": "float, optional, default=0.5",
                    "line": 572
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default=None",
                    "line": 572
                },
                "n_resampling": {
                    "type": "int, optional, default=200",
                    "line": 573
                },
                "n_grid": {
                    "type": "int, optional, default=100",
                    "line": 573
                },
                "sample_fraction": {
                    "type": "float, optional, default=0.75",
                    "line": 574
                },
                "eps": {
                    "type": "float, optional",
                    "line": 575
                },
                "n_jobs": {
                    "type": "integer, optional",
                    "line": 575
                },
                "verbose": {
                    "type": "boolean or integer, optional",
                    "line": 576
                }
            },
            "returns": {
                "alphas_grid": "array, shape ~ [n_grid]",
                "scores_path": "array, shape = [n_features, n_grid]"
            },
            "count": {
                "total_params": 10,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\ransac.py": [
        {
            "name": "_dynamic_max_trials",
            "line": 20,
            "params": {
                "n_inliers": {
                    "type": "int",
                    "line": 20
                },
                "n_samples": {
                    "type": "int",
                    "line": 20
                },
                "min_samples": {
                    "type": "int",
                    "line": 20
                },
                "probability": {
                    "type": "float",
                    "line": 20
                }
            },
            "returns": {
                "trials": "int"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\ridge.py": [
        {
            "name": "ridge_regression",
            "line": 195,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix, LinearOperator},",
                    "line": 195
                },
                "y": {
                    "type": "array-like, shape = [n_samples] or [n_samples, n_targets]",
                    "line": 195
                },
                "alpha": {
                    "type": "{float, array-like},",
                    "line": 195
                },
                "sample_weight": {
                    "type": "float or numpy array of shape [n_samples]",
                    "line": 195
                },
                "solver": {
                    "type": "{'auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga'}",
                    "line": 195
                },
                "max_iter": {
                    "type": "int, optional",
                    "line": 196
                },
                "tol": {
                    "type": "float",
                    "line": 196
                },
                "verbose": {
                    "type": "int",
                    "line": 196
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default None",
                    "line": 196
                },
                "return_n_iter": {
                    "type": "boolean, default False",
                    "line": 197
                },
                "return_intercept": {
                    "type": "boolean, default False",
                    "line": 197
                }
            },
            "returns": {
                "coef": "array, shape = [n_features] or [n_targets, n_features]",
                "n_iter": "int, optional",
                "intercept": "float or array, shape = [n_targets]"
            },
            "count": {
                "total_params": 11,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\sag.py": [
        {
            "name": "get_auto_step_size",
            "line": 18,
            "params": {
                "max_squared_sum": {
                    "type": "float",
                    "line": 18
                },
                "alpha_scaled": {
                    "type": "float",
                    "line": 18
                },
                "loss": {
                    "type": "string, in {\"log\", \"squared\"}",
                    "line": 18
                },
                "fit_intercept": {
                    "type": "bool",
                    "line": 18
                },
                "n_samples": {
                    "type": "int, optional",
                    "line": 19
                },
                "is_saga": {
                    "type": "boolean, optional",
                    "line": 20
                }
            },
            "returns": {
                "step_size": "float"
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "sag_solver",
            "line": 86,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 86
                },
                "y": {
                    "type": "numpy array, shape (n_samples,)",
                    "line": 86
                },
                "sample_weight": {
                    "type": "array-like, shape (n_samples,), optional",
                    "line": 86
                },
                "loss": {
                    "type": "'log' | 'squared' | 'multinomial'",
                    "line": 86
                },
                "alpha": {
                    "type": "float, optional",
                    "line": 86
                },
                "max_iter": {
                    "type": "int, optional",
                    "line": 87
                },
                "tol": {
                    "type": "double, optional",
                    "line": 87
                },
                "verbose": {
                    "type": "integer, optional",
                    "line": 87
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default None",
                    "line": 87
                },
                "check_input": {
                    "type": "bool, default True",
                    "line": 88
                },
                "max_squared_sum": {
                    "type": "float, default None",
                    "line": 88
                },
                "warm_start_mem": {
                    "type": "dict, optional",
                    "line": 89
                },
                "is_saga": {
                    "type": "boolean, optional",
                    "line": 90
                }
            },
            "returns": {
                "coef_": "array, shape (n_features)",
                "n_iter_": "int",
                "warm_start_mem": "dict"
            },
            "count": {
                "total_params": 14,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\setup.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\stochastic_gradient.py": [
        {
            "name": "_prepare_fit_binary",
            "line": 236,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "fit_binary",
            "line": 268,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 11,
                "missed_params": 11
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\theil_sen.py": [
        {
            "name": "_modified_weiszfeld_step",
            "line": 31,
            "params": {
                "X": {
                    "type": "array, shape = [n_samples, n_features]",
                    "line": 31
                },
                "x_old": {
                    "type": "array, shape = [n_features]",
                    "line": 31
                }
            },
            "returns": {
                "x_new": "array, shape = [n_features]"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "_spatial_median",
            "line": 79,
            "params": {
                "X": {
                    "type": "array, shape = [n_samples, n_features]",
                    "line": 79
                },
                "max_iter": {
                    "type": "int, optional",
                    "line": 79
                },
                "tol": {
                    "type": "float, optional",
                    "line": 79
                }
            },
            "returns": {
                "spatial_median": "array, shape = [n_features]",
                "n_iter": "int"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "_breakdown_point",
            "line": 133,
            "params": {
                "n_samples": {
                    "type": "int",
                    "line": 133
                },
                "n_subsamples": {
                    "type": "int",
                    "line": 133
                }
            },
            "returns": {
                "breakdown_point": "float"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "_lstsq",
            "line": 153,
            "params": {
                "X": {
                    "type": "array, shape = [n_samples, n_features]",
                    "line": 153
                },
                "y": {
                    "type": "array, shape = [n_samples]",
                    "line": 153
                },
                "indices": {
                    "type": "array, shape = [n_subpopulation, n_subsamples]",
                    "line": 153
                },
                "fit_intercept": {
                    "type": "bool",
                    "line": 153
                }
            },
            "returns": {
                "weights": "array, shape = [n_subpopulation, n_features + intercept]"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\__init__.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_base.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_bayes.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_coordinate_descent.py": [
        {
            "name": "build_dataset",
            "line": 129,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_huber.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_least_angle.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_logistic.py": [
        {
            "name": "check_predictions",
            "line": 36,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_omp.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_passive_aggressive.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_perceptron.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_randomized_l1.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_ransac.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_ridge.py": [
        {
            "name": "test_class_weight_vs_sample_weight",
            "line": 532,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_sag.py": [
        {
            "name": "test_sag_pobj_matches_logistic_regression",
            "line": 304,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sag_pobj_matches_ridge_regression",
            "line": 334,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sag_regressor_computed_correctly",
            "line": 366,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sag_regressor",
            "line": 455,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sag_classifier_computed_correctly",
            "line": 494,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sag_multiclass_computed_correctly",
            "line": 537,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_classifier_results",
            "line": 596,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_binary_classifier_class_weight",
            "line": 621,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_multiclass_classifier_class_weight",
            "line": 671,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_classifier_single_class",
            "line": 734,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_sgd.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_sparse_coordinate_descent.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\test_theil_sen.py": [],
    "../scikit-learn-master/sklearn\\linear_model\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\manifold\\isomap.py": [],
    "../scikit-learn-master/sklearn\\manifold\\locally_linear.py": [
        {
            "name": "barycenter_weights",
            "line": 20,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_dim)",
                    "line": 20
                },
                "Z": {
                    "type": "array-like, shape (n_samples, n_neighbors, n_dim)",
                    "line": 20
                },
                "reg": {
                    "type": "float, optional",
                    "line": 20
                }
            },
            "returns": {
                "B": "array-like, shape (n_samples, n_neighbors)"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "barycenter_kneighbors_graph",
            "line": 67,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix, BallTree, KDTree, NearestNeighbors}",
                    "line": 67
                },
                "n_neighbors": {
                    "type": "int",
                    "line": 67
                },
                "reg": {
                    "type": "float, optional",
                    "line": 67
                },
                "n_jobs": {
                    "type": "int, optional (default = 1)",
                    "line": 67
                }
            },
            "returns": {
                "A": "sparse matrix in CSR format, shape = [n_samples, n_samples]"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "null_space",
            "line": 109,
            "params": {
                "M": {
                    "type": "{array, matrix, sparse matrix, LinearOperator}",
                    "line": 109
                },
                "k": {
                    "type": "integer",
                    "line": 109
                },
                "k_skip": {
                    "type": "integer, optional",
                    "line": 109
                },
                "eigen_solver": {
                    "type": "string, {'auto', 'arpack', 'dense'}",
                    "line": 109
                },
                "tol": {
                    "type": "float, optional",
                    "line": 109
                },
                "max_iter": {
                    "type": "maximum number of iterations for 'arpack' method",
                    "line": 109
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 110
                }
            },
            "returns": {},
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "locally_linear_embedding",
            "line": 186,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix, BallTree, KDTree, NearestNeighbors}",
                    "line": 187
                },
                "n_neighbors": {
                    "type": "integer",
                    "line": 187
                },
                "n_components": {
                    "type": "integer",
                    "line": 187
                },
                "reg": {
                    "type": "float",
                    "line": 187
                },
                "eigen_solver": {
                    "type": "string, {'auto', 'arpack', 'dense'}",
                    "line": 187
                },
                "tol": {
                    "type": "float, optional",
                    "line": 187
                },
                "max_iter": {
                    "type": "integer",
                    "line": 188
                },
                "method": {
                    "type": "{'standard', 'hessian', 'modified', 'ltsa'}",
                    "line": 188
                },
                "hessian_tol": {
                    "type": "float, optional",
                    "line": 188
                },
                "modified_tol": {
                    "type": "float, optional",
                    "line": 188
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 189
                },
                "n_jobs": {
                    "type": "int, optional (default = 1)",
                    "line": 189
                }
            },
            "returns": {
                "Y": "array-like, shape [n_samples, n_components]",
                "squared_error": "float"
            },
            "count": {
                "total_params": 12,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\manifold\\mds.py": [
        {
            "name": "_smacof_single",
            "line": 20,
            "params": {
                "dissimilarities": {
                    "type": "ndarray, shape (n_samples, n_samples)",
                    "line": 20
                },
                "metric": {
                    "type": "boolean, optional, default",
                    "line": 20
                },
                "n_components": {
                    "type": "int, optional, default",
                    "line": 20
                },
                "init": {
                    "type": "ndarray, shape (n_samples, n_components), optional, default",
                    "line": 20
                },
                "max_iter": {
                    "type": "int, optional, default",
                    "line": 21
                },
                "verbose": {
                    "type": "int, optional, default",
                    "line": 21
                },
                "eps": {
                    "type": "float, optional, default",
                    "line": 21
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default",
                    "line": 21
                }
            },
            "returns": {
                "X": "ndarray, shape (n_samples, n_components)",
                "stress": "float",
                "n_iter": "int"
            },
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "smacof",
            "line": 134,
            "params": {
                "dissimilarities": {
                    "type": "ndarray, shape (n_samples, n_samples)",
                    "line": 134
                },
                "metric": {
                    "type": "boolean, optional, default",
                    "line": 134
                },
                "n_components": {
                    "type": "int, optional, default",
                    "line": 134
                },
                "init": {
                    "type": "ndarray, shape (n_samples, n_components), optional, default",
                    "line": 134
                },
                "n_init": {
                    "type": "int, optional, default",
                    "line": 134
                },
                "n_jobs": {
                    "type": "int, optional, default",
                    "line": 135
                },
                "max_iter": {
                    "type": "int, optional, default",
                    "line": 135
                },
                "verbose": {
                    "type": "int, optional, default",
                    "line": 135
                },
                "eps": {
                    "type": "float, optional, default",
                    "line": 135
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default",
                    "line": 135
                },
                "return_n_iter": {
                    "type": "bool, optional, default",
                    "line": 136
                }
            },
            "returns": {
                "X": "ndarray, shape (n_samples, n_components)",
                "stress": "float",
                "n_iter": "int"
            },
            "count": {
                "total_params": 11,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\manifold\\setup.py": [],
    "../scikit-learn-master/sklearn\\manifold\\spectral_embedding_.py": [
        {
            "name": "_graph_connected_component",
            "line": 23,
            "params": {
                "graph": {
                    "type": "array-like, shape",
                    "line": 23
                },
                "node_id": {
                    "type": "int",
                    "line": 23
                }
            },
            "returns": {
                "connected_components_matrix": "array-like, shape"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "_graph_is_connected",
            "line": 66,
            "params": {
                "graph": {
                    "type": "array-like or sparse matrix, shape",
                    "line": 66
                }
            },
            "returns": {
                "is_connected": "bool"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "_set_diag",
            "line": 89,
            "params": {
                "laplacian": {
                    "type": "array or sparse matrix",
                    "line": 89
                },
                "value": {
                    "type": "float",
                    "line": 89
                },
                "norm_laplacian": {
                    "type": "bool",
                    "line": 89
                }
            },
            "returns": {
                "laplacian": "array or sparse matrix"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "spectral_embedding",
            "line": 133,
            "params": {
                "adjacency": {
                    "type": "array-like or sparse matrix, shape",
                    "line": 133
                },
                "n_components": {
                    "type": "integer, optional, default 8",
                    "line": 133
                },
                "eigen_solver": {
                    "type": "{None, 'arpack', 'lobpcg', or 'amg'}, default None",
                    "line": 133
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional, default",
                    "line": 134
                },
                "eigen_tol": {
                    "type": "float, optional, default=0.0",
                    "line": 134
                },
                "norm_laplacian": {
                    "type": "bool, optional, default=True",
                    "line": 135
                },
                "drop_first": {
                    "type": "bool, optional, default=True",
                    "line": 135
                }
            },
            "returns": {
                "embedding": "array, shape=(n_samples, n_components)"
            },
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\manifold\\t_sne.py": [
        {
            "name": "_joint_probabilities",
            "line": 33,
            "params": {
                "distances": {
                    "type": "array, shape (n_samples * (n_samples-1) / 2,)",
                    "line": 33
                },
                "desired_perplexity": {
                    "type": "float",
                    "line": 33
                },
                "verbose": {
                    "type": "int",
                    "line": 33
                }
            },
            "returns": {
                "P": "array, shape (n_samples * (n_samples-1) / 2,)"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "_joint_probabilities_nn",
            "line": 65,
            "params": {
                "distances": {
                    "type": "array, shape (n_samples, k)",
                    "line": 65
                },
                "neighbors": {
                    "type": "array, shape (n_samples, k)",
                    "line": 65
                },
                "desired_perplexity": {
                    "type": "float",
                    "line": 65
                },
                "verbose": {
                    "type": "int",
                    "line": 65
                }
            },
            "returns": {
                "P": "csr sparse matrix, shape (n_samples, n_samples)"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "_kl_divergence",
            "line": 121,
            "params": {
                "params": {
                    "type": "array, shape (n_params,)",
                    "line": 121
                },
                "P": {
                    "type": "array, shape (n_samples * (n_samples-1) / 2,)",
                    "line": 121
                },
                "degrees_of_freedom": {
                    "type": "float",
                    "line": 121
                },
                "n_samples": {
                    "type": "int",
                    "line": 121
                },
                "n_components": {
                    "type": "int",
                    "line": 121
                },
                "skip_num_points": {
                    "type": "int (optional, default",
                    "line": 122
                }
            },
            "returns": {
                "kl_divergence": "float",
                "grad": "array, shape (n_params,)"
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "_kl_divergence_bh",
            "line": 186,
            "params": {
                "params": {
                    "type": "array, shape (n_params,)",
                    "line": 186
                },
                "P": {
                    "type": "csr sparse matrix, shape (n_samples, n_sample)",
                    "line": 186
                },
                "degrees_of_freedom": {
                    "type": "float",
                    "line": 186
                },
                "n_samples": {
                    "type": "int",
                    "line": 186
                },
                "n_components": {
                    "type": "int",
                    "line": 186
                },
                "angle": {
                    "type": "float (default",
                    "line": 187
                },
                "skip_num_points": {
                    "type": "int (optional, default",
                    "line": 187
                },
                "verbose": {
                    "type": "int",
                    "line": 187
                }
            },
            "returns": {
                "kl_divergence": "float",
                "grad": "array, shape (n_params,)"
            },
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "_gradient_descent",
            "line": 255,
            "params": {
                "objective": {
                    "type": "function or callable",
                    "line": 255
                },
                "p0": {
                    "type": "array-like, shape (n_params,)",
                    "line": 255
                },
                "it": {
                    "type": "int",
                    "line": 255
                },
                "n_iter": {
                    "type": "int",
                    "line": 255
                },
                "n_iter_check": {
                    "type": "int",
                    "line": 256
                },
                "n_iter_without_progress": {
                    "type": "int, optional (default",
                    "line": 256
                },
                "momentum": {
                    "type": "float, within (0.0, 1.0), optional (default",
                    "line": 257
                },
                "learning_rate": {
                    "type": "float, optional (default",
                    "line": 257
                },
                "min_gain": {
                    "type": "float, optional (default",
                    "line": 257
                },
                "min_grad_norm": {
                    "type": "float, optional (default",
                    "line": 258
                },
                "verbose": {
                    "type": "int, optional (default",
                    "line": 258
                },
                "args": {
                    "type": "sequence",
                    "line": 258
                },
                "kwargs": {
                    "type": "dict",
                    "line": 258
                }
            },
            "returns": {
                "p": "array, shape (n_params,)",
                "error": "float",
                "i": "int"
            },
            "count": {
                "total_params": 13,
                "missed_params": 0
            }
        },
        {
            "name": "trustworthiness",
            "line": 380,
            "params": {
                "X": {
                    "type": "array, shape (n_samples, n_features) or (n_samples, n_samples)",
                    "line": 380
                },
                "X_embedded": {
                    "type": "array, shape (n_samples, n_components)",
                    "line": 380
                },
                "n_neighbors": {
                    "type": "int, optional (default",
                    "line": 380
                },
                "precomputed": {
                    "type": "bool, optional (default",
                    "line": 380
                }
            },
            "returns": {
                "trustworthiness": "float"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\manifold\\__init__.py": [],
    "../scikit-learn-master/sklearn\\manifold\\tests\\test_isomap.py": [],
    "../scikit-learn-master/sklearn\\manifold\\tests\\test_locally_linear.py": [],
    "../scikit-learn-master/sklearn\\manifold\\tests\\test_mds.py": [],
    "../scikit-learn-master/sklearn\\manifold\\tests\\test_spectral_embedding.py": [
        {
            "name": "_check_with_col_sign_flipping",
            "line": 33,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\manifold\\tests\\test_t_sne.py": [
        {
            "name": "test_optimization_minimizes_kl_divergence",
            "line": 252,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "check_uniform_grid",
            "line": 719,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\manifold\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\metrics\\base.py": [
        {
            "name": "_average_binary_score",
            "line": 23,
            "params": {
                "binary_metric": {
                    "type": "callable, returns shape [n_classes]",
                    "line": 23
                },
                "y_true": {
                    "type": "array, shape = [n_samples] or [n_samples, n_classes]",
                    "line": 23
                },
                "y_score": {
                    "type": "array, shape = [n_samples] or [n_samples, n_classes]",
                    "line": 23
                },
                "average": {
                    "type": "string, [None, 'micro', 'macro' (default), 'samples', 'weighted']",
                    "line": 23
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 24
                }
            },
            "returns": {
                "score": "float or array of shape [n_classes]"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\classification.py": [
        {
            "name": "_check_targets",
            "line": 44,
            "params": {
                "y_true": {
                    "type": "array-like",
                    "line": 44
                },
                "y_pred": {
                    "type": "array-like",
                    "line": 44
                }
            },
            "returns": {
                "type_true": "one of {'multilabel-indicator', 'multiclass', 'binary'}",
                "y_true": "array or indicator matrix",
                "y_pred": "array or indicator matrix"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "accuracy_score",
            "line": 115,
            "params": {
                "y_true": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 115
                },
                "y_pred": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 115
                },
                "normalize": {
                    "type": "bool, optional (default=True)",
                    "line": 115
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 115
                }
            },
            "returns": {
                "score": "float"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "confusion_matrix",
            "line": 186,
            "params": {
                "y_true": {
                    "type": "array, shape = [n_samples]",
                    "line": 186
                },
                "y_pred": {
                    "type": "array, shape = [n_samples]",
                    "line": 186
                },
                "labels": {
                    "type": "array, shape = [n_classes], optional",
                    "line": 186
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 186
                }
            },
            "returns": {
                "C": "array, shape = [n_classes, n_classes]"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "cohen_kappa_score",
            "line": 294,
            "params": {
                "y1": {
                    "type": "array, shape = [n_samples]",
                    "line": 294
                },
                "y2": {
                    "type": "array, shape = [n_samples]",
                    "line": 294
                },
                "labels": {
                    "type": "array, shape = [n_classes], optional",
                    "line": 294
                },
                "weights": {
                    "type": "str, optional",
                    "line": 294
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 294
                }
            },
            "returns": {
                "kappa": "float"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "jaccard_similarity_score",
            "line": 374,
            "params": {
                "y_true": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 374
                },
                "y_pred": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 374
                },
                "normalize": {
                    "type": "bool, optional (default=True)",
                    "line": 374
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 375
                }
            },
            "returns": {
                "score": "float"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "matthews_corrcoef",
            "line": 460,
            "params": {
                "y_true": {
                    "type": "array, shape = [n_samples]",
                    "line": 460
                },
                "y_pred": {
                    "type": "array, shape = [n_samples]",
                    "line": 460
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], default None",
                    "line": 460
                }
            },
            "returns": {
                "mcc": "float"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "zero_one_loss",
            "line": 546,
            "params": {
                "y_true": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 546
                },
                "y_pred": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 546
                },
                "normalize": {
                    "type": "bool, optional (default=True)",
                    "line": 546
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 546
                }
            },
            "returns": {
                "loss": "float or int,"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "f1_score",
            "line": 615,
            "params": {
                "y_true": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 615
                },
                "y_pred": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 615
                },
                "labels": {
                    "type": "list, optional",
                    "line": 615
                },
                "pos_label": {
                    "type": "str or int, 1 by default",
                    "line": 615
                },
                "average": {
                    "type": "string, [None, 'binary' (default), 'micro', 'macro', 'samples',                        'weighted']",
                    "line": 615
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 616
                }
            },
            "returns": {
                "f1_score": "float or array of float, shape = [n_unique_labels]"
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "fbeta_score",
            "line": 717,
            "params": {
                "y_true": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 717
                },
                "y_pred": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 717
                },
                "beta": {
                    "type": "float",
                    "line": 717
                },
                "labels": {
                    "type": "list, optional",
                    "line": 717
                },
                "pos_label": {
                    "type": "str or int, 1 by default",
                    "line": 717
                },
                "average": {
                    "type": "string, [None, 'binary' (default), 'micro', 'macro', 'samples',                        'weighted']",
                    "line": 718
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 718
                }
            },
            "returns": {
                "fbeta_score": "float (if average is not None) or array of float, shape =        [n_unique_labels]"
            },
            "count": {
                "total_params": 7,
                "missed_params": 0
            }
        },
        {
            "name": "_prf_divide",
            "line": 832,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 6,
                "missed_params": 6
            }
        },
        {
            "name": "precision_recall_fscore_support",
            "line": 876,
            "params": {
                "y_true": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 876
                },
                "y_pred": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 876
                },
                "beta": {
                    "type": "float, 1.0 by default",
                    "line": 876
                },
                "labels": {
                    "type": "list, optional",
                    "line": 876
                },
                "pos_label": {
                    "type": "str or int, 1 by default",
                    "line": 877
                },
                "average": {
                    "type": "string, [None (default), 'binary', 'micro', 'macro', 'samples',                        'weighted']",
                    "line": 877
                },
                "warn_for": {
                    "type": "tuple or set, for internal use",
                    "line": 878
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 880
                }
            },
            "returns": {
                "precision": "float (if average is not None) or array of float, shape =        [n_unique_labels]",
                "recall": "float (if average is not None) or array of float, , shape =        [n_unique_labels]",
                "fbeta_score": "float (if average is not None) or array of float, shape =        [n_unique_labels]",
                "support": "int (if average is not None) or array of int, shape =        [n_unique_labels]"
            },
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "precision_score",
            "line": 1165,
            "params": {
                "y_true": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 1165
                },
                "y_pred": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 1165
                },
                "labels": {
                    "type": "list, optional",
                    "line": 1165
                },
                "pos_label": {
                    "type": "str or int, 1 by default",
                    "line": 1165
                },
                "average": {
                    "type": "string, [None, 'binary' (default), 'micro', 'macro', 'samples',                        'weighted']",
                    "line": 1166
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 1166
                }
            },
            "returns": {
                "precision": "float (if average is not None) or array of float, shape =        [n_unique_labels]"
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "recall_score",
            "line": 1265,
            "params": {
                "y_true": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 1265
                },
                "y_pred": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 1265
                },
                "labels": {
                    "type": "list, optional",
                    "line": 1265
                },
                "pos_label": {
                    "type": "str or int, 1 by default",
                    "line": 1265
                },
                "average": {
                    "type": "string, [None, 'binary' (default), 'micro', 'macro', 'samples',                        'weighted']",
                    "line": 1265
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 1266
                }
            },
            "returns": {
                "recall": "float (if average is not None) or array of float, shape =        [n_unique_labels]"
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "classification_report",
            "line": 1363,
            "params": {
                "y_true": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 1363
                },
                "y_pred": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 1363
                },
                "labels": {
                    "type": "array, shape = [n_labels]",
                    "line": 1363
                },
                "target_names": {
                    "type": "list of strings",
                    "line": 1363
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 1364
                },
                "digits": {
                    "type": "int",
                    "line": 1364
                }
            },
            "returns": {
                "report": "string",
                "to": "func"
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "hamming_loss",
            "line": 1466,
            "params": {
                "y_true": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 1466
                },
                "y_pred": {
                    "type": "1d array-like, or label indicator array / sparse matrix",
                    "line": 1466
                },
                "labels": {
                    "type": "array, shape = [n_labels], optional (default=None)",
                    "line": 1466
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 1466
                },
                "classes": {
                    "type": "array, shape = [n_labels], optional",
                    "line": 1467
                }
            },
            "returns": {
                "loss": "float or int,"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "log_loss",
            "line": 1576,
            "params": {
                "y_true": {
                    "type": "array-like or label indicator matrix",
                    "line": 1576
                },
                "y_pred": {
                    "type": "array-like of float, shape = (n_samples, n_classes) or (n_samples,)",
                    "line": 1576
                },
                "eps": {
                    "type": "float",
                    "line": 1576
                },
                "normalize": {
                    "type": "bool, optional (default=True)",
                    "line": 1576
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 1576
                },
                "labels": {
                    "type": "array-like, optional (default=None)",
                    "line": 1577
                }
            },
            "returns": {
                "loss": "float"
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "hinge_loss",
            "line": 1699,
            "params": {
                "y_true": {
                    "type": "array, shape = [n_samples]",
                    "line": 1699
                },
                "pred_decision": {
                    "type": "array, shape = [n_samples] or [n_samples, n_classes]",
                    "line": 1699
                },
                "labels": {
                    "type": "array, optional, default None",
                    "line": 1699
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 1699
                }
            },
            "returns": {
                "loss": "float"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "_check_binary_probabilistic_predictions",
            "line": 1825,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "brier_score_loss",
            "line": 1844,
            "params": {
                "y_true": {
                    "type": "array, shape (n_samples,)",
                    "line": 1844
                },
                "y_prob": {
                    "type": "array, shape (n_samples,)",
                    "line": 1844
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 1844
                },
                "pos_label": {
                    "type": "int or str, default=None",
                    "line": 1844
                }
            },
            "returns": {
                "score": "float"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\pairwise.py": [
        {
            "name": "_return_float_dtype",
            "line": 34,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "check_pairwise_arrays",
            "line": 58,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples_a, n_features)",
                    "line": 58
                },
                "Y": {
                    "type": "{array-like, sparse matrix}, shape (n_samples_b, n_features)",
                    "line": 58
                },
                "precomputed": {
                    "type": "bool",
                    "line": 58
                },
                "dtype": {
                    "type": "string, type, list of types or None (default=None)",
                    "line": 58
                }
            },
            "returns": {
                "safe_X": "{array-like, sparse matrix}, shape (n_samples_a, n_features)",
                "safe_Y": "{array-like, sparse matrix}, shape (n_samples_b, n_features)"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "check_paired_arrays",
            "line": 128,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples_a, n_features)",
                    "line": 128
                },
                "Y": {
                    "type": "{array-like, sparse matrix}, shape (n_samples_b, n_features)",
                    "line": 128
                }
            },
            "returns": {
                "safe_X": "{array-like, sparse matrix}, shape (n_samples_a, n_features)",
                "safe_Y": "{array-like, sparse matrix}, shape (n_samples_b, n_features)"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "euclidean_distances",
            "line": 163,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples_1, n_features)",
                    "line": 163
                },
                "Y": {
                    "type": "{array-like, sparse matrix}, shape (n_samples_2, n_features)",
                    "line": 163
                },
                "Y_norm_squared": {
                    "type": "array-like, shape (n_samples_2, ), optional",
                    "line": 163
                },
                "squared": {
                    "type": "boolean, optional",
                    "line": 163
                },
                "X_norm_squared": {
                    "type": "array-like, shape = [n_samples_1], optional",
                    "line": 164
                }
            },
            "returns": {
                "distances": "{array, sparse matrix}, shape (n_samples_1, n_samples_2)"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "pairwise_distances_argmin_min",
            "line": 260,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples1, n_features)",
                    "line": 260
                },
                "Y": {
                    "type": "{array-like, sparse matrix}, shape (n_samples2, n_features)",
                    "line": 260
                },
                "axis": {
                    "type": "int, optional, default 1",
                    "line": 260
                },
                "metric": {
                    "type": "string or callable, default 'euclidean'",
                    "line": 260
                },
                "batch_size": {
                    "type": "integer",
                    "line": 261
                },
                "metric_kwargs": {
                    "type": "dict, optional",
                    "line": 261
                }
            },
            "returns": {
                "argmin": "numpy.ndarray",
                "distances": "numpy.ndarray"
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "pairwise_distances_argmin",
            "line": 389,
            "params": {
                "X": {
                    "type": "array-like",
                    "line": 389
                },
                "Y": {
                    "type": "array-like",
                    "line": 389
                },
                "axis": {
                    "type": "int, optional, default 1",
                    "line": 389
                },
                "metric": {
                    "type": "string or callable",
                    "line": 389
                },
                "batch_size": {
                    "type": "integer",
                    "line": 390
                },
                "metric_kwargs": {
                    "type": "dict",
                    "line": 390
                }
            },
            "returns": {
                "argmin": "numpy.ndarray"
            },
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "manhattan_distances",
            "line": 470,
            "params": {
                "X": {
                    "type": "array_like",
                    "line": 470
                },
                "Y": {
                    "type": "array_like, optional",
                    "line": 470
                },
                "sum_over_features": {
                    "type": "bool, default=True",
                    "line": 470
                },
                "size_threshold": {
                    "type": "int, default=5e8",
                    "line": 471
                }
            },
            "returns": {
                "D": "array"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "cosine_distances",
            "line": 551,
            "params": {
                "X": {
                    "type": "array_like, sparse matrix",
                    "line": 551
                },
                "Y": {
                    "type": "array_like, sparse matrix (optional)",
                    "line": 551
                }
            },
            "returns": {
                "matrix": "array"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "paired_euclidean_distances",
            "line": 589,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 589
                },
                "Y": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 589
                }
            },
            "returns": {
                "distances": "ndarray (n_samples, )"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "paired_manhattan_distances",
            "line": 609,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 609
                },
                "Y": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 609
                }
            },
            "returns": {
                "distances": "ndarray (n_samples, )"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "paired_cosine_distances",
            "line": 633,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 633
                },
                "Y": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 633
                }
            },
            "returns": {
                "distances": "ndarray, shape (n_samples, )"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "paired_distances",
            "line": 667,
            "params": {
                "X": {
                    "type": "ndarray (n_samples, n_features)",
                    "line": 667
                },
                "Y": {
                    "type": "ndarray (n_samples, n_features)",
                    "line": 667
                },
                "metric": {
                    "type": "string or callable",
                    "line": 667
                }
            },
            "returns": {
                "distances": "ndarray (n_samples, )"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "linear_kernel",
            "line": 725,
            "params": {
                "X": {
                    "type": "array of shape (n_samples_1, n_features)",
                    "line": 725
                },
                "Y": {
                    "type": "array of shape (n_samples_2, n_features)",
                    "line": 725
                }
            },
            "returns": {
                "matrix": "array of shape (n_samples_1, n_samples_2)"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "polynomial_kernel",
            "line": 745,
            "params": {
                "X": {
                    "type": "ndarray of shape (n_samples_1, n_features)",
                    "line": 745
                },
                "Y": {
                    "type": "ndarray of shape (n_samples_2, n_features)",
                    "line": 745
                },
                "degree": {
                    "type": "int, default 3",
                    "line": 745
                },
                "gamma": {
                    "type": "float, default None",
                    "line": 745
                },
                "coef0": {
                    "type": "int, default 1",
                    "line": 745
                }
            },
            "returns": {
                "matrix": "array of shape (n_samples_1, n_samples_2)"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "sigmoid_kernel",
            "line": 781,
            "params": {
                "X": {
                    "type": "ndarray of shape (n_samples_1, n_features)",
                    "line": 781
                },
                "Y": {
                    "type": "ndarray of shape (n_samples_2, n_features)",
                    "line": 781
                },
                "gamma": {
                    "type": "float, default None",
                    "line": 781
                },
                "coef0": {
                    "type": "int, default 1",
                    "line": 781
                }
            },
            "returns": {
                "matrix": "array of shape (n_samples_1, n_samples_2)"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "rbf_kernel",
            "line": 815,
            "params": {
                "X": {
                    "type": "array of shape (n_samples_X, n_features)",
                    "line": 815
                },
                "Y": {
                    "type": "array of shape (n_samples_Y, n_features)",
                    "line": 815
                },
                "gamma": {
                    "type": "float, default None",
                    "line": 815
                }
            },
            "returns": {
                "kernel_matrix": "array of shape (n_samples_X, n_samples_Y)"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "laplacian_kernel",
            "line": 848,
            "params": {
                "X": {
                    "type": "array of shape (n_samples_X, n_features)",
                    "line": 848
                },
                "Y": {
                    "type": "array of shape (n_samples_Y, n_features)",
                    "line": 848
                },
                "gamma": {
                    "type": "float, default None",
                    "line": 848
                }
            },
            "returns": {
                "kernel_matrix": "array of shape (n_samples_X, n_samples_Y)"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "cosine_similarity",
            "line": 882,
            "params": {
                "X": {
                    "type": "ndarray or sparse array, shape",
                    "line": 882
                },
                "Y": {
                    "type": "ndarray or sparse array, shape",
                    "line": 882
                },
                "dense_output": {
                    "type": "boolean (optional), default True",
                    "line": 882
                }
            },
            "returns": {
                "matrix": "array"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "additive_chi2_kernel",
            "line": 930,
            "params": {
                "X": {
                    "type": "array-like of shape (n_samples_X, n_features)",
                    "line": 930
                },
                "Y": {
                    "type": "array of shape (n_samples_Y, n_features)",
                    "line": 930
                }
            },
            "returns": {
                "kernel_matrix": "array of shape (n_samples_X, n_samples_Y)"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "chi2_kernel",
            "line": 991,
            "params": {
                "X": {
                    "type": "array-like of shape (n_samples_X, n_features)",
                    "line": 991
                },
                "Y": {
                    "type": "array of shape (n_samples_Y, n_features)",
                    "line": 991
                },
                "gamma": {
                    "type": "float, default=1.",
                    "line": 991
                }
            },
            "returns": {
                "kernel_matrix": "array of shape (n_samples_X, n_samples_Y)"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "distance_metrics",
            "line": 1053,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "_parallel_pairwise",
            "line": 1079,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "_pairwise_callable",
            "line": 1101,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "pairwise_distances",
            "line": 1141,
            "params": {
                "X": {
                    "type": "array [n_samples_a, n_samples_a] if metric == \"precomputed\", or,              [n_samples_a, n_features] otherwise",
                    "line": 1141
                },
                "Y": {
                    "type": "array [n_samples_b, n_features], optional",
                    "line": 1141
                },
                "metric": {
                    "type": "string, or callable",
                    "line": 1141
                },
                "n_jobs": {
                    "type": "int",
                    "line": 1141
                }
            },
            "returns": {
                "D": "array [n_samples_a, n_samples_a] or [n_samples_a, n_samples_b]"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "kernel_metrics",
            "line": 1279,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "pairwise_kernels",
            "line": 1319,
            "params": {
                "X": {
                    "type": "array [n_samples_a, n_samples_a] if metric == \"precomputed\", or,              [n_samples_a, n_features] otherwise",
                    "line": 1319
                },
                "Y": {
                    "type": "array [n_samples_b, n_features]",
                    "line": 1319
                },
                "metric": {
                    "type": "string, or callable",
                    "line": 1319
                },
                "filter_params": {
                    "type": "boolean",
                    "line": 1319
                },
                "n_jobs": {
                    "type": "int",
                    "line": 1320
                }
            },
            "returns": {
                "K": "array [n_samples_a, n_samples_a] or [n_samples_a, n_samples_b]"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\ranking.py": [
        {
            "name": "auc",
            "line": 39,
            "params": {
                "x": {
                    "type": "array, shape = [n]",
                    "line": 39
                },
                "y": {
                    "type": "array, shape = [n]",
                    "line": 39
                },
                "reorder": {
                    "type": "boolean, optional (default=False)",
                    "line": 39
                }
            },
            "returns": {
                "auc": "float"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "average_precision_score",
            "line": 110,
            "params": {
                "y_true": {
                    "type": "array, shape = [n_samples] or [n_samples, n_classes]",
                    "line": 110
                },
                "y_score": {
                    "type": "array, shape = [n_samples] or [n_samples, n_classes]",
                    "line": 110
                },
                "average": {
                    "type": "string, [None, 'micro', 'macro' (default), 'samples', 'weighted']",
                    "line": 110
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 111
                }
            },
            "returns": {
                "average_precision": "float"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "roc_auc_score",
            "line": 203,
            "params": {
                "y_true": {
                    "type": "array, shape = [n_samples] or [n_samples, n_classes]",
                    "line": 203
                },
                "y_score": {
                    "type": "array, shape = [n_samples] or [n_samples, n_classes]",
                    "line": 203
                },
                "average": {
                    "type": "string, [None, 'micro', 'macro' (default), 'samples', 'weighted']",
                    "line": 203
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 203
                }
            },
            "returns": {
                "auc": "float"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "_binary_clf_curve",
            "line": 280,
            "params": {
                "y_true": {
                    "type": "array, shape = [n_samples]",
                    "line": 280
                },
                "y_score": {
                    "type": "array, shape = [n_samples]",
                    "line": 280
                },
                "pos_label": {
                    "type": "int or str, default=None",
                    "line": 280
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 280
                }
            },
            "returns": {
                "fps": "array, shape = [n_thresholds]",
                "tps": "array, shape = [n_thresholds <= len(np.unique(y_score))]",
                "thresholds": "array, shape = [n_thresholds]"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "precision_recall_curve",
            "line": 362,
            "params": {
                "y_true": {
                    "type": "array, shape = [n_samples]",
                    "line": 362
                },
                "probas_pred": {
                    "type": "array, shape = [n_samples]",
                    "line": 362
                },
                "pos_label": {
                    "type": "int or str, default=None",
                    "line": 362
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 363
                }
            },
            "returns": {
                "precision": "array, shape = [n_thresholds + 1]",
                "recall": "array, shape = [n_thresholds + 1]",
                "thresholds": "array, shape = [n_thresholds <= len(np.unique(probas_pred))]"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "roc_curve",
            "line": 447,
            "params": {
                "y_true": {
                    "type": "array, shape = [n_samples]",
                    "line": 447
                },
                "y_score": {
                    "type": "array, shape = [n_samples]",
                    "line": 447
                },
                "pos_label": {
                    "type": "int or str, default=None",
                    "line": 447
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 447
                },
                "drop_intermediate": {
                    "type": "boolean, optional (default=True)",
                    "line": 448
                }
            },
            "returns": {
                "fpr": "array, shape = [>2]",
                "tpr": "array, shape = [>2]",
                "thresholds": "array, shape = [n_thresholds]"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "label_ranking_average_precision_score",
            "line": 573,
            "params": {
                "y_true": {
                    "type": "array or sparse matrix, shape = [n_samples, n_labels]",
                    "line": 573
                },
                "y_score": {
                    "type": "array, shape = [n_samples, n_labels]",
                    "line": 573
                }
            },
            "returns": {
                "score": "float"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "coverage_error",
            "line": 649,
            "params": {
                "y_true": {
                    "type": "array, shape = [n_samples, n_labels]",
                    "line": 649
                },
                "y_score": {
                    "type": "array, shape = [n_samples, n_labels]",
                    "line": 649
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 649
                }
            },
            "returns": {
                "coverage_error": "float"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "label_ranking_loss",
            "line": 708,
            "params": {
                "y_true": {
                    "type": "array or sparse matrix, shape = [n_samples, n_labels]",
                    "line": 708
                },
                "y_score": {
                    "type": "array, shape = [n_samples, n_labels]",
                    "line": 708
                },
                "sample_weight": {
                    "type": "array-like of shape = [n_samples], optional",
                    "line": 708
                }
            },
            "returns": {
                "loss": "float"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "dcg_score",
            "line": 793,
            "params": {
                "y_true": {
                    "type": "array, shape = [n_samples]",
                    "line": 793
                },
                "y_score": {
                    "type": "array, shape = [n_samples]",
                    "line": 793
                },
                "k": {
                    "type": "int",
                    "line": 793
                }
            },
            "returns": {
                "score": "float"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "ndcg_score",
            "line": 823,
            "params": {
                "y_true": {
                    "type": "array, shape = [n_samples]",
                    "line": 823
                },
                "y_score": {
                    "type": "array, shape = [n_samples, n_classes]",
                    "line": 823
                },
                "k": {
                    "type": "int",
                    "line": 823
                }
            },
            "returns": {
                "score": "float"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\regression.py": [
        {
            "name": "_check_reg_targets",
            "line": 43,
            "params": {
                "y_true": {
                    "type": "array-like,",
                    "line": 43
                },
                "y_pred": {
                    "type": "array-like,",
                    "line": 43
                },
                "multioutput": {
                    "type": "array-like or string in ['raw_values', uniform_average',",
                    "line": 43
                }
            },
            "returns": {
                "type_true": "one of {'continuous', continuous-multioutput'}",
                "y_true": "array-like of shape = (n_samples, n_outputs)",
                "y_pred": "array-like of shape = (n_samples, n_outputs)",
                "multioutput": "array-like of shape = (n_outputs) or string in ['raw_values',"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "mean_absolute_error",
            "line": 112,
            "params": {
                "y_true": {
                    "type": "array-like of shape = (n_samples) or (n_samples, n_outputs)",
                    "line": 112
                },
                "y_pred": {
                    "type": "array-like of shape = (n_samples) or (n_samples, n_outputs)",
                    "line": 112
                },
                "sample_weight": {
                    "type": "array-like of shape = (n_samples), optional",
                    "line": 113
                },
                "multioutput": {
                    "type": "string in ['raw_values', 'uniform_average']",
                    "line": 114
                }
            },
            "returns": {
                "loss": "float or ndarray of floats"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "mean_squared_error",
            "line": 183,
            "params": {
                "y_true": {
                    "type": "array-like of shape = (n_samples) or (n_samples, n_outputs)",
                    "line": 183
                },
                "y_pred": {
                    "type": "array-like of shape = (n_samples) or (n_samples, n_outputs)",
                    "line": 183
                },
                "sample_weight": {
                    "type": "array-like of shape = (n_samples), optional",
                    "line": 184
                },
                "multioutput": {
                    "type": "string in ['raw_values', 'uniform_average']",
                    "line": 185
                }
            },
            "returns": {
                "loss": "float or ndarray of floats"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "mean_squared_log_error",
            "line": 251,
            "params": {
                "y_true": {
                    "type": "array-like of shape = (n_samples) or (n_samples, n_outputs)",
                    "line": 251
                },
                "y_pred": {
                    "type": "array-like of shape = (n_samples) or (n_samples, n_outputs)",
                    "line": 251
                },
                "sample_weight": {
                    "type": "array-like of shape = (n_samples), optional",
                    "line": 252
                },
                "multioutput": {
                    "type": "string in ['raw_values', 'uniform_average']             or array-like of shape = (n_outputs)",
                    "line": 253
                }
            },
            "returns": {
                "loss": "float or ndarray of floats"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "median_absolute_error",
            "line": 318,
            "params": {
                "y_true": {
                    "type": "array-like of shape = (n_samples)",
                    "line": 318
                },
                "y_pred": {
                    "type": "array-like of shape = (n_samples)",
                    "line": 318
                }
            },
            "returns": {
                "loss": "float"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "explained_variance_score",
            "line": 352,
            "params": {
                "y_true": {
                    "type": "array-like of shape = (n_samples) or (n_samples, n_outputs)",
                    "line": 352
                },
                "y_pred": {
                    "type": "array-like of shape = (n_samples) or (n_samples, n_outputs)",
                    "line": 352
                },
                "sample_weight": {
                    "type": "array-like of shape = (n_samples), optional",
                    "line": 353
                },
                "multioutput": {
                    "type": "string in ['raw_values', 'uniform_average',                 'variance_weighted'] or array-like of shape (n_outputs)",
                    "line": 354
                }
            },
            "returns": {
                "score": "float or ndarray of floats"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "r2_score",
            "line": 444,
            "params": {
                "y_true": {
                    "type": "array-like of shape = (n_samples) or (n_samples, n_outputs)",
                    "line": 444
                },
                "y_pred": {
                    "type": "array-like of shape = (n_samples) or (n_samples, n_outputs)",
                    "line": 444
                },
                "sample_weight": {
                    "type": "array-like of shape = (n_samples), optional",
                    "line": 444
                },
                "multioutput": {
                    "type": "string in ['raw_values', 'uniform_average', 'variance_weighted'] or None or array-like of shape (n_outputs)",
                    "line": 445
                }
            },
            "returns": {
                "versionchanged": "",
                "z": "float or ndarray of floats"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\scorer.py": [
        {
            "name": "get_scorer",
            "line": 215,
            "params": {
                "scoring": {
                    "type": "str | callable",
                    "line": 215
                }
            },
            "returns": {
                "scorer": "callable"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "_passthrough_scorer",
            "line": 245,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "check_scoring",
            "line": 250,
            "params": {
                "estimator": {
                    "type": "estimator object implementing 'fit'",
                    "line": 250
                },
                "scoring": {
                    "type": "string, callable or None, optional, default",
                    "line": 250
                },
                "allow_none": {
                    "type": "boolean, optional, default",
                    "line": 250
                }
            },
            "returns": {
                "scoring": "callable"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "_check_multimetric_scoring",
            "line": 308,
            "params": {
                "estimator": {
                    "type": "sklearn estimator instance",
                    "line": 308
                },
                "scoring": {
                    "type": "string, callable, list/tuple, dict or None, default",
                    "line": 308
                }
            },
            "returns": {
                "scorers_dict": "dict",
                "is_multimetric": "bool"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "make_scorer",
            "line": 403,
            "params": {
                "score_func": {
                    "type": "callable,",
                    "line": 403
                },
                "greater_is_better": {
                    "type": "boolean, default=True",
                    "line": 403
                },
                "needs_proba": {
                    "type": "boolean, default=False",
                    "line": 403
                },
                "needs_threshold": {
                    "type": "boolean, default=False",
                    "line": 404
                }
            },
            "returns": {
                "scorer": "callable"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\setup.py": [],
    "../scikit-learn-master/sklearn\\metrics\\__init__.py": [],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\bicluster.py": [
        {
            "name": "_check_rows_and_columns",
            "line": 11,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_jaccard",
            "line": 21,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "_pairwise_similarity",
            "line": 32,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "consensus_score",
            "line": 49,
            "params": {
                "a": {
                    "type": "(rows, columns)",
                    "line": 49
                },
                "b": {
                    "type": "(rows, columns)",
                    "line": 49
                },
                "similarity": {
                    "type": "string or function, optional, default",
                    "line": 49
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\setup.py": [],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\supervised.py": [
        {
            "name": "check_clusterings",
            "line": 34,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "contingency_matrix",
            "line": 53,
            "params": {
                "labels_true": {
                    "type": "int array, shape = [n_samples]",
                    "line": 53
                },
                "labels_pred": {
                    "type": "array, shape = [n_samples]",
                    "line": 53
                },
                "eps": {
                    "type": "None or float, optional.",
                    "line": 53
                },
                "sparse": {
                    "type": "boolean, optional.",
                    "line": 53
                }
            },
            "returns": {
                "contingency": "{array-like, sparse}, shape=[n_classes_true, n_classes_pred]",
                "Matrix": "math",
                "class": "math"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "adjusted_rand_score",
            "line": 112,
            "params": {
                "labels_true": {
                    "type": "int array, shape = [n_samples]",
                    "line": 112
                },
                "labels_pred": {
                    "type": "array, shape = [n_samples]",
                    "line": 112
                }
            },
            "returns": {
                "ari": "float"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "homogeneity_completeness_v_measure",
            "line": 217,
            "params": {
                "labels_true": {
                    "type": "int array, shape = [n_samples]",
                    "line": 217
                },
                "labels_pred": {
                    "type": "array, shape = [n_samples]",
                    "line": 217
                }
            },
            "returns": {
                "homogeneity": "float",
                "completeness": "float",
                "v_measure": "float"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "homogeneity_score",
            "line": 291,
            "params": {
                "labels_true": {
                    "type": "int array, shape = [n_samples]",
                    "line": 291
                },
                "labels_pred": {
                    "type": "array, shape = [n_samples]",
                    "line": 291
                }
            },
            "returns": {
                "homogeneity": "float"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "completeness_score",
            "line": 365,
            "params": {
                "labels_true": {
                    "type": "int array, shape = [n_samples]",
                    "line": 365
                },
                "labels_pred": {
                    "type": "array, shape = [n_samples]",
                    "line": 365
                }
            },
            "returns": {
                "completeness": "float"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "v_measure_score",
            "line": 435,
            "params": {
                "labels_true": {
                    "type": "int array, shape = [n_samples]",
                    "line": 435
                },
                "labels_pred": {
                    "type": "array, shape = [n_samples]",
                    "line": 435
                }
            },
            "returns": {
                "v_measure": "float"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "mutual_info_score",
            "line": 530,
            "params": {
                "labels_true": {
                    "type": "int array, shape = [n_samples]",
                    "line": 530
                },
                "labels_pred": {
                    "type": "array, shape = [n_samples]",
                    "line": 530
                },
                "contingency": {
                    "type": "{None, array, sparse matrix},",
                    "line": 530
                }
            },
            "returns": {
                "mi": "float"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "adjusted_mutual_info_score",
            "line": 611,
            "params": {
                "labels_true": {
                    "type": "int array, shape = [n_samples]",
                    "line": 611
                },
                "labels_pred": {
                    "type": "array, shape = [n_samples]",
                    "line": 611
                }
            },
            "returns": {
                "ami": "float(upperlimited by 1.0)"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "normalized_mutual_info_score",
            "line": 707,
            "params": {
                "labels_true": {
                    "type": "int array, shape = [n_samples]",
                    "line": 707
                },
                "labels_pred": {
                    "type": "array, shape = [n_samples]",
                    "line": 707
                }
            },
            "returns": {
                "nmi": "float"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "fowlkes_mallows_score",
            "line": 787,
            "params": {
                "labels_true": {
                    "type": "int array, shape = (``n_samples``,)",
                    "line": 787
                },
                "labels_pred": {
                    "type": "array, shape = (``n_samples``, )",
                    "line": 787
                },
                "sparse": {
                    "type": "bool",
                    "line": 787
                }
            },
            "returns": {
                "score": "float"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "entropy",
            "line": 862,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\unsupervised.py": [
        {
            "name": "silhouette_score",
            "line": 22,
            "params": {
                "X": {
                    "type": "array [n_samples_a, n_samples_a] if metric == \"precomputed\", or,              [n_samples_a, n_features] otherwise",
                    "line": 22
                },
                "labels": {
                    "type": "array, shape = [n_samples]",
                    "line": 22
                },
                "metric": {
                    "type": "string, or callable",
                    "line": 22
                },
                "sample_size": {
                    "type": "int or None",
                    "line": 22
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 23
                }
            },
            "returns": {
                "silhouette": "float"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "silhouette_samples",
            "line": 104,
            "params": {
                "X": {
                    "type": "array [n_samples_a, n_samples_a] if metric == \"precomputed\", or,              [n_samples_a, n_features] otherwise",
                    "line": 104
                },
                "labels": {
                    "type": "array, shape = [n_samples]",
                    "line": 104
                },
                "metric": {
                    "type": "string, or callable",
                    "line": 104
                }
            },
            "returns": {
                "silhouette": "array, shape = [n_samples]"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "calinski_harabaz_score",
            "line": 211,
            "params": {
                "X": {
                    "type": "array-like, shape (``n_samples``, ``n_features``)",
                    "line": 211
                },
                "labels": {
                    "type": "array-like, shape (``n_samples``,)",
                    "line": 211
                }
            },
            "returns": {
                "score": "float"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\__init__.py": [],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\tests\\test_bicluster.py": [
        {
            "name": "test_consensus_score_issue2445",
            "line": 39,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\tests\\test_supervised.py": [],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\tests\\test_unsupervised.py": [],
    "../scikit-learn-master/sklearn\\metrics\\cluster\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_classification.py": [
        {
            "name": "make_prediction",
            "line": 56,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "test_confusion_matrix_sample_weight",
            "line": 656,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_common.py": [],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_pairwise.py": [],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_ranking.py": [
        {
            "name": "make_prediction",
            "line": 40,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_auc",
            "line": 87,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_average_precision",
            "line": 102,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_average_precision_slow",
            "line": 132,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_my_lrap",
            "line": 831,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_regression.py": [],
    "../scikit-learn-master/sklearn\\metrics\\tests\\test_score_objects.py": [],
    "../scikit-learn-master/sklearn\\metrics\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\mixture\\base.py": [
        {
            "name": "_check_shape",
            "line": 24,
            "params": {
                "param": {
                    "type": "array",
                    "line": 24
                },
                "param_shape": {
                    "type": "tuple",
                    "line": 24
                },
                "name": {
                    "type": "string",
                    "line": 24
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "_check_X",
            "line": 41,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 41
                },
                "n_components": {
                    "type": "int",
                    "line": 41
                }
            },
            "returns": {
                "X": "array, shape (n_samples, n_features)"
            },
            "count": {
                "total_params": 3,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\mixture\\bayesian_mixture.py": [
        {
            "name": "_log_dirichlet_norm",
            "line": 21,
            "params": {
                "dirichlet_concentration": {
                    "type": "array-like, shape (n_samples,)",
                    "line": 21
                }
            },
            "returns": {
                "log_dirichlet_norm": "float"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "_log_wishart_norm",
            "line": 38,
            "params": {
                "degrees_of_freedom": {
                    "type": "array-like, shape (n_components,)",
                    "line": 38
                },
                "n_features": {
                    "type": "int",
                    "line": 38
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\mixture\\dpgmm.py": [
        {
            "name": "log_normalize",
            "line": 47,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "wishart_log_det",
            "line": 61,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "wishart_logz",
            "line": 73,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "_bound_wishart",
            "line": 85,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_sym_quad_form",
            "line": 103,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_bound_state_log_lik",
            "line": 109,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 5,
                "missed_params": 5
            }
        }
    ],
    "../scikit-learn-master/sklearn\\mixture\\gaussian_mixture.py": [
        {
            "name": "_check_weights",
            "line": 21,
            "params": {
                "weights": {
                    "type": "array-like, shape (n_components,)",
                    "line": 21
                },
                "n_components": {
                    "type": "int",
                    "line": 21
                }
            },
            "returns": {
                "weights": "array, shape (n_components,)"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "_check_means",
            "line": 54,
            "params": {
                "means": {
                    "type": "array-like, shape (n_components, n_features)",
                    "line": 54
                },
                "n_components": {
                    "type": "int",
                    "line": 54
                },
                "n_features": {
                    "type": "int",
                    "line": 54
                }
            },
            "returns": {
                "means": "array, (n_components, n_features)"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "_check_precision_positivity",
            "line": 77,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_check_precision_matrix",
            "line": 84,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_check_precisions_full",
            "line": 92,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_check_precisions",
            "line": 98,
            "params": {
                "precisions": {
                    "type": "array-like,",
                    "line": 98
                },
                "covariance_type": {
                    "type": "string",
                    "line": 98
                },
                "n_components": {
                    "type": "int",
                    "line": 98
                },
                "n_features": {
                    "type": "int",
                    "line": 98
                }
            },
            "returns": {
                "precisions": "array"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "_estimate_gaussian_covariances_full",
            "line": 143,
            "params": {
                "resp": {
                    "type": "array-like, shape (n_samples, n_components)",
                    "line": 143
                },
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 143
                },
                "nk": {
                    "type": "array-like, shape (n_components,)",
                    "line": 143
                },
                "means": {
                    "type": "array-like, shape (n_components, n_features)",
                    "line": 143
                },
                "reg_covar": {
                    "type": "float",
                    "line": 143
                }
            },
            "returns": {
                "covariances": "array, shape (n_components, n_features, n_features)"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "_estimate_gaussian_covariances_tied",
            "line": 172,
            "params": {
                "resp": {
                    "type": "array-like, shape (n_samples, n_components)",
                    "line": 172
                },
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 172
                },
                "nk": {
                    "type": "array-like, shape (n_components,)",
                    "line": 172
                },
                "means": {
                    "type": "array-like, shape (n_components, n_features)",
                    "line": 172
                },
                "reg_covar": {
                    "type": "float",
                    "line": 172
                }
            },
            "returns": {
                "covariance": "array, shape (n_features, n_features)"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "_estimate_gaussian_covariances_diag",
            "line": 200,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 200
                },
                "nk": {
                    "type": "array-like, shape (n_components,)",
                    "line": 200
                },
                "means": {
                    "type": "array-like, shape (n_components, n_features)",
                    "line": 200
                },
                "reg_covar": {
                    "type": "float",
                    "line": 200
                }
            },
            "returns": {
                "covariances": "array, shape (n_components, n_features)"
            },
            "count": {
                "total_params": 5,
                "missed_params": 1
            }
        },
        {
            "name": "_estimate_gaussian_covariances_spherical",
            "line": 226,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 226
                },
                "nk": {
                    "type": "array-like, shape (n_components,)",
                    "line": 226
                },
                "means": {
                    "type": "array-like, shape (n_components, n_features)",
                    "line": 226
                },
                "reg_covar": {
                    "type": "float",
                    "line": 226
                }
            },
            "returns": {
                "variances": "array, shape (n_components,)"
            },
            "count": {
                "total_params": 5,
                "missed_params": 1
            }
        },
        {
            "name": "_estimate_gaussian_parameters",
            "line": 250,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 250
                },
                "resp": {
                    "type": "array-like, shape (n_samples, n_components)",
                    "line": 250
                },
                "reg_covar": {
                    "type": "float",
                    "line": 250
                },
                "covariance_type": {
                    "type": "{'full', 'tied', 'diag', 'spherical'}",
                    "line": 250
                }
            },
            "returns": {
                "nk": "array-like, shape (n_components,)",
                "means": "array-like, shape (n_components, n_features)",
                "covariances": "array-like"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "_compute_precision_cholesky",
            "line": 289,
            "params": {
                "covariances": {
                    "type": "array-like",
                    "line": 289
                },
                "covariance_type": {
                    "type": "{'full', 'tied', 'diag', 'spherical'}",
                    "line": 289
                }
            },
            "returns": {
                "precisions_cholesky": "array-like"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "_compute_log_det_cholesky",
            "line": 341,
            "params": {
                "matrix_chol": {
                    "type": "array-like,",
                    "line": 341
                },
                "covariance_type": {
                    "type": "{'full', 'tied', 'diag', 'spherical'}",
                    "line": 341
                },
                "n_features": {
                    "type": "int",
                    "line": 341
                }
            },
            "returns": {
                "log_det_precision_chol": "array-like, shape (n_components,)"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "_estimate_log_gaussian_prob",
            "line": 381,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 381
                },
                "means": {
                    "type": "array-like, shape (n_components, n_features)",
                    "line": 381
                },
                "precisions_chol": {
                    "type": "array-like,",
                    "line": 381
                },
                "covariance_type": {
                    "type": "{'full', 'tied', 'diag', 'spherical'}",
                    "line": 381
                }
            },
            "returns": {
                "log_prob": "array, shape (n_samples, n_components)"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\mixture\\gmm.py": [
        {
            "name": "log_multivariate_normal_density",
            "line": 33,
            "params": {
                "X": {
                    "type": "array_like, shape (n_samples, n_features)",
                    "line": 35
                },
                "means": {
                    "type": "array_like, shape (n_components, n_features)",
                    "line": 35
                },
                "covars": {
                    "type": "array_like",
                    "line": 35
                },
                "covariance_type": {
                    "type": "string",
                    "line": 35
                }
            },
            "returns": {
                "lpr": "array_like, shape (n_samples, n_components)"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "sample_gaussian",
            "line": 75,
            "params": {
                "mean": {
                    "type": "array_like, shape (n_features,)",
                    "line": 78
                },
                "covar": {
                    "type": "array_like",
                    "line": 78
                },
                "covariance_type": {
                    "type": "string, optional",
                    "line": 78
                },
                "n_samples": {
                    "type": "int, optional",
                    "line": 78
                }
            },
            "returns": {
                "X": "array"
            },
            "count": {
                "total_params": 5,
                "missed_params": 1
            }
        },
        {
            "name": "_log_multivariate_normal_density_diag",
            "line": 694,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_log_multivariate_normal_density_spherical",
            "line": 704,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_log_multivariate_normal_density_tied",
            "line": 714,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_log_multivariate_normal_density_full",
            "line": 720,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "_validate_covars",
            "line": 746,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "distribute_covar_matrix_to_match_covariance_type",
            "line": 784,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_covar_mstep_diag",
            "line": 804,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 6,
                "missed_params": 6
            }
        },
        {
            "name": "_covar_mstep_spherical",
            "line": 813,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "_covar_mstep_full",
            "line": 819,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 6,
                "missed_params": 6
            }
        },
        {
            "name": "_covar_mstep_tied",
            "line": 837,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 6,
                "missed_params": 6
            }
        }
    ],
    "../scikit-learn-master/sklearn\\mixture\\__init__.py": [],
    "../scikit-learn-master/sklearn\\mixture\\tests\\test_bayesian_mixture.py": [],
    "../scikit-learn-master/sklearn\\mixture\\tests\\test_dpgmm.py": [],
    "../scikit-learn-master/sklearn\\mixture\\tests\\test_gaussian_mixture.py": [],
    "../scikit-learn-master/sklearn\\mixture\\tests\\test_gmm.py": [
        {
            "name": "test_fit_predict",
            "line": 408,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "check_positive_definite_covars",
            "line": 453,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\mixture\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\model_selection\\_search.py": [
        {
            "name": "fit_grid_point",
            "line": 274,
            "params": {
                "X": {
                    "type": "array-like, sparse matrix or list",
                    "line": 274
                },
                "y": {
                    "type": "array-like or None",
                    "line": 274
                },
                "estimator": {
                    "type": "estimator object",
                    "line": 274
                },
                "parameters": {
                    "type": "dict",
                    "line": 274
                },
                "train": {
                    "type": "ndarray, dtype int or bool",
                    "line": 274
                },
                "test": {
                    "type": "ndarray, dtype int or bool",
                    "line": 274
                },
                "scorer": {
                    "type": "callable or None",
                    "line": 274
                },
                "verbose": {
                    "type": "int",
                    "line": 275
                },
                "error_score": {
                    "type": "'raise' (default) or numeric",
                    "line": 275
                }
            },
            "returns": {
                "score": "float",
                "parameters": "dict",
                "n_samples_test": "int"
            },
            "count": {
                "total_params": 9,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\model_selection\\_split.py": [
        {
            "name": "_approximate_mode",
            "line": 1389,
            "params": {
                "class_counts": {
                    "type": "ndarray of int",
                    "line": 1389
                },
                "n_draws": {
                    "type": "int",
                    "line": 1389
                },
                "rng": {
                    "type": "random state",
                    "line": 1389
                }
            },
            "returns": {
                "sampled_classes": "ndarray of int"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "_validate_shuffle_split_init",
            "line": 1619,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_validate_shuffle_split",
            "line": 1662,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "check_cv",
            "line": 1857,
            "params": {
                "cv": {
                    "type": "int, cross-validation generator or an iterable, optional",
                    "line": 1857
                },
                "y": {
                    "type": "array-like, optional",
                    "line": 1857
                },
                "classifier": {
                    "type": "boolean, optional, default False",
                    "line": 1857
                }
            },
            "returns": {
                "checked_cv": "a cross-validator instance."
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "train_test_split",
            "line": 1911,
            "params": {},
            "returns": {
                "splitting": "list, length=2 * len(arrays)",
                "versionadded": ""
            },
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\model_selection\\_validation.py": [
        {
            "name": "cross_validate",
            "line": 38,
            "params": {
                "estimator": {
                    "type": "estimator object implementing 'fit'",
                    "line": 38
                },
                "X": {
                    "type": "array-like",
                    "line": 38
                },
                "y": {
                    "type": "array-like, optional, default",
                    "line": 38
                },
                "groups": {
                    "type": "array-like, with shape (n_samples,), optional",
                    "line": 38
                },
                "scoring": {
                    "type": "string, callable, list/tuple, dict or None, default",
                    "line": 38
                },
                "cv": {
                    "type": "int, cross-validation generator or an iterable, optional",
                    "line": 38
                },
                "n_jobs": {
                    "type": "integer, optional",
                    "line": 39
                },
                "verbose": {
                    "type": "integer, optional",
                    "line": 39
                },
                "fit_params": {
                    "type": "dict, optional",
                    "line": 39
                },
                "pre_dispatch": {
                    "type": "int, or string, optional",
                    "line": 40
                },
                "return_train_score": {
                    "type": "boolean, default True",
                    "line": 40
                }
            },
            "returns": {
                "scores": "dict of float arrays of shape=(n_splits,)",
                "are": ""
            },
            "count": {
                "total_params": 11,
                "missed_params": 0
            }
        },
        {
            "name": "cross_val_score",
            "line": 218,
            "params": {
                "estimator": {
                    "type": "estimator object implementing 'fit'",
                    "line": 218
                },
                "X": {
                    "type": "array-like",
                    "line": 218
                },
                "y": {
                    "type": "array-like, optional, default",
                    "line": 218
                },
                "groups": {
                    "type": "array-like, with shape (n_samples,), optional",
                    "line": 218
                },
                "scoring": {
                    "type": "string, callable or None, optional, default",
                    "line": 218
                },
                "cv": {
                    "type": "int, cross-validation generator or an iterable, optional",
                    "line": 218
                },
                "n_jobs": {
                    "type": "integer, optional",
                    "line": 219
                },
                "verbose": {
                    "type": "integer, optional",
                    "line": 219
                },
                "fit_params": {
                    "type": "dict, optional",
                    "line": 219
                },
                "pre_dispatch": {
                    "type": "int, or string, optional",
                    "line": 220
                }
            },
            "returns": {
                "scores": "array of float, shape=(len(list(cv)),)"
            },
            "count": {
                "total_params": 10,
                "missed_params": 0
            }
        },
        {
            "name": "_fit_and_score",
            "line": 327,
            "params": {
                "estimator": {
                    "type": "estimator object implementing 'fit'",
                    "line": 327
                },
                "X": {
                    "type": "array-like of shape at least 2D",
                    "line": 327
                },
                "y": {
                    "type": "array-like, optional, default",
                    "line": 327
                },
                "scorer": {
                    "type": "A single callable or dict mapping scorer name to the callable",
                    "line": 327
                },
                "train": {
                    "type": "array-like, shape (n_train_samples,)",
                    "line": 327
                },
                "test": {
                    "type": "array-like, shape (n_test_samples,)",
                    "line": 327
                },
                "verbose": {
                    "type": "integer",
                    "line": 327
                },
                "parameters": {
                    "type": "dict or None",
                    "line": 328
                },
                "fit_params": {
                    "type": "dict or None",
                    "line": 328
                },
                "return_train_score": {
                    "type": "boolean, optional, default",
                    "line": 328
                },
                "return_parameters": {
                    "type": "boolean, optional, default",
                    "line": 329
                },
                "return_n_test_samples": {
                    "type": "boolean, optional, default",
                    "line": 329
                },
                "return_times": {
                    "type": "boolean, optional, default",
                    "line": 330
                },
                "error_score": {
                    "type": "'raise' (default) or numeric",
                    "line": 330
                }
            },
            "returns": {
                "train_scores": "dict of scorer name -> float, optional",
                "test_scores": "dict of scorer name -> float, optional",
                "n_test_samples": "int",
                "fit_time": "float",
                "score_time": "float",
                "parameters": "dict or None, optional"
            },
            "count": {
                "total_params": 14,
                "missed_params": 0
            }
        },
        {
            "name": "_score",
            "line": 497,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 5,
                "missed_params": 5
            }
        },
        {
            "name": "_multimetric_score",
            "line": 526,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "cross_val_predict",
            "line": 552,
            "params": {
                "estimator": {
                    "type": "estimator object implementing 'fit' and 'predict'",
                    "line": 552
                },
                "X": {
                    "type": "array-like",
                    "line": 552
                },
                "y": {
                    "type": "array-like, optional, default",
                    "line": 552
                },
                "groups": {
                    "type": "array-like, with shape (n_samples,), optional",
                    "line": 552
                },
                "cv": {
                    "type": "int, cross-validation generator or an iterable, optional",
                    "line": 552
                },
                "n_jobs": {
                    "type": "integer, optional",
                    "line": 552
                },
                "verbose": {
                    "type": "integer, optional",
                    "line": 553
                },
                "fit_params": {
                    "type": "dict, optional",
                    "line": 553
                },
                "pre_dispatch": {
                    "type": "int, or string, optional",
                    "line": 553
                },
                "method": {
                    "type": "string, optional, default",
                    "line": 554
                }
            },
            "returns": {
                "predictions": "ndarray"
            },
            "count": {
                "total_params": 10,
                "missed_params": 0
            }
        },
        {
            "name": "_fit_and_predict",
            "line": 673,
            "params": {
                "estimator": {
                    "type": "estimator object implementing 'fit' and 'predict'",
                    "line": 673
                },
                "X": {
                    "type": "array-like of shape at least 2D",
                    "line": 673
                },
                "y": {
                    "type": "array-like, optional, default",
                    "line": 673
                },
                "train": {
                    "type": "array-like, shape (n_train_samples,)",
                    "line": 673
                },
                "test": {
                    "type": "array-like, shape (n_test_samples,)",
                    "line": 673
                },
                "verbose": {
                    "type": "integer",
                    "line": 673
                },
                "fit_params": {
                    "type": "dict or None",
                    "line": 673
                },
                "method": {
                    "type": "string",
                    "line": 674
                }
            },
            "returns": {
                "predictions": "sequence",
                "test": "array-like"
            },
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "_check_is_permutation",
            "line": 739,
            "params": {
                "indices": {
                    "type": "ndarray",
                    "line": 739
                },
                "n_samples": {
                    "type": "int",
                    "line": 739
                }
            },
            "returns": {
                "is_partition": "bool"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "_index_param_value",
            "line": 763,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "permutation_test_score",
            "line": 773,
            "params": {
                "estimator": {
                    "type": "estimator object implementing 'fit'",
                    "line": 773
                },
                "X": {
                    "type": "array-like of shape at least 2D",
                    "line": 773
                },
                "y": {
                    "type": "array-like",
                    "line": 773
                },
                "groups": {
                    "type": "array-like, with shape (n_samples,), optional",
                    "line": 773
                },
                "cv": {
                    "type": "int, cross-validation generator or an iterable, optional",
                    "line": 773
                },
                "n_permutations": {
                    "type": "integer, optional",
                    "line": 774
                },
                "n_jobs": {
                    "type": "integer, optional",
                    "line": 774
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=0)",
                    "line": 774
                },
                "verbose": {
                    "type": "integer, optional",
                    "line": 775
                },
                "scoring": {
                    "type": "string, callable or None, optional, default",
                    "line": 775
                }
            },
            "returns": {
                "score": "float",
                "permutation_scores": "array, shape (n_permutations,)",
                "pvalue": "float",
                "as": ""
            },
            "count": {
                "total_params": 10,
                "missed_params": 0
            }
        },
        {
            "name": "_permutation_test_score",
            "line": 889,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 6,
                "missed_params": 6
            }
        },
        {
            "name": "_shuffle",
            "line": 900,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "learning_curve",
            "line": 912,
            "params": {
                "estimator": {
                    "type": "object type that implements the \"fit\" and \"predict\" methods",
                    "line": 912
                },
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 912
                },
                "y": {
                    "type": "array-like, shape (n_samples) or (n_samples, n_features), optional",
                    "line": 912
                },
                "groups": {
                    "type": "array-like, with shape (n_samples,), optional",
                    "line": 912
                },
                "train_sizes": {
                    "type": "array-like, shape (n_ticks,), dtype float or int",
                    "line": 913
                },
                "cv": {
                    "type": "int, cross-validation generator or an iterable, optional",
                    "line": 913
                },
                "scoring": {
                    "type": "string, callable or None, optional, default",
                    "line": 913
                },
                "exploit_incremental_learning": {
                    "type": "boolean, optional, default",
                    "line": 914
                },
                "n_jobs": {
                    "type": "integer, optional",
                    "line": 914
                },
                "pre_dispatch": {
                    "type": "integer or string, optional",
                    "line": 915
                },
                "verbose": {
                    "type": "integer, optional",
                    "line": 915
                },
                "shuffle": {
                    "type": "boolean, optional",
                    "line": 915
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 916
                }
            },
            "returns": {
                "train_sizes_abs": "array, shape = (n_unique_ticks,), dtype int",
                "train_scores": "array, shape (n_ticks, n_cv_folds)",
                "test_scores": "array, shape (n_ticks, n_cv_folds)"
            },
            "count": {
                "total_params": 13,
                "missed_params": 0
            }
        },
        {
            "name": "_translate_train_sizes",
            "line": 1073,
            "params": {
                "train_sizes": {
                    "type": "array-like, shape (n_ticks,), dtype float or int",
                    "line": 1073
                },
                "n_max_training_samples": {
                    "type": "int",
                    "line": 1073
                }
            },
            "returns": {
                "train_sizes_abs": "array, shape (n_unique_ticks,), dtype int"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "_incremental_fit_estimator",
            "line": 1132,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 9,
                "missed_params": 9
            }
        },
        {
            "name": "validation_curve",
            "line": 1153,
            "params": {
                "estimator": {
                    "type": "object type that implements the \"fit\" and \"predict\" methods",
                    "line": 1153
                },
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 1153
                },
                "y": {
                    "type": "array-like, shape (n_samples) or (n_samples, n_features), optional",
                    "line": 1153
                },
                "param_name": {
                    "type": "string",
                    "line": 1153
                },
                "param_range": {
                    "type": "array-like, shape (n_values,)",
                    "line": 1153
                },
                "groups": {
                    "type": "array-like, with shape (n_samples,), optional",
                    "line": 1153
                },
                "cv": {
                    "type": "int, cross-validation generator or an iterable, optional",
                    "line": 1154
                },
                "scoring": {
                    "type": "string, callable or None, optional, default",
                    "line": 1154
                },
                "n_jobs": {
                    "type": "integer, optional",
                    "line": 1154
                },
                "pre_dispatch": {
                    "type": "integer or string, optional",
                    "line": 1154
                },
                "verbose": {
                    "type": "integer, optional",
                    "line": 1155
                }
            },
            "returns": {
                "train_scores": "array, shape (n_ticks, n_cv_folds)",
                "test_scores": "array, shape (n_ticks, n_cv_folds)"
            },
            "count": {
                "total_params": 11,
                "missed_params": 0
            }
        },
        {
            "name": "_aggregate_score_dicts",
            "line": 1255,
            "params": {
                "scores": {
                    "type": "list of dict",
                    "line": 1255
                }
            },
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\model_selection\\__init__.py": [],
    "../scikit-learn-master/sklearn\\model_selection\\tests\\common.py": [],
    "../scikit-learn-master/sklearn\\model_selection\\tests\\test_search.py": [
        {
            "name": "compare_cv_results_multimetric_with_single",
            "line": 1005,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "compare_refit_methods_when_refit_with_acc",
            "line": 1036,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\model_selection\\tests\\test_split.py": [],
    "../scikit-learn-master/sklearn\\model_selection\\tests\\test_validation.py": [],
    "../scikit-learn-master/sklearn\\model_selection\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\approximate.py": [
        {
            "name": "_find_matching_indices",
            "line": 24,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "_find_longest_prefix_match",
            "line": 36,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 5,
                "missed_params": 5
            }
        },
        {
            "name": "_array_of_arrays",
            "line": 103,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\neighbors\\base.py": [
        {
            "name": "_check_weights",
            "line": 46,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_get_weights",
            "line": 57,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\neighbors\\classification.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\graph.py": [
        {
            "name": "_check_params",
            "line": 11,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "_query_include_self",
            "line": 24,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "kneighbors_graph",
            "line": 34,
            "params": {
                "X": {
                    "type": "array-like or BallTree, shape = [n_samples, n_features]",
                    "line": 34
                },
                "n_neighbors": {
                    "type": "int",
                    "line": 34
                },
                "mode": {
                    "type": "{'connectivity', 'distance'}, optional",
                    "line": 34
                },
                "metric": {
                    "type": "string, default 'minkowski'",
                    "line": 34
                },
                "p": {
                    "type": "int, default 2",
                    "line": 35
                },
                "metric_params": {
                    "type": "dict, optional",
                    "line": 35
                },
                "include_self": {
                    "type": "bool, default=False.",
                    "line": 35
                },
                "n_jobs": {
                    "type": "int, optional (default = 1)",
                    "line": 35
                }
            },
            "returns": {
                "A": "sparse matrix in CSR format, shape = [n_samples, n_samples]"
            },
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "radius_neighbors_graph",
            "line": 106,
            "params": {
                "X": {
                    "type": "array-like or BallTree, shape = [n_samples, n_features]",
                    "line": 106
                },
                "radius": {
                    "type": "float",
                    "line": 106
                },
                "mode": {
                    "type": "{'connectivity', 'distance'}, optional",
                    "line": 106
                },
                "metric": {
                    "type": "string, default 'minkowski'",
                    "line": 106
                },
                "p": {
                    "type": "int, default 2",
                    "line": 107
                },
                "metric_params": {
                    "type": "dict, optional",
                    "line": 107
                },
                "include_self": {
                    "type": "bool, default=False",
                    "line": 107
                },
                "n_jobs": {
                    "type": "int, optional (default = 1)",
                    "line": 107
                }
            },
            "returns": {
                "A": "sparse matrix in CSR format, shape = [n_samples, n_samples]"
            },
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\neighbors\\kde.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\lof.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\nearest_centroid.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\regression.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\setup.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\unsupervised.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\__init__.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_approximate.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_ball_tree.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_dist_metrics.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_kde.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_kd_tree.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_lof.py": [
        {
            "name": "test_lof_precomputed",
            "line": 85,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_nearest_centroid.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_neighbors.py": [
        {
            "name": "_weight_func",
            "line": 52,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "test_precomputed",
            "line": 110,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "test_radius_neighbors_boundary_handling",
            "line": 432,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\test_quad_tree.py": [],
    "../scikit-learn-master/sklearn\\neighbors\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\neural_network\\multilayer_perceptron.py": [
        {
            "name": "_pack",
            "line": 35,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\neural_network\\rbm.py": [],
    "../scikit-learn-master/sklearn\\neural_network\\_base.py": [
        {
            "name": "identity",
            "line": 12,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 12
                }
            },
            "returns": {
                "X": "{array-like, sparse matrix}, shape (n_samples, n_features)"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "logistic",
            "line": 29,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 29
                }
            },
            "returns": {
                "X_new": "{array-like, sparse matrix}, shape (n_samples, n_features)"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "tanh",
            "line": 45,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 45
                }
            },
            "returns": {
                "X_new": "{array-like, sparse matrix}, shape (n_samples, n_features)"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "relu",
            "line": 61,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 61
                }
            },
            "returns": {
                "X_new": "{array-like, sparse matrix}, shape (n_samples, n_features)"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "softmax",
            "line": 78,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 78
                }
            },
            "returns": {
                "X_new": "{array-like, sparse matrix}, shape (n_samples, n_features)"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_identity_derivative",
            "line": 102,
            "params": {
                "Z": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 102
                },
                "delta": {
                    "type": "{array-like}, shape (n_samples, n_features)",
                    "line": 102
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_logistic_derivative",
            "line": 117,
            "params": {
                "Z": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 117
                },
                "delta": {
                    "type": "{array-like}, shape (n_samples, n_features)",
                    "line": 117
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_tanh_derivative",
            "line": 136,
            "params": {
                "Z": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 136
                },
                "delta": {
                    "type": "{array-like}, shape (n_samples, n_features)",
                    "line": 136
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_relu_derivative",
            "line": 154,
            "params": {
                "Z": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 154
                },
                "delta": {
                    "type": "{array-like}, shape (n_samples, n_features)",
                    "line": 154
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "squared_loss",
            "line": 178,
            "params": {
                "y_true": {
                    "type": "array-like or label indicator matrix",
                    "line": 178
                },
                "y_pred": {
                    "type": "array-like or label indicator matrix",
                    "line": 178
                }
            },
            "returns": {
                "loss": "float"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "log_loss",
            "line": 197,
            "params": {
                "y_true": {
                    "type": "array-like or label indicator matrix",
                    "line": 197
                },
                "y_prob": {
                    "type": "array-like of float, shape = (n_samples, n_classes)",
                    "line": 197
                }
            },
            "returns": {
                "loss": "float"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "binary_log_loss",
            "line": 225,
            "params": {
                "y_true": {
                    "type": "array-like or label indicator matrix",
                    "line": 225
                },
                "y_prob": {
                    "type": "array-like of float, shape = (n_samples, n_classes)",
                    "line": 225
                }
            },
            "returns": {
                "loss": "float"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\neural_network\\_stochastic_optimizers.py": [],
    "../scikit-learn-master/sklearn\\neural_network\\__init__.py": [],
    "../scikit-learn-master/sklearn\\neural_network\\tests\\test_mlp.py": [],
    "../scikit-learn-master/sklearn\\neural_network\\tests\\test_rbm.py": [],
    "../scikit-learn-master/sklearn\\neural_network\\tests\\test_stochastic_optimizers.py": [],
    "../scikit-learn-master/sklearn\\neural_network\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\preprocessing\\data.py": [
        {
            "name": "_handle_zeros_in_scale",
            "line": 61,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "scale",
            "line": 79,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}",
                    "line": 79
                },
                "axis": {
                    "type": "int (0 by default)",
                    "line": 79
                },
                "with_mean": {
                    "type": "boolean, True by default",
                    "line": 79
                },
                "with_std": {
                    "type": "boolean, True by default",
                    "line": 79
                },
                "copy": {
                    "type": "boolean, optional, default True",
                    "line": 79
                }
            },
            "returns": {},
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "minmax_scale",
            "line": 390,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 390
                },
                "feature_range": {
                    "type": "tuple (min, max), default=(0, 1)",
                    "line": 390
                },
                "axis": {
                    "type": "int (0 by default)",
                    "line": 390
                },
                "copy": {
                    "type": "boolean, optional, default is True",
                    "line": 390
                }
            },
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "maxabs_scale",
            "line": 884,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 884
                },
                "axis": {
                    "type": "int (0 by default)",
                    "line": 884
                },
                "copy": {
                    "type": "boolean, optional, default is True",
                    "line": 884
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "robust_scale",
            "line": 1113,
            "params": {
                "X": {
                    "type": "array-like",
                    "line": 1113
                },
                "axis": {
                    "type": "int (0 by default)",
                    "line": 1113
                },
                "with_centering": {
                    "type": "boolean, True by default",
                    "line": 1113
                },
                "with_scaling": {
                    "type": "boolean, True by default",
                    "line": 1113
                },
                "quantile_range": {
                    "type": "tuple (q_min, q_max), 0.0 < q_min < q_max < 100.0",
                    "line": 1114
                },
                "copy": {
                    "type": "boolean, optional, default is True",
                    "line": 1114
                }
            },
            "returns": {},
            "count": {
                "total_params": 6,
                "missed_params": 0
            }
        },
        {
            "name": "normalize",
            "line": 1363,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape [n_samples, n_features]",
                    "line": 1363
                },
                "norm": {
                    "type": "'l1', 'l2', or 'max', optional ('l2' by default)",
                    "line": 1363
                },
                "axis": {
                    "type": "0 or 1, optional (1 by default)",
                    "line": 1363
                },
                "copy": {
                    "type": "boolean, optional, default True",
                    "line": 1363
                },
                "return_norm": {
                    "type": "boolean, default False",
                    "line": 1363
                }
            },
            "returns": {
                "X": "{array-like, sparse matrix}, shape [n_samples, n_features]",
                "norms": "array, shape [n_samples] if axis=1 else [n_features]"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "binarize",
            "line": 1546,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape [n_samples, n_features]",
                    "line": 1546
                },
                "threshold": {
                    "type": "float, optional (0.0 by default)",
                    "line": 1546
                },
                "copy": {
                    "type": "boolean, optional, default True",
                    "line": 1546
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "add_dummy_feature",
            "line": 1741,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape [n_samples, n_features]",
                    "line": 1741
                },
                "value": {
                    "type": "float",
                    "line": 1741
                }
            },
            "returns": {
                "X": "{array, sparse matrix}, shape [n_samples, n_features + 1]"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "_transform_selected",
            "line": 1800,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape [n_samples, n_features]",
                    "line": 1800
                },
                "transform": {
                    "type": "callable",
                    "line": 1800
                },
                "selected": {
                    "type": "\"all\" or array of indices or mask",
                    "line": 1800
                },
                "copy": {
                    "type": "boolean, optional",
                    "line": 1800
                }
            },
            "returns": {
                "X": "array or sparse matrix, shape=(n_samples, n_features_new)"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "quantile_transform",
            "line": 2462,
            "params": {
                "X": {
                    "type": "array-like, sparse matrix",
                    "line": 2462
                },
                "axis": {
                    "type": "int, (default=0)",
                    "line": 2462
                },
                "n_quantiles": {
                    "type": "int, optional (default=1000)",
                    "line": 2462
                },
                "output_distribution": {
                    "type": "str, optional (default='uniform')",
                    "line": 2463
                },
                "ignore_implicit_zeros": {
                    "type": "bool, optional (default=False)",
                    "line": 2464
                },
                "subsample": {
                    "type": "int, optional (default=1e5)",
                    "line": 2465
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 2466
                },
                "copy": {
                    "type": "boolean, optional, (default=True)",
                    "line": 2467
                }
            },
            "returns": {},
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\preprocessing\\imputation.py": [
        {
            "name": "_get_mask",
            "line": 27,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_most_frequent",
            "line": 35,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\preprocessing\\label.py": [
        {
            "name": "label_binarize",
            "line": 392,
            "params": {
                "y": {
                    "type": "array-like",
                    "line": 392
                },
                "classes": {
                    "type": "array-like of shape [n_classes]",
                    "line": 392
                },
                "neg_label": {
                    "type": "int (default",
                    "line": 392
                },
                "pos_label": {
                    "type": "int (default",
                    "line": 392
                },
                "sparse_output": {
                    "type": "boolean (default",
                    "line": 392
                }
            },
            "returns": {
                "Y": "numpy array or CSR matrix of shape [n_samples, n_classes]"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "_inverse_binarize_multiclass",
            "line": 549,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_inverse_binarize_thresholding",
            "line": 593,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        }
    ],
    "../scikit-learn-master/sklearn\\preprocessing\\_function_transformer.py": [
        {
            "name": "_identity",
            "line": 8,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\preprocessing\\__init__.py": [],
    "../scikit-learn-master/sklearn\\preprocessing\\tests\\test_data.py": [],
    "../scikit-learn-master/sklearn\\preprocessing\\tests\\test_function_transformer.py": [],
    "../scikit-learn-master/sklearn\\preprocessing\\tests\\test_imputation.py": [
        {
            "name": "_check_statistics",
            "line": 18,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 5,
                "missed_params": 5
            }
        }
    ],
    "../scikit-learn-master/sklearn\\preprocessing\\tests\\test_label.py": [],
    "../scikit-learn-master/sklearn\\preprocessing\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\semi_supervised\\label_propagation.py": [],
    "../scikit-learn-master/sklearn\\semi_supervised\\__init__.py": [],
    "../scikit-learn-master/sklearn\\semi_supervised\\tests\\test_label_propagation.py": [],
    "../scikit-learn-master/sklearn\\semi_supervised\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\svm\\base.py": [
        {
            "name": "_one_vs_one_coef",
            "line": 27,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_get_liblinear_solver_type",
            "line": 690,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "_fit_liblinear",
            "line": 750,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                    "line": 750
                },
                "y": {
                    "type": "array-like, shape (n_samples,)",
                    "line": 750
                },
                "C": {
                    "type": "float",
                    "line": 750
                },
                "fit_intercept": {
                    "type": "bool",
                    "line": 750
                },
                "intercept_scaling": {
                    "type": "float",
                    "line": 750
                },
                "class_weight": {
                    "type": "{dict, 'balanced'}, optional",
                    "line": 750
                },
                "penalty": {
                    "type": "str, {'l1', 'l2'}",
                    "line": 751
                },
                "dual": {
                    "type": "bool",
                    "line": 751
                },
                "verbose": {
                    "type": "int",
                    "line": 751
                },
                "max_iter": {
                    "type": "int",
                    "line": 751
                },
                "tol": {
                    "type": "float",
                    "line": 751
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 752
                },
                "multi_class": {
                    "type": "str, {'ovr', 'crammer_singer'}",
                    "line": 752
                },
                "loss": {
                    "type": "str, {'logistic_regression', 'hinge', 'squared_hinge',",
                    "line": 753
                },
                "epsilon": {
                    "type": "float, optional (default=0.1)",
                    "line": 753
                },
                "sample_weight": {
                    "type": "array-like, optional",
                    "line": 754
                }
            },
            "returns": {
                "coef_": "ndarray, shape (n_features, n_features + 1)",
                "intercept_": "float",
                "n_iter_": "int"
            },
            "count": {
                "total_params": 16,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\svm\\bounds.py": [
        {
            "name": "l1_min_c",
            "line": 12,
            "params": {
                "X": {
                    "type": "array-like or sparse matrix, shape = [n_samples, n_features]",
                    "line": 12
                },
                "y": {
                    "type": "array, shape = [n_samples]",
                    "line": 12
                },
                "loss": {
                    "type": "{'squared_hinge', 'log'}, default 'squared_hinge'",
                    "line": 12
                },
                "fit_intercept": {
                    "type": "bool, default",
                    "line": 12
                },
                "intercept_scaling": {
                    "type": "float, default",
                    "line": 13
                }
            },
            "returns": {
                "l1_min_c": "float"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\svm\\classes.py": [],
    "../scikit-learn-master/sklearn\\svm\\setup.py": [],
    "../scikit-learn-master/sklearn\\svm\\__init__.py": [],
    "../scikit-learn-master/sklearn\\svm\\tests\\test_bounds.py": [],
    "../scikit-learn-master/sklearn\\svm\\tests\\test_sparse.py": [
        {
            "name": "test_svc",
            "line": 72,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sparse_oneclasssvm",
            "line": 264,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\svm\\tests\\test_svm.py": [],
    "../scikit-learn-master/sklearn\\svm\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_base.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_calibration.py": [
        {
            "name": "test_calibration",
            "line": 27,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_calibration_multiclass",
            "line": 128,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_calibration_prefit",
            "line": 183,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_sigmoid_calibration",
            "line": 224,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_calibration_curve",
            "line": 242,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_calibration_nan_imputer",
            "line": 262,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\tests\\test_check_build.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_common.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_config.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_cross_validation.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_discriminant_analysis.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_docstring_parameters.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_dummy.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_grid_search.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_init.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_isotonic.py": [
        {
            "name": "test_isotonic_regression_ties_secondary_",
            "line": 139,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_isotonic_regression_with_ties_in_differently_sized_groups",
            "line": 169,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\tests\\test_kernel_approximation.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_kernel_ridge.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_learning_curve.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_metaestimators.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_multiclass.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_multioutput.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_naive_bayes.py": [
        {
            "name": "test_gnb_sample_weight",
            "line": 70,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_gnb_neg_priors",
            "line": 102,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_gnb_priors",
            "line": 108,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_gnb_wrong_nb_priors",
            "line": 117,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_gnb_prior_greater_one",
            "line": 124,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_gnb_prior_large_bias",
            "line": 130,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_check_update_with_no_data",
            "line": 137,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "test_gnb_pfit_wrong_nb_features",
            "line": 150,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\tests\\test_pipeline.py": [],
    "../scikit-learn-master/sklearn\\tests\\test_random_projection.py": [],
    "../scikit-learn-master/sklearn\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\tree\\export.py": [
        {
            "name": "_color_brew",
            "line": 26,
            "params": {
                "n": {
                    "type": "int",
                    "line": 26
                }
            },
            "returns": {
                "color_list": "list, length n"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "export_graphviz",
            "line": 74,
            "params": {
                "decision_tree": {
                    "type": "decision tree regressor or classifier",
                    "line": 74
                },
                "out_file": {
                    "type": "file object or string, optional (default='tree.dot')",
                    "line": 74
                },
                "max_depth": {
                    "type": "int, optional (default=None)",
                    "line": 74
                },
                "feature_names": {
                    "type": "list of strings, optional (default=None)",
                    "line": 75
                },
                "class_names": {
                    "type": "list of strings, bool or None, optional (default=None)",
                    "line": 75
                },
                "label": {
                    "type": "{'all', 'root', 'none'}, optional (default='all')",
                    "line": 75
                },
                "filled": {
                    "type": "bool, optional (default=False)",
                    "line": 76
                },
                "leaves_parallel": {
                    "type": "bool, optional (default=False)",
                    "line": 76
                },
                "impurity": {
                    "type": "bool, optional (default=True)",
                    "line": 76
                },
                "node_ids": {
                    "type": "bool, optional (default=False)",
                    "line": 77
                },
                "proportion": {
                    "type": "bool, optional (default=False)",
                    "line": 77
                },
                "rotate": {
                    "type": "bool, optional (default=False)",
                    "line": 77
                },
                "rounded": {
                    "type": "bool, optional (default=False)",
                    "line": 78
                },
                "special_characters": {
                    "type": "bool, optional (default=False)",
                    "line": 78
                },
                "precision": {
                    "type": "int, optional (default=3)",
                    "line": 78
                }
            },
            "returns": {
                "dot_data": "string",
                "versionadded": ""
            },
            "count": {
                "total_params": 15,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\tree\\setup.py": [],
    "../scikit-learn-master/sklearn\\tree\\tree.py": [],
    "../scikit-learn-master/sklearn\\tree\\__init__.py": [],
    "../scikit-learn-master/sklearn\\tree\\tests\\test_export.py": [],
    "../scikit-learn-master/sklearn\\tree\\tests\\test_tree.py": [
        {
            "name": "test_min_samples_split",
            "line": 569,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "check_min_weight_fraction_leaf",
            "line": 637,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "check_min_weight_fraction_leaf_with_min_samples_leaf",
            "line": 710,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "check_class_weights",
            "line": 1134,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\tree\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\utils\\arpack.py": [],
    "../scikit-learn-master/sklearn\\utils\\bench.py": [
        {
            "name": "total_seconds",
            "line": 6,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\class_weight.py": [
        {
            "name": "compute_class_weight",
            "line": 9,
            "params": {
                "class_weight": {
                    "type": "dict, 'balanced' or None",
                    "line": 9
                },
                "classes": {
                    "type": "ndarray",
                    "line": 9
                },
                "y": {
                    "type": "array-like, shape (n_samples,)",
                    "line": 9
                }
            },
            "returns": {
                "class_weight_vect": "ndarray, shape (n_classes,)"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "compute_sample_weight",
            "line": 73,
            "params": {
                "class_weight": {
                    "type": "dict, list of dicts, \"balanced\", or None, optional",
                    "line": 73
                },
                "y": {
                    "type": "array-like, shape = [n_samples] or [n_samples, n_outputs]",
                    "line": 73
                },
                "indices": {
                    "type": "array-like, shape (n_subsample,), or None",
                    "line": 73
                }
            },
            "returns": {
                "sample_weight_vect": "ndarray, shape (n_samples,)"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\deprecation.py": [
        {
            "name": "_is_deprecated",
            "line": 93,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\estimator_checks.py": [
        {
            "name": "check_estimator",
            "line": 234,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_is_32bit",
            "line": 351,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "check_estimators_pickle",
            "line": 961,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "check_clusterer_compute_labels_predict",
            "line": 1056,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "check_estimators_fit_returns_self",
            "line": 1191,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "check_estimators_unfitted",
            "line": 1206,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "check_class_weight_balanced_linear_classifier",
            "line": 1455,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "check_no_fit_attributes_set_in_init",
            "line": 1523,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\extmath.py": [
        {
            "name": "norm",
            "line": 30,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "squared_norm",
            "line": 41,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "row_norms",
            "line": 55,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "fast_logdet",
            "line": 75,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_impose_f_order",
            "line": 87,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "density",
            "line": 103,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "safe_sparse_dot",
            "line": 115,
            "params": {
                "a": {
                    "type": "array or sparse matrix",
                    "line": 115
                },
                "b": {
                    "type": "array or sparse matrix",
                    "line": 115
                },
                "dense_output": {
                    "type": "boolean, default False",
                    "line": 115
                }
            },
            "returns": {
                "dot_product": "array or sparse matrix"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "randomized_range_finder",
            "line": 143,
            "params": {
                "A": {
                    "type": "2D array",
                    "line": 143
                },
                "size": {
                    "type": "integer",
                    "line": 143
                },
                "n_iter": {
                    "type": "integer",
                    "line": 143
                },
                "power_iteration_normalizer": {
                    "type": "'auto' (default), 'QR', 'LU', 'none'",
                    "line": 144
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 145
                }
            },
            "returns": {
                "Q": "2D array"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "randomized_svd",
            "line": 228,
            "params": {
                "M": {
                    "type": "ndarray or sparse matrix",
                    "line": 228
                },
                "n_components": {
                    "type": "int",
                    "line": 228
                },
                "n_oversamples": {
                    "type": "int (default is 10)",
                    "line": 228
                },
                "n_iter": {
                    "type": "int or 'auto' (default is 'auto')",
                    "line": 228
                },
                "power_iteration_normalizer": {
                    "type": "'auto' (default), 'QR', 'LU', 'none'",
                    "line": 229
                },
                "transpose": {
                    "type": "True, False or 'auto' (default)",
                    "line": 229
                },
                "flip_sign": {
                    "type": "boolean, (True by default)",
                    "line": 230
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 230
                }
            },
            "returns": {},
            "count": {
                "total_params": 8,
                "missed_params": 0
            }
        },
        {
            "name": "logsumexp",
            "line": 352,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "weighted_mode",
            "line": 371,
            "params": {
                "a": {
                    "type": "array_like",
                    "line": 371
                },
                "w": {
                    "type": "array_like",
                    "line": 371
                },
                "axis": {
                    "type": "int, optional",
                    "line": 371
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "cartesian",
            "line": 450,
            "params": {
                "arrays": {
                    "type": "list of array-like",
                    "line": 450
                },
                "out": {
                    "type": "ndarray",
                    "line": 450
                }
            },
            "returns": {
                "out": "ndarray"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "svd_flip",
            "line": 499,
            "params": {
                "v": {
                    "type": "ndarray",
                    "line": 499
                },
                "u_based_decision": {
                    "type": "boolean, (default=True)",
                    "line": 499
                }
            },
            "returns": {
                "v_adjusted": "arrays with the same dimensions as the input."
            },
            "count": {
                "total_params": 3,
                "missed_params": 1
            }
        },
        {
            "name": "log_logistic",
            "line": 538,
            "params": {
                "X": {
                    "type": "array-like, shape (M, N) or (M, )",
                    "line": 538
                },
                "out": {
                    "type": "array-like, shape",
                    "line": 538
                }
            },
            "returns": {
                "out": "array, shape (M, N) or (M, )"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "softmax",
            "line": 583,
            "params": {
                "X": {
                    "type": "array-like, shape (M, N)",
                    "line": 583
                },
                "copy": {
                    "type": "bool, optional",
                    "line": 583
                }
            },
            "returns": {
                "out": "array, shape (M, N)"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "safe_min",
            "line": 617,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "make_nonnegative",
            "line": 632,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_incremental_mean_and_var",
            "line": 645,
            "params": {
                "X": {
                    "type": "array-like, shape (n_samples, n_features)",
                    "line": 645
                },
                "last_mean": {
                    "type": "array-like, shape",
                    "line": 645
                },
                "last_variance": {
                    "type": "array-like, shape",
                    "line": 645
                },
                "last_sample_count": {
                    "type": "int",
                    "line": 646
                }
            },
            "returns": {
                "updated_mean": "array, shape (n_features,)",
                "updated_variance": "array, shape (n_features,)",
                "updated_sample_count": "int"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "_deterministic_vector_sign_flip",
            "line": 718,
            "params": {
                "u": {
                    "type": "ndarray",
                    "line": 718
                }
            },
            "returns": {
                "u_flipped": "ndarray with same shape as u"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "stable_cumsum",
            "line": 740,
            "params": {
                "arr": {
                    "type": "array-like",
                    "line": 740
                },
                "axis": {
                    "type": "int, optional",
                    "line": 740
                },
                "rtol": {
                    "type": "float",
                    "line": 740
                },
                "atol": {
                    "type": "float",
                    "line": 740
                }
            },
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\fixes.py": [
        {
            "name": "parallel_helper",
            "line": 153,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\graph.py": [
        {
            "name": "single_source_shortest_path_length",
            "line": 23,
            "params": {
                "graph": {
                    "type": "sparse matrix or 2D array (preferably LIL matrix)",
                    "line": 23
                },
                "source": {
                    "type": "node label",
                    "line": 23
                },
                "cutoff": {
                    "type": "integer, optional",
                    "line": 23
                }
            },
            "returns": {
                "graph": "sparse matrix or 2D array (preferably LIL matrix)",
                "source": "node label",
                "cutoff": "integer, optional"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\linear_assignment_.py": [
        {
            "name": "linear_assignment",
            "line": 19,
            "params": {
                "X": {
                    "type": "array",
                    "line": 19
                }
            },
            "returns": {
                "indices": "array,"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "_hungarian",
            "line": 111,
            "params": {
                "cost_matrix": {
                    "type": "2D matrix",
                    "line": 111
                }
            },
            "returns": {
                "indices": "2D array of indices"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "_step1",
            "line": 151,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_step3",
            "line": 170,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_step4",
            "line": 183,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_step5",
            "line": 220,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_step6",
            "line": 270,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\metaestimators.py": [
        {
            "name": "if_delegate_has_method",
            "line": 121,
            "params": {
                "delegate": {
                    "type": "string, list of strings or tuple of strings",
                    "line": 121
                }
            },
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "_safe_split",
            "line": 144,
            "params": {
                "estimator": {
                    "type": "object",
                    "line": 144
                },
                "X": {
                    "type": "array-like, sparse matrix or iterable",
                    "line": 144
                },
                "y": {
                    "type": "array-like, sparse matrix or iterable",
                    "line": 144
                },
                "indices": {
                    "type": "array of int",
                    "line": 144
                },
                "train_indices": {
                    "type": "array of int or None, default=None",
                    "line": 144
                }
            },
            "returns": {
                "X_sliced": "array-like, sparse matrix or list",
                "y_sliced": "array-like, sparse matrix or list"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\mocking.py": [],
    "../scikit-learn-master/sklearn\\utils\\multiclass.py": [
        {
            "name": "unique_labels",
            "line": 43,
            "params": {},
            "returns": {
                "out": "numpy array of shape [n_unique_labels]"
            },
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "is_multilabel",
            "line": 112,
            "params": {
                "y": {
                    "type": "numpy array of shape [n_samples]",
                    "line": 112
                }
            },
            "returns": {
                "out": "bool,"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "check_classification_targets",
            "line": 158,
            "params": {
                "y": {
                    "type": "array-like",
                    "line": 158
                }
            },
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "type_of_target",
            "line": 175,
            "params": {
                "y": {
                    "type": "array-like",
                    "line": 175
                }
            },
            "returns": {
                "target_type": "string",
                "of": ""
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "_check_partial_fit_first_call",
            "line": 290,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "class_distribution",
            "line": 325,
            "params": {
                "y": {
                    "type": "array like or sparse matrix of size (n_samples, n_outputs)",
                    "line": 325
                },
                "sample_weight": {
                    "type": "array-like of shape = (n_samples,), optional",
                    "line": 325
                }
            },
            "returns": {
                "classes": "list of size n_outputs of arrays of size (n_classes,)",
                "n_classes": "list of integers of size n_outputs",
                "class_prior": "list of size n_outputs of arrays of size (n_classes,)"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "_ovr_decision_function",
            "line": 399,
            "params": {
                "predictions": {
                    "type": "array-like, shape (n_samples, n_classifiers)",
                    "line": 399
                },
                "confidences": {
                    "type": "array-like, shape (n_samples, n_classifiers)",
                    "line": 399
                },
                "n_classes": {
                    "type": "int",
                    "line": 399
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\optimize.py": [
        {
            "name": "_line_search_wolfe12",
            "line": 27,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 7,
                "missed_params": 7
            }
        },
        {
            "name": "_cg",
            "line": 55,
            "params": {
                "fhess_p": {
                    "type": "callable",
                    "line": 55
                },
                "fgrad": {
                    "type": "ndarray, shape (n_features,) or (n_features + 1,)",
                    "line": 55
                },
                "maxiter": {
                    "type": "int",
                    "line": 55
                },
                "tol": {
                    "type": "float",
                    "line": 55
                }
            },
            "returns": {
                "xsupi": "ndarray, shape (n_features,) or (n_features + 1,)"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "newton_cg",
            "line": 114,
            "params": {
                "grad_hess": {
                    "type": "callable",
                    "line": 114
                },
                "func": {
                    "type": "callable",
                    "line": 114
                },
                "grad": {
                    "type": "callable",
                    "line": 114
                },
                "x0": {
                    "type": "array of float",
                    "line": 114
                },
                "args": {
                    "type": "tuple, optional",
                    "line": 114
                },
                "tol": {
                    "type": "float",
                    "line": 114
                },
                "maxiter": {
                    "type": "int",
                    "line": 115
                },
                "maxinner": {
                    "type": "int",
                    "line": 115
                },
                "line_search": {
                    "type": "boolean",
                    "line": 115
                },
                "warn": {
                    "type": "boolean",
                    "line": 115
                }
            },
            "returns": {
                "xk": "ndarray of float"
            },
            "count": {
                "total_params": 10,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\random.py": [
        {
            "name": "choice",
            "line": 18,
            "params": {
                "a": {
                    "type": "1-D array-like or int",
                    "line": 21
                },
                "size": {
                    "type": "int or tuple of ints, optional",
                    "line": 21
                },
                "replace": {
                    "type": "boolean, optional",
                    "line": 21
                },
                "p": {
                    "type": "1-D array-like, optional",
                    "line": 21
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 21
                }
            },
            "returns": {
                "samples": "1-D ndarray, shape (size,)"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "random_choice_csc",
            "line": 116,
            "params": {
                "n_samples": {
                    "type": "int,",
                    "line": 116
                },
                "classes": {
                    "type": "list of size n_outputs of arrays of size (n_classes,)",
                    "line": 116
                },
                "class_probability": {
                    "type": "list of size n_outputs of arrays of size (n_classes,)",
                    "line": 116
                },
                "random_state": {
                    "type": "int, RandomState instance or None, optional (default=None)",
                    "line": 117
                }
            },
            "returns": {
                "random_matrix": "sparse csc matrix of size (n_samples, n_outputs)"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\setup.py": [],
    "../scikit-learn-master/sklearn\\utils\\sparsefuncs.py": [
        {
            "name": "_raise_typeerror",
            "line": 16,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "inplace_csr_column_scale",
            "line": 29,
            "params": {
                "X": {
                    "type": "CSR matrix with shape (n_samples, n_features)",
                    "line": 29
                },
                "scale": {
                    "type": "float array with shape (n_features,)",
                    "line": 29
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_csr_row_scale",
            "line": 47,
            "params": {
                "X": {
                    "type": "CSR sparse matrix, shape (n_samples, n_features)",
                    "line": 47
                },
                "scale": {
                    "type": "float array with shape (n_samples,)",
                    "line": 47
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "mean_variance_axis",
            "line": 65,
            "params": {
                "X": {
                    "type": "CSR or CSC sparse matrix, shape (n_samples, n_features)",
                    "line": 65
                },
                "axis": {
                    "type": "int (either 0 or 1)",
                    "line": 65
                }
            },
            "returns": {
                "means": "float array with shape (n_features,)",
                "variances": "float array with shape (n_features,)"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "incr_mean_variance_axis",
            "line": 102,
            "params": {
                "X": {
                    "type": "CSR or CSC sparse matrix, shape (n_samples, n_features)",
                    "line": 102
                },
                "axis": {
                    "type": "int (either 0 or 1)",
                    "line": 102
                },
                "last_mean": {
                    "type": "float array with shape (n_features,)",
                    "line": 102
                },
                "last_var": {
                    "type": "float array with shape (n_features,)",
                    "line": 102
                },
                "last_n": {
                    "type": "int",
                    "line": 102
                }
            },
            "returns": {
                "means": "float array with shape (n_features,)",
                "variances": "float array with shape (n_features,)",
                "n": "int"
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_column_scale",
            "line": 161,
            "params": {
                "X": {
                    "type": "CSC or CSR matrix with shape (n_samples, n_features)",
                    "line": 161
                },
                "scale": {
                    "type": "float array with shape (n_features,)",
                    "line": 161
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_row_scale",
            "line": 183,
            "params": {
                "X": {
                    "type": "CSR or CSC sparse matrix, shape (n_samples, n_features)",
                    "line": 183
                },
                "scale": {
                    "type": "float array with shape (n_features,)",
                    "line": 183
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_swap_row_csc",
            "line": 205,
            "params": {
                "X": {
                    "type": "scipy.sparse.csc_matrix, shape=(n_samples, n_features)",
                    "line": 205
                },
                "m": {
                    "type": "int",
                    "line": 205
                },
                "n": {
                    "type": "int",
                    "line": 205
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_swap_row_csr",
            "line": 234,
            "params": {
                "X": {
                    "type": "scipy.sparse.csr_matrix, shape=(n_samples, n_features)",
                    "line": 234
                },
                "m": {
                    "type": "int",
                    "line": 234
                },
                "n": {
                    "type": "int",
                    "line": 234
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_swap_row",
            "line": 289,
            "params": {
                "X": {
                    "type": "CSR or CSC sparse matrix, shape=(n_samples, n_features)",
                    "line": 289
                },
                "m": {
                    "type": "int",
                    "line": 289
                },
                "n": {
                    "type": "int",
                    "line": 289
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "inplace_swap_column",
            "line": 312,
            "params": {
                "X": {
                    "type": "CSR or CSC sparse matrix, shape=(n_samples, n_features)",
                    "line": 312
                },
                "m": {
                    "type": "int",
                    "line": 312
                },
                "n": {
                    "type": "int",
                    "line": 312
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "min_max_axis",
            "line": 339,
            "params": {
                "X": {
                    "type": "CSR or CSC sparse matrix, shape (n_samples, n_features)",
                    "line": 339
                },
                "axis": {
                    "type": "int (either 0 or 1)",
                    "line": 339
                }
            },
            "returns": {
                "mins": "float array with shape (n_features,)",
                "maxs": "float array with shape (n_features,)"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "count_nonzero",
            "line": 365,
            "params": {
                "X": {
                    "type": "CSR sparse matrix, shape = (n_samples, n_labels)",
                    "line": 365
                },
                "axis": {
                    "type": "None, 0 or 1",
                    "line": 365
                },
                "sample_weight": {
                    "type": "array, shape = (n_samples,), optional",
                    "line": 365
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "_get_median",
            "line": 413,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_get_elem_at_rank",
            "line": 432,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 4
            }
        },
        {
            "name": "csc_median_axis_0",
            "line": 441,
            "params": {
                "X": {
                    "type": "CSC sparse matrix, shape (n_samples, n_features)",
                    "line": 441
                }
            },
            "returns": {
                "median": "ndarray, shape (n_features,)"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\stats.py": [
        {
            "name": "_weighted_percentile",
            "line": 15,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\testing.py": [
        {
            "name": "assert_warns",
            "line": 116,
            "params": {
                "warning_class": {
                    "type": "the warning class",
                    "line": 116
                },
                "func": {
                    "type": "callable",
                    "line": 116
                }
            },
            "returns": {
                "result": "the return value of `func`"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "assert_warns_message",
            "line": 161,
            "params": {
                "warning_class": {
                    "type": "the warning class",
                    "line": 161
                },
                "message": {
                    "type": "str | callable",
                    "line": 161
                },
                "func": {
                    "type": "callable",
                    "line": 161
                }
            },
            "returns": {
                "result": "the return value of `func`"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "ignore_warnings",
            "line": 251,
            "params": {
                "category": {
                    "type": "warning class, defaults to Warning.",
                    "line": 251
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 1
            }
        },
        {
            "name": "assert_raise_message",
            "line": 361,
            "params": {
                "exceptions": {
                    "type": "exception or tuple of exception",
                    "line": 361
                },
                "function": {
                    "type": "callable",
                    "line": 361
                }
            },
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 1
            }
        },
        {
            "name": "assert_allclose_dense_sparse",
            "line": 395,
            "params": {
                "x": {
                    "type": "array-like or sparse matrix",
                    "line": 395
                },
                "y": {
                    "type": "array-like or sparse matrix",
                    "line": 395
                },
                "rtol": {
                    "type": "float, optional",
                    "line": 395
                },
                "atol": {
                    "type": "float, optional",
                    "line": 395
                },
                "err_msg": {
                    "type": "string, default=''",
                    "line": 395
                }
            },
            "returns": {},
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "fake_mldata",
            "line": 436,
            "params": {
                "columns_dict": {
                    "type": "dict, keys=str, values=ndarray",
                    "line": 436
                },
                "dataname": {
                    "type": "string",
                    "line": 436
                },
                "matfile": {
                    "type": "string or file object",
                    "line": 436
                },
                "ordering": {
                    "type": "list, default None",
                    "line": 436
                }
            },
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "all_estimators",
            "line": 552,
            "params": {
                "include_meta_estimators": {
                    "type": "boolean, default=False",
                    "line": 552
                },
                "include_other": {
                    "type": "boolean, default=False",
                    "line": 553
                },
                "type_filter": {
                    "type": "string, list of string,  or None, default=None",
                    "line": 553
                },
                "include_dont_test": {
                    "type": "boolean, default=False",
                    "line": 554
                }
            },
            "returns": {
                "estimators": "list of tuples"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "set_random_state",
            "line": 653,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "if_matplotlib",
            "line": 660,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "skip_if_32bit",
            "line": 677,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "if_safe_multiprocessing_with_blas",
            "line": 689,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "clean_warning_registry",
            "line": 717,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "check_skip_travis",
            "line": 733,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "_delete_folder",
            "line": 739,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_get_args",
            "line": 794,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "_get_func_name",
            "line": 813,
            "params": {
                "func": {
                    "type": "callable",
                    "line": 813
                },
                "class_name": {
                    "type": "string, optional (default",
                    "line": 813
                }
            },
            "returns": {
                "name": "str"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "check_docstring_parameters",
            "line": 842,
            "params": {
                "func": {
                    "type": "callable",
                    "line": 842
                },
                "doc": {
                    "type": "str, optional (default",
                    "line": 842
                },
                "ignore": {
                    "type": "None | list",
                    "line": 842
                },
                "class_name": {
                    "type": "string, optional (default",
                    "line": 842
                }
            },
            "returns": {
                "incorrect": "list"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\validation.py": [
        {
            "name": "_assert_all_finite",
            "line": 34,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "assert_all_finite",
            "line": 48,
            "params": {
                "X": {
                    "type": "array or sparse matrix",
                    "line": 48
                }
            },
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "as_float_array",
            "line": 58,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}",
                    "line": 58
                },
                "copy": {
                    "type": "bool, optional",
                    "line": 58
                },
                "force_all_finite": {
                    "type": "boolean (default=True)",
                    "line": 58
                }
            },
            "returns": {
                "XT": "{array, sparse matrix}"
            },
            "count": {
                "total_params": 3,
                "missed_params": 0
            }
        },
        {
            "name": "_is_arraylike",
            "line": 98,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_num_samples",
            "line": 105,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "_shape_repr",
            "line": 126,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "check_memory",
            "line": 160,
            "params": {
                "memory": {
                    "type": "None, str or object with the joblib.Memory interface",
                    "line": 160
                }
            },
            "returns": {
                "memory": "object with the joblib.Memory interface"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "check_consistent_length",
            "line": 190,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "indexable",
            "line": 208,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "_ensure_sparse_format",
            "line": 234,
            "params": {
                "spmatrix": {
                    "type": "scipy sparse matrix",
                    "line": 234
                },
                "accept_sparse": {
                    "type": "string, boolean or list/tuple of strings",
                    "line": 234
                },
                "dtype": {
                    "type": "string, type or None",
                    "line": 234
                },
                "copy": {
                    "type": "boolean",
                    "line": 234
                },
                "force_all_finite": {
                    "type": "boolean",
                    "line": 235
                }
            },
            "returns": {
                "spmatrix_converted": "scipy sparse matrix."
            },
            "count": {
                "total_params": 5,
                "missed_params": 0
            }
        },
        {
            "name": "check_array",
            "line": 318,
            "params": {
                "array": {
                    "type": "object",
                    "line": 318
                },
                "accept_sparse": {
                    "type": "string, boolean or list/tuple of strings (default=False)",
                    "line": 318
                },
                "dtype": {
                    "type": "string, type, list of types or None (default=\"numeric\")",
                    "line": 318
                },
                "order": {
                    "type": "'F', 'C' or None (default=None)",
                    "line": 318
                },
                "copy": {
                    "type": "boolean (default=False)",
                    "line": 319
                },
                "force_all_finite": {
                    "type": "boolean (default=True)",
                    "line": 319
                },
                "ensure_2d": {
                    "type": "boolean (default=True)",
                    "line": 319
                },
                "allow_nd": {
                    "type": "boolean (default=False)",
                    "line": 320
                },
                "ensure_min_samples": {
                    "type": "int (default=1)",
                    "line": 320
                },
                "ensure_min_features": {
                    "type": "int (default=1)",
                    "line": 320
                },
                "warn_on_dtype": {
                    "type": "boolean (default=False)",
                    "line": 321
                },
                "estimator": {
                    "type": "str or estimator instance (default=None)",
                    "line": 321
                }
            },
            "returns": {
                "X_converted": "object"
            },
            "count": {
                "total_params": 12,
                "missed_params": 0
            }
        },
        {
            "name": "check_X_y",
            "line": 505,
            "params": {
                "X": {
                    "type": "nd-array, list or sparse matrix",
                    "line": 505
                },
                "y": {
                    "type": "nd-array, list or sparse matrix",
                    "line": 505
                },
                "accept_sparse": {
                    "type": "string, boolean or list of string (default=False)",
                    "line": 505
                },
                "dtype": {
                    "type": "string, type, list of types or None (default=\"numeric\")",
                    "line": 505
                },
                "order": {
                    "type": "'F', 'C' or None (default=None)",
                    "line": 505
                },
                "copy": {
                    "type": "boolean (default=False)",
                    "line": 506
                },
                "force_all_finite": {
                    "type": "boolean (default=True)",
                    "line": 506
                },
                "ensure_2d": {
                    "type": "boolean (default=True)",
                    "line": 506
                },
                "allow_nd": {
                    "type": "boolean (default=False)",
                    "line": 507
                },
                "multi_output": {
                    "type": "boolean (default=False)",
                    "line": 507
                },
                "ensure_min_samples": {
                    "type": "int (default=1)",
                    "line": 507
                },
                "ensure_min_features": {
                    "type": "int (default=1)",
                    "line": 508
                },
                "y_numeric": {
                    "type": "boolean (default=False)",
                    "line": 508
                },
                "warn_on_dtype": {
                    "type": "boolean (default=False)",
                    "line": 509
                },
                "estimator": {
                    "type": "str or estimator instance (default=None)",
                    "line": 509
                }
            },
            "returns": {
                "X_converted": "object",
                "y_converted": "object"
            },
            "count": {
                "total_params": 15,
                "missed_params": 0
            }
        },
        {
            "name": "column_or_1d",
            "line": 614,
            "params": {
                "y": {
                    "type": "array-like",
                    "line": 614
                },
                "warn": {
                    "type": "boolean, default False",
                    "line": 614
                }
            },
            "returns": {
                "y": "array"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "check_random_state",
            "line": 643,
            "params": {
                "seed": {
                    "type": "None | int | instance of RandomState",
                    "line": 643
                }
            },
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "has_fit_parameter",
            "line": 664,
            "params": {
                "estimator": {
                    "type": "object",
                    "line": 664
                },
                "parameter": {
                    "type": "str",
                    "line": 664
                }
            },
            "returns": {
                "is_parameter": "bool"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "check_symmetric",
            "line": 691,
            "params": {
                "array": {
                    "type": "nd-array or sparse matrix",
                    "line": 691
                },
                "tol": {
                    "type": "float",
                    "line": 691
                },
                "raise_warning": {
                    "type": "boolean (default=True)",
                    "line": 691
                },
                "raise_exception": {
                    "type": "boolean (default=False)",
                    "line": 692
                }
            },
            "returns": {
                "array_sym": "ndarray or sparse matrix"
            },
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "check_is_fitted",
            "line": 746,
            "params": {
                "estimator": {
                    "type": "estimator instance.",
                    "line": 746
                },
                "attributes": {
                    "type": "attribute name(s) given as string or a list/tuple of strings",
                    "line": 746
                },
                "msg": {
                    "type": "string",
                    "line": 746
                },
                "all_or_any": {
                    "type": "callable, {all, any}, default all",
                    "line": 746
                }
            },
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        },
        {
            "name": "check_non_negative",
            "line": 797,
            "params": {
                "X": {
                    "type": "array-like or sparse matrix",
                    "line": 797
                },
                "whom": {
                    "type": "string",
                    "line": 797
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\_scipy_sparse_lsqr_backport.py": [
        {
            "name": "_sym_ortho",
            "line": 63,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "lsqr",
            "line": 98,
            "params": {
                "A": {
                    "type": "{sparse matrix, ndarray, LinearOperatorLinear}",
                    "line": 98
                },
                "b": {
                    "type": "(m,) ndarray",
                    "line": 98
                },
                "damp": {
                    "type": "float",
                    "line": 98
                },
                "btol": {
                    "type": "float, default 1.0e-8",
                    "line": 98
                },
                "conlim": {
                    "type": "float",
                    "line": 98
                },
                "iter_lim": {
                    "type": "int",
                    "line": 99
                },
                "show": {
                    "type": "bool",
                    "line": 99
                },
                "calc_var": {
                    "type": "bool",
                    "line": 99
                }
            },
            "returns": {
                "x": "ndarray of float",
                "istop": "int",
                "itn": "int",
                "r1norm": "float",
                "r2norm": "float",
                "anorm": "float",
                "acond": "float",
                "arnorm": "float",
                "xnorm": "float",
                "var": "ndarray of float"
            },
            "count": {
                "total_params": 9,
                "missed_params": 1
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\_unittest_backport.py": [],
    "../scikit-learn-master/sklearn\\utils\\__init__.py": [
        {
            "name": "safe_mask",
            "line": 77,
            "params": {
                "X": {
                    "type": "{array-like, sparse matrix}",
                    "line": 77
                },
                "mask": {
                    "type": "array",
                    "line": 77
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "axis0_safe_slice",
            "line": 102,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "safe_indexing",
            "line": 122,
            "params": {
                "X": {
                    "type": "array-like, sparse-matrix, list, pandas.DataFrame, pandas.Series.",
                    "line": 122
                },
                "indices": {
                    "type": "array-like of int",
                    "line": 122
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "resample",
            "line": 167,
            "params": {},
            "returns": {
                "resampled_arrays": "sequence of indexable data-structures"
            },
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "shuffle",
            "line": 277,
            "params": {},
            "returns": {
                "shuffled_arrays": "sequence of indexable data-structures"
            },
            "count": {
                "total_params": 0,
                "missed_params": 0
            }
        },
        {
            "name": "safe_sqr",
            "line": 346,
            "params": {
                "X": {
                    "type": "array like, matrix, sparse matrix",
                    "line": 346
                },
                "copy": {
                    "type": "boolean, optional, default True",
                    "line": 346
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "gen_batches",
            "line": 374,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        },
        {
            "name": "gen_even_slices",
            "line": 399,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 3,
                "missed_params": 3
            }
        },
        {
            "name": "_get_n_jobs",
            "line": 433,
            "params": {
                "n_jobs": {
                    "type": "int",
                    "line": 433
                }
            },
            "returns": {
                "n_jobs": "int"
            },
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "tosequence",
            "line": 472,
            "params": {
                "x": {
                    "type": "iterable",
                    "line": 472
                }
            },
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 0
            }
        },
        {
            "name": "indices_to_mask",
            "line": 487,
            "params": {
                "indices": {
                    "type": "list-like",
                    "line": 487
                },
                "mask_length": {
                    "type": "int",
                    "line": 487
                }
            },
            "returns": {
                "mask": "1d boolean nd-array"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\sparsetools\\setup.py": [],
    "../scikit-learn-master/sklearn\\utils\\sparsetools\\__init__.py": [],
    "../scikit-learn-master/sklearn\\utils\\sparsetools\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_bench.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_class_weight.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_deprecation.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_estimator_checks.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_extmath.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_fast_dict.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_fixes.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_graph.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_linear_assignment.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_metaestimators.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_multiclass.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_murmurhash.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_optimize.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_random.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_seq_dataset.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_shortest_path.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_sparsefuncs.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_stats.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_testing.py": [
        {
            "name": "f_ok",
            "line": 254,
            "params": {
                "a": {
                    "type": "int",
                    "line": 254
                },
                "b": {
                    "type": "float",
                    "line": 254
                }
            },
            "returns": {
                "c": "list"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "f_bad_sections",
            "line": 273,
            "params": {
                "a": {
                    "type": "int",
                    "line": 273
                },
                "b": {
                    "type": "float",
                    "line": 273
                }
            },
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "f_bad_order",
            "line": 292,
            "params": {
                "b": {
                    "type": "float",
                    "line": 292
                },
                "a": {
                    "type": "int",
                    "line": 292
                }
            },
            "returns": {
                "c": "list"
            },
            "count": {
                "total_params": 2,
                "missed_params": 0
            }
        },
        {
            "name": "f_missing",
            "line": 311,
            "params": {
                "a": {
                    "type": "int",
                    "line": 311
                }
            },
            "returns": {
                "c": "list"
            },
            "count": {
                "total_params": 2,
                "missed_params": 1
            }
        },
        {
            "name": "f_check_param_definition",
            "line": 328,
            "params": {
                "a": {
                    "type": "int",
                    "line": 328
                },
                "b": {
                    "type": "",
                    "line": 328
                },
                "c": {
                    "type": "",
                    "line": 328
                },
                "d": {
                    "type": "int",
                    "line": 328
                }
            },
            "returns": {},
            "count": {
                "total_params": 4,
                "missed_params": 0
            }
        }
    ],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_utils.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\test_validation.py": [],
    "../scikit-learn-master/sklearn\\utils\\tests\\__init__.py": [],
    "../scikit-learn-master/sklearn\\_build_utils\\__init__.py": [
        {
            "name": "build_from_c_and_cpp_files",
            "line": 43,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 1,
                "missed_params": 1
            }
        },
        {
            "name": "maybe_cythonize_extensions",
            "line": 63,
            "params": {},
            "returns": {},
            "count": {
                "total_params": 2,
                "missed_params": 2
            }
        }
    ],
    "../scikit-learn-master/sklearn\\__check_build\\setup.py": [],
    "../scikit-learn-master/sklearn\\__check_build\\__init__.py": []
}